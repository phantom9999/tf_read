// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/service/gpu/gpu_autotuning.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/compiler/xla/service/hlo.pb.h"
#include "tensorflow/compiler/xla/xla_data.pb.h"
#include "tensorflow/core/protobuf/autotuning.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto 

namespace protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto
namespace xla {
namespace gpu {
class AlgorithmBlacklist;
class AlgorithmBlacklistDefaultTypeInternal;
extern AlgorithmBlacklistDefaultTypeInternal _AlgorithmBlacklist_default_instance_;
class AlgorithmBlacklistEntry;
class AlgorithmBlacklistEntryDefaultTypeInternal;
extern AlgorithmBlacklistEntryDefaultTypeInternal _AlgorithmBlacklistEntry_default_instance_;
class BlacklistedAlgorithm;
class BlacklistedAlgorithmDefaultTypeInternal;
extern BlacklistedAlgorithmDefaultTypeInternal _BlacklistedAlgorithm_default_instance_;
class ConvInstructionLog;
class ConvInstructionLogDefaultTypeInternal;
extern ConvInstructionLogDefaultTypeInternal _ConvInstructionLog_default_instance_;
}  // namespace gpu
}  // namespace xla
namespace google {
namespace protobuf {
template<> ::xla::gpu::AlgorithmBlacklist* Arena::CreateMaybeMessage<::xla::gpu::AlgorithmBlacklist>(Arena*);
template<> ::xla::gpu::AlgorithmBlacklistEntry* Arena::CreateMaybeMessage<::xla::gpu::AlgorithmBlacklistEntry>(Arena*);
template<> ::xla::gpu::BlacklistedAlgorithm* Arena::CreateMaybeMessage<::xla::gpu::BlacklistedAlgorithm>(Arena*);
template<> ::xla::gpu::ConvInstructionLog* Arena::CreateMaybeMessage<::xla::gpu::ConvInstructionLog>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xla {
namespace gpu {

// ===================================================================

class ConvInstructionLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.gpu.ConvInstructionLog) */ {
 public:
  ConvInstructionLog();
  virtual ~ConvInstructionLog();

  ConvInstructionLog(const ConvInstructionLog& from);

  inline ConvInstructionLog& operator=(const ConvInstructionLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvInstructionLog(ConvInstructionLog&& from) noexcept
    : ConvInstructionLog() {
    *this = ::std::move(from);
  }

  inline ConvInstructionLog& operator=(ConvInstructionLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvInstructionLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvInstructionLog* internal_default_instance() {
    return reinterpret_cast<const ConvInstructionLog*>(
               &_ConvInstructionLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConvInstructionLog* other);
  friend void swap(ConvInstructionLog& a, ConvInstructionLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvInstructionLog* New() const final {
    return CreateMaybeMessage<ConvInstructionLog>(NULL);
  }

  ConvInstructionLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConvInstructionLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConvInstructionLog& from);
  void MergeFrom(const ConvInstructionLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvInstructionLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.ShapeProto operand_shapes = 2;
  int operand_shapes_size() const;
  void clear_operand_shapes();
  static const int kOperandShapesFieldNumber = 2;
  ::xla::ShapeProto* mutable_operand_shapes(int index);
  ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >*
      mutable_operand_shapes();
  const ::xla::ShapeProto& operand_shapes(int index) const;
  ::xla::ShapeProto* add_operand_shapes();
  const ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >&
      operand_shapes() const;

  // repeated uint64 operand_addresses = 4;
  int operand_addresses_size() const;
  void clear_operand_addresses();
  static const int kOperandAddressesFieldNumber = 4;
  ::google::protobuf::uint64 operand_addresses(int index) const;
  void set_operand_addresses(int index, ::google::protobuf::uint64 value);
  void add_operand_addresses(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      operand_addresses() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_operand_addresses();

  // .xla.HloInstructionProto instruction = 1;
  bool has_instruction() const;
  void clear_instruction();
  static const int kInstructionFieldNumber = 1;
  private:
  const ::xla::HloInstructionProto& _internal_instruction() const;
  public:
  const ::xla::HloInstructionProto& instruction() const;
  ::xla::HloInstructionProto* release_instruction();
  ::xla::HloInstructionProto* mutable_instruction();
  void set_allocated_instruction(::xla::HloInstructionProto* instruction);

  // uint64 result_address = 3;
  void clear_result_address();
  static const int kResultAddressFieldNumber = 3;
  ::google::protobuf::uint64 result_address() const;
  void set_result_address(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xla.gpu.ConvInstructionLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto > operand_shapes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > operand_addresses_;
  mutable int _operand_addresses_cached_byte_size_;
  ::xla::HloInstructionProto* instruction_;
  ::google::protobuf::uint64 result_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlacklistedAlgorithm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.gpu.BlacklistedAlgorithm) */ {
 public:
  BlacklistedAlgorithm();
  virtual ~BlacklistedAlgorithm();

  BlacklistedAlgorithm(const BlacklistedAlgorithm& from);

  inline BlacklistedAlgorithm& operator=(const BlacklistedAlgorithm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlacklistedAlgorithm(BlacklistedAlgorithm&& from) noexcept
    : BlacklistedAlgorithm() {
    *this = ::std::move(from);
  }

  inline BlacklistedAlgorithm& operator=(BlacklistedAlgorithm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlacklistedAlgorithm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlacklistedAlgorithm* internal_default_instance() {
    return reinterpret_cast<const BlacklistedAlgorithm*>(
               &_BlacklistedAlgorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BlacklistedAlgorithm* other);
  friend void swap(BlacklistedAlgorithm& a, BlacklistedAlgorithm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlacklistedAlgorithm* New() const final {
    return CreateMaybeMessage<BlacklistedAlgorithm>(NULL);
  }

  BlacklistedAlgorithm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlacklistedAlgorithm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlacklistedAlgorithm& from);
  void MergeFrom(const BlacklistedAlgorithm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlacklistedAlgorithm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // bool tensor_ops = 2;
  void clear_tensor_ops();
  static const int kTensorOpsFieldNumber = 2;
  bool tensor_ops() const;
  void set_tensor_ops(bool value);

  // @@protoc_insertion_point(class_scope:xla.gpu.BlacklistedAlgorithm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  bool tensor_ops_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgorithmBlacklistEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.gpu.AlgorithmBlacklistEntry) */ {
 public:
  AlgorithmBlacklistEntry();
  virtual ~AlgorithmBlacklistEntry();

  AlgorithmBlacklistEntry(const AlgorithmBlacklistEntry& from);

  inline AlgorithmBlacklistEntry& operator=(const AlgorithmBlacklistEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmBlacklistEntry(AlgorithmBlacklistEntry&& from) noexcept
    : AlgorithmBlacklistEntry() {
    *this = ::std::move(from);
  }

  inline AlgorithmBlacklistEntry& operator=(AlgorithmBlacklistEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgorithmBlacklistEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmBlacklistEntry* internal_default_instance() {
    return reinterpret_cast<const AlgorithmBlacklistEntry*>(
               &_AlgorithmBlacklistEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AlgorithmBlacklistEntry* other);
  friend void swap(AlgorithmBlacklistEntry& a, AlgorithmBlacklistEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmBlacklistEntry* New() const final {
    return CreateMaybeMessage<AlgorithmBlacklistEntry>(NULL);
  }

  AlgorithmBlacklistEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmBlacklistEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmBlacklistEntry& from);
  void MergeFrom(const AlgorithmBlacklistEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmBlacklistEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.gpu.BlacklistedAlgorithm algos = 4;
  int algos_size() const;
  void clear_algos();
  static const int kAlgosFieldNumber = 4;
  ::xla::gpu::BlacklistedAlgorithm* mutable_algos(int index);
  ::google::protobuf::RepeatedPtrField< ::xla::gpu::BlacklistedAlgorithm >*
      mutable_algos();
  const ::xla::gpu::BlacklistedAlgorithm& algos(int index) const;
  ::xla::gpu::BlacklistedAlgorithm* add_algos();
  const ::google::protobuf::RepeatedPtrField< ::xla::gpu::BlacklistedAlgorithm >&
      algos() const;

  // string hlo = 1;
  void clear_hlo();
  static const int kHloFieldNumber = 1;
  const ::std::string& hlo() const;
  void set_hlo(const ::std::string& value);
  #if LANG_CXX11
  void set_hlo(::std::string&& value);
  #endif
  void set_hlo(const char* value);
  void set_hlo(const char* value, size_t size);
  ::std::string* mutable_hlo();
  ::std::string* release_hlo();
  void set_allocated_hlo(::std::string* hlo);

  // string blas_version = 5;
  void clear_blas_version();
  static const int kBlasVersionFieldNumber = 5;
  const ::std::string& blas_version() const;
  void set_blas_version(const ::std::string& value);
  #if LANG_CXX11
  void set_blas_version(::std::string&& value);
  #endif
  void set_blas_version(const char* value);
  void set_blas_version(const char* value, size_t size);
  ::std::string* mutable_blas_version();
  ::std::string* release_blas_version();
  void set_allocated_blas_version(::std::string* blas_version);

  // .tensorflow.ComputeCapability cc = 2;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 2;
  private:
  const ::tensorflow::ComputeCapability& _internal_cc() const;
  public:
  const ::tensorflow::ComputeCapability& cc() const;
  ::tensorflow::ComputeCapability* release_cc();
  ::tensorflow::ComputeCapability* mutable_cc();
  void set_allocated_cc(::tensorflow::ComputeCapability* cc);

  // .tensorflow.CudnnVersion cudnn_version = 3;
  bool has_cudnn_version() const;
  void clear_cudnn_version();
  static const int kCudnnVersionFieldNumber = 3;
  private:
  const ::tensorflow::CudnnVersion& _internal_cudnn_version() const;
  public:
  const ::tensorflow::CudnnVersion& cudnn_version() const;
  ::tensorflow::CudnnVersion* release_cudnn_version();
  ::tensorflow::CudnnVersion* mutable_cudnn_version();
  void set_allocated_cudnn_version(::tensorflow::CudnnVersion* cudnn_version);

  // @@protoc_insertion_point(class_scope:xla.gpu.AlgorithmBlacklistEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xla::gpu::BlacklistedAlgorithm > algos_;
  ::google::protobuf::internal::ArenaStringPtr hlo_;
  ::google::protobuf::internal::ArenaStringPtr blas_version_;
  ::tensorflow::ComputeCapability* cc_;
  ::tensorflow::CudnnVersion* cudnn_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlgorithmBlacklist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xla.gpu.AlgorithmBlacklist) */ {
 public:
  AlgorithmBlacklist();
  virtual ~AlgorithmBlacklist();

  AlgorithmBlacklist(const AlgorithmBlacklist& from);

  inline AlgorithmBlacklist& operator=(const AlgorithmBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmBlacklist(AlgorithmBlacklist&& from) noexcept
    : AlgorithmBlacklist() {
    *this = ::std::move(from);
  }

  inline AlgorithmBlacklist& operator=(AlgorithmBlacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgorithmBlacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmBlacklist* internal_default_instance() {
    return reinterpret_cast<const AlgorithmBlacklist*>(
               &_AlgorithmBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AlgorithmBlacklist* other);
  friend void swap(AlgorithmBlacklist& a, AlgorithmBlacklist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmBlacklist* New() const final {
    return CreateMaybeMessage<AlgorithmBlacklist>(NULL);
  }

  AlgorithmBlacklist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmBlacklist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmBlacklist& from);
  void MergeFrom(const AlgorithmBlacklist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmBlacklist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xla.gpu.AlgorithmBlacklistEntry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::xla::gpu::AlgorithmBlacklistEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::xla::gpu::AlgorithmBlacklistEntry >*
      mutable_entries();
  const ::xla::gpu::AlgorithmBlacklistEntry& entries(int index) const;
  ::xla::gpu::AlgorithmBlacklistEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::xla::gpu::AlgorithmBlacklistEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:xla.gpu.AlgorithmBlacklist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xla::gpu::AlgorithmBlacklistEntry > entries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvInstructionLog

// .xla.HloInstructionProto instruction = 1;
inline bool ConvInstructionLog::has_instruction() const {
  return this != internal_default_instance() && instruction_ != NULL;
}
inline const ::xla::HloInstructionProto& ConvInstructionLog::_internal_instruction() const {
  return *instruction_;
}
inline const ::xla::HloInstructionProto& ConvInstructionLog::instruction() const {
  const ::xla::HloInstructionProto* p = instruction_;
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.instruction)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::HloInstructionProto*>(
      &::xla::_HloInstructionProto_default_instance_);
}
inline ::xla::HloInstructionProto* ConvInstructionLog::release_instruction() {
  // @@protoc_insertion_point(field_release:xla.gpu.ConvInstructionLog.instruction)
  
  ::xla::HloInstructionProto* temp = instruction_;
  instruction_ = NULL;
  return temp;
}
inline ::xla::HloInstructionProto* ConvInstructionLog::mutable_instruction() {
  
  if (instruction_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::HloInstructionProto>(GetArenaNoVirtual());
    instruction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xla.gpu.ConvInstructionLog.instruction)
  return instruction_;
}
inline void ConvInstructionLog::set_allocated_instruction(::xla::HloInstructionProto* instruction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(instruction_);
  }
  if (instruction) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(instruction)->GetArena();
    if (message_arena != submessage_arena) {
      instruction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instruction, submessage_arena);
    }
    
  } else {
    
  }
  instruction_ = instruction;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.ConvInstructionLog.instruction)
}

// repeated .xla.ShapeProto operand_shapes = 2;
inline int ConvInstructionLog::operand_shapes_size() const {
  return operand_shapes_.size();
}
inline ::xla::ShapeProto* ConvInstructionLog::mutable_operand_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.ConvInstructionLog.operand_shapes)
  return operand_shapes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >*
ConvInstructionLog::mutable_operand_shapes() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.ConvInstructionLog.operand_shapes)
  return &operand_shapes_;
}
inline const ::xla::ShapeProto& ConvInstructionLog::operand_shapes(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.operand_shapes)
  return operand_shapes_.Get(index);
}
inline ::xla::ShapeProto* ConvInstructionLog::add_operand_shapes() {
  // @@protoc_insertion_point(field_add:xla.gpu.ConvInstructionLog.operand_shapes)
  return operand_shapes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >&
ConvInstructionLog::operand_shapes() const {
  // @@protoc_insertion_point(field_list:xla.gpu.ConvInstructionLog.operand_shapes)
  return operand_shapes_;
}

// uint64 result_address = 3;
inline void ConvInstructionLog::clear_result_address() {
  result_address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ConvInstructionLog::result_address() const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.result_address)
  return result_address_;
}
inline void ConvInstructionLog::set_result_address(::google::protobuf::uint64 value) {
  
  result_address_ = value;
  // @@protoc_insertion_point(field_set:xla.gpu.ConvInstructionLog.result_address)
}

// repeated uint64 operand_addresses = 4;
inline int ConvInstructionLog::operand_addresses_size() const {
  return operand_addresses_.size();
}
inline void ConvInstructionLog::clear_operand_addresses() {
  operand_addresses_.Clear();
}
inline ::google::protobuf::uint64 ConvInstructionLog::operand_addresses(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.operand_addresses)
  return operand_addresses_.Get(index);
}
inline void ConvInstructionLog::set_operand_addresses(int index, ::google::protobuf::uint64 value) {
  operand_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.gpu.ConvInstructionLog.operand_addresses)
}
inline void ConvInstructionLog::add_operand_addresses(::google::protobuf::uint64 value) {
  operand_addresses_.Add(value);
  // @@protoc_insertion_point(field_add:xla.gpu.ConvInstructionLog.operand_addresses)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ConvInstructionLog::operand_addresses() const {
  // @@protoc_insertion_point(field_list:xla.gpu.ConvInstructionLog.operand_addresses)
  return operand_addresses_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ConvInstructionLog::mutable_operand_addresses() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.ConvInstructionLog.operand_addresses)
  return &operand_addresses_;
}

// -------------------------------------------------------------------

// BlacklistedAlgorithm

// int64 id = 1;
inline void BlacklistedAlgorithm::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlacklistedAlgorithm::id() const {
  // @@protoc_insertion_point(field_get:xla.gpu.BlacklistedAlgorithm.id)
  return id_;
}
inline void BlacklistedAlgorithm::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xla.gpu.BlacklistedAlgorithm.id)
}

// bool tensor_ops = 2;
inline void BlacklistedAlgorithm::clear_tensor_ops() {
  tensor_ops_ = false;
}
inline bool BlacklistedAlgorithm::tensor_ops() const {
  // @@protoc_insertion_point(field_get:xla.gpu.BlacklistedAlgorithm.tensor_ops)
  return tensor_ops_;
}
inline void BlacklistedAlgorithm::set_tensor_ops(bool value) {
  
  tensor_ops_ = value;
  // @@protoc_insertion_point(field_set:xla.gpu.BlacklistedAlgorithm.tensor_ops)
}

// -------------------------------------------------------------------

// AlgorithmBlacklistEntry

// string hlo = 1;
inline void AlgorithmBlacklistEntry::clear_hlo() {
  hlo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmBlacklistEntry::hlo() const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmBlacklistEntry.hlo)
  return hlo_.GetNoArena();
}
inline void AlgorithmBlacklistEntry::set_hlo(const ::std::string& value) {
  
  hlo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.gpu.AlgorithmBlacklistEntry.hlo)
}
#if LANG_CXX11
inline void AlgorithmBlacklistEntry::set_hlo(::std::string&& value) {
  
  hlo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.gpu.AlgorithmBlacklistEntry.hlo)
}
#endif
inline void AlgorithmBlacklistEntry::set_hlo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hlo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.gpu.AlgorithmBlacklistEntry.hlo)
}
inline void AlgorithmBlacklistEntry::set_hlo(const char* value, size_t size) {
  
  hlo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.gpu.AlgorithmBlacklistEntry.hlo)
}
inline ::std::string* AlgorithmBlacklistEntry::mutable_hlo() {
  
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmBlacklistEntry.hlo)
  return hlo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmBlacklistEntry::release_hlo() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmBlacklistEntry.hlo)
  
  return hlo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmBlacklistEntry::set_allocated_hlo(::std::string* hlo) {
  if (hlo != NULL) {
    
  } else {
    
  }
  hlo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hlo);
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmBlacklistEntry.hlo)
}

// .tensorflow.ComputeCapability cc = 2;
inline bool AlgorithmBlacklistEntry::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline const ::tensorflow::ComputeCapability& AlgorithmBlacklistEntry::_internal_cc() const {
  return *cc_;
}
inline const ::tensorflow::ComputeCapability& AlgorithmBlacklistEntry::cc() const {
  const ::tensorflow::ComputeCapability* p = cc_;
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmBlacklistEntry.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::ComputeCapability*>(
      &::tensorflow::_ComputeCapability_default_instance_);
}
inline ::tensorflow::ComputeCapability* AlgorithmBlacklistEntry::release_cc() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmBlacklistEntry.cc)
  
  ::tensorflow::ComputeCapability* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline ::tensorflow::ComputeCapability* AlgorithmBlacklistEntry::mutable_cc() {
  
  if (cc_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::ComputeCapability>(GetArenaNoVirtual());
    cc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmBlacklistEntry.cc)
  return cc_;
}
inline void AlgorithmBlacklistEntry::set_allocated_cc(::tensorflow::ComputeCapability* cc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cc_);
  }
  if (cc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cc, submessage_arena);
    }
    
  } else {
    
  }
  cc_ = cc;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmBlacklistEntry.cc)
}

// .tensorflow.CudnnVersion cudnn_version = 3;
inline bool AlgorithmBlacklistEntry::has_cudnn_version() const {
  return this != internal_default_instance() && cudnn_version_ != NULL;
}
inline const ::tensorflow::CudnnVersion& AlgorithmBlacklistEntry::_internal_cudnn_version() const {
  return *cudnn_version_;
}
inline const ::tensorflow::CudnnVersion& AlgorithmBlacklistEntry::cudnn_version() const {
  const ::tensorflow::CudnnVersion* p = cudnn_version_;
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmBlacklistEntry.cudnn_version)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::CudnnVersion*>(
      &::tensorflow::_CudnnVersion_default_instance_);
}
inline ::tensorflow::CudnnVersion* AlgorithmBlacklistEntry::release_cudnn_version() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmBlacklistEntry.cudnn_version)
  
  ::tensorflow::CudnnVersion* temp = cudnn_version_;
  cudnn_version_ = NULL;
  return temp;
}
inline ::tensorflow::CudnnVersion* AlgorithmBlacklistEntry::mutable_cudnn_version() {
  
  if (cudnn_version_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::CudnnVersion>(GetArenaNoVirtual());
    cudnn_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmBlacklistEntry.cudnn_version)
  return cudnn_version_;
}
inline void AlgorithmBlacklistEntry::set_allocated_cudnn_version(::tensorflow::CudnnVersion* cudnn_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cudnn_version_);
  }
  if (cudnn_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cudnn_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cudnn_version, submessage_arena);
    }
    
  } else {
    
  }
  cudnn_version_ = cudnn_version;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmBlacklistEntry.cudnn_version)
}

// string blas_version = 5;
inline void AlgorithmBlacklistEntry::clear_blas_version() {
  blas_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmBlacklistEntry::blas_version() const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmBlacklistEntry.blas_version)
  return blas_version_.GetNoArena();
}
inline void AlgorithmBlacklistEntry::set_blas_version(const ::std::string& value) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xla.gpu.AlgorithmBlacklistEntry.blas_version)
}
#if LANG_CXX11
inline void AlgorithmBlacklistEntry::set_blas_version(::std::string&& value) {
  
  blas_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xla.gpu.AlgorithmBlacklistEntry.blas_version)
}
#endif
inline void AlgorithmBlacklistEntry::set_blas_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xla.gpu.AlgorithmBlacklistEntry.blas_version)
}
inline void AlgorithmBlacklistEntry::set_blas_version(const char* value, size_t size) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xla.gpu.AlgorithmBlacklistEntry.blas_version)
}
inline ::std::string* AlgorithmBlacklistEntry::mutable_blas_version() {
  
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmBlacklistEntry.blas_version)
  return blas_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmBlacklistEntry::release_blas_version() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmBlacklistEntry.blas_version)
  
  return blas_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmBlacklistEntry::set_allocated_blas_version(::std::string* blas_version) {
  if (blas_version != NULL) {
    
  } else {
    
  }
  blas_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blas_version);
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmBlacklistEntry.blas_version)
}

// repeated .xla.gpu.BlacklistedAlgorithm algos = 4;
inline int AlgorithmBlacklistEntry::algos_size() const {
  return algos_.size();
}
inline void AlgorithmBlacklistEntry::clear_algos() {
  algos_.Clear();
}
inline ::xla::gpu::BlacklistedAlgorithm* AlgorithmBlacklistEntry::mutable_algos(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmBlacklistEntry.algos)
  return algos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xla::gpu::BlacklistedAlgorithm >*
AlgorithmBlacklistEntry::mutable_algos() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.AlgorithmBlacklistEntry.algos)
  return &algos_;
}
inline const ::xla::gpu::BlacklistedAlgorithm& AlgorithmBlacklistEntry::algos(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmBlacklistEntry.algos)
  return algos_.Get(index);
}
inline ::xla::gpu::BlacklistedAlgorithm* AlgorithmBlacklistEntry::add_algos() {
  // @@protoc_insertion_point(field_add:xla.gpu.AlgorithmBlacklistEntry.algos)
  return algos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::gpu::BlacklistedAlgorithm >&
AlgorithmBlacklistEntry::algos() const {
  // @@protoc_insertion_point(field_list:xla.gpu.AlgorithmBlacklistEntry.algos)
  return algos_;
}

// -------------------------------------------------------------------

// AlgorithmBlacklist

// repeated .xla.gpu.AlgorithmBlacklistEntry entries = 1;
inline int AlgorithmBlacklist::entries_size() const {
  return entries_.size();
}
inline void AlgorithmBlacklist::clear_entries() {
  entries_.Clear();
}
inline ::xla::gpu::AlgorithmBlacklistEntry* AlgorithmBlacklist::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmBlacklist.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xla::gpu::AlgorithmBlacklistEntry >*
AlgorithmBlacklist::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.AlgorithmBlacklist.entries)
  return &entries_;
}
inline const ::xla::gpu::AlgorithmBlacklistEntry& AlgorithmBlacklist::entries(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmBlacklist.entries)
  return entries_.Get(index);
}
inline ::xla::gpu::AlgorithmBlacklistEntry* AlgorithmBlacklist::add_entries() {
  // @@protoc_insertion_point(field_add:xla.gpu.AlgorithmBlacklist.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::gpu::AlgorithmBlacklistEntry >&
AlgorithmBlacklist::entries() const {
  // @@protoc_insertion_point(field_list:xla.gpu.AlgorithmBlacklist.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpu
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto
