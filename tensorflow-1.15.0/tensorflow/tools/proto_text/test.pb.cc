// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/proto_text/test.proto

#include "tensorflow/tools/proto_text/test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ForeignMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NestedTestAllTypes_MapStringToInt64Entry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestAllTypes_MapInt64ToStringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestAllTypes_MapStringToInt64Entry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestAllTypes_NestedMessage_DoubleNestedMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapBoolToMessageEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapInt32ToMessageEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapInt64ToMessageEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapStringToMessageEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_NestedMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NestedTestAllTypes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_TestAllTypes;
}  // namespace protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto
namespace tensorflow {
namespace test {
class TestAllTypes_NestedMessage_DoubleNestedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_NestedMessage_DoubleNestedMessage>
      _instance;
} _TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_;
class TestAllTypes_NestedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_NestedMessage>
      _instance;
} _TestAllTypes_NestedMessage_default_instance_;
class TestAllTypes_MapStringToMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_MapStringToMessageEntry_DoNotUse>
      _instance;
} _TestAllTypes_MapStringToMessageEntry_DoNotUse_default_instance_;
class TestAllTypes_MapInt32ToMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_MapInt32ToMessageEntry_DoNotUse>
      _instance;
} _TestAllTypes_MapInt32ToMessageEntry_DoNotUse_default_instance_;
class TestAllTypes_MapInt64ToMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_MapInt64ToMessageEntry_DoNotUse>
      _instance;
} _TestAllTypes_MapInt64ToMessageEntry_DoNotUse_default_instance_;
class TestAllTypes_MapBoolToMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_MapBoolToMessageEntry_DoNotUse>
      _instance;
} _TestAllTypes_MapBoolToMessageEntry_DoNotUse_default_instance_;
class TestAllTypes_MapStringToInt64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_MapStringToInt64Entry_DoNotUse>
      _instance;
} _TestAllTypes_MapStringToInt64Entry_DoNotUse_default_instance_;
class TestAllTypes_MapInt64ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_MapInt64ToStringEntry_DoNotUse>
      _instance;
} _TestAllTypes_MapInt64ToStringEntry_DoNotUse_default_instance_;
class TestAllTypes_AnotherMapStringToMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse>
      _instance;
} _TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse_default_instance_;
class TestAllTypesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestAllTypes>
      _instance;
  ::google::protobuf::uint32 oneof_uint32_;
  const ::tensorflow::test::TestAllTypes_NestedMessage* oneof_nested_message_;
  ::google::protobuf::internal::ArenaStringPtr oneof_string_;
  ::google::protobuf::internal::ArenaStringPtr oneof_bytes_;
  int oneof_enum_;
} _TestAllTypes_default_instance_;
class NestedTestAllTypes_MapStringToInt64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NestedTestAllTypes_MapStringToInt64Entry_DoNotUse>
      _instance;
} _NestedTestAllTypes_MapStringToInt64Entry_DoNotUse_default_instance_;
class NestedTestAllTypesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NestedTestAllTypes>
      _instance;
} _NestedTestAllTypes_default_instance_;
class ForeignMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ForeignMessage>
      _instance;
} _ForeignMessage_default_instance_;
class TestEmptyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestEmptyMessage>
      _instance;
} _TestEmptyMessage_default_instance_;
}  // namespace test
}  // namespace tensorflow
namespace protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto {
static void InitDefaultsTestAllTypes_NestedMessage_DoubleNestedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestAllTypes_NestedMessage_DoubleNestedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestAllTypes_NestedMessage_DoubleNestedMessage}, {}};

static void InitDefaultsTestAllTypes_NestedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_NestedMessage_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_NestedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::test::TestAllTypes_NestedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_NestedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestAllTypes_NestedMessage}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage_DoubleNestedMessage.base,}};

static void InitDefaultsTestAllTypes_MapStringToMessageEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_MapStringToMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapStringToMessageEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestAllTypes_MapStringToMessageEntry_DoNotUse}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base,}};

static void InitDefaultsTestAllTypes_MapInt32ToMessageEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_MapInt32ToMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapInt32ToMessageEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestAllTypes_MapInt32ToMessageEntry_DoNotUse}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base,}};

static void InitDefaultsTestAllTypes_MapInt64ToMessageEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_MapInt64ToMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapInt64ToMessageEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestAllTypes_MapInt64ToMessageEntry_DoNotUse}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base,}};

static void InitDefaultsTestAllTypes_MapBoolToMessageEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_MapBoolToMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_MapBoolToMessageEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestAllTypes_MapBoolToMessageEntry_DoNotUse}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base,}};

static void InitDefaultsTestAllTypes_MapStringToInt64Entry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_MapStringToInt64Entry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestAllTypes_MapStringToInt64Entry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestAllTypes_MapStringToInt64Entry_DoNotUse}, {}};

static void InitDefaultsTestAllTypes_MapInt64ToStringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_MapInt64ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestAllTypes_MapInt64ToStringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestAllTypes_MapInt64ToStringEntry_DoNotUse}, {}};

static void InitDefaultsTestAllTypes_AnotherMapStringToMessageEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse();
  }
  ::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestAllTypes_AnotherMapStringToMessageEntry_DoNotUse}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base,}};

static void InitDefaultsTestAllTypes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestAllTypes_default_instance_;
    new (ptr) ::tensorflow::test::TestAllTypes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::test::TestAllTypes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_TestAllTypes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsTestAllTypes}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_ForeignMessage.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_MapStringToMessageEntry_DoNotUse.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_MapInt32ToMessageEntry_DoNotUse.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_MapInt64ToMessageEntry_DoNotUse.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_MapBoolToMessageEntry_DoNotUse.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_MapStringToInt64Entry_DoNotUse.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_MapInt64ToStringEntry_DoNotUse.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse.base,}};

static void InitDefaultsNestedTestAllTypes_MapStringToInt64Entry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_NestedTestAllTypes_MapStringToInt64Entry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse();
  }
  ::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NestedTestAllTypes_MapStringToInt64Entry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNestedTestAllTypes_MapStringToInt64Entry_DoNotUse}, {}};

static void InitDefaultsNestedTestAllTypes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_NestedTestAllTypes_default_instance_;
    new (ptr) ::tensorflow::test::NestedTestAllTypes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::test::NestedTestAllTypes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NestedTestAllTypes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNestedTestAllTypes}, {
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes.base,
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_NestedTestAllTypes_MapStringToInt64Entry_DoNotUse.base,}};

static void InitDefaultsForeignMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_ForeignMessage_default_instance_;
    new (ptr) ::tensorflow::test::ForeignMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::test::ForeignMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ForeignMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsForeignMessage}, {}};

static void InitDefaultsTestEmptyMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::test::_TestEmptyMessage_default_instance_;
    new (ptr) ::tensorflow::test::TestEmptyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::test::TestEmptyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestEmptyMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestEmptyMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_NestedMessage_DoubleNestedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_NestedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_MapStringToMessageEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_MapInt32ToMessageEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_MapInt64ToMessageEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_MapBoolToMessageEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_MapStringToInt64Entry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_MapInt64ToStringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestAllTypes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NestedTestAllTypes_MapStringToInt64Entry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NestedTestAllTypes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ForeignMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestEmptyMessage.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage, optional_string_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage, optional_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage, repeated_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_NestedMessage, optional_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_fixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_fixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_sfixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_sfixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_foreign_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_nested_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_foreign_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, optional_cord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_fixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_fixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_sfixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_sfixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_nested_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, repeated_cord_),
  offsetof(::tensorflow::test::TestAllTypesDefaultTypeInternal, oneof_uint32_),
  offsetof(::tensorflow::test::TestAllTypesDefaultTypeInternal, oneof_nested_message_),
  offsetof(::tensorflow::test::TestAllTypesDefaultTypeInternal, oneof_string_),
  offsetof(::tensorflow::test::TestAllTypesDefaultTypeInternal, oneof_bytes_),
  offsetof(::tensorflow::test::TestAllTypesDefaultTypeInternal, oneof_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, map_string_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, map_int32_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, map_int64_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, map_bool_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, map_string_to_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, map_int64_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, another_map_string_to_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, packed_repeated_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestAllTypes, oneof_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::NestedTestAllTypes, map_string_to_int64_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::ForeignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::ForeignMessage, c_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::test::TestEmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage)},
  { 6, -1, sizeof(::tensorflow::test::TestAllTypes_NestedMessage)},
  { 15, 22, sizeof(::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse)},
  { 24, 31, sizeof(::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse)},
  { 33, 40, sizeof(::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse)},
  { 42, 49, sizeof(::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse)},
  { 51, 58, sizeof(::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse)},
  { 60, 67, sizeof(::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse)},
  { 69, 76, sizeof(::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse)},
  { 78, -1, sizeof(::tensorflow::test::TestAllTypes)},
  { 135, 142, sizeof(::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse)},
  { 144, -1, sizeof(::tensorflow::test::NestedTestAllTypes)},
  { 152, -1, sizeof(::tensorflow::test::ForeignMessage)},
  { 158, -1, sizeof(::tensorflow::test::TestEmptyMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_NestedMessage_DoubleNestedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_NestedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_MapStringToMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_MapInt32ToMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_MapInt64ToMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_MapBoolToMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_MapStringToInt64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_MapInt64ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestAllTypes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_NestedTestAllTypes_MapStringToInt64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_NestedTestAllTypes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_ForeignMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::test::_TestEmptyMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/tools/proto_text/test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&tensorflow/tools/proto_text/test.proto"
      "\022\017tensorflow.test\"\321\027\n\014TestAllTypes\022\027\n\016op"
      "tional_int32\030\350\007 \001(\005\022\026\n\016optional_int64\030\002 "
      "\001(\003\022\027\n\017optional_uint32\030\003 \001(\r\022\030\n\017optional"
      "_uint64\030\347\007 \001(\004\022\027\n\017optional_sint32\030\005 \001(\021\022"
      "\027\n\017optional_sint64\030\006 \001(\022\022\030\n\020optional_fix"
      "ed32\030\007 \001(\007\022\030\n\020optional_fixed64\030\010 \001(\006\022\031\n\021"
      "optional_sfixed32\030\t \001(\017\022\031\n\021optional_sfix"
      "ed64\030\n \001(\020\022\026\n\016optional_float\030\013 \001(\002\022\027\n\017op"
      "tional_double\030\014 \001(\001\022\025\n\roptional_bool\030\r \001"
      "(\010\022\027\n\017optional_string\030\016 \001(\t\022\026\n\016optional_"
      "bytes\030\017 \001(\014\022L\n\027optional_nested_message\030\022"
      " \001(\0132+.tensorflow.test.TestAllTypes.Nest"
      "edMessage\022A\n\030optional_foreign_message\030\023 "
      "\001(\0132\037.tensorflow.test.ForeignMessage\022F\n\024"
      "optional_nested_enum\030\025 \001(\0162(.tensorflow."
      "test.TestAllTypes.NestedEnum\022;\n\025optional"
      "_foreign_enum\030\026 \001(\0162\034.tensorflow.test.Fo"
      "reignEnum\022\025\n\roptional_cord\030\031 \001(\t\022\026\n\016repe"
      "ated_int32\030\037 \003(\005\022\026\n\016repeated_int64\030  \003(\003"
      "\022\027\n\017repeated_uint32\030! \003(\r\022\027\n\017repeated_ui"
      "nt64\030\" \003(\004\022\027\n\017repeated_sint32\030# \003(\021\022\027\n\017r"
      "epeated_sint64\030$ \003(\022\022\030\n\020repeated_fixed32"
      "\030% \003(\007\022\030\n\020repeated_fixed64\030& \003(\006\022\031\n\021repe"
      "ated_sfixed32\030\' \003(\017\022\031\n\021repeated_sfixed64"
      "\030( \003(\020\022\026\n\016repeated_float\030) \003(\002\022\027\n\017repeat"
      "ed_double\030* \003(\001\022\025\n\rrepeated_bool\030+ \003(\010\022\027"
      "\n\017repeated_string\030, \003(\t\022\026\n\016repeated_byte"
      "s\030- \003(\014\022L\n\027repeated_nested_message\0300 \003(\013"
      "2+.tensorflow.test.TestAllTypes.NestedMe"
      "ssage\022F\n\024repeated_nested_enum\0303 \003(\0162(.te"
      "nsorflow.test.TestAllTypes.NestedEnum\022\025\n"
      "\rrepeated_cord\0307 \003(\t\022\026\n\014oneof_uint32\030o \001"
      "(\rH\000\022K\n\024oneof_nested_message\030p \001(\0132+.ten"
      "sorflow.test.TestAllTypes.NestedMessageH"
      "\000\022\026\n\014oneof_string\030q \001(\tH\000\022\025\n\013oneof_bytes"
      "\030r \001(\014H\000\022>\n\noneof_enum\030d \001(\0162(.tensorflo"
      "w.test.TestAllTypes.NestedEnumH\000\022T\n\025map_"
      "string_to_message\030: \003(\01325.tensorflow.tes"
      "t.TestAllTypes.MapStringToMessageEntry\022R"
      "\n\024map_int32_to_message\030; \003(\01324.tensorflo"
      "w.test.TestAllTypes.MapInt32ToMessageEnt"
      "ry\022R\n\024map_int64_to_message\030< \003(\01324.tenso"
      "rflow.test.TestAllTypes.MapInt64ToMessag"
      "eEntry\022P\n\023map_bool_to_message\030= \003(\01323.te"
      "nsorflow.test.TestAllTypes.MapBoolToMess"
      "ageEntry\022P\n\023map_string_to_int64\030> \003(\01323."
      "tensorflow.test.TestAllTypes.MapStringTo"
      "Int64Entry\022P\n\023map_int64_to_string\030\? \003(\0132"
      "3.tensorflow.test.TestAllTypes.MapInt64T"
      "oStringEntry\022c\n\035another_map_string_to_me"
      "ssage\030A \003(\0132<.tensorflow.test.TestAllTyp"
      "es.AnotherMapStringToMessageEntry\022!\n\025pac"
      "ked_repeated_int64\030@ \003(\003B\002\020\001\032\325\001\n\rNestedM"
      "essage\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016repeat"
      "ed_int32\030\002 \003(\005\022L\n\003msg\030\003 \001(\0132\?.tensorflow"
      ".test.TestAllTypes.NestedMessage.DoubleN"
      "estedMessage\022\026\n\016optional_int64\030\004 \001(\003\032.\n\023"
      "DoubleNestedMessage\022\027\n\017optional_string\030\001"
      " \001(\t\032f\n\027MapStringToMessageEntry\022\013\n\003key\030\001"
      " \001(\t\022:\n\005value\030\002 \001(\0132+.tensorflow.test.Te"
      "stAllTypes.NestedMessage:\0028\001\032e\n\026MapInt32"
      "ToMessageEntry\022\013\n\003key\030\001 \001(\005\022:\n\005value\030\002 \001"
      "(\0132+.tensorflow.test.TestAllTypes.Nested"
      "Message:\0028\001\032e\n\026MapInt64ToMessageEntry\022\013\n"
      "\003key\030\001 \001(\003\022:\n\005value\030\002 \001(\0132+.tensorflow.t"
      "est.TestAllTypes.NestedMessage:\0028\001\032d\n\025Ma"
      "pBoolToMessageEntry\022\013\n\003key\030\001 \001(\010\022:\n\005valu"
      "e\030\002 \001(\0132+.tensorflow.test.TestAllTypes.N"
      "estedMessage:\0028\001\0327\n\025MapStringToInt64Entr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\0327\n\025Map"
      "Int64ToStringEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value"
      "\030\002 \001(\t:\0028\001\032m\n\036AnotherMapStringToMessageE"
      "ntry\022\013\n\003key\030\001 \001(\t\022:\n\005value\030\002 \001(\0132+.tenso"
      "rflow.test.TestAllTypes.NestedMessage:\0028"
      "\001\"C\n\nNestedEnum\022\010\n\004ZERO\020\000\022\007\n\003FOO\020\001\022\007\n\003BA"
      "R\020\002\022\007\n\003BAZ\020\003\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001B\r\n\013oneof_"
      "field\"\211\002\n\022NestedTestAllTypes\0222\n\005child\030\001 "
      "\001(\0132#.tensorflow.test.NestedTestAllTypes"
      "\022.\n\007payload\030\002 \001(\0132\035.tensorflow.test.Test"
      "AllTypes\022V\n\023map_string_to_int64\030\003 \003(\01329."
      "tensorflow.test.NestedTestAllTypes.MapSt"
      "ringToInt64Entry\0327\n\025MapStringToInt64Entr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\033\n\016For"
      "eignMessage\022\t\n\001c\030\001 \001(\005\"\022\n\020TestEmptyMessa"
      "ge*R\n\013ForeignEnum\022\020\n\014FOREIGN_ZERO\020\000\022\017\n\013F"
      "OREIGN_FOO\020\004\022\017\n\013FOREIGN_BAR\020\005\022\017\n\013FOREIGN"
      "_BAZ\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/tools/proto_text/test.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto
namespace tensorflow {
namespace test {
const ::google::protobuf::EnumDescriptor* TestAllTypes_NestedEnum_descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_enum_descriptors[0];
}
bool TestAllTypes_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestAllTypes_NestedEnum TestAllTypes::ZERO;
const TestAllTypes_NestedEnum TestAllTypes::FOO;
const TestAllTypes_NestedEnum TestAllTypes::BAR;
const TestAllTypes_NestedEnum TestAllTypes::BAZ;
const TestAllTypes_NestedEnum TestAllTypes::NEG;
const TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MIN;
const TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MAX;
const int TestAllTypes::NestedEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ForeignEnum_descriptor() {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_enum_descriptors[1];
}
bool ForeignEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestAllTypes_NestedMessage_DoubleNestedMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypes_NestedMessage_DoubleNestedMessage::kOptionalStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAllTypes_NestedMessage_DoubleNestedMessage::TestAllTypes_NestedMessage_DoubleNestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage_DoubleNestedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
}
TestAllTypes_NestedMessage_DoubleNestedMessage::TestAllTypes_NestedMessage_DoubleNestedMessage(const TestAllTypes_NestedMessage_DoubleNestedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_string().size() > 0) {
    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SharedCtor() {
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TestAllTypes_NestedMessage_DoubleNestedMessage::~TestAllTypes_NestedMessage_DoubleNestedMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  SharedDtor();
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SharedDtor() {
  optional_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestAllTypes_NestedMessage_DoubleNestedMessage::descriptor() {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestAllTypes_NestedMessage_DoubleNestedMessage& TestAllTypes_NestedMessage_DoubleNestedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage_DoubleNestedMessage.base);
  return *internal_default_instance();
}


void TestAllTypes_NestedMessage_DoubleNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TestAllTypes_NestedMessage_DoubleNestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string optional_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_string().data(), static_cast<int>(this->optional_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  return false;
#undef DO_
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string optional_string = 1;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), static_cast<int>(this->optional_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->optional_string(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
}

::google::protobuf::uint8* TestAllTypes_NestedMessage_DoubleNestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string optional_string = 1;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), static_cast<int>(this->optional_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage.optional_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->optional_string(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage_DoubleNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string optional_string = 1;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_string());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_NestedMessage_DoubleNestedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAllTypes_NestedMessage_DoubleNestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::MergeFrom(const TestAllTypes_NestedMessage_DoubleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.optional_string().size() > 0) {

    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::CopyFrom(const TestAllTypes_NestedMessage_DoubleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage_DoubleNestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage_DoubleNestedMessage::Swap(TestAllTypes_NestedMessage_DoubleNestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAllTypes_NestedMessage_DoubleNestedMessage::InternalSwap(TestAllTypes_NestedMessage_DoubleNestedMessage* other) {
  using std::swap;
  optional_string_.Swap(&other->optional_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestAllTypes_NestedMessage_DoubleNestedMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestAllTypes_NestedMessage::InitAsDefaultInstance() {
  ::tensorflow::test::_TestAllTypes_NestedMessage_default_instance_._instance.get_mutable()->msg_ = const_cast< ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage*>(
      ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypes_NestedMessage::kOptionalInt32FieldNumber;
const int TestAllTypes_NestedMessage::kRepeatedInt32FieldNumber;
const int TestAllTypes_NestedMessage::kMsgFieldNumber;
const int TestAllTypes_NestedMessage::kOptionalInt64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAllTypes_NestedMessage::TestAllTypes_NestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(const TestAllTypes_NestedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      repeated_int32_(from.repeated_int32_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_int32_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_int32_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestAllTypes.NestedMessage)
}

void TestAllTypes_NestedMessage::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_int32_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(optional_int32_));
}

TestAllTypes_NestedMessage::~TestAllTypes_NestedMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestAllTypes.NestedMessage)
  SharedDtor();
}

void TestAllTypes_NestedMessage::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void TestAllTypes_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestAllTypes_NestedMessage::descriptor() {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestAllTypes_NestedMessage& TestAllTypes_NestedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes_NestedMessage.base);
  return *internal_default_instance();
}


void TestAllTypes_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestAllTypes.NestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) {
    delete msg_;
  }
  msg_ = NULL;
  ::memset(&optional_int64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_int32_) -
      reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_int32_));
  _internal_metadata_.Clear();
}

bool TestAllTypes_NestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestAllTypes.NestedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 optional_int32 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 repeated_int32 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 optional_int64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestAllTypes.NestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestAllTypes.NestedMessage)
  return false;
#undef DO_
}

void TestAllTypes_NestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestAllTypes.NestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optional_int32(), output);
  }

  // repeated int32 repeated_int32 = 2;
  if (this->repeated_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_int32_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_int32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->repeated_int32(i), output);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_msg(), output);
  }

  // int64 optional_int64 = 4;
  if (this->optional_int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->optional_int64(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestAllTypes.NestedMessage)
}

::google::protobuf::uint8* TestAllTypes_NestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestAllTypes.NestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optional_int32(), target);
  }

  // repeated int32 repeated_int32 = 2;
  if (this->repeated_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_int32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->repeated_int32_, target);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_msg(), deterministic, target);
  }

  // int64 optional_int64 = 4;
  if (this->optional_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->optional_int64(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestAllTypes.NestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestAllTypes.NestedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 repeated_int32 = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .tensorflow.test.TestAllTypes.NestedMessage.DoubleNestedMessage msg = 3;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  // int64 optional_int64 = 4;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->optional_int64());
  }

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional_int32());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes_NestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_NestedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAllTypes_NestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestAllTypes.NestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestAllTypes.NestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypes_NestedMessage::MergeFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  if (from.has_msg()) {
    mutable_msg()->::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage::MergeFrom(from.msg());
  }
  if (from.optional_int64() != 0) {
    set_optional_int64(from.optional_int64());
  }
  if (from.optional_int32() != 0) {
    set_optional_int32(from.optional_int32());
  }
}

void TestAllTypes_NestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_NestedMessage::CopyFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage::Swap(TestAllTypes_NestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAllTypes_NestedMessage::InternalSwap(TestAllTypes_NestedMessage* other) {
  using std::swap;
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  swap(msg_, other->msg_);
  swap(optional_int64_, other->optional_int64_);
  swap(optional_int32_, other->optional_int32_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestAllTypes_NestedMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TestAllTypes_MapStringToMessageEntry_DoNotUse::TestAllTypes_MapStringToMessageEntry_DoNotUse() {}
TestAllTypes_MapStringToMessageEntry_DoNotUse::TestAllTypes_MapStringToMessageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_MapStringToMessageEntry_DoNotUse::MergeFrom(const TestAllTypes_MapStringToMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_MapStringToMessageEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[2];
}
void TestAllTypes_MapStringToMessageEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypes_MapInt32ToMessageEntry_DoNotUse::TestAllTypes_MapInt32ToMessageEntry_DoNotUse() {}
TestAllTypes_MapInt32ToMessageEntry_DoNotUse::TestAllTypes_MapInt32ToMessageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_MapInt32ToMessageEntry_DoNotUse::MergeFrom(const TestAllTypes_MapInt32ToMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_MapInt32ToMessageEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[3];
}
void TestAllTypes_MapInt32ToMessageEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypes_MapInt64ToMessageEntry_DoNotUse::TestAllTypes_MapInt64ToMessageEntry_DoNotUse() {}
TestAllTypes_MapInt64ToMessageEntry_DoNotUse::TestAllTypes_MapInt64ToMessageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_MapInt64ToMessageEntry_DoNotUse::MergeFrom(const TestAllTypes_MapInt64ToMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_MapInt64ToMessageEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[4];
}
void TestAllTypes_MapInt64ToMessageEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypes_MapBoolToMessageEntry_DoNotUse::TestAllTypes_MapBoolToMessageEntry_DoNotUse() {}
TestAllTypes_MapBoolToMessageEntry_DoNotUse::TestAllTypes_MapBoolToMessageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_MapBoolToMessageEntry_DoNotUse::MergeFrom(const TestAllTypes_MapBoolToMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_MapBoolToMessageEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[5];
}
void TestAllTypes_MapBoolToMessageEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypes_MapStringToInt64Entry_DoNotUse::TestAllTypes_MapStringToInt64Entry_DoNotUse() {}
TestAllTypes_MapStringToInt64Entry_DoNotUse::TestAllTypes_MapStringToInt64Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_MapStringToInt64Entry_DoNotUse::MergeFrom(const TestAllTypes_MapStringToInt64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_MapStringToInt64Entry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[6];
}
void TestAllTypes_MapStringToInt64Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypes_MapInt64ToStringEntry_DoNotUse::TestAllTypes_MapInt64ToStringEntry_DoNotUse() {}
TestAllTypes_MapInt64ToStringEntry_DoNotUse::TestAllTypes_MapInt64ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_MapInt64ToStringEntry_DoNotUse::MergeFrom(const TestAllTypes_MapInt64ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_MapInt64ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[7];
}
void TestAllTypes_MapInt64ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse() {}
TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::MergeFrom(const TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[8];
}
void TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TestAllTypes::InitAsDefaultInstance() {
  ::tensorflow::test::_TestAllTypes_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::tensorflow::test::TestAllTypes_NestedMessage*>(
      ::tensorflow::test::TestAllTypes_NestedMessage::internal_default_instance());
  ::tensorflow::test::_TestAllTypes_default_instance_._instance.get_mutable()->optional_foreign_message_ = const_cast< ::tensorflow::test::ForeignMessage*>(
      ::tensorflow::test::ForeignMessage::internal_default_instance());
  ::tensorflow::test::_TestAllTypes_default_instance_.oneof_uint32_ = 0u;
  ::tensorflow::test::_TestAllTypes_default_instance_.oneof_nested_message_ = const_cast< ::tensorflow::test::TestAllTypes_NestedMessage*>(
      ::tensorflow::test::TestAllTypes_NestedMessage::internal_default_instance());
  ::tensorflow::test::_TestAllTypes_default_instance_.oneof_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::test::_TestAllTypes_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::test::_TestAllTypes_default_instance_.oneof_enum_ = 0;
}
void TestAllTypes::set_allocated_oneof_nested_message(::tensorflow::test::TestAllTypes_NestedMessage* oneof_nested_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.test.TestAllTypes.oneof_nested_message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypes::kOptionalInt32FieldNumber;
const int TestAllTypes::kOptionalInt64FieldNumber;
const int TestAllTypes::kOptionalUint32FieldNumber;
const int TestAllTypes::kOptionalUint64FieldNumber;
const int TestAllTypes::kOptionalSint32FieldNumber;
const int TestAllTypes::kOptionalSint64FieldNumber;
const int TestAllTypes::kOptionalFixed32FieldNumber;
const int TestAllTypes::kOptionalFixed64FieldNumber;
const int TestAllTypes::kOptionalSfixed32FieldNumber;
const int TestAllTypes::kOptionalSfixed64FieldNumber;
const int TestAllTypes::kOptionalFloatFieldNumber;
const int TestAllTypes::kOptionalDoubleFieldNumber;
const int TestAllTypes::kOptionalBoolFieldNumber;
const int TestAllTypes::kOptionalStringFieldNumber;
const int TestAllTypes::kOptionalBytesFieldNumber;
const int TestAllTypes::kOptionalNestedMessageFieldNumber;
const int TestAllTypes::kOptionalForeignMessageFieldNumber;
const int TestAllTypes::kOptionalNestedEnumFieldNumber;
const int TestAllTypes::kOptionalForeignEnumFieldNumber;
const int TestAllTypes::kOptionalCordFieldNumber;
const int TestAllTypes::kRepeatedInt32FieldNumber;
const int TestAllTypes::kRepeatedInt64FieldNumber;
const int TestAllTypes::kRepeatedUint32FieldNumber;
const int TestAllTypes::kRepeatedUint64FieldNumber;
const int TestAllTypes::kRepeatedSint32FieldNumber;
const int TestAllTypes::kRepeatedSint64FieldNumber;
const int TestAllTypes::kRepeatedFixed32FieldNumber;
const int TestAllTypes::kRepeatedFixed64FieldNumber;
const int TestAllTypes::kRepeatedSfixed32FieldNumber;
const int TestAllTypes::kRepeatedSfixed64FieldNumber;
const int TestAllTypes::kRepeatedFloatFieldNumber;
const int TestAllTypes::kRepeatedDoubleFieldNumber;
const int TestAllTypes::kRepeatedBoolFieldNumber;
const int TestAllTypes::kRepeatedStringFieldNumber;
const int TestAllTypes::kRepeatedBytesFieldNumber;
const int TestAllTypes::kRepeatedNestedMessageFieldNumber;
const int TestAllTypes::kRepeatedNestedEnumFieldNumber;
const int TestAllTypes::kRepeatedCordFieldNumber;
const int TestAllTypes::kOneofUint32FieldNumber;
const int TestAllTypes::kOneofNestedMessageFieldNumber;
const int TestAllTypes::kOneofStringFieldNumber;
const int TestAllTypes::kOneofBytesFieldNumber;
const int TestAllTypes::kOneofEnumFieldNumber;
const int TestAllTypes::kMapStringToMessageFieldNumber;
const int TestAllTypes::kMapInt32ToMessageFieldNumber;
const int TestAllTypes::kMapInt64ToMessageFieldNumber;
const int TestAllTypes::kMapBoolToMessageFieldNumber;
const int TestAllTypes::kMapStringToInt64FieldNumber;
const int TestAllTypes::kMapInt64ToStringFieldNumber;
const int TestAllTypes::kAnotherMapStringToMessageFieldNumber;
const int TestAllTypes::kPackedRepeatedInt64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestAllTypes::TestAllTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestAllTypes)
}
TestAllTypes::TestAllTypes(const TestAllTypes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_cord_(from.repeated_cord_),
      packed_repeated_int64_(from.packed_repeated_int64_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_string_to_message_.MergeFrom(from.map_string_to_message_);
  map_int32_to_message_.MergeFrom(from.map_int32_to_message_);
  map_int64_to_message_.MergeFrom(from.map_int64_to_message_);
  map_bool_to_message_.MergeFrom(from.map_bool_to_message_);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  map_int64_to_string_.MergeFrom(from.map_int64_to_string_);
  another_map_string_to_message_.MergeFrom(from.another_map_string_to_message_);
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_string().size() > 0) {
    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_bytes().size() > 0) {
    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  optional_cord_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_cord().size() > 0) {
    optional_cord_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_cord_);
  }
  if (from.has_optional_nested_message()) {
    optional_nested_message_ = new ::tensorflow::test::TestAllTypes_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = NULL;
  }
  if (from.has_optional_foreign_message()) {
    optional_foreign_message_ = new ::tensorflow::test::ForeignMessage(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = NULL;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_uint64_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_uint64_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      mutable_oneof_nested_message()->::tensorflow::test::TestAllTypes_NestedMessage::MergeFrom(from.oneof_nested_message());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestAllTypes)
}

void TestAllTypes::SharedCtor() {
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_uint64_) -
      reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(optional_uint64_));
  clear_has_oneof_field();
}

TestAllTypes::~TestAllTypes() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestAllTypes)
  SharedDtor();
}

void TestAllTypes::SharedDtor() {
  optional_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestAllTypes::descriptor() {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestAllTypes& TestAllTypes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestAllTypes.base);
  return *internal_default_instance();
}


void TestAllTypes::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.test.TestAllTypes)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      delete oneof_field_.oneof_nested_message_;
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestAllTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_nested_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_cord_.Clear();
  map_string_to_message_.Clear();
  map_int32_to_message_.Clear();
  map_int64_to_message_.Clear();
  map_bool_to_message_.Clear();
  map_string_to_int64_.Clear();
  map_int64_to_string_.Clear();
  packed_repeated_int64_.Clear();
  another_map_string_to_message_.Clear();
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_cord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && optional_nested_message_ != NULL) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = NULL;
  if (GetArenaNoVirtual() == NULL && optional_foreign_message_ != NULL) {
    delete optional_foreign_message_;
  }
  optional_foreign_message_ = NULL;
  ::memset(&optional_int64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_uint64_) -
      reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_uint64_));
  clear_oneof_field();
  _internal_metadata_.Clear();
}

bool TestAllTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestAllTypes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 optional_int64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 optional_uint32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 optional_sint32 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &optional_sint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 optional_sint64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &optional_sint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 optional_fixed32 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &optional_fixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 optional_fixed64 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &optional_fixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 optional_sfixed32 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &optional_sfixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 optional_sfixed64 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optional_sfixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float optional_float = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optional_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double optional_double = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool optional_bool = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optional_string = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_string().data(), static_cast<int>(this->optional_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.optional_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes optional_bytes = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optional_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optional_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optional_foreign_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_optional_nested_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_optional_foreign_enum(static_cast< ::tensorflow::test::ForeignEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optional_cord = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_cord()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_cord().data(), static_cast<int>(this->optional_cord().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.optional_cord"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 repeated_int32 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 250u, input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 repeated_int64 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_repeated_int64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 258u, input, this->mutable_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 repeated_uint32 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeated_uint32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 266u, input, this->mutable_repeated_uint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 repeated_uint64 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_repeated_uint64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 274u, input, this->mutable_repeated_uint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 repeated_sint32 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_repeated_sint32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 282u, input, this->mutable_repeated_sint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 repeated_sint64 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_repeated_sint64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 290u, input, this->mutable_repeated_sint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 repeated_fixed32 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_repeated_fixed32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 298u, input, this->mutable_repeated_fixed32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 repeated_fixed64 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_repeated_fixed64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 306u, input, this->mutable_repeated_fixed64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_repeated_sfixed32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 2, 314u, input, this->mutable_repeated_sfixed32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_repeated_sfixed64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 2, 322u, input, this->mutable_repeated_sfixed64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float repeated_float = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_repeated_float())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 333 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 330u, input, this->mutable_repeated_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double repeated_double = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_repeated_double())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 338u, input, this->mutable_repeated_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool repeated_bool = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_repeated_bool())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 346u, input, this->mutable_repeated_bool())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_string = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repeated_string(this->repeated_string_size() - 1).data(),
            static_cast<int>(this->repeated_string(this->repeated_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.repeated_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes repeated_bytes = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_repeated_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_repeated_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_repeated_nested_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_repeated_nested_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_cord = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_cord()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repeated_cord(this->repeated_cord_size() - 1).data(),
            static_cast<int>(this->repeated_cord(this->repeated_cord_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.repeated_cord"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 466 & 0xFF */)) {
          TestAllTypes_MapStringToMessageEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_MapStringToMessageEntry_DoNotUse,
              ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_string_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.MapStringToMessageEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          TestAllTypes_MapInt32ToMessageEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_MapInt32ToMessageEntry_DoNotUse,
              ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_int32_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          TestAllTypes_MapInt64ToMessageEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_MapInt64ToMessageEntry_DoNotUse,
              ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_int64_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          TestAllTypes_MapBoolToMessageEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_MapBoolToMessageEntry_DoNotUse,
              bool, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&map_bool_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> map_string_to_int64 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          TestAllTypes_MapStringToInt64Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_MapStringToInt64Entry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&map_string_to_int64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.MapStringToInt64Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, string> map_int64_to_string = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          TestAllTypes_MapInt64ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_MapInt64ToStringEntry_DoNotUse,
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&map_int64_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.MapInt64ToStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 packed_repeated_int64 = 64 [packed = true];
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_packed_repeated_int64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 514u, input, this->mutable_packed_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse,
              ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage > > parser(&another_map_string_to_message_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.AnotherMapStringToMessageEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oneof_enum(static_cast< ::tensorflow::test::TestAllTypes_NestedEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 oneof_uint32 = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 888 & 0xFF */)) {
          clear_oneof_field();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_field_.oneof_uint32_)));
          set_has_oneof_uint32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oneof_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oneof_string = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oneof_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oneof_string().data(), static_cast<int>(this->oneof_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.TestAllTypes.oneof_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes oneof_bytes = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oneof_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 optional_uint64 = 999;
      case 999: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 7992 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optional_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 optional_int32 = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 8000 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestAllTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestAllTypes)
  return false;
#undef DO_
}

void TestAllTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestAllTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->optional_int64(), output);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optional_uint32(), output);
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->optional_sint32(), output);
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->optional_sint64(), output);
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->optional_fixed32(), output);
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->optional_fixed64(), output);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->optional_sfixed32(), output);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->optional_sfixed64(), output);
  }

  // float optional_float = 11;
  if (this->optional_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->optional_float(), output);
  }

  // double optional_double = 12;
  if (this->optional_double() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->optional_double(), output);
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->optional_bool(), output);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), static_cast<int>(this->optional_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->optional_string(), output);
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->optional_bytes(), output);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_optional_nested_message(), output);
  }

  // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_optional_foreign_message(), output);
  }

  // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->optional_nested_enum(), output);
  }

  // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->optional_foreign_enum(), output);
  }

  // string optional_cord = 25;
  if (this->optional_cord().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_cord().data(), static_cast<int>(this->optional_cord().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_cord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->optional_cord(), output);
  }

  // repeated int32 repeated_int32 = 31;
  if (this->repeated_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(31, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_int32_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_int32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->repeated_int32(i), output);
  }

  // repeated int64 repeated_int64 = 32;
  if (this->repeated_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(32, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_int64_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_int64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->repeated_int64(i), output);
  }

  // repeated uint32 repeated_uint32 = 33;
  if (this->repeated_uint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(33, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_uint32_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_uint32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->repeated_uint32(i), output);
  }

  // repeated uint64 repeated_uint64 = 34;
  if (this->repeated_uint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(34, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_uint64_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_uint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->repeated_uint64(i), output);
  }

  // repeated sint32 repeated_sint32 = 35;
  if (this->repeated_sint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(35, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_sint32_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_sint32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->repeated_sint32(i), output);
  }

  // repeated sint64 repeated_sint64 = 36;
  if (this->repeated_sint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(36, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_sint64_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_sint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->repeated_sint64(i), output);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  if (this->repeated_fixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(37, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_fixed32_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->repeated_fixed32().data(), this->repeated_fixed32_size(), output);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  if (this->repeated_fixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(38, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_fixed64_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed64Array(
      this->repeated_fixed64().data(), this->repeated_fixed64_size(), output);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  if (this->repeated_sfixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(39, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_sfixed32_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->repeated_sfixed32().data(), this->repeated_sfixed32_size(), output);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  if (this->repeated_sfixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(40, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_sfixed64_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64Array(
      this->repeated_sfixed64().data(), this->repeated_sfixed64_size(), output);
  }

  // repeated float repeated_float = 41;
  if (this->repeated_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(41, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_float_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->repeated_float().data(), this->repeated_float_size(), output);
  }

  // repeated double repeated_double = 42;
  if (this->repeated_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(42, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_double_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->repeated_double().data(), this->repeated_double_size(), output);
  }

  // repeated bool repeated_bool = 43;
  if (this->repeated_bool_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(43, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_bool_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->repeated_bool().data(), this->repeated_bool_size(), output);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), static_cast<int>(this->repeated_string(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->repeated_string(i), output);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      45, this->repeated_bytes(i), output);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_nested_message_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48,
      this->repeated_nested_message(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  if (this->repeated_nested_enum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_repeated_nested_enum_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_nested_enum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->repeated_nested_enum(i), output);
  }

  // repeated string repeated_cord = 55;
  for (int i = 0, n = this->repeated_cord_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_cord(i).data(), static_cast<int>(this->repeated_cord(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_cord");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->repeated_cord(i), output);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
  if (!this->map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToMessageEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapStringToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            58, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapStringToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            58, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
  if (!this->map_int32_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map_int32_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int32_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapInt32ToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            59, *entry, output);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapInt32ToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            59, *entry, output);
      }
    }
  }

  // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
  if (!this->map_int64_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map_int64_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int64_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapInt64ToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            60, *entry, output);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapInt64ToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            60, *entry, output);
      }
    }
  }

  // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
  if (!this->map_bool_to_message().empty()) {
    typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map_bool_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_bool_to_message().size()]);
      typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapBoolToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapBoolToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
      }
    }
  }

  // map<string, int64> map_string_to_int64 = 62;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_to_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_to_string = 63;
  if (!this->map_int64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapInt64ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_int64_to_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapInt64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapInt64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated int64 packed_repeated_int64 = 64 [packed = true];
  if (this->packed_repeated_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(64, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _packed_repeated_int64_cached_byte_size_));
  }
  for (int i = 0, n = this->packed_repeated_int64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->packed_repeated_int64(i), output);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
  if (!this->another_map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.AnotherMapStringToMessageEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->another_map_string_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->another_map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
  if (has_oneof_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->oneof_enum(), output);
  }

  // uint32 oneof_uint32 = 111;
  if (has_oneof_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(111, this->oneof_uint32(), output);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
  if (has_oneof_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->_internal_oneof_nested_message(), output);
  }

  // string oneof_string = 113;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), static_cast<int>(this->oneof_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.oneof_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      113, this->oneof_string(), output);
  }

  // bytes oneof_bytes = 114;
  if (has_oneof_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      114, this->oneof_bytes(), output);
  }

  // uint64 optional_uint64 = 999;
  if (this->optional_uint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(999, this->optional_uint64(), output);
  }

  // int32 optional_int32 = 1000;
  if (this->optional_int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1000, this->optional_int32(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestAllTypes)
}

::google::protobuf::uint8* TestAllTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestAllTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optional_uint32(), target);
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->optional_sint32(), target);
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->optional_sint64(), target);
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->optional_fixed32(), target);
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->optional_fixed64(), target);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->optional_sfixed32(), target);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->optional_sfixed64(), target);
  }

  // float optional_float = 11;
  if (this->optional_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->optional_float(), target);
  }

  // double optional_double = 12;
  if (this->optional_double() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->optional_double(), target);
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->optional_bool(), target);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), static_cast<int>(this->optional_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->optional_string(), target);
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->optional_bytes(), target);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_optional_nested_message(), deterministic, target);
  }

  // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_optional_foreign_message(), deterministic, target);
  }

  // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->optional_nested_enum(), target);
  }

  // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->optional_foreign_enum(), target);
  }

  // string optional_cord = 25;
  if (this->optional_cord().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_cord().data(), static_cast<int>(this->optional_cord().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.optional_cord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->optional_cord(), target);
  }

  // repeated int32 repeated_int32 = 31;
  if (this->repeated_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      31,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_int32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->repeated_int32_, target);
  }

  // repeated int64 repeated_int64 = 32;
  if (this->repeated_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      32,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_int64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->repeated_int64_, target);
  }

  // repeated uint32 repeated_uint32 = 33;
  if (this->repeated_uint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      33,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_uint32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->repeated_uint32_, target);
  }

  // repeated uint64 repeated_uint64 = 34;
  if (this->repeated_uint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      34,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_uint64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->repeated_uint64_, target);
  }

  // repeated sint32 repeated_sint32 = 35;
  if (this->repeated_sint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      35,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_sint32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->repeated_sint32_, target);
  }

  // repeated sint64 repeated_sint64 = 36;
  if (this->repeated_sint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      36,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_sint64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->repeated_sint64_, target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  if (this->repeated_fixed32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      37,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_fixed32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->repeated_fixed32_, target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  if (this->repeated_fixed64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      38,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_fixed64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->repeated_fixed64_, target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  if (this->repeated_sfixed32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      39,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_sfixed32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->repeated_sfixed32_, target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  if (this->repeated_sfixed64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      40,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_sfixed64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64NoTagToArray(this->repeated_sfixed64_, target);
  }

  // repeated float repeated_float = 41;
  if (this->repeated_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      41,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_float_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->repeated_float_, target);
  }

  // repeated double repeated_double = 42;
  if (this->repeated_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      42,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_double_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->repeated_double_, target);
  }

  // repeated bool repeated_bool = 43;
  if (this->repeated_bool_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      43,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_bool_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->repeated_bool_, target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), static_cast<int>(this->repeated_string(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(44, this->repeated_string(i), target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(45, this->repeated_bytes(i), target);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_nested_message_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, this->repeated_nested_message(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  if (this->repeated_nested_enum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _repeated_nested_enum_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->repeated_nested_enum_, target);
  }

  // repeated string repeated_cord = 55;
  for (int i = 0, n = this->repeated_cord_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_cord(i).data(), static_cast<int>(this->repeated_cord(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.repeated_cord");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(55, this->repeated_cord(i), target);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
  if (!this->map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToMessageEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapStringToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       58, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapStringToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_string_to_message().begin();
          it != this->map_string_to_message().end(); ++it) {
        entry.reset(map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       58, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
  if (!this->map_int32_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->map_int32_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int32_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapInt32ToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       59, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapInt32ToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int32_to_message().begin();
          it != this->map_int32_to_message().end(); ++it) {
        entry.reset(map_int32_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       59, *entry, deterministic, target);
;
      }
    }
  }

  // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
  if (!this->map_int64_to_message().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->map_int64_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int64_to_message().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapInt64ToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       60, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapInt64ToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_int64_to_message().begin();
          it != this->map_int64_to_message().end(); ++it) {
        entry.reset(map_int64_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       60, *entry, deterministic, target);
;
      }
    }
  }

  // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
  if (!this->map_bool_to_message().empty()) {
    typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->map_bool_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_bool_to_message().size()]);
      typedef ::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapBoolToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapBoolToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->map_bool_to_message().begin();
          it != this->map_bool_to_message().end(); ++it) {
        entry.reset(map_bool_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
      }
    }
  }

  // map<string, int64> map_string_to_int64 = 62;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (deterministic &&
        this->map_string_to_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_to_string = 63;
  if (!this->map_int64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.MapInt64ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->map_int64_to_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_MapInt64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_MapInt64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_to_string().begin();
          it != this->map_int64_to_string().end(); ++it) {
        entry.reset(map_int64_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated int64 packed_repeated_int64 = 64 [packed = true];
  if (this->packed_repeated_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      64,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _packed_repeated_int64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->packed_repeated_int64_, target);
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
  if (!this->another_map_string_to_message().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.TestAllTypes.AnotherMapStringToMessageEntry.key");
      }
    };

    if (deterministic &&
        this->another_map_string_to_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->another_map_string_to_message().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
          it = this->another_map_string_to_message().begin();
          it != this->another_map_string_to_message().end(); ++it) {
        entry.reset(another_map_string_to_message_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
  if (has_oneof_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->oneof_enum(), target);
  }

  // uint32 oneof_uint32 = 111;
  if (has_oneof_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(111, this->oneof_uint32(), target);
  }

  // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
  if (has_oneof_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        112, this->_internal_oneof_nested_message(), deterministic, target);
  }

  // string oneof_string = 113;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), static_cast<int>(this->oneof_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.test.TestAllTypes.oneof_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        113, this->oneof_string(), target);
  }

  // bytes oneof_bytes = 114;
  if (has_oneof_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        114, this->oneof_bytes(), target);
  }

  // uint64 optional_uint64 = 999;
  if (this->optional_uint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(999, this->optional_uint64(), target);
  }

  // int32 optional_int32 = 1000;
  if (this->optional_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1000, this->optional_int32(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestAllTypes)
  return target;
}

size_t TestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestAllTypes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sint32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sint64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_fixed32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_fixed64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sfixed32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_sfixed64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_float_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_double_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_bool_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_string_size());
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_bytes_size());
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->repeated_bytes(i));
  }

  // repeated .tensorflow.test.TestAllTypes.NestedMessage repeated_nested_message = 48;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_nested_message_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->repeated_nested_message(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.test.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_nested_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_nested_enum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string repeated_cord = 55;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_cord_size());
  for (int i = 0, n = this->repeated_cord_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_cord(i));
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> map_string_to_message = 58;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_to_message_size());
  {
    ::std::unique_ptr<TestAllTypes_MapStringToMessageEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_string_to_message().begin();
        it != this->map_string_to_message().end(); ++it) {
      entry.reset(map_string_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.test.TestAllTypes.NestedMessage> map_int32_to_message = 59;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int32_to_message_size());
  {
    ::std::unique_ptr<TestAllTypes_MapInt32ToMessageEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_int32_to_message().begin();
        it != this->map_int32_to_message().end(); ++it) {
      entry.reset(map_int32_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, .tensorflow.test.TestAllTypes.NestedMessage> map_int64_to_message = 60;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int64_to_message_size());
  {
    ::std::unique_ptr<TestAllTypes_MapInt64ToMessageEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_int64_to_message().begin();
        it != this->map_int64_to_message().end(); ++it) {
      entry.reset(map_int64_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<bool, .tensorflow.test.TestAllTypes.NestedMessage> map_bool_to_message = 61;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_bool_to_message_size());
  {
    ::std::unique_ptr<TestAllTypes_MapBoolToMessageEntry_DoNotUse> entry;
    for (::google::protobuf::Map< bool, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->map_bool_to_message().begin();
        it != this->map_bool_to_message().end(); ++it) {
      entry.reset(map_bool_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int64> map_string_to_int64 = 62;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_to_int64_size());
  {
    ::std::unique_ptr<TestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->map_string_to_int64().begin();
        it != this->map_string_to_int64().end(); ++it) {
      entry.reset(map_string_to_int64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, string> map_int64_to_string = 63;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int64_to_string_size());
  {
    ::std::unique_ptr<TestAllTypes_MapInt64ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->map_int64_to_string().begin();
        it != this->map_int64_to_string().end(); ++it) {
      entry.reset(map_int64_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 packed_repeated_int64 = 64 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->packed_repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_repeated_int64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, .tensorflow.test.TestAllTypes.NestedMessage> another_map_string_to_message = 65;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->another_map_string_to_message_size());
  {
    ::std::unique_ptr<TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::test::TestAllTypes_NestedMessage >::const_iterator
        it = this->another_map_string_to_message().begin();
        it != this->another_map_string_to_message().end(); ++it) {
      entry.reset(another_map_string_to_message_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_string());
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->optional_bytes());
  }

  // string optional_cord = 25;
  if (this->optional_cord().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_cord());
  }

  // .tensorflow.test.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optional_nested_message_);
  }

  // .tensorflow.test.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optional_foreign_message_);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->optional_int64());
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optional_uint32());
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->optional_sint32());
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->optional_sint64());
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    total_size += 1 + 4;
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    total_size += 1 + 8;
  }

  // double optional_double = 12;
  if (this->optional_double() != 0) {
    total_size += 1 + 8;
  }

  // float optional_float = 11;
  if (this->optional_float() != 0) {
    total_size += 1 + 4;
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.test.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_nested_enum());
  }

  // .tensorflow.test.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_foreign_enum());
  }

  // int32 optional_int32 = 1000;
  if (this->optional_int32() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional_int32());
  }

  // uint64 optional_uint64 = 999;
  if (this->optional_uint64() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->optional_uint64());
  }

  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneof_uint32());
      break;
    }
    // .tensorflow.test.TestAllTypes.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oneof_bytes());
      break;
    }
    // .tensorflow.test.TestAllTypes.NestedEnum oneof_enum = 100;
    case kOneofEnum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestAllTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestAllTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestAllTypes)
    MergeFrom(*source);
  }
}

void TestAllTypes::MergeFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  map_string_to_message_.MergeFrom(from.map_string_to_message_);
  map_int32_to_message_.MergeFrom(from.map_int32_to_message_);
  map_int64_to_message_.MergeFrom(from.map_int64_to_message_);
  map_bool_to_message_.MergeFrom(from.map_bool_to_message_);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  map_int64_to_string_.MergeFrom(from.map_int64_to_string_);
  packed_repeated_int64_.MergeFrom(from.packed_repeated_int64_);
  another_map_string_to_message_.MergeFrom(from.another_map_string_to_message_);
  if (from.optional_string().size() > 0) {

    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  if (from.optional_bytes().size() > 0) {

    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  if (from.optional_cord().size() > 0) {

    optional_cord_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_cord_);
  }
  if (from.has_optional_nested_message()) {
    mutable_optional_nested_message()->::tensorflow::test::TestAllTypes_NestedMessage::MergeFrom(from.optional_nested_message());
  }
  if (from.has_optional_foreign_message()) {
    mutable_optional_foreign_message()->::tensorflow::test::ForeignMessage::MergeFrom(from.optional_foreign_message());
  }
  if (from.optional_int64() != 0) {
    set_optional_int64(from.optional_int64());
  }
  if (from.optional_uint32() != 0) {
    set_optional_uint32(from.optional_uint32());
  }
  if (from.optional_sint32() != 0) {
    set_optional_sint32(from.optional_sint32());
  }
  if (from.optional_sint64() != 0) {
    set_optional_sint64(from.optional_sint64());
  }
  if (from.optional_fixed64() != 0) {
    set_optional_fixed64(from.optional_fixed64());
  }
  if (from.optional_fixed32() != 0) {
    set_optional_fixed32(from.optional_fixed32());
  }
  if (from.optional_sfixed32() != 0) {
    set_optional_sfixed32(from.optional_sfixed32());
  }
  if (from.optional_sfixed64() != 0) {
    set_optional_sfixed64(from.optional_sfixed64());
  }
  if (from.optional_double() != 0) {
    set_optional_double(from.optional_double());
  }
  if (from.optional_float() != 0) {
    set_optional_float(from.optional_float());
  }
  if (from.optional_bool() != 0) {
    set_optional_bool(from.optional_bool());
  }
  if (from.optional_nested_enum() != 0) {
    set_optional_nested_enum(from.optional_nested_enum());
  }
  if (from.optional_foreign_enum() != 0) {
    set_optional_foreign_enum(from.optional_foreign_enum());
  }
  if (from.optional_int32() != 0) {
    set_optional_int32(from.optional_int32());
  }
  if (from.optional_uint64() != 0) {
    set_optional_uint64(from.optional_uint64());
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      mutable_oneof_nested_message()->::tensorflow::test::TestAllTypes_NestedMessage::MergeFrom(from.oneof_nested_message());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestAllTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes::CopyFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes::IsInitialized() const {
  return true;
}

void TestAllTypes::Swap(TestAllTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestAllTypes::InternalSwap(TestAllTypes* other) {
  using std::swap;
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(CastToBase(&other->repeated_string_));
  repeated_bytes_.InternalSwap(CastToBase(&other->repeated_bytes_));
  CastToBase(&repeated_nested_message_)->InternalSwap(CastToBase(&other->repeated_nested_message_));
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_cord_.InternalSwap(CastToBase(&other->repeated_cord_));
  map_string_to_message_.Swap(&other->map_string_to_message_);
  map_int32_to_message_.Swap(&other->map_int32_to_message_);
  map_int64_to_message_.Swap(&other->map_int64_to_message_);
  map_bool_to_message_.Swap(&other->map_bool_to_message_);
  map_string_to_int64_.Swap(&other->map_string_to_int64_);
  map_int64_to_string_.Swap(&other->map_int64_to_string_);
  packed_repeated_int64_.InternalSwap(&other->packed_repeated_int64_);
  another_map_string_to_message_.Swap(&other->another_map_string_to_message_);
  optional_string_.Swap(&other->optional_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_bytes_.Swap(&other->optional_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_cord_.Swap(&other->optional_cord_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optional_nested_message_, other->optional_nested_message_);
  swap(optional_foreign_message_, other->optional_foreign_message_);
  swap(optional_int64_, other->optional_int64_);
  swap(optional_uint32_, other->optional_uint32_);
  swap(optional_sint32_, other->optional_sint32_);
  swap(optional_sint64_, other->optional_sint64_);
  swap(optional_fixed64_, other->optional_fixed64_);
  swap(optional_fixed32_, other->optional_fixed32_);
  swap(optional_sfixed32_, other->optional_sfixed32_);
  swap(optional_sfixed64_, other->optional_sfixed64_);
  swap(optional_double_, other->optional_double_);
  swap(optional_float_, other->optional_float_);
  swap(optional_bool_, other->optional_bool_);
  swap(optional_nested_enum_, other->optional_nested_enum_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
  swap(optional_int32_, other->optional_int32_);
  swap(optional_uint64_, other->optional_uint64_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestAllTypes::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse() {}
NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::MergeFrom(const NestedTestAllTypes_MapStringToInt64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[10];
}
void NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void NestedTestAllTypes::InitAsDefaultInstance() {
  ::tensorflow::test::_NestedTestAllTypes_default_instance_._instance.get_mutable()->child_ = const_cast< ::tensorflow::test::NestedTestAllTypes*>(
      ::tensorflow::test::NestedTestAllTypes::internal_default_instance());
  ::tensorflow::test::_NestedTestAllTypes_default_instance_._instance.get_mutable()->payload_ = const_cast< ::tensorflow::test::TestAllTypes*>(
      ::tensorflow::test::TestAllTypes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NestedTestAllTypes::kChildFieldNumber;
const int NestedTestAllTypes::kPayloadFieldNumber;
const int NestedTestAllTypes::kMapStringToInt64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NestedTestAllTypes::NestedTestAllTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_NestedTestAllTypes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(const NestedTestAllTypes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  if (from.has_child()) {
    child_ = new ::tensorflow::test::NestedTestAllTypes(*from.child_);
  } else {
    child_ = NULL;
  }
  if (from.has_payload()) {
    payload_ = new ::tensorflow::test::TestAllTypes(*from.payload_);
  } else {
    payload_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.NestedTestAllTypes)
}

void NestedTestAllTypes::SharedCtor() {
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_) -
      reinterpret_cast<char*>(&child_)) + sizeof(payload_));
}

NestedTestAllTypes::~NestedTestAllTypes() {
  // @@protoc_insertion_point(destructor:tensorflow.test.NestedTestAllTypes)
  SharedDtor();
}

void NestedTestAllTypes::SharedDtor() {
  if (this != internal_default_instance()) delete child_;
  if (this != internal_default_instance()) delete payload_;
}

void NestedTestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NestedTestAllTypes::descriptor() {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NestedTestAllTypes& NestedTestAllTypes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_NestedTestAllTypes.base);
  return *internal_default_instance();
}


void NestedTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.NestedTestAllTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_string_to_int64_.Clear();
  if (GetArenaNoVirtual() == NULL && child_ != NULL) {
    delete child_;
  }
  child_ = NULL;
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
  _internal_metadata_.Clear();
}

bool NestedTestAllTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.NestedTestAllTypes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.test.NestedTestAllTypes child = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.test.TestAllTypes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> map_string_to_int64 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          NestedTestAllTypes_MapStringToInt64Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NestedTestAllTypes_MapStringToInt64Entry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&map_string_to_int64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.test.NestedTestAllTypes.MapStringToInt64Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.NestedTestAllTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.NestedTestAllTypes)
  return false;
#undef DO_
}

void NestedTestAllTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.NestedTestAllTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.test.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_child(), output);
  }

  // .tensorflow.test.TestAllTypes payload = 2;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_payload(), output);
  }

  // map<string, int64> map_string_to_int64 = 3;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.NestedTestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_to_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NestedTestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NestedTestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.test.NestedTestAllTypes)
}

::google::protobuf::uint8* NestedTestAllTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.NestedTestAllTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.test.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_child(), deterministic, target);
  }

  // .tensorflow.test.TestAllTypes payload = 2;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_payload(), deterministic, target);
  }

  // map<string, int64> map_string_to_int64 = 3;
  if (!this->map_string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.test.NestedTestAllTypes.MapStringToInt64Entry.key");
      }
    };

    if (deterministic &&
        this->map_string_to_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NestedTestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NestedTestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->map_string_to_int64().begin();
          it != this->map_string_to_int64().end(); ++it) {
        entry.reset(map_string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.NestedTestAllTypes)
  return target;
}

size_t NestedTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.NestedTestAllTypes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, int64> map_string_to_int64 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_string_to_int64_size());
  {
    ::std::unique_ptr<NestedTestAllTypes_MapStringToInt64Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->map_string_to_int64().begin();
        it != this->map_string_to_int64().end(); ++it) {
      entry.reset(map_string_to_int64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .tensorflow.test.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // .tensorflow.test.TestAllTypes payload = 2;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedTestAllTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedTestAllTypes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NestedTestAllTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.NestedTestAllTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.NestedTestAllTypes)
    MergeFrom(*source);
  }
}

void NestedTestAllTypes::MergeFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_string_to_int64_.MergeFrom(from.map_string_to_int64_);
  if (from.has_child()) {
    mutable_child()->::tensorflow::test::NestedTestAllTypes::MergeFrom(from.child());
  }
  if (from.has_payload()) {
    mutable_payload()->::tensorflow::test::TestAllTypes::MergeFrom(from.payload());
  }
}

void NestedTestAllTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedTestAllTypes::CopyFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestAllTypes::IsInitialized() const {
  return true;
}

void NestedTestAllTypes::Swap(NestedTestAllTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NestedTestAllTypes::InternalSwap(NestedTestAllTypes* other) {
  using std::swap;
  map_string_to_int64_.Swap(&other->map_string_to_int64_);
  swap(child_, other->child_);
  swap(payload_, other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NestedTestAllTypes::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ForeignMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForeignMessage::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForeignMessage::ForeignMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_ForeignMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.ForeignMessage)
}
ForeignMessage::ForeignMessage(const ForeignMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.ForeignMessage)
}

void ForeignMessage::SharedCtor() {
  c_ = 0;
}

ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.ForeignMessage)
  SharedDtor();
}

void ForeignMessage::SharedDtor() {
}

void ForeignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ForeignMessage::descriptor() {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForeignMessage& ForeignMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_ForeignMessage.base);
  return *internal_default_instance();
}


void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.ForeignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _internal_metadata_.Clear();
}

bool ForeignMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.ForeignMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 c = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.ForeignMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.ForeignMessage)
  return false;
#undef DO_
}

void ForeignMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.ForeignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 c = 1;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.test.ForeignMessage)
}

::google::protobuf::uint8* ForeignMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.ForeignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 c = 1;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.ForeignMessage)
  return target;
}

size_t ForeignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.ForeignMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 c = 1;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ForeignMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForeignMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.ForeignMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.ForeignMessage)
    MergeFrom(*source);
  }
}

void ForeignMessage::MergeFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.c() != 0) {
    set_c(from.c());
  }
}

void ForeignMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessage::IsInitialized() const {
  return true;
}

void ForeignMessage::Swap(ForeignMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForeignMessage::InternalSwap(ForeignMessage* other) {
  using std::swap;
  swap(c_, other->c_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ForeignMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestEmptyMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestEmptyMessage::TestEmptyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestEmptyMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.test.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(const TestEmptyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.test.TestEmptyMessage)
}

void TestEmptyMessage::SharedCtor() {
}

TestEmptyMessage::~TestEmptyMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.test.TestEmptyMessage)
  SharedDtor();
}

void TestEmptyMessage::SharedDtor() {
}

void TestEmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestEmptyMessage::descriptor() {
  ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestEmptyMessage& TestEmptyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::scc_info_TestEmptyMessage.base);
  return *internal_default_instance();
}


void TestEmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.test.TestEmptyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TestEmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.test.TestEmptyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.test.TestEmptyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.test.TestEmptyMessage)
  return false;
#undef DO_
}

void TestEmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.test.TestEmptyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.test.TestEmptyMessage)
}

::google::protobuf::uint8* TestEmptyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.test.TestEmptyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.test.TestEmptyMessage)
  return target;
}

size_t TestEmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.test.TestEmptyMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.test.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEmptyMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestEmptyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.test.TestEmptyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.test.TestEmptyMessage)
    MergeFrom(*source);
  }
}

void TestEmptyMessage::MergeFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.test.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestEmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.test.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEmptyMessage::CopyFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.test.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessage::IsInitialized() const {
  return true;
}

void TestEmptyMessage::Swap(TestEmptyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestEmptyMessage::InternalSwap(TestEmptyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestEmptyMessage::GetMetadata() const {
  protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2ftools_2fproto_5ftext_2ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_NestedMessage_DoubleNestedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_NestedMessage* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_NestedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_NestedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_MapStringToMessageEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_MapInt32ToMessageEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_MapInt64ToMessageEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_MapBoolToMessageEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_MapStringToInt64Entry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_MapInt64ToStringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes_AnotherMapStringToMessageEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestAllTypes* Arena::CreateMaybeMessage< ::tensorflow::test::TestAllTypes >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestAllTypes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::NestedTestAllTypes_MapStringToInt64Entry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::NestedTestAllTypes* Arena::CreateMaybeMessage< ::tensorflow::test::NestedTestAllTypes >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::NestedTestAllTypes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::ForeignMessage* Arena::CreateMaybeMessage< ::tensorflow::test::ForeignMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::ForeignMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::test::TestEmptyMessage* Arena::CreateMaybeMessage< ::tensorflow::test::TestEmptyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::test::TestEmptyMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
