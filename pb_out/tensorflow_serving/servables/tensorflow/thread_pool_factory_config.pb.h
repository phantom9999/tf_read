// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/servables/tensorflow/thread_pool_factory_config.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto
#define PROTOBUF_INCLUDED_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto 

namespace protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto
namespace tensorflow {
namespace serving {
class ThreadPoolFactoryConfig;
class ThreadPoolFactoryConfigDefaultTypeInternal;
extern ThreadPoolFactoryConfigDefaultTypeInternal _ThreadPoolFactoryConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::serving::ThreadPoolFactoryConfig* Arena::CreateMaybeMessage<::tensorflow::serving::ThreadPoolFactoryConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace serving {

// ===================================================================

class ThreadPoolFactoryConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ThreadPoolFactoryConfig) */ {
 public:
  ThreadPoolFactoryConfig();
  virtual ~ThreadPoolFactoryConfig();

  ThreadPoolFactoryConfig(const ThreadPoolFactoryConfig& from);

  inline ThreadPoolFactoryConfig& operator=(const ThreadPoolFactoryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreadPoolFactoryConfig(ThreadPoolFactoryConfig&& from) noexcept
    : ThreadPoolFactoryConfig() {
    *this = ::std::move(from);
  }

  inline ThreadPoolFactoryConfig& operator=(ThreadPoolFactoryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadPoolFactoryConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadPoolFactoryConfig* internal_default_instance() {
    return reinterpret_cast<const ThreadPoolFactoryConfig*>(
               &_ThreadPoolFactoryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ThreadPoolFactoryConfig* other);
  void Swap(ThreadPoolFactoryConfig* other);
  friend void swap(ThreadPoolFactoryConfig& a, ThreadPoolFactoryConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreadPoolFactoryConfig* New() const final {
    return CreateMaybeMessage<ThreadPoolFactoryConfig>(NULL);
  }

  ThreadPoolFactoryConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThreadPoolFactoryConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThreadPoolFactoryConfig& from);
  void MergeFrom(const ThreadPoolFactoryConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadPoolFactoryConfig* other);
  protected:
  explicit ThreadPoolFactoryConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any thread_pool_factory_config = 1;
  bool has_thread_pool_factory_config() const;
  void clear_thread_pool_factory_config();
  static const int kThreadPoolFactoryConfigFieldNumber = 1;
  private:
  const ::google::protobuf::Any& _internal_thread_pool_factory_config() const;
  public:
  const ::google::protobuf::Any& thread_pool_factory_config() const;
  ::google::protobuf::Any* release_thread_pool_factory_config();
  ::google::protobuf::Any* mutable_thread_pool_factory_config();
  void set_allocated_thread_pool_factory_config(::google::protobuf::Any* thread_pool_factory_config);
  void unsafe_arena_set_allocated_thread_pool_factory_config(
      ::google::protobuf::Any* thread_pool_factory_config);
  ::google::protobuf::Any* unsafe_arena_release_thread_pool_factory_config();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ThreadPoolFactoryConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Any* thread_pool_factory_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThreadPoolFactoryConfig

// .google.protobuf.Any thread_pool_factory_config = 1;
inline bool ThreadPoolFactoryConfig::has_thread_pool_factory_config() const {
  return this != internal_default_instance() && thread_pool_factory_config_ != NULL;
}
inline const ::google::protobuf::Any& ThreadPoolFactoryConfig::_internal_thread_pool_factory_config() const {
  return *thread_pool_factory_config_;
}
inline const ::google::protobuf::Any& ThreadPoolFactoryConfig::thread_pool_factory_config() const {
  const ::google::protobuf::Any* p = thread_pool_factory_config_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ThreadPoolFactoryConfig.thread_pool_factory_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* ThreadPoolFactoryConfig::release_thread_pool_factory_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ThreadPoolFactoryConfig.thread_pool_factory_config)
  
  ::google::protobuf::Any* temp = thread_pool_factory_config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  thread_pool_factory_config_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* ThreadPoolFactoryConfig::unsafe_arena_release_thread_pool_factory_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ThreadPoolFactoryConfig.thread_pool_factory_config)
  
  ::google::protobuf::Any* temp = thread_pool_factory_config_;
  thread_pool_factory_config_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* ThreadPoolFactoryConfig::mutable_thread_pool_factory_config() {
  
  if (thread_pool_factory_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    thread_pool_factory_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ThreadPoolFactoryConfig.thread_pool_factory_config)
  return thread_pool_factory_config_;
}
inline void ThreadPoolFactoryConfig::set_allocated_thread_pool_factory_config(::google::protobuf::Any* thread_pool_factory_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(thread_pool_factory_config_);
  }
  if (thread_pool_factory_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      thread_pool_factory_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, thread_pool_factory_config, submessage_arena);
    }
    
  } else {
    
  }
  thread_pool_factory_config_ = thread_pool_factory_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ThreadPoolFactoryConfig.thread_pool_factory_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_5fserving_2fservables_2ftensorflow_2fthread_5fpool_5ffactory_5fconfig_2eproto
