// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/tools/evaluation/proto/preprocessing_steps.proto

#include "tensorflow/lite/tools/evaluation/proto/preprocessing_steps.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImageSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NormalizationParams_PerChannelMeanValues;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CroppingParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NormalizationParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PaddingParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResizingParams;
}  // namespace protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto
namespace tflite {
namespace evaluation {
class ImagePreprocessingStepParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImagePreprocessingStepParams>
      _instance;
  const ::tflite::evaluation::CroppingParams* cropping_params_;
  const ::tflite::evaluation::ResizingParams* resizing_params_;
  const ::tflite::evaluation::PaddingParams* padding_params_;
  const ::tflite::evaluation::NormalizationParams* normalization_params_;
} _ImagePreprocessingStepParams_default_instance_;
class ImageSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageSize>
      _instance;
} _ImageSize_default_instance_;
class CroppingParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CroppingParams>
      _instance;
  float cropping_fraction_;
  const ::tflite::evaluation::ImageSize* target_size_;
} _CroppingParams_default_instance_;
class ResizingParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResizingParams>
      _instance;
} _ResizingParams_default_instance_;
class PaddingParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PaddingParams>
      _instance;
  const ::tflite::evaluation::ImageSize* target_size_;
  bool square_padding_;
} _PaddingParams_default_instance_;
class NormalizationParams_PerChannelMeanValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalizationParams_PerChannelMeanValues>
      _instance;
} _NormalizationParams_PerChannelMeanValues_default_instance_;
class NormalizationParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalizationParams>
      _instance;
  float channelwise_mean_;
  const ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* means_;
} _NormalizationParams_default_instance_;
}  // namespace evaluation
}  // namespace tflite
namespace protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto {
static void InitDefaultsImagePreprocessingStepParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ImagePreprocessingStepParams_default_instance_;
    new (ptr) ::tflite::evaluation::ImagePreprocessingStepParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ImagePreprocessingStepParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ImagePreprocessingStepParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsImagePreprocessingStepParams}, {
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_CroppingParams.base,
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ResizingParams.base,
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_PaddingParams.base,
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams.base,}};

static void InitDefaultsImageSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ImageSize_default_instance_;
    new (ptr) ::tflite::evaluation::ImageSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ImageSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ImageSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImageSize}, {}};

static void InitDefaultsCroppingParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_CroppingParams_default_instance_;
    new (ptr) ::tflite::evaluation::CroppingParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::CroppingParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CroppingParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCroppingParams}, {
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImageSize.base,}};

static void InitDefaultsResizingParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ResizingParams_default_instance_;
    new (ptr) ::tflite::evaluation::ResizingParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ResizingParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResizingParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResizingParams}, {
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImageSize.base,}};

static void InitDefaultsPaddingParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_PaddingParams_default_instance_;
    new (ptr) ::tflite::evaluation::PaddingParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::PaddingParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PaddingParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPaddingParams}, {
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImageSize.base,}};

static void InitDefaultsNormalizationParams_PerChannelMeanValues() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_NormalizationParams_PerChannelMeanValues_default_instance_;
    new (ptr) ::tflite::evaluation::NormalizationParams_PerChannelMeanValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::NormalizationParams_PerChannelMeanValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NormalizationParams_PerChannelMeanValues =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNormalizationParams_PerChannelMeanValues}, {}};

static void InitDefaultsNormalizationParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_NormalizationParams_default_instance_;
    new (ptr) ::tflite::evaluation::NormalizationParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::NormalizationParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NormalizationParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNormalizationParams}, {
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams_PerChannelMeanValues.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ImagePreprocessingStepParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImageSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CroppingParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResizingParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PaddingParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalizationParams_PerChannelMeanValues.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalizationParams.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingStepParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingStepParams, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingStepParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tflite::evaluation::ImagePreprocessingStepParamsDefaultTypeInternal, cropping_params_),
  offsetof(::tflite::evaluation::ImagePreprocessingStepParamsDefaultTypeInternal, resizing_params_),
  offsetof(::tflite::evaluation::ImagePreprocessingStepParamsDefaultTypeInternal, padding_params_),
  offsetof(::tflite::evaluation::ImagePreprocessingStepParamsDefaultTypeInternal, normalization_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingStepParams, params_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImageSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImageSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImageSize, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ImageSize, height_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::CroppingParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::CroppingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::CroppingParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tflite::evaluation::CroppingParamsDefaultTypeInternal, cropping_fraction_),
  offsetof(::tflite::evaluation::CroppingParamsDefaultTypeInternal, target_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::CroppingParams, square_cropping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::CroppingParams, params_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ResizingParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ResizingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ResizingParams, target_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::ResizingParams, aspect_preserving_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::PaddingParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::PaddingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::PaddingParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tflite::evaluation::PaddingParamsDefaultTypeInternal, target_size_),
  offsetof(::tflite::evaluation::PaddingParamsDefaultTypeInternal, square_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::PaddingParams, padding_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::PaddingParams, params_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams_PerChannelMeanValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams_PerChannelMeanValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams_PerChannelMeanValues, r_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams_PerChannelMeanValues, g_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams_PerChannelMeanValues, b_mean_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tflite::evaluation::NormalizationParamsDefaultTypeInternal, channelwise_mean_),
  offsetof(::tflite::evaluation::NormalizationParamsDefaultTypeInternal, means_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tflite::evaluation::NormalizationParams, mean_),
  ~0u,
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::tflite::evaluation::ImagePreprocessingStepParams)},
  { 14, 21, sizeof(::tflite::evaluation::ImageSize)},
  { 23, 32, sizeof(::tflite::evaluation::CroppingParams)},
  { 35, 42, sizeof(::tflite::evaluation::ResizingParams)},
  { 44, 53, sizeof(::tflite::evaluation::PaddingParams)},
  { 56, 64, sizeof(::tflite::evaluation::NormalizationParams_PerChannelMeanValues)},
  { 67, 76, sizeof(::tflite::evaluation::NormalizationParams)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_ImagePreprocessingStepParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_ImageSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_CroppingParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_ResizingParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_PaddingParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_NormalizationParams_PerChannelMeanValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tflite::evaluation::_NormalizationParams_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/lite/tools/evaluation/proto/preprocessing_steps.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n@tensorflow/lite/tools/evaluation/proto"
      "/preprocessing_steps.proto\022\021tflite.evalu"
      "ation\"\250\002\n\034ImagePreprocessingStepParams\022<"
      "\n\017cropping_params\030\001 \001(\0132!.tflite.evaluat"
      "ion.CroppingParamsH\000\022<\n\017resizing_params\030"
      "\002 \001(\0132!.tflite.evaluation.ResizingParams"
      "H\000\022:\n\016padding_params\030\003 \001(\0132 .tflite.eval"
      "uation.PaddingParamsH\000\022F\n\024normalization_"
      "params\030\004 \001(\0132&.tflite.evaluation.Normali"
      "zationParamsH\000B\010\n\006params\"*\n\tImageSize\022\r\n"
      "\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\"\214\001\n\016Croppin"
      "gParams\022\"\n\021cropping_fraction\030\001 \001(\002:\0050.87"
      "5H\000\0223\n\013target_size\030\002 \001(\0132\034.tflite.evalua"
      "tion.ImageSizeH\000\022\027\n\017square_cropping\030\003 \001("
      "\010B\010\n\006params\"^\n\016ResizingParams\0221\n\013target_"
      "size\030\001 \002(\0132\034.tflite.evaluation.ImageSize"
      "\022\031\n\021aspect_preserving\030\002 \002(\010\"\177\n\rPaddingPa"
      "rams\0223\n\013target_size\030\001 \001(\0132\034.tflite.evalu"
      "ation.ImageSizeH\000\022\030\n\016square_padding\030\002 \001("
      "\010H\000\022\025\n\rpadding_value\030\003 \002(\005B\010\n\006params\"\341\001\n"
      "\023NormalizationParams\022\032\n\020channelwise_mean"
      "\030\001 \001(\002H\000\022L\n\005means\030\002 \001(\0132;.tflite.evaluat"
      "ion.NormalizationParams.PerChannelMeanVa"
      "luesH\000\022\020\n\005scale\030\003 \002(\002:\0011\032F\n\024PerChannelMe"
      "anValues\022\016\n\006r_mean\030\001 \002(\002\022\016\n\006g_mean\030\002 \002(\002"
      "\022\016\n\006b_mean\030\003 \002(\002B\006\n\004meanB\030\n\021tflite.evalu"
      "ationP\001\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1050);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/lite/tools/evaluation/proto/preprocessing_steps.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto
namespace tflite {
namespace evaluation {

// ===================================================================

void ImagePreprocessingStepParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_ImagePreprocessingStepParams_default_instance_.cropping_params_ = const_cast< ::tflite::evaluation::CroppingParams*>(
      ::tflite::evaluation::CroppingParams::internal_default_instance());
  ::tflite::evaluation::_ImagePreprocessingStepParams_default_instance_.resizing_params_ = const_cast< ::tflite::evaluation::ResizingParams*>(
      ::tflite::evaluation::ResizingParams::internal_default_instance());
  ::tflite::evaluation::_ImagePreprocessingStepParams_default_instance_.padding_params_ = const_cast< ::tflite::evaluation::PaddingParams*>(
      ::tflite::evaluation::PaddingParams::internal_default_instance());
  ::tflite::evaluation::_ImagePreprocessingStepParams_default_instance_.normalization_params_ = const_cast< ::tflite::evaluation::NormalizationParams*>(
      ::tflite::evaluation::NormalizationParams::internal_default_instance());
}
void ImagePreprocessingStepParams::set_allocated_cropping_params(::tflite::evaluation::CroppingParams* cropping_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (cropping_params) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(cropping_params);
    if (message_arena != submessage_arena) {
      cropping_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cropping_params, submessage_arena);
    }
    set_has_cropping_params();
    params_.cropping_params_ = cropping_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.cropping_params)
}
void ImagePreprocessingStepParams::set_allocated_resizing_params(::tflite::evaluation::ResizingParams* resizing_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (resizing_params) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resizing_params);
    if (message_arena != submessage_arena) {
      resizing_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resizing_params, submessage_arena);
    }
    set_has_resizing_params();
    params_.resizing_params_ = resizing_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.resizing_params)
}
void ImagePreprocessingStepParams::set_allocated_padding_params(::tflite::evaluation::PaddingParams* padding_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (padding_params) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(padding_params);
    if (message_arena != submessage_arena) {
      padding_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, padding_params, submessage_arena);
    }
    set_has_padding_params();
    params_.padding_params_ = padding_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.padding_params)
}
void ImagePreprocessingStepParams::set_allocated_normalization_params(::tflite::evaluation::NormalizationParams* normalization_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (normalization_params) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(normalization_params);
    if (message_arena != submessage_arena) {
      normalization_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normalization_params, submessage_arena);
    }
    set_has_normalization_params();
    params_.normalization_params_ = normalization_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.normalization_params)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImagePreprocessingStepParams::kCroppingParamsFieldNumber;
const int ImagePreprocessingStepParams::kResizingParamsFieldNumber;
const int ImagePreprocessingStepParams::kPaddingParamsFieldNumber;
const int ImagePreprocessingStepParams::kNormalizationParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImagePreprocessingStepParams::ImagePreprocessingStepParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImagePreprocessingStepParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ImagePreprocessingStepParams)
}
ImagePreprocessingStepParams::ImagePreprocessingStepParams(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImagePreprocessingStepParams.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ImagePreprocessingStepParams)
}
ImagePreprocessingStepParams::ImagePreprocessingStepParams(const ImagePreprocessingStepParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_params();
  switch (from.params_case()) {
    case kCroppingParams: {
      mutable_cropping_params()->::tflite::evaluation::CroppingParams::MergeFrom(from.cropping_params());
      break;
    }
    case kResizingParams: {
      mutable_resizing_params()->::tflite::evaluation::ResizingParams::MergeFrom(from.resizing_params());
      break;
    }
    case kPaddingParams: {
      mutable_padding_params()->::tflite::evaluation::PaddingParams::MergeFrom(from.padding_params());
      break;
    }
    case kNormalizationParams: {
      mutable_normalization_params()->::tflite::evaluation::NormalizationParams::MergeFrom(from.normalization_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ImagePreprocessingStepParams)
}

void ImagePreprocessingStepParams::SharedCtor() {
  clear_has_params();
}

ImagePreprocessingStepParams::~ImagePreprocessingStepParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ImagePreprocessingStepParams)
  SharedDtor();
}

void ImagePreprocessingStepParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_params()) {
    clear_params();
  }
}

void ImagePreprocessingStepParams::ArenaDtor(void* object) {
  ImagePreprocessingStepParams* _this = reinterpret_cast< ImagePreprocessingStepParams* >(object);
  (void)_this;
}
void ImagePreprocessingStepParams::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImagePreprocessingStepParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImagePreprocessingStepParams::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImagePreprocessingStepParams& ImagePreprocessingStepParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImagePreprocessingStepParams.base);
  return *internal_default_instance();
}


void ImagePreprocessingStepParams::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:tflite.evaluation.ImagePreprocessingStepParams)
  switch (params_case()) {
    case kCroppingParams: {
      if (GetArenaNoVirtual() == NULL) {
        delete params_.cropping_params_;
      }
      break;
    }
    case kResizingParams: {
      if (GetArenaNoVirtual() == NULL) {
        delete params_.resizing_params_;
      }
      break;
    }
    case kPaddingParams: {
      if (GetArenaNoVirtual() == NULL) {
        delete params_.padding_params_;
      }
      break;
    }
    case kNormalizationParams: {
      if (GetArenaNoVirtual() == NULL) {
        delete params_.normalization_params_;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void ImagePreprocessingStepParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ImagePreprocessingStepParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_params();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImagePreprocessingStepParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ImagePreprocessingStepParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.CroppingParams cropping_params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cropping_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ResizingParams resizing_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resizing_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.PaddingParams padding_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_padding_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.NormalizationParams normalization_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normalization_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ImagePreprocessingStepParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ImagePreprocessingStepParams)
  return false;
#undef DO_
}

void ImagePreprocessingStepParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ImagePreprocessingStepParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kCroppingParams:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_cropping_params(), output);
      break;
    case kResizingParams:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_resizing_params(), output);
      break;
    case kPaddingParams:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_padding_params(), output);
      break;
    case kNormalizationParams:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_normalization_params(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ImagePreprocessingStepParams)
}

::google::protobuf::uint8* ImagePreprocessingStepParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ImagePreprocessingStepParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kCroppingParams:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_cropping_params(), deterministic, target);
      break;
    case kResizingParams:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_resizing_params(), deterministic, target);
      break;
    case kPaddingParams:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_padding_params(), deterministic, target);
      break;
    case kNormalizationParams:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_normalization_params(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ImagePreprocessingStepParams)
  return target;
}

size_t ImagePreprocessingStepParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ImagePreprocessingStepParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (params_case()) {
    // optional .tflite.evaluation.CroppingParams cropping_params = 1;
    case kCroppingParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_.cropping_params_);
      break;
    }
    // optional .tflite.evaluation.ResizingParams resizing_params = 2;
    case kResizingParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_.resizing_params_);
      break;
    }
    // optional .tflite.evaluation.PaddingParams padding_params = 3;
    case kPaddingParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_.padding_params_);
      break;
    }
    // optional .tflite.evaluation.NormalizationParams normalization_params = 4;
    case kNormalizationParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_.normalization_params_);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImagePreprocessingStepParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ImagePreprocessingStepParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagePreprocessingStepParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImagePreprocessingStepParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ImagePreprocessingStepParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ImagePreprocessingStepParams)
    MergeFrom(*source);
  }
}

void ImagePreprocessingStepParams::MergeFrom(const ImagePreprocessingStepParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ImagePreprocessingStepParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.params_case()) {
    case kCroppingParams: {
      mutable_cropping_params()->::tflite::evaluation::CroppingParams::MergeFrom(from.cropping_params());
      break;
    }
    case kResizingParams: {
      mutable_resizing_params()->::tflite::evaluation::ResizingParams::MergeFrom(from.resizing_params());
      break;
    }
    case kPaddingParams: {
      mutable_padding_params()->::tflite::evaluation::PaddingParams::MergeFrom(from.padding_params());
      break;
    }
    case kNormalizationParams: {
      mutable_normalization_params()->::tflite::evaluation::NormalizationParams::MergeFrom(from.normalization_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void ImagePreprocessingStepParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ImagePreprocessingStepParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePreprocessingStepParams::CopyFrom(const ImagePreprocessingStepParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ImagePreprocessingStepParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePreprocessingStepParams::IsInitialized() const {
  switch (params_case()) {
    case kCroppingParams: {
      if (has_cropping_params()) {
        if (!this->cropping_params().IsInitialized()) return false;
      }
      break;
    }
    case kResizingParams: {
      if (has_resizing_params()) {
        if (!this->resizing_params().IsInitialized()) return false;
      }
      break;
    }
    case kPaddingParams: {
      if (has_padding_params()) {
        if (!this->padding_params().IsInitialized()) return false;
      }
      break;
    }
    case kNormalizationParams: {
      if (has_normalization_params()) {
        if (!this->normalization_params().IsInitialized()) return false;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  return true;
}

void ImagePreprocessingStepParams::Swap(ImagePreprocessingStepParams* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImagePreprocessingStepParams* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ImagePreprocessingStepParams::UnsafeArenaSwap(ImagePreprocessingStepParams* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImagePreprocessingStepParams::InternalSwap(ImagePreprocessingStepParams* other) {
  using std::swap;
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImagePreprocessingStepParams::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSize::kWidthFieldNumber;
const int ImageSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSize::ImageSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImageSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ImageSize)
}
ImageSize::ImageSize(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImageSize.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ImageSize)
}
ImageSize::ImageSize(const ImageSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ImageSize)
}

void ImageSize::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ImageSize::~ImageSize() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ImageSize)
  SharedDtor();
}

void ImageSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ImageSize::ArenaDtor(void* object) {
  ImageSize* _this = reinterpret_cast< ImageSize* >(object);
  (void)_this;
}
void ImageSize::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImageSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImageSize::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageSize& ImageSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ImageSize.base);
  return *internal_default_instance();
}


void ImageSize::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ImageSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ImageSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ImageSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ImageSize)
  return false;
#undef DO_
}

void ImageSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ImageSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ImageSize)
}

::google::protobuf::uint8* ImageSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ImageSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ImageSize)
  return target;
}

size_t ImageSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tflite.evaluation.ImageSize)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t ImageSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ImageSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ImageSize)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ImageSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ImageSize)
    MergeFrom(*source);
  }
}

void ImageSize::MergeFrom(const ImageSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ImageSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ImageSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSize::CopyFrom(const ImageSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ImageSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ImageSize::Swap(ImageSize* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImageSize* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ImageSize::UnsafeArenaSwap(ImageSize* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImageSize::InternalSwap(ImageSize* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImageSize::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CroppingParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_CroppingParams_default_instance_.cropping_fraction_ = 0.875f;
  ::tflite::evaluation::_CroppingParams_default_instance_.target_size_ = const_cast< ::tflite::evaluation::ImageSize*>(
      ::tflite::evaluation::ImageSize::internal_default_instance());
}
void CroppingParams::set_allocated_target_size(::tflite::evaluation::ImageSize* target_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (target_size) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(target_size);
    if (message_arena != submessage_arena) {
      target_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_size, submessage_arena);
    }
    set_has_target_size();
    params_.target_size_ = target_size;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.CroppingParams.target_size)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CroppingParams::kCroppingFractionFieldNumber;
const int CroppingParams::kTargetSizeFieldNumber;
const int CroppingParams::kSquareCroppingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CroppingParams::CroppingParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_CroppingParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.CroppingParams)
}
CroppingParams::CroppingParams(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_CroppingParams.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.CroppingParams)
}
CroppingParams::CroppingParams(const CroppingParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  square_cropping_ = from.square_cropping_;
  clear_has_params();
  switch (from.params_case()) {
    case kCroppingFraction: {
      set_cropping_fraction(from.cropping_fraction());
      break;
    }
    case kTargetSize: {
      mutable_target_size()->::tflite::evaluation::ImageSize::MergeFrom(from.target_size());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.CroppingParams)
}

void CroppingParams::SharedCtor() {
  square_cropping_ = false;
  clear_has_params();
}

CroppingParams::~CroppingParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.CroppingParams)
  SharedDtor();
}

void CroppingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_params()) {
    clear_params();
  }
}

void CroppingParams::ArenaDtor(void* object) {
  CroppingParams* _this = reinterpret_cast< CroppingParams* >(object);
  (void)_this;
}
void CroppingParams::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CroppingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CroppingParams::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CroppingParams& CroppingParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_CroppingParams.base);
  return *internal_default_instance();
}


void CroppingParams::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:tflite.evaluation.CroppingParams)
  switch (params_case()) {
    case kCroppingFraction: {
      // No need to clear
      break;
    }
    case kTargetSize: {
      if (GetArenaNoVirtual() == NULL) {
        delete params_.target_size_;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void CroppingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.CroppingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  square_cropping_ = false;
  clear_params();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CroppingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.CroppingParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cropping_fraction = 1 [default = 0.875];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_params();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &params_.cropping_fraction_)));
          set_has_cropping_fraction();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ImageSize target_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool square_cropping = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_square_cropping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &square_cropping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.CroppingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.CroppingParams)
  return false;
#undef DO_
}

void CroppingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.CroppingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kCroppingFraction:
      ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cropping_fraction(), output);
      break;
    case kTargetSize:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_target_size(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool square_cropping = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->square_cropping(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.CroppingParams)
}

::google::protobuf::uint8* CroppingParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.CroppingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kCroppingFraction:
      target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cropping_fraction(), target);
      break;
    case kTargetSize:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_target_size(), deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool square_cropping = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->square_cropping(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.CroppingParams)
  return target;
}

size_t CroppingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.CroppingParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool square_cropping = 3;
  if (has_square_cropping()) {
    total_size += 1 + 1;
  }

  switch (params_case()) {
    // optional float cropping_fraction = 1 [default = 0.875];
    case kCroppingFraction: {
      total_size += 1 + 4;
      break;
    }
    // optional .tflite.evaluation.ImageSize target_size = 2;
    case kTargetSize: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_.target_size_);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CroppingParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.CroppingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const CroppingParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CroppingParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.CroppingParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.CroppingParams)
    MergeFrom(*source);
  }
}

void CroppingParams::MergeFrom(const CroppingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.CroppingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_square_cropping()) {
    set_square_cropping(from.square_cropping());
  }
  switch (from.params_case()) {
    case kCroppingFraction: {
      set_cropping_fraction(from.cropping_fraction());
      break;
    }
    case kTargetSize: {
      mutable_target_size()->::tflite::evaluation::ImageSize::MergeFrom(from.target_size());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void CroppingParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.CroppingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CroppingParams::CopyFrom(const CroppingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.CroppingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CroppingParams::IsInitialized() const {
  switch (params_case()) {
    case kCroppingFraction: {
      break;
    }
    case kTargetSize: {
      if (has_target_size()) {
        if (!this->target_size().IsInitialized()) return false;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  return true;
}

void CroppingParams::Swap(CroppingParams* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CroppingParams* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CroppingParams::UnsafeArenaSwap(CroppingParams* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CroppingParams::InternalSwap(CroppingParams* other) {
  using std::swap;
  swap(square_cropping_, other->square_cropping_);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CroppingParams::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResizingParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_ResizingParams_default_instance_._instance.get_mutable()->target_size_ = const_cast< ::tflite::evaluation::ImageSize*>(
      ::tflite::evaluation::ImageSize::internal_default_instance());
}
void ResizingParams::unsafe_arena_set_allocated_target_size(
    ::tflite::evaluation::ImageSize* target_size) {
  if (GetArenaNoVirtual() == NULL) {
    delete target_size_;
  }
  target_size_ = target_size;
  if (target_size) {
    set_has_target_size();
  } else {
    clear_has_target_size();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ResizingParams.target_size)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizingParams::kTargetSizeFieldNumber;
const int ResizingParams::kAspectPreservingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizingParams::ResizingParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ResizingParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ResizingParams)
}
ResizingParams::ResizingParams(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ResizingParams.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ResizingParams)
}
ResizingParams::ResizingParams(const ResizingParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_size()) {
    target_size_ = new ::tflite::evaluation::ImageSize(*from.target_size_);
  } else {
    target_size_ = NULL;
  }
  aspect_preserving_ = from.aspect_preserving_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ResizingParams)
}

void ResizingParams::SharedCtor() {
  ::memset(&target_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aspect_preserving_) -
      reinterpret_cast<char*>(&target_size_)) + sizeof(aspect_preserving_));
}

ResizingParams::~ResizingParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ResizingParams)
  SharedDtor();
}

void ResizingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete target_size_;
}

void ResizingParams::ArenaDtor(void* object) {
  ResizingParams* _this = reinterpret_cast< ResizingParams* >(object);
  (void)_this;
}
void ResizingParams::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ResizingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResizingParams::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResizingParams& ResizingParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_ResizingParams.base);
  return *internal_default_instance();
}


void ResizingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ResizingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_size_ != NULL);
    target_size_->Clear();
  }
  aspect_preserving_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResizingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ResizingParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tflite.evaluation.ImageSize target_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool aspect_preserving = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_aspect_preserving();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aspect_preserving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ResizingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ResizingParams)
  return false;
#undef DO_
}

void ResizingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ResizingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tflite.evaluation.ImageSize target_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_target_size(), output);
  }

  // required bool aspect_preserving = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->aspect_preserving(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ResizingParams)
}

::google::protobuf::uint8* ResizingParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ResizingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tflite.evaluation.ImageSize target_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_target_size(), deterministic, target);
  }

  // required bool aspect_preserving = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->aspect_preserving(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ResizingParams)
  return target;
}

size_t ResizingParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tflite.evaluation.ResizingParams)
  size_t total_size = 0;

  if (has_target_size()) {
    // required .tflite.evaluation.ImageSize target_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_size_);
  }

  if (has_aspect_preserving()) {
    // required bool aspect_preserving = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ResizingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ResizingParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .tflite.evaluation.ImageSize target_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_size_);

    // required bool aspect_preserving = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResizingParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ResizingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizingParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizingParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ResizingParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ResizingParams)
    MergeFrom(*source);
  }
}

void ResizingParams::MergeFrom(const ResizingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ResizingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_target_size()->::tflite::evaluation::ImageSize::MergeFrom(from.target_size());
    }
    if (cached_has_bits & 0x00000002u) {
      aspect_preserving_ = from.aspect_preserving_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizingParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ResizingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizingParams::CopyFrom(const ResizingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ResizingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizingParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_target_size()) {
    if (!this->target_size_->IsInitialized()) return false;
  }
  return true;
}

void ResizingParams::Swap(ResizingParams* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ResizingParams* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ResizingParams::UnsafeArenaSwap(ResizingParams* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ResizingParams::InternalSwap(ResizingParams* other) {
  using std::swap;
  swap(target_size_, other->target_size_);
  swap(aspect_preserving_, other->aspect_preserving_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResizingParams::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PaddingParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_PaddingParams_default_instance_.target_size_ = const_cast< ::tflite::evaluation::ImageSize*>(
      ::tflite::evaluation::ImageSize::internal_default_instance());
  ::tflite::evaluation::_PaddingParams_default_instance_.square_padding_ = false;
}
void PaddingParams::set_allocated_target_size(::tflite::evaluation::ImageSize* target_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (target_size) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(target_size);
    if (message_arena != submessage_arena) {
      target_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_size, submessage_arena);
    }
    set_has_target_size();
    params_.target_size_ = target_size;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.PaddingParams.target_size)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaddingParams::kTargetSizeFieldNumber;
const int PaddingParams::kSquarePaddingFieldNumber;
const int PaddingParams::kPaddingValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaddingParams::PaddingParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_PaddingParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.PaddingParams)
}
PaddingParams::PaddingParams(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_PaddingParams.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.PaddingParams)
}
PaddingParams::PaddingParams(const PaddingParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  padding_value_ = from.padding_value_;
  clear_has_params();
  switch (from.params_case()) {
    case kTargetSize: {
      mutable_target_size()->::tflite::evaluation::ImageSize::MergeFrom(from.target_size());
      break;
    }
    case kSquarePadding: {
      set_square_padding(from.square_padding());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.PaddingParams)
}

void PaddingParams::SharedCtor() {
  padding_value_ = 0;
  clear_has_params();
}

PaddingParams::~PaddingParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.PaddingParams)
  SharedDtor();
}

void PaddingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_params()) {
    clear_params();
  }
}

void PaddingParams::ArenaDtor(void* object) {
  PaddingParams* _this = reinterpret_cast< PaddingParams* >(object);
  (void)_this;
}
void PaddingParams::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PaddingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PaddingParams::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaddingParams& PaddingParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_PaddingParams.base);
  return *internal_default_instance();
}


void PaddingParams::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:tflite.evaluation.PaddingParams)
  switch (params_case()) {
    case kTargetSize: {
      if (GetArenaNoVirtual() == NULL) {
        delete params_.target_size_;
      }
      break;
    }
    case kSquarePadding: {
      // No need to clear
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void PaddingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.PaddingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  padding_value_ = 0;
  clear_params();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PaddingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.PaddingParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.ImageSize target_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool square_padding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_params();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &params_.square_padding_)));
          set_has_square_padding();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 padding_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_padding_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.PaddingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.PaddingParams)
  return false;
#undef DO_
}

void PaddingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.PaddingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kTargetSize:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_target_size(), output);
      break;
    case kSquarePadding:
      ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->square_padding(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required int32 padding_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->padding_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.PaddingParams)
}

::google::protobuf::uint8* PaddingParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.PaddingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kTargetSize:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_target_size(), deterministic, target);
      break;
    case kSquarePadding:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->square_padding(), target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required int32 padding_value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->padding_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.PaddingParams)
  return target;
}

size_t PaddingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.PaddingParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 padding_value = 3;
  if (has_padding_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->padding_value());
  }
  switch (params_case()) {
    // optional .tflite.evaluation.ImageSize target_size = 1;
    case kTargetSize: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_.target_size_);
      break;
    }
    // optional bool square_padding = 2;
    case kSquarePadding: {
      total_size += 1 + 1;
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaddingParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.PaddingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PaddingParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaddingParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.PaddingParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.PaddingParams)
    MergeFrom(*source);
  }
}

void PaddingParams::MergeFrom(const PaddingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.PaddingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_padding_value()) {
    set_padding_value(from.padding_value());
  }
  switch (from.params_case()) {
    case kTargetSize: {
      mutable_target_size()->::tflite::evaluation::ImageSize::MergeFrom(from.target_size());
      break;
    }
    case kSquarePadding: {
      set_square_padding(from.square_padding());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void PaddingParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.PaddingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingParams::CopyFrom(const PaddingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.PaddingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (params_case()) {
    case kTargetSize: {
      if (has_target_size()) {
        if (!this->target_size().IsInitialized()) return false;
      }
      break;
    }
    case kSquarePadding: {
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  return true;
}

void PaddingParams::Swap(PaddingParams* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PaddingParams* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PaddingParams::UnsafeArenaSwap(PaddingParams* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PaddingParams::InternalSwap(PaddingParams* other) {
  using std::swap;
  swap(padding_value_, other->padding_value_);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PaddingParams::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalizationParams_PerChannelMeanValues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizationParams_PerChannelMeanValues::kRMeanFieldNumber;
const int NormalizationParams_PerChannelMeanValues::kGMeanFieldNumber;
const int NormalizationParams_PerChannelMeanValues::kBMeanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizationParams_PerChannelMeanValues::NormalizationParams_PerChannelMeanValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams_PerChannelMeanValues.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
}
NormalizationParams_PerChannelMeanValues::NormalizationParams_PerChannelMeanValues(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams_PerChannelMeanValues.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
}
NormalizationParams_PerChannelMeanValues::NormalizationParams_PerChannelMeanValues(const NormalizationParams_PerChannelMeanValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_mean_, &from.r_mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_mean_) -
    reinterpret_cast<char*>(&r_mean_)) + sizeof(b_mean_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
}

void NormalizationParams_PerChannelMeanValues::SharedCtor() {
  ::memset(&r_mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_mean_) -
      reinterpret_cast<char*>(&r_mean_)) + sizeof(b_mean_));
}

NormalizationParams_PerChannelMeanValues::~NormalizationParams_PerChannelMeanValues() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  SharedDtor();
}

void NormalizationParams_PerChannelMeanValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void NormalizationParams_PerChannelMeanValues::ArenaDtor(void* object) {
  NormalizationParams_PerChannelMeanValues* _this = reinterpret_cast< NormalizationParams_PerChannelMeanValues* >(object);
  (void)_this;
}
void NormalizationParams_PerChannelMeanValues::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NormalizationParams_PerChannelMeanValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NormalizationParams_PerChannelMeanValues::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizationParams_PerChannelMeanValues& NormalizationParams_PerChannelMeanValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams_PerChannelMeanValues.base);
  return *internal_default_instance();
}


void NormalizationParams_PerChannelMeanValues::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&r_mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_mean_) -
        reinterpret_cast<char*>(&r_mean_)) + sizeof(b_mean_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizationParams_PerChannelMeanValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r_mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_r_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float g_mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_g_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float b_mean = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_b_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  return false;
#undef DO_
}

void NormalizationParams_PerChannelMeanValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float r_mean = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r_mean(), output);
  }

  // required float g_mean = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g_mean(), output);
  }

  // required float b_mean = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b_mean(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
}

::google::protobuf::uint8* NormalizationParams_PerChannelMeanValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float r_mean = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r_mean(), target);
  }

  // required float g_mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g_mean(), target);
  }

  // required float b_mean = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b_mean(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  return target;
}

size_t NormalizationParams_PerChannelMeanValues::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  size_t total_size = 0;

  if (has_r_mean()) {
    // required float r_mean = 1;
    total_size += 1 + 4;
  }

  if (has_g_mean()) {
    // required float g_mean = 2;
    total_size += 1 + 4;
  }

  if (has_b_mean()) {
    // required float b_mean = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t NormalizationParams_PerChannelMeanValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float r_mean = 1;
    total_size += 1 + 4;

    // required float g_mean = 2;
    total_size += 1 + 4;

    // required float b_mean = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizationParams_PerChannelMeanValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizationParams_PerChannelMeanValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizationParams_PerChannelMeanValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
    MergeFrom(*source);
  }
}

void NormalizationParams_PerChannelMeanValues::MergeFrom(const NormalizationParams_PerChannelMeanValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      r_mean_ = from.r_mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_mean_ = from.g_mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_mean_ = from.b_mean_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizationParams_PerChannelMeanValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizationParams_PerChannelMeanValues::CopyFrom(const NormalizationParams_PerChannelMeanValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizationParams_PerChannelMeanValues::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void NormalizationParams_PerChannelMeanValues::Swap(NormalizationParams_PerChannelMeanValues* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NormalizationParams_PerChannelMeanValues* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NormalizationParams_PerChannelMeanValues::UnsafeArenaSwap(NormalizationParams_PerChannelMeanValues* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NormalizationParams_PerChannelMeanValues::InternalSwap(NormalizationParams_PerChannelMeanValues* other) {
  using std::swap;
  swap(r_mean_, other->r_mean_);
  swap(g_mean_, other->g_mean_);
  swap(b_mean_, other->b_mean_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NormalizationParams_PerChannelMeanValues::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalizationParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_NormalizationParams_default_instance_.channelwise_mean_ = 0;
  ::tflite::evaluation::_NormalizationParams_default_instance_.means_ = const_cast< ::tflite::evaluation::NormalizationParams_PerChannelMeanValues*>(
      ::tflite::evaluation::NormalizationParams_PerChannelMeanValues::internal_default_instance());
}
void NormalizationParams::set_allocated_means(::tflite::evaluation::NormalizationParams_PerChannelMeanValues* means) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_mean();
  if (means) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(means);
    if (message_arena != submessage_arena) {
      means = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, means, submessage_arena);
    }
    set_has_means();
    mean_.means_ = means;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.NormalizationParams.means)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizationParams::kChannelwiseMeanFieldNumber;
const int NormalizationParams::kMeansFieldNumber;
const int NormalizationParams::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizationParams::NormalizationParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.NormalizationParams)
}
NormalizationParams::NormalizationParams(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.NormalizationParams)
}
NormalizationParams::NormalizationParams(const NormalizationParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scale_ = from.scale_;
  clear_has_mean();
  switch (from.mean_case()) {
    case kChannelwiseMean: {
      set_channelwise_mean(from.channelwise_mean());
      break;
    }
    case kMeans: {
      mutable_means()->::tflite::evaluation::NormalizationParams_PerChannelMeanValues::MergeFrom(from.means());
      break;
    }
    case MEAN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.NormalizationParams)
}

void NormalizationParams::SharedCtor() {
  scale_ = 1;
  clear_has_mean();
}

NormalizationParams::~NormalizationParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.NormalizationParams)
  SharedDtor();
}

void NormalizationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_mean()) {
    clear_mean();
  }
}

void NormalizationParams::ArenaDtor(void* object) {
  NormalizationParams* _this = reinterpret_cast< NormalizationParams* >(object);
  (void)_this;
}
void NormalizationParams::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NormalizationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NormalizationParams::descriptor() {
  ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizationParams& NormalizationParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::scc_info_NormalizationParams.base);
  return *internal_default_instance();
}


void NormalizationParams::clear_mean() {
// @@protoc_insertion_point(one_of_clear_start:tflite.evaluation.NormalizationParams)
  switch (mean_case()) {
    case kChannelwiseMean: {
      // No need to clear
      break;
    }
    case kMeans: {
      if (GetArenaNoVirtual() == NULL) {
        delete mean_.means_;
      }
      break;
    }
    case MEAN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MEAN_NOT_SET;
}


void NormalizationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.NormalizationParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_ = 1;
  clear_mean();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizationParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.NormalizationParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float channelwise_mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_.channelwise_mean_)));
          set_has_channelwise_mean();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.NormalizationParams.PerChannelMeanValues means = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_means()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float scale = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.NormalizationParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.NormalizationParams)
  return false;
#undef DO_
}

void NormalizationParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.NormalizationParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (mean_case()) {
    case kChannelwiseMean:
      ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->channelwise_mean(), output);
      break;
    case kMeans:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_means(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required float scale = 3 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.NormalizationParams)
}

::google::protobuf::uint8* NormalizationParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.NormalizationParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (mean_case()) {
    case kChannelwiseMean:
      target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->channelwise_mean(), target);
      break;
    case kMeans:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_means(), deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required float scale = 3 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.NormalizationParams)
  return target;
}

size_t NormalizationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.NormalizationParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float scale = 3 [default = 1];
  if (has_scale()) {
    total_size += 1 + 4;
  }
  switch (mean_case()) {
    // optional float channelwise_mean = 1;
    case kChannelwiseMean: {
      total_size += 1 + 4;
      break;
    }
    // optional .tflite.evaluation.NormalizationParams.PerChannelMeanValues means = 2;
    case kMeans: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mean_.means_);
      break;
    }
    case MEAN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizationParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.NormalizationParams)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizationParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizationParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.NormalizationParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.NormalizationParams)
    MergeFrom(*source);
  }
}

void NormalizationParams::MergeFrom(const NormalizationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.NormalizationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scale()) {
    set_scale(from.scale());
  }
  switch (from.mean_case()) {
    case kChannelwiseMean: {
      set_channelwise_mean(from.channelwise_mean());
      break;
    }
    case kMeans: {
      mutable_means()->::tflite::evaluation::NormalizationParams_PerChannelMeanValues::MergeFrom(from.means());
      break;
    }
    case MEAN_NOT_SET: {
      break;
    }
  }
}

void NormalizationParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.NormalizationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizationParams::CopyFrom(const NormalizationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.NormalizationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizationParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (mean_case()) {
    case kChannelwiseMean: {
      break;
    }
    case kMeans: {
      if (has_means()) {
        if (!this->means().IsInitialized()) return false;
      }
      break;
    }
    case MEAN_NOT_SET: {
      break;
    }
  }
  return true;
}

void NormalizationParams::Swap(NormalizationParams* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NormalizationParams* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NormalizationParams::UnsafeArenaSwap(NormalizationParams* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NormalizationParams::InternalSwap(NormalizationParams* other) {
  using std::swap;
  swap(scale_, other->scale_);
  swap(mean_, other->mean_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NormalizationParams::GetMetadata() const {
  protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace evaluation
}  // namespace tflite
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::ImagePreprocessingStepParams* Arena::CreateMaybeMessage< ::tflite::evaluation::ImagePreprocessingStepParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ImagePreprocessingStepParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::ImageSize* Arena::CreateMaybeMessage< ::tflite::evaluation::ImageSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ImageSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::CroppingParams* Arena::CreateMaybeMessage< ::tflite::evaluation::CroppingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::CroppingParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::ResizingParams* Arena::CreateMaybeMessage< ::tflite::evaluation::ResizingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ResizingParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::PaddingParams* Arena::CreateMaybeMessage< ::tflite::evaluation::PaddingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::PaddingParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* Arena::CreateMaybeMessage< ::tflite::evaluation::NormalizationParams_PerChannelMeanValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::NormalizationParams_PerChannelMeanValues >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tflite::evaluation::NormalizationParams* Arena::CreateMaybeMessage< ::tflite::evaluation::NormalizationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::NormalizationParams >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
