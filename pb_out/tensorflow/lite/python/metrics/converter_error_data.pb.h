// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/python/metrics/converter_error_data.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto 

namespace protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto
namespace tflite {
namespace metrics {
class ConverterErrorData;
class ConverterErrorDataDefaultTypeInternal;
extern ConverterErrorDataDefaultTypeInternal _ConverterErrorData_default_instance_;
class ConverterErrorData_FileLoc;
class ConverterErrorData_FileLocDefaultTypeInternal;
extern ConverterErrorData_FileLocDefaultTypeInternal _ConverterErrorData_FileLoc_default_instance_;
class ConverterErrorData_Location;
class ConverterErrorData_LocationDefaultTypeInternal;
extern ConverterErrorData_LocationDefaultTypeInternal _ConverterErrorData_Location_default_instance_;
class ConverterErrorData_Operator;
class ConverterErrorData_OperatorDefaultTypeInternal;
extern ConverterErrorData_OperatorDefaultTypeInternal _ConverterErrorData_Operator_default_instance_;
class ConverterErrorData_SourceLoc;
class ConverterErrorData_SourceLocDefaultTypeInternal;
extern ConverterErrorData_SourceLocDefaultTypeInternal _ConverterErrorData_SourceLoc_default_instance_;
}  // namespace metrics
}  // namespace tflite
namespace google {
namespace protobuf {
template<> ::tflite::metrics::ConverterErrorData* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_FileLoc* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_FileLoc>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_Location* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Location>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_Operator* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Operator>(Arena*);
template<> ::tflite::metrics::ConverterErrorData_SourceLoc* Arena::CreateMaybeMessage<::tflite::metrics::ConverterErrorData_SourceLoc>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tflite {
namespace metrics {

enum ConverterErrorData_ErrorCode {
  ConverterErrorData_ErrorCode_UNKNOWN = 0,
  ConverterErrorData_ErrorCode_ERROR_NEEDS_FLEX_OPS = 1,
  ConverterErrorData_ErrorCode_ERROR_NEEDS_CUSTOM_OPS = 2,
  ConverterErrorData_ErrorCode_ERROR_UNSUPPORTED_CONTROL_FLOW_V1 = 3,
  ConverterErrorData_ErrorCode_ERROR_GPU_NOT_COMPATIBLE = 200
};
bool ConverterErrorData_ErrorCode_IsValid(int value);
const ConverterErrorData_ErrorCode ConverterErrorData_ErrorCode_ErrorCode_MIN = ConverterErrorData_ErrorCode_UNKNOWN;
const ConverterErrorData_ErrorCode ConverterErrorData_ErrorCode_ErrorCode_MAX = ConverterErrorData_ErrorCode_ERROR_GPU_NOT_COMPATIBLE;
const int ConverterErrorData_ErrorCode_ErrorCode_ARRAYSIZE = ConverterErrorData_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConverterErrorData_ErrorCode_descriptor();
inline const ::std::string& ConverterErrorData_ErrorCode_Name(ConverterErrorData_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConverterErrorData_ErrorCode_descriptor(), value);
}
inline bool ConverterErrorData_ErrorCode_Parse(
    const ::std::string& name, ConverterErrorData_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConverterErrorData_ErrorCode>(
    ConverterErrorData_ErrorCode_descriptor(), name, value);
}
enum ConverterErrorData_LocationType {
  ConverterErrorData_LocationType_UNKNOWNLOC = 0,
  ConverterErrorData_LocationType_NAMELOC = 1,
  ConverterErrorData_LocationType_CALLSITELOC = 2,
  ConverterErrorData_LocationType_FUSEDLOC = 3
};
bool ConverterErrorData_LocationType_IsValid(int value);
const ConverterErrorData_LocationType ConverterErrorData_LocationType_LocationType_MIN = ConverterErrorData_LocationType_UNKNOWNLOC;
const ConverterErrorData_LocationType ConverterErrorData_LocationType_LocationType_MAX = ConverterErrorData_LocationType_FUSEDLOC;
const int ConverterErrorData_LocationType_LocationType_ARRAYSIZE = ConverterErrorData_LocationType_LocationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConverterErrorData_LocationType_descriptor();
inline const ::std::string& ConverterErrorData_LocationType_Name(ConverterErrorData_LocationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConverterErrorData_LocationType_descriptor(), value);
}
inline bool ConverterErrorData_LocationType_Parse(
    const ::std::string& name, ConverterErrorData_LocationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConverterErrorData_LocationType>(
    ConverterErrorData_LocationType_descriptor(), name, value);
}
// ===================================================================

class ConverterErrorData_Operator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.Operator) */ {
 public:
  ConverterErrorData_Operator();
  virtual ~ConverterErrorData_Operator();

  ConverterErrorData_Operator(const ConverterErrorData_Operator& from);

  inline ConverterErrorData_Operator& operator=(const ConverterErrorData_Operator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverterErrorData_Operator(ConverterErrorData_Operator&& from) noexcept
    : ConverterErrorData_Operator() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_Operator& operator=(ConverterErrorData_Operator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverterErrorData_Operator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverterErrorData_Operator* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_Operator*>(
               &_ConverterErrorData_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConverterErrorData_Operator* other);
  friend void swap(ConverterErrorData_Operator& a, ConverterErrorData_Operator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverterErrorData_Operator* New() const final {
    return CreateMaybeMessage<ConverterErrorData_Operator>(NULL);
  }

  ConverterErrorData_Operator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConverterErrorData_Operator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConverterErrorData_Operator& from);
  void MergeFrom(const ConverterErrorData_Operator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_Operator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.Operator)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConverterErrorData_FileLoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.FileLoc) */ {
 public:
  ConverterErrorData_FileLoc();
  virtual ~ConverterErrorData_FileLoc();

  ConverterErrorData_FileLoc(const ConverterErrorData_FileLoc& from);

  inline ConverterErrorData_FileLoc& operator=(const ConverterErrorData_FileLoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverterErrorData_FileLoc(ConverterErrorData_FileLoc&& from) noexcept
    : ConverterErrorData_FileLoc() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_FileLoc& operator=(ConverterErrorData_FileLoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverterErrorData_FileLoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverterErrorData_FileLoc* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_FileLoc*>(
               &_ConverterErrorData_FileLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConverterErrorData_FileLoc* other);
  friend void swap(ConverterErrorData_FileLoc& a, ConverterErrorData_FileLoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverterErrorData_FileLoc* New() const final {
    return CreateMaybeMessage<ConverterErrorData_FileLoc>(NULL);
  }

  ConverterErrorData_FileLoc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConverterErrorData_FileLoc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConverterErrorData_FileLoc& from);
  void MergeFrom(const ConverterErrorData_FileLoc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_FileLoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::uint32 line() const;
  void set_line(::google::protobuf::uint32 value);

  // optional uint32 column = 3;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  ::google::protobuf::uint32 column() const;
  void set_column(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.FileLoc)
 private:
  void set_has_filename();
  void clear_has_filename();
  void set_has_line();
  void clear_has_line();
  void set_has_column();
  void clear_has_column();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 line_;
  ::google::protobuf::uint32 column_;
  friend struct ::protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConverterErrorData_SourceLoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.SourceLoc) */ {
 public:
  ConverterErrorData_SourceLoc();
  virtual ~ConverterErrorData_SourceLoc();

  ConverterErrorData_SourceLoc(const ConverterErrorData_SourceLoc& from);

  inline ConverterErrorData_SourceLoc& operator=(const ConverterErrorData_SourceLoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverterErrorData_SourceLoc(ConverterErrorData_SourceLoc&& from) noexcept
    : ConverterErrorData_SourceLoc() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_SourceLoc& operator=(ConverterErrorData_SourceLoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverterErrorData_SourceLoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverterErrorData_SourceLoc* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_SourceLoc*>(
               &_ConverterErrorData_SourceLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConverterErrorData_SourceLoc* other);
  friend void swap(ConverterErrorData_SourceLoc& a, ConverterErrorData_SourceLoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverterErrorData_SourceLoc* New() const final {
    return CreateMaybeMessage<ConverterErrorData_SourceLoc>(NULL);
  }

  ConverterErrorData_SourceLoc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConverterErrorData_SourceLoc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConverterErrorData_SourceLoc& from);
  void MergeFrom(const ConverterErrorData_SourceLoc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_SourceLoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .tflite.metrics.ConverterErrorData.FileLoc source = 2;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  private:
  const ::tflite::metrics::ConverterErrorData_FileLoc& _internal_source() const;
  public:
  const ::tflite::metrics::ConverterErrorData_FileLoc& source() const;
  ::tflite::metrics::ConverterErrorData_FileLoc* release_source();
  ::tflite::metrics::ConverterErrorData_FileLoc* mutable_source();
  void set_allocated_source(::tflite::metrics::ConverterErrorData_FileLoc* source);

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.SourceLoc)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tflite::metrics::ConverterErrorData_FileLoc* source_;
  friend struct ::protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConverterErrorData_Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData.Location) */ {
 public:
  ConverterErrorData_Location();
  virtual ~ConverterErrorData_Location();

  ConverterErrorData_Location(const ConverterErrorData_Location& from);

  inline ConverterErrorData_Location& operator=(const ConverterErrorData_Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverterErrorData_Location(ConverterErrorData_Location&& from) noexcept
    : ConverterErrorData_Location() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData_Location& operator=(ConverterErrorData_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverterErrorData_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverterErrorData_Location* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData_Location*>(
               &_ConverterErrorData_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConverterErrorData_Location* other);
  friend void swap(ConverterErrorData_Location& a, ConverterErrorData_Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverterErrorData_Location* New() const final {
    return CreateMaybeMessage<ConverterErrorData_Location>(NULL);
  }

  ConverterErrorData_Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConverterErrorData_Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConverterErrorData_Location& from);
  void MergeFrom(const ConverterErrorData_Location& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData_Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tflite.metrics.ConverterErrorData.SourceLoc call = 2;
  int call_size() const;
  void clear_call();
  static const int kCallFieldNumber = 2;
  ::tflite::metrics::ConverterErrorData_SourceLoc* mutable_call(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >*
      mutable_call();
  const ::tflite::metrics::ConverterErrorData_SourceLoc& call(int index) const;
  ::tflite::metrics::ConverterErrorData_SourceLoc* add_call();
  const ::google::protobuf::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >&
      call() const;

  // optional .tflite.metrics.ConverterErrorData.LocationType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::tflite::metrics::ConverterErrorData_LocationType type() const;
  void set_type(::tflite::metrics::ConverterErrorData_LocationType value);

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData.Location)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc > call_;
  int type_;
  friend struct ::protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConverterErrorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.metrics.ConverterErrorData) */ {
 public:
  ConverterErrorData();
  virtual ~ConverterErrorData();

  ConverterErrorData(const ConverterErrorData& from);

  inline ConverterErrorData& operator=(const ConverterErrorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverterErrorData(ConverterErrorData&& from) noexcept
    : ConverterErrorData() {
    *this = ::std::move(from);
  }

  inline ConverterErrorData& operator=(ConverterErrorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverterErrorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverterErrorData* internal_default_instance() {
    return reinterpret_cast<const ConverterErrorData*>(
               &_ConverterErrorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConverterErrorData* other);
  friend void swap(ConverterErrorData& a, ConverterErrorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverterErrorData* New() const final {
    return CreateMaybeMessage<ConverterErrorData>(NULL);
  }

  ConverterErrorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConverterErrorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConverterErrorData& from);
  void MergeFrom(const ConverterErrorData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterErrorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConverterErrorData_Operator Operator;
  typedef ConverterErrorData_FileLoc FileLoc;
  typedef ConverterErrorData_SourceLoc SourceLoc;
  typedef ConverterErrorData_Location Location;

  typedef ConverterErrorData_ErrorCode ErrorCode;
  static const ErrorCode UNKNOWN =
    ConverterErrorData_ErrorCode_UNKNOWN;
  static const ErrorCode ERROR_NEEDS_FLEX_OPS =
    ConverterErrorData_ErrorCode_ERROR_NEEDS_FLEX_OPS;
  static const ErrorCode ERROR_NEEDS_CUSTOM_OPS =
    ConverterErrorData_ErrorCode_ERROR_NEEDS_CUSTOM_OPS;
  static const ErrorCode ERROR_UNSUPPORTED_CONTROL_FLOW_V1 =
    ConverterErrorData_ErrorCode_ERROR_UNSUPPORTED_CONTROL_FLOW_V1;
  static const ErrorCode ERROR_GPU_NOT_COMPATIBLE =
    ConverterErrorData_ErrorCode_ERROR_GPU_NOT_COMPATIBLE;
  static inline bool ErrorCode_IsValid(int value) {
    return ConverterErrorData_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    ConverterErrorData_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    ConverterErrorData_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    ConverterErrorData_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return ConverterErrorData_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return ConverterErrorData_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return ConverterErrorData_ErrorCode_Parse(name, value);
  }

  typedef ConverterErrorData_LocationType LocationType;
  static const LocationType UNKNOWNLOC =
    ConverterErrorData_LocationType_UNKNOWNLOC;
  static const LocationType NAMELOC =
    ConverterErrorData_LocationType_NAMELOC;
  static const LocationType CALLSITELOC =
    ConverterErrorData_LocationType_CALLSITELOC;
  static const LocationType FUSEDLOC =
    ConverterErrorData_LocationType_FUSEDLOC;
  static inline bool LocationType_IsValid(int value) {
    return ConverterErrorData_LocationType_IsValid(value);
  }
  static const LocationType LocationType_MIN =
    ConverterErrorData_LocationType_LocationType_MIN;
  static const LocationType LocationType_MAX =
    ConverterErrorData_LocationType_LocationType_MAX;
  static const int LocationType_ARRAYSIZE =
    ConverterErrorData_LocationType_LocationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocationType_descriptor() {
    return ConverterErrorData_LocationType_descriptor();
  }
  static inline const ::std::string& LocationType_Name(LocationType value) {
    return ConverterErrorData_LocationType_Name(value);
  }
  static inline bool LocationType_Parse(const ::std::string& name,
      LocationType* value) {
    return ConverterErrorData_LocationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string component = 1;
  bool has_component() const;
  void clear_component();
  static const int kComponentFieldNumber = 1;
  const ::std::string& component() const;
  void set_component(const ::std::string& value);
  #if LANG_CXX11
  void set_component(::std::string&& value);
  #endif
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  ::std::string* mutable_component();
  ::std::string* release_component();
  void set_allocated_component(::std::string* component);

  // optional string subcomponent = 2;
  bool has_subcomponent() const;
  void clear_subcomponent();
  static const int kSubcomponentFieldNumber = 2;
  const ::std::string& subcomponent() const;
  void set_subcomponent(const ::std::string& value);
  #if LANG_CXX11
  void set_subcomponent(::std::string&& value);
  #endif
  void set_subcomponent(const char* value);
  void set_subcomponent(const char* value, size_t size);
  ::std::string* mutable_subcomponent();
  ::std::string* release_subcomponent();
  void set_allocated_subcomponent(::std::string* subcomponent);

  // optional string error_message = 4;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 4;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // optional .tflite.metrics.ConverterErrorData.Operator operator = 5;
  bool has_operator_() const;
  void clear_operator_();
  static const int kOperatorFieldNumber = 5;
  private:
  const ::tflite::metrics::ConverterErrorData_Operator& _internal_operator_() const;
  public:
  const ::tflite::metrics::ConverterErrorData_Operator& operator_() const;
  ::tflite::metrics::ConverterErrorData_Operator* release_operator_();
  ::tflite::metrics::ConverterErrorData_Operator* mutable_operator_();
  void set_allocated_operator_(::tflite::metrics::ConverterErrorData_Operator* operator_);

  // optional .tflite.metrics.ConverterErrorData.Location location = 6;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  private:
  const ::tflite::metrics::ConverterErrorData_Location& _internal_location() const;
  public:
  const ::tflite::metrics::ConverterErrorData_Location& location() const;
  ::tflite::metrics::ConverterErrorData_Location* release_location();
  ::tflite::metrics::ConverterErrorData_Location* mutable_location();
  void set_allocated_location(::tflite::metrics::ConverterErrorData_Location* location);

  // optional .tflite.metrics.ConverterErrorData.ErrorCode error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::tflite::metrics::ConverterErrorData_ErrorCode error_code() const;
  void set_error_code(::tflite::metrics::ConverterErrorData_ErrorCode value);

  // @@protoc_insertion_point(class_scope:tflite.metrics.ConverterErrorData)
 private:
  void set_has_component();
  void clear_has_component();
  void set_has_subcomponent();
  void clear_has_subcomponent();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_message();
  void clear_has_error_message();
  void set_has_operator_();
  void clear_has_operator_();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr component_;
  ::google::protobuf::internal::ArenaStringPtr subcomponent_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::tflite::metrics::ConverterErrorData_Operator* operator__;
  ::tflite::metrics::ConverterErrorData_Location* location_;
  int error_code_;
  friend struct ::protobuf_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConverterErrorData_Operator

// optional string name = 1;
inline bool ConverterErrorData_Operator::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConverterErrorData_Operator::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConverterErrorData_Operator::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConverterErrorData_Operator::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ConverterErrorData_Operator::name() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.Operator.name)
  return name_.GetNoArena();
}
inline void ConverterErrorData_Operator::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.Operator.name)
}
#if LANG_CXX11
inline void ConverterErrorData_Operator::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tflite.metrics.ConverterErrorData.Operator.name)
}
#endif
inline void ConverterErrorData_Operator::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tflite.metrics.ConverterErrorData.Operator.name)
}
inline void ConverterErrorData_Operator::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tflite.metrics.ConverterErrorData.Operator.name)
}
inline ::std::string* ConverterErrorData_Operator::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.Operator.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverterErrorData_Operator::release_name() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.Operator.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverterErrorData_Operator::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.Operator.name)
}

// -------------------------------------------------------------------

// ConverterErrorData_FileLoc

// optional string filename = 1;
inline bool ConverterErrorData_FileLoc::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConverterErrorData_FileLoc::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConverterErrorData_FileLoc::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConverterErrorData_FileLoc::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& ConverterErrorData_FileLoc::filename() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.FileLoc.filename)
  return filename_.GetNoArena();
}
inline void ConverterErrorData_FileLoc::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.FileLoc.filename)
}
#if LANG_CXX11
inline void ConverterErrorData_FileLoc::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tflite.metrics.ConverterErrorData.FileLoc.filename)
}
#endif
inline void ConverterErrorData_FileLoc::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tflite.metrics.ConverterErrorData.FileLoc.filename)
}
inline void ConverterErrorData_FileLoc::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tflite.metrics.ConverterErrorData.FileLoc.filename)
}
inline ::std::string* ConverterErrorData_FileLoc::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.FileLoc.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverterErrorData_FileLoc::release_filename() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.FileLoc.filename)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverterErrorData_FileLoc::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.FileLoc.filename)
}

// optional uint32 line = 2;
inline bool ConverterErrorData_FileLoc::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConverterErrorData_FileLoc::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConverterErrorData_FileLoc::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConverterErrorData_FileLoc::clear_line() {
  line_ = 0u;
  clear_has_line();
}
inline ::google::protobuf::uint32 ConverterErrorData_FileLoc::line() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.FileLoc.line)
  return line_;
}
inline void ConverterErrorData_FileLoc::set_line(::google::protobuf::uint32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.FileLoc.line)
}

// optional uint32 column = 3;
inline bool ConverterErrorData_FileLoc::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConverterErrorData_FileLoc::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConverterErrorData_FileLoc::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConverterErrorData_FileLoc::clear_column() {
  column_ = 0u;
  clear_has_column();
}
inline ::google::protobuf::uint32 ConverterErrorData_FileLoc::column() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.FileLoc.column)
  return column_;
}
inline void ConverterErrorData_FileLoc::set_column(::google::protobuf::uint32 value) {
  set_has_column();
  column_ = value;
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.FileLoc.column)
}

// -------------------------------------------------------------------

// ConverterErrorData_SourceLoc

// optional string name = 1;
inline bool ConverterErrorData_SourceLoc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConverterErrorData_SourceLoc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConverterErrorData_SourceLoc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConverterErrorData_SourceLoc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ConverterErrorData_SourceLoc::name() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.SourceLoc.name)
  return name_.GetNoArena();
}
inline void ConverterErrorData_SourceLoc::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.SourceLoc.name)
}
#if LANG_CXX11
inline void ConverterErrorData_SourceLoc::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tflite.metrics.ConverterErrorData.SourceLoc.name)
}
#endif
inline void ConverterErrorData_SourceLoc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tflite.metrics.ConverterErrorData.SourceLoc.name)
}
inline void ConverterErrorData_SourceLoc::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tflite.metrics.ConverterErrorData.SourceLoc.name)
}
inline ::std::string* ConverterErrorData_SourceLoc::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.SourceLoc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverterErrorData_SourceLoc::release_name() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.SourceLoc.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverterErrorData_SourceLoc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.SourceLoc.name)
}

// optional .tflite.metrics.ConverterErrorData.FileLoc source = 2;
inline bool ConverterErrorData_SourceLoc::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConverterErrorData_SourceLoc::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConverterErrorData_SourceLoc::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConverterErrorData_SourceLoc::clear_source() {
  if (source_ != NULL) source_->Clear();
  clear_has_source();
}
inline const ::tflite::metrics::ConverterErrorData_FileLoc& ConverterErrorData_SourceLoc::_internal_source() const {
  return *source_;
}
inline const ::tflite::metrics::ConverterErrorData_FileLoc& ConverterErrorData_SourceLoc::source() const {
  const ::tflite::metrics::ConverterErrorData_FileLoc* p = source_;
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.SourceLoc.source)
  return p != NULL ? *p : *reinterpret_cast<const ::tflite::metrics::ConverterErrorData_FileLoc*>(
      &::tflite::metrics::_ConverterErrorData_FileLoc_default_instance_);
}
inline ::tflite::metrics::ConverterErrorData_FileLoc* ConverterErrorData_SourceLoc::release_source() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.SourceLoc.source)
  clear_has_source();
  ::tflite::metrics::ConverterErrorData_FileLoc* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_FileLoc* ConverterErrorData_SourceLoc::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::tflite::metrics::ConverterErrorData_FileLoc>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.SourceLoc.source)
  return source_;
}
inline void ConverterErrorData_SourceLoc::set_allocated_source(::tflite::metrics::ConverterErrorData_FileLoc* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    set_has_source();
  } else {
    clear_has_source();
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.SourceLoc.source)
}

// -------------------------------------------------------------------

// ConverterErrorData_Location

// optional .tflite.metrics.ConverterErrorData.LocationType type = 1;
inline bool ConverterErrorData_Location::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConverterErrorData_Location::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConverterErrorData_Location::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConverterErrorData_Location::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tflite::metrics::ConverterErrorData_LocationType ConverterErrorData_Location::type() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.Location.type)
  return static_cast< ::tflite::metrics::ConverterErrorData_LocationType >(type_);
}
inline void ConverterErrorData_Location::set_type(::tflite::metrics::ConverterErrorData_LocationType value) {
  assert(::tflite::metrics::ConverterErrorData_LocationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.Location.type)
}

// repeated .tflite.metrics.ConverterErrorData.SourceLoc call = 2;
inline int ConverterErrorData_Location::call_size() const {
  return call_.size();
}
inline void ConverterErrorData_Location::clear_call() {
  call_.Clear();
}
inline ::tflite::metrics::ConverterErrorData_SourceLoc* ConverterErrorData_Location::mutable_call(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.Location.call)
  return call_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >*
ConverterErrorData_Location::mutable_call() {
  // @@protoc_insertion_point(field_mutable_list:tflite.metrics.ConverterErrorData.Location.call)
  return &call_;
}
inline const ::tflite::metrics::ConverterErrorData_SourceLoc& ConverterErrorData_Location::call(int index) const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.Location.call)
  return call_.Get(index);
}
inline ::tflite::metrics::ConverterErrorData_SourceLoc* ConverterErrorData_Location::add_call() {
  // @@protoc_insertion_point(field_add:tflite.metrics.ConverterErrorData.Location.call)
  return call_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::metrics::ConverterErrorData_SourceLoc >&
ConverterErrorData_Location::call() const {
  // @@protoc_insertion_point(field_list:tflite.metrics.ConverterErrorData.Location.call)
  return call_;
}

// -------------------------------------------------------------------

// ConverterErrorData

// optional string component = 1;
inline bool ConverterErrorData::has_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConverterErrorData::set_has_component() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConverterErrorData::clear_has_component() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConverterErrorData::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_component();
}
inline const ::std::string& ConverterErrorData::component() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.component)
  return component_.GetNoArena();
}
inline void ConverterErrorData::set_component(const ::std::string& value) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.component)
}
#if LANG_CXX11
inline void ConverterErrorData::set_component(::std::string&& value) {
  set_has_component();
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tflite.metrics.ConverterErrorData.component)
}
#endif
inline void ConverterErrorData::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tflite.metrics.ConverterErrorData.component)
}
inline void ConverterErrorData::set_component(const char* value, size_t size) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tflite.metrics.ConverterErrorData.component)
}
inline ::std::string* ConverterErrorData::mutable_component() {
  set_has_component();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverterErrorData::release_component() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.component)
  if (!has_component()) {
    return NULL;
  }
  clear_has_component();
  return component_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverterErrorData::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    set_has_component();
  } else {
    clear_has_component();
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.component)
}

// optional string subcomponent = 2;
inline bool ConverterErrorData::has_subcomponent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConverterErrorData::set_has_subcomponent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConverterErrorData::clear_has_subcomponent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConverterErrorData::clear_subcomponent() {
  subcomponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subcomponent();
}
inline const ::std::string& ConverterErrorData::subcomponent() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.subcomponent)
  return subcomponent_.GetNoArena();
}
inline void ConverterErrorData::set_subcomponent(const ::std::string& value) {
  set_has_subcomponent();
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.subcomponent)
}
#if LANG_CXX11
inline void ConverterErrorData::set_subcomponent(::std::string&& value) {
  set_has_subcomponent();
  subcomponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tflite.metrics.ConverterErrorData.subcomponent)
}
#endif
inline void ConverterErrorData::set_subcomponent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subcomponent();
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tflite.metrics.ConverterErrorData.subcomponent)
}
inline void ConverterErrorData::set_subcomponent(const char* value, size_t size) {
  set_has_subcomponent();
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tflite.metrics.ConverterErrorData.subcomponent)
}
inline ::std::string* ConverterErrorData::mutable_subcomponent() {
  set_has_subcomponent();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.subcomponent)
  return subcomponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverterErrorData::release_subcomponent() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.subcomponent)
  if (!has_subcomponent()) {
    return NULL;
  }
  clear_has_subcomponent();
  return subcomponent_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverterErrorData::set_allocated_subcomponent(::std::string* subcomponent) {
  if (subcomponent != NULL) {
    set_has_subcomponent();
  } else {
    clear_has_subcomponent();
  }
  subcomponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcomponent);
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.subcomponent)
}

// optional .tflite.metrics.ConverterErrorData.ErrorCode error_code = 3;
inline bool ConverterErrorData::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConverterErrorData::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConverterErrorData::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConverterErrorData::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::tflite::metrics::ConverterErrorData_ErrorCode ConverterErrorData::error_code() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.error_code)
  return static_cast< ::tflite::metrics::ConverterErrorData_ErrorCode >(error_code_);
}
inline void ConverterErrorData::set_error_code(::tflite::metrics::ConverterErrorData_ErrorCode value) {
  assert(::tflite::metrics::ConverterErrorData_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.error_code)
}

// optional string error_message = 4;
inline bool ConverterErrorData::has_error_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConverterErrorData::set_has_error_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConverterErrorData::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConverterErrorData::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& ConverterErrorData::error_message() const {
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.error_message)
  return error_message_.GetNoArena();
}
inline void ConverterErrorData::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tflite.metrics.ConverterErrorData.error_message)
}
#if LANG_CXX11
inline void ConverterErrorData::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tflite.metrics.ConverterErrorData.error_message)
}
#endif
inline void ConverterErrorData::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tflite.metrics.ConverterErrorData.error_message)
}
inline void ConverterErrorData::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tflite.metrics.ConverterErrorData.error_message)
}
inline ::std::string* ConverterErrorData::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverterErrorData::release_error_message() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.error_message)
  if (!has_error_message()) {
    return NULL;
  }
  clear_has_error_message();
  return error_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverterErrorData::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.error_message)
}

// optional .tflite.metrics.ConverterErrorData.Operator operator = 5;
inline bool ConverterErrorData::has_operator_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConverterErrorData::set_has_operator_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConverterErrorData::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConverterErrorData::clear_operator_() {
  if (operator__ != NULL) operator__->Clear();
  clear_has_operator_();
}
inline const ::tflite::metrics::ConverterErrorData_Operator& ConverterErrorData::_internal_operator_() const {
  return *operator__;
}
inline const ::tflite::metrics::ConverterErrorData_Operator& ConverterErrorData::operator_() const {
  const ::tflite::metrics::ConverterErrorData_Operator* p = operator__;
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.operator)
  return p != NULL ? *p : *reinterpret_cast<const ::tflite::metrics::ConverterErrorData_Operator*>(
      &::tflite::metrics::_ConverterErrorData_Operator_default_instance_);
}
inline ::tflite::metrics::ConverterErrorData_Operator* ConverterErrorData::release_operator_() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.operator)
  clear_has_operator_();
  ::tflite::metrics::ConverterErrorData_Operator* temp = operator__;
  operator__ = NULL;
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_Operator* ConverterErrorData::mutable_operator_() {
  set_has_operator_();
  if (operator__ == NULL) {
    auto* p = CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Operator>(GetArenaNoVirtual());
    operator__ = p;
  }
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.operator)
  return operator__;
}
inline void ConverterErrorData::set_allocated_operator_(::tflite::metrics::ConverterErrorData_Operator* operator_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operator__;
  }
  if (operator_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operator_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operator_, submessage_arena);
    }
    set_has_operator_();
  } else {
    clear_has_operator_();
  }
  operator__ = operator_;
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.operator)
}

// optional .tflite.metrics.ConverterErrorData.Location location = 6;
inline bool ConverterErrorData::has_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConverterErrorData::set_has_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConverterErrorData::clear_has_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConverterErrorData::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
inline const ::tflite::metrics::ConverterErrorData_Location& ConverterErrorData::_internal_location() const {
  return *location_;
}
inline const ::tflite::metrics::ConverterErrorData_Location& ConverterErrorData::location() const {
  const ::tflite::metrics::ConverterErrorData_Location* p = location_;
  // @@protoc_insertion_point(field_get:tflite.metrics.ConverterErrorData.location)
  return p != NULL ? *p : *reinterpret_cast<const ::tflite::metrics::ConverterErrorData_Location*>(
      &::tflite::metrics::_ConverterErrorData_Location_default_instance_);
}
inline ::tflite::metrics::ConverterErrorData_Location* ConverterErrorData::release_location() {
  // @@protoc_insertion_point(field_release:tflite.metrics.ConverterErrorData.location)
  clear_has_location();
  ::tflite::metrics::ConverterErrorData_Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::tflite::metrics::ConverterErrorData_Location* ConverterErrorData::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::tflite::metrics::ConverterErrorData_Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tflite.metrics.ConverterErrorData.location)
  return location_;
}
inline void ConverterErrorData::set_allocated_location(::tflite::metrics::ConverterErrorData_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:tflite.metrics.ConverterErrorData.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics
}  // namespace tflite

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tflite::metrics::ConverterErrorData_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::metrics::ConverterErrorData_ErrorCode>() {
  return ::tflite::metrics::ConverterErrorData_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::tflite::metrics::ConverterErrorData_LocationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tflite::metrics::ConverterErrorData_LocationType>() {
  return ::tflite::metrics::ConverterErrorData_LocationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2flite_2fpython_2fmetrics_2fconverter_5ferror_5fdata_2eproto
