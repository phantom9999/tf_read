// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/logging/toco_conversion_log.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto 

namespace protobuf_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto
namespace toco {
class TocoConversionLog;
class TocoConversionLogDefaultTypeInternal;
extern TocoConversionLogDefaultTypeInternal _TocoConversionLog_default_instance_;
class TocoConversionLog_BuiltInOpsEntry_DoNotUse;
class TocoConversionLog_BuiltInOpsEntry_DoNotUseDefaultTypeInternal;
extern TocoConversionLog_BuiltInOpsEntry_DoNotUseDefaultTypeInternal _TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_;
class TocoConversionLog_CustomOpsEntry_DoNotUse;
class TocoConversionLog_CustomOpsEntry_DoNotUseDefaultTypeInternal;
extern TocoConversionLog_CustomOpsEntry_DoNotUseDefaultTypeInternal _TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_;
class TocoConversionLog_SelectOpsEntry_DoNotUse;
class TocoConversionLog_SelectOpsEntry_DoNotUseDefaultTypeInternal;
extern TocoConversionLog_SelectOpsEntry_DoNotUseDefaultTypeInternal _TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_;
}  // namespace toco
namespace google {
namespace protobuf {
template<> ::toco::TocoConversionLog* Arena::CreateMaybeMessage<::toco::TocoConversionLog>(Arena*);
template<> ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse* Arena::CreateMaybeMessage<::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse>(Arena*);
template<> ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse* Arena::CreateMaybeMessage<::toco::TocoConversionLog_CustomOpsEntry_DoNotUse>(Arena*);
template<> ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse* Arena::CreateMaybeMessage<::toco::TocoConversionLog_SelectOpsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace toco {

// ===================================================================

class TocoConversionLog_BuiltInOpsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TocoConversionLog_BuiltInOpsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TocoConversionLog_BuiltInOpsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  TocoConversionLog_BuiltInOpsEntry_DoNotUse();
  TocoConversionLog_BuiltInOpsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TocoConversionLog_BuiltInOpsEntry_DoNotUse& other);
  static const TocoConversionLog_BuiltInOpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TocoConversionLog_BuiltInOpsEntry_DoNotUse*>(&_TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TocoConversionLog_CustomOpsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TocoConversionLog_CustomOpsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TocoConversionLog_CustomOpsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  TocoConversionLog_CustomOpsEntry_DoNotUse();
  TocoConversionLog_CustomOpsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TocoConversionLog_CustomOpsEntry_DoNotUse& other);
  static const TocoConversionLog_CustomOpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TocoConversionLog_CustomOpsEntry_DoNotUse*>(&_TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TocoConversionLog_SelectOpsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TocoConversionLog_SelectOpsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TocoConversionLog_SelectOpsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  TocoConversionLog_SelectOpsEntry_DoNotUse();
  TocoConversionLog_SelectOpsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TocoConversionLog_SelectOpsEntry_DoNotUse& other);
  static const TocoConversionLog_SelectOpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TocoConversionLog_SelectOpsEntry_DoNotUse*>(&_TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TocoConversionLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:toco.TocoConversionLog) */ {
 public:
  TocoConversionLog();
  virtual ~TocoConversionLog();

  TocoConversionLog(const TocoConversionLog& from);

  inline TocoConversionLog& operator=(const TocoConversionLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TocoConversionLog(TocoConversionLog&& from) noexcept
    : TocoConversionLog() {
    *this = ::std::move(from);
  }

  inline TocoConversionLog& operator=(TocoConversionLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TocoConversionLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TocoConversionLog* internal_default_instance() {
    return reinterpret_cast<const TocoConversionLog*>(
               &_TocoConversionLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TocoConversionLog* other);
  friend void swap(TocoConversionLog& a, TocoConversionLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TocoConversionLog* New() const final {
    return CreateMaybeMessage<TocoConversionLog>(NULL);
  }

  TocoConversionLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TocoConversionLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TocoConversionLog& from);
  void MergeFrom(const TocoConversionLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TocoConversionLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string op_list = 1;
  int op_list_size() const;
  void clear_op_list();
  static const int kOpListFieldNumber = 1;
  const ::std::string& op_list(int index) const;
  ::std::string* mutable_op_list(int index);
  void set_op_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_op_list(int index, ::std::string&& value);
  #endif
  void set_op_list(int index, const char* value);
  void set_op_list(int index, const char* value, size_t size);
  ::std::string* add_op_list();
  void add_op_list(const ::std::string& value);
  #if LANG_CXX11
  void add_op_list(::std::string&& value);
  #endif
  void add_op_list(const char* value);
  void add_op_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& op_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_op_list();

  // map<string, int32> built_in_ops = 2;
  int built_in_ops_size() const;
  void clear_built_in_ops();
  static const int kBuiltInOpsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      built_in_ops() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_built_in_ops();

  // map<string, int32> custom_ops = 3;
  int custom_ops_size() const;
  void clear_custom_ops();
  static const int kCustomOpsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      custom_ops() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_custom_ops();

  // map<string, int32> select_ops = 4;
  int select_ops_size() const;
  void clear_select_ops();
  static const int kSelectOpsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      select_ops() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_select_ops();

  // repeated string op_signatures = 5;
  int op_signatures_size() const;
  void clear_op_signatures();
  static const int kOpSignaturesFieldNumber = 5;
  const ::std::string& op_signatures(int index) const;
  ::std::string* mutable_op_signatures(int index);
  void set_op_signatures(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_op_signatures(int index, ::std::string&& value);
  #endif
  void set_op_signatures(int index, const char* value);
  void set_op_signatures(int index, const char* value, size_t size);
  ::std::string* add_op_signatures();
  void add_op_signatures(const ::std::string& value);
  #if LANG_CXX11
  void add_op_signatures(::std::string&& value);
  #endif
  void add_op_signatures(const char* value);
  void add_op_signatures(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& op_signatures() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_op_signatures();

  // repeated string input_tensor_types = 6;
  int input_tensor_types_size() const;
  void clear_input_tensor_types();
  static const int kInputTensorTypesFieldNumber = 6;
  const ::std::string& input_tensor_types(int index) const;
  ::std::string* mutable_input_tensor_types(int index);
  void set_input_tensor_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input_tensor_types(int index, ::std::string&& value);
  #endif
  void set_input_tensor_types(int index, const char* value);
  void set_input_tensor_types(int index, const char* value, size_t size);
  ::std::string* add_input_tensor_types();
  void add_input_tensor_types(const ::std::string& value);
  #if LANG_CXX11
  void add_input_tensor_types(::std::string&& value);
  #endif
  void add_input_tensor_types(const char* value);
  void add_input_tensor_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_tensor_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_tensor_types();

  // repeated string output_tensor_types = 7;
  int output_tensor_types_size() const;
  void clear_output_tensor_types();
  static const int kOutputTensorTypesFieldNumber = 7;
  const ::std::string& output_tensor_types(int index) const;
  ::std::string* mutable_output_tensor_types(int index);
  void set_output_tensor_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output_tensor_types(int index, ::std::string&& value);
  #endif
  void set_output_tensor_types(int index, const char* value);
  void set_output_tensor_types(int index, const char* value, size_t size);
  ::std::string* add_output_tensor_types();
  void add_output_tensor_types(const ::std::string& value);
  #if LANG_CXX11
  void add_output_tensor_types(::std::string&& value);
  #endif
  void add_output_tensor_types(const char* value);
  void add_output_tensor_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_tensor_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_tensor_types();

  // optional string tf_lite_version = 10;
  bool has_tf_lite_version() const;
  void clear_tf_lite_version();
  static const int kTfLiteVersionFieldNumber = 10;
  const ::std::string& tf_lite_version() const;
  void set_tf_lite_version(const ::std::string& value);
  #if LANG_CXX11
  void set_tf_lite_version(::std::string&& value);
  #endif
  void set_tf_lite_version(const char* value);
  void set_tf_lite_version(const char* value, size_t size);
  ::std::string* mutable_tf_lite_version();
  ::std::string* release_tf_lite_version();
  void set_allocated_tf_lite_version(::std::string* tf_lite_version);

  // optional string os_version = 11;
  bool has_os_version() const;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 11;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // optional string model_hash = 12;
  bool has_model_hash() const;
  void clear_model_hash();
  static const int kModelHashFieldNumber = 12;
  const ::std::string& model_hash() const;
  void set_model_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_model_hash(::std::string&& value);
  #endif
  void set_model_hash(const char* value);
  void set_model_hash(const char* value, size_t size);
  ::std::string* mutable_model_hash();
  ::std::string* release_model_hash();
  void set_allocated_model_hash(::std::string* model_hash);

  // optional string toco_err_logs = 13;
  bool has_toco_err_logs() const;
  void clear_toco_err_logs();
  static const int kTocoErrLogsFieldNumber = 13;
  const ::std::string& toco_err_logs() const;
  void set_toco_err_logs(const ::std::string& value);
  #if LANG_CXX11
  void set_toco_err_logs(::std::string&& value);
  #endif
  void set_toco_err_logs(const char* value);
  void set_toco_err_logs(const char* value, size_t size);
  ::std::string* mutable_toco_err_logs();
  ::std::string* release_toco_err_logs();
  void set_allocated_toco_err_logs(::std::string* toco_err_logs);

  // optional int64 log_generation_ts = 8;
  bool has_log_generation_ts() const;
  void clear_log_generation_ts();
  static const int kLogGenerationTsFieldNumber = 8;
  ::google::protobuf::int64 log_generation_ts() const;
  void set_log_generation_ts(::google::protobuf::int64 value);

  // optional int32 model_size = 9;
  bool has_model_size() const;
  void clear_model_size();
  static const int kModelSizeFieldNumber = 9;
  ::google::protobuf::int32 model_size() const;
  void set_model_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:toco.TocoConversionLog)
 private:
  void set_has_log_generation_ts();
  void clear_has_log_generation_ts();
  void set_has_model_size();
  void clear_has_model_size();
  void set_has_tf_lite_version();
  void clear_has_tf_lite_version();
  void set_has_os_version();
  void clear_has_os_version();
  void set_has_model_hash();
  void clear_has_model_hash();
  void set_has_toco_err_logs();
  void clear_has_toco_err_logs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> op_list_;
  ::google::protobuf::internal::MapField<
      TocoConversionLog_BuiltInOpsEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > built_in_ops_;
  ::google::protobuf::internal::MapField<
      TocoConversionLog_CustomOpsEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > custom_ops_;
  ::google::protobuf::internal::MapField<
      TocoConversionLog_SelectOpsEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > select_ops_;
  ::google::protobuf::RepeatedPtrField< ::std::string> op_signatures_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_tensor_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_tensor_types_;
  ::google::protobuf::internal::ArenaStringPtr tf_lite_version_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr model_hash_;
  ::google::protobuf::internal::ArenaStringPtr toco_err_logs_;
  ::google::protobuf::int64 log_generation_ts_;
  ::google::protobuf::int32 model_size_;
  friend struct ::protobuf_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TocoConversionLog

// repeated string op_list = 1;
inline int TocoConversionLog::op_list_size() const {
  return op_list_.size();
}
inline void TocoConversionLog::clear_op_list() {
  op_list_.Clear();
}
inline const ::std::string& TocoConversionLog::op_list(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.op_list)
  return op_list_.Get(index);
}
inline ::std::string* TocoConversionLog::mutable_op_list(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.op_list)
  return op_list_.Mutable(index);
}
inline void TocoConversionLog::set_op_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_list)
  op_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoConversionLog::set_op_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_list)
  op_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoConversionLog::set_op_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  op_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::set_op_list(int index, const char* value, size_t size) {
  op_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.op_list)
}
inline ::std::string* TocoConversionLog::add_op_list() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.op_list)
  return op_list_.Add();
}
inline void TocoConversionLog::add_op_list(const ::std::string& value) {
  op_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_list)
}
#if LANG_CXX11
inline void TocoConversionLog::add_op_list(::std::string&& value) {
  op_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_list)
}
#endif
inline void TocoConversionLog::add_op_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  op_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.op_list)
}
inline void TocoConversionLog::add_op_list(const char* value, size_t size) {
  op_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.op_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoConversionLog::op_list() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.op_list)
  return op_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoConversionLog::mutable_op_list() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.op_list)
  return &op_list_;
}

// map<string, int32> built_in_ops = 2;
inline int TocoConversionLog::built_in_ops_size() const {
  return built_in_ops_.size();
}
inline void TocoConversionLog::clear_built_in_ops() {
  built_in_ops_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
TocoConversionLog::built_in_ops() const {
  // @@protoc_insertion_point(field_map:toco.TocoConversionLog.built_in_ops)
  return built_in_ops_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
TocoConversionLog::mutable_built_in_ops() {
  // @@protoc_insertion_point(field_mutable_map:toco.TocoConversionLog.built_in_ops)
  return built_in_ops_.MutableMap();
}

// map<string, int32> custom_ops = 3;
inline int TocoConversionLog::custom_ops_size() const {
  return custom_ops_.size();
}
inline void TocoConversionLog::clear_custom_ops() {
  custom_ops_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
TocoConversionLog::custom_ops() const {
  // @@protoc_insertion_point(field_map:toco.TocoConversionLog.custom_ops)
  return custom_ops_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
TocoConversionLog::mutable_custom_ops() {
  // @@protoc_insertion_point(field_mutable_map:toco.TocoConversionLog.custom_ops)
  return custom_ops_.MutableMap();
}

// map<string, int32> select_ops = 4;
inline int TocoConversionLog::select_ops_size() const {
  return select_ops_.size();
}
inline void TocoConversionLog::clear_select_ops() {
  select_ops_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
TocoConversionLog::select_ops() const {
  // @@protoc_insertion_point(field_map:toco.TocoConversionLog.select_ops)
  return select_ops_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
TocoConversionLog::mutable_select_ops() {
  // @@protoc_insertion_point(field_mutable_map:toco.TocoConversionLog.select_ops)
  return select_ops_.MutableMap();
}

// repeated string op_signatures = 5;
inline int TocoConversionLog::op_signatures_size() const {
  return op_signatures_.size();
}
inline void TocoConversionLog::clear_op_signatures() {
  op_signatures_.Clear();
}
inline const ::std::string& TocoConversionLog::op_signatures(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.op_signatures)
  return op_signatures_.Get(index);
}
inline ::std::string* TocoConversionLog::mutable_op_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.op_signatures)
  return op_signatures_.Mutable(index);
}
inline void TocoConversionLog::set_op_signatures(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_signatures)
  op_signatures_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoConversionLog::set_op_signatures(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.op_signatures)
  op_signatures_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoConversionLog::set_op_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  op_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::set_op_signatures(int index, const char* value, size_t size) {
  op_signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.op_signatures)
}
inline ::std::string* TocoConversionLog::add_op_signatures() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.op_signatures)
  return op_signatures_.Add();
}
inline void TocoConversionLog::add_op_signatures(const ::std::string& value) {
  op_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_signatures)
}
#if LANG_CXX11
inline void TocoConversionLog::add_op_signatures(::std::string&& value) {
  op_signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.op_signatures)
}
#endif
inline void TocoConversionLog::add_op_signatures(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  op_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.op_signatures)
}
inline void TocoConversionLog::add_op_signatures(const char* value, size_t size) {
  op_signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.op_signatures)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoConversionLog::op_signatures() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.op_signatures)
  return op_signatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoConversionLog::mutable_op_signatures() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.op_signatures)
  return &op_signatures_;
}

// repeated string input_tensor_types = 6;
inline int TocoConversionLog::input_tensor_types_size() const {
  return input_tensor_types_.size();
}
inline void TocoConversionLog::clear_input_tensor_types() {
  input_tensor_types_.Clear();
}
inline const ::std::string& TocoConversionLog::input_tensor_types(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.input_tensor_types)
  return input_tensor_types_.Get(index);
}
inline ::std::string* TocoConversionLog::mutable_input_tensor_types(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.input_tensor_types)
  return input_tensor_types_.Mutable(index);
}
inline void TocoConversionLog::set_input_tensor_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.input_tensor_types)
  input_tensor_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoConversionLog::set_input_tensor_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.input_tensor_types)
  input_tensor_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoConversionLog::set_input_tensor_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_tensor_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::set_input_tensor_types(int index, const char* value, size_t size) {
  input_tensor_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.input_tensor_types)
}
inline ::std::string* TocoConversionLog::add_input_tensor_types() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.input_tensor_types)
  return input_tensor_types_.Add();
}
inline void TocoConversionLog::add_input_tensor_types(const ::std::string& value) {
  input_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.input_tensor_types)
}
#if LANG_CXX11
inline void TocoConversionLog::add_input_tensor_types(::std::string&& value) {
  input_tensor_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.input_tensor_types)
}
#endif
inline void TocoConversionLog::add_input_tensor_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.input_tensor_types)
}
inline void TocoConversionLog::add_input_tensor_types(const char* value, size_t size) {
  input_tensor_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.input_tensor_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoConversionLog::input_tensor_types() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.input_tensor_types)
  return input_tensor_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoConversionLog::mutable_input_tensor_types() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.input_tensor_types)
  return &input_tensor_types_;
}

// repeated string output_tensor_types = 7;
inline int TocoConversionLog::output_tensor_types_size() const {
  return output_tensor_types_.size();
}
inline void TocoConversionLog::clear_output_tensor_types() {
  output_tensor_types_.Clear();
}
inline const ::std::string& TocoConversionLog::output_tensor_types(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.output_tensor_types)
  return output_tensor_types_.Get(index);
}
inline ::std::string* TocoConversionLog::mutable_output_tensor_types(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.output_tensor_types)
  return output_tensor_types_.Mutable(index);
}
inline void TocoConversionLog::set_output_tensor_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.output_tensor_types)
  output_tensor_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoConversionLog::set_output_tensor_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.output_tensor_types)
  output_tensor_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoConversionLog::set_output_tensor_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_tensor_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::set_output_tensor_types(int index, const char* value, size_t size) {
  output_tensor_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.output_tensor_types)
}
inline ::std::string* TocoConversionLog::add_output_tensor_types() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoConversionLog.output_tensor_types)
  return output_tensor_types_.Add();
}
inline void TocoConversionLog::add_output_tensor_types(const ::std::string& value) {
  output_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.output_tensor_types)
}
#if LANG_CXX11
inline void TocoConversionLog::add_output_tensor_types(::std::string&& value) {
  output_tensor_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoConversionLog.output_tensor_types)
}
#endif
inline void TocoConversionLog::add_output_tensor_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_tensor_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoConversionLog.output_tensor_types)
}
inline void TocoConversionLog::add_output_tensor_types(const char* value, size_t size) {
  output_tensor_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoConversionLog.output_tensor_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoConversionLog::output_tensor_types() const {
  // @@protoc_insertion_point(field_list:toco.TocoConversionLog.output_tensor_types)
  return output_tensor_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoConversionLog::mutable_output_tensor_types() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoConversionLog.output_tensor_types)
  return &output_tensor_types_;
}

// optional int64 log_generation_ts = 8;
inline bool TocoConversionLog::has_log_generation_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TocoConversionLog::set_has_log_generation_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TocoConversionLog::clear_has_log_generation_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TocoConversionLog::clear_log_generation_ts() {
  log_generation_ts_ = GOOGLE_LONGLONG(0);
  clear_has_log_generation_ts();
}
inline ::google::protobuf::int64 TocoConversionLog::log_generation_ts() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.log_generation_ts)
  return log_generation_ts_;
}
inline void TocoConversionLog::set_log_generation_ts(::google::protobuf::int64 value) {
  set_has_log_generation_ts();
  log_generation_ts_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.log_generation_ts)
}

// optional int32 model_size = 9;
inline bool TocoConversionLog::has_model_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TocoConversionLog::set_has_model_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TocoConversionLog::clear_has_model_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TocoConversionLog::clear_model_size() {
  model_size_ = 0;
  clear_has_model_size();
}
inline ::google::protobuf::int32 TocoConversionLog::model_size() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.model_size)
  return model_size_;
}
inline void TocoConversionLog::set_model_size(::google::protobuf::int32 value) {
  set_has_model_size();
  model_size_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.model_size)
}

// optional string tf_lite_version = 10;
inline bool TocoConversionLog::has_tf_lite_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TocoConversionLog::set_has_tf_lite_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TocoConversionLog::clear_has_tf_lite_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TocoConversionLog::clear_tf_lite_version() {
  tf_lite_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tf_lite_version();
}
inline const ::std::string& TocoConversionLog::tf_lite_version() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.tf_lite_version)
  return tf_lite_version_.GetNoArena();
}
inline void TocoConversionLog::set_tf_lite_version(const ::std::string& value) {
  set_has_tf_lite_version();
  tf_lite_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.tf_lite_version)
}
#if LANG_CXX11
inline void TocoConversionLog::set_tf_lite_version(::std::string&& value) {
  set_has_tf_lite_version();
  tf_lite_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoConversionLog.tf_lite_version)
}
#endif
inline void TocoConversionLog::set_tf_lite_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tf_lite_version();
  tf_lite_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.tf_lite_version)
}
inline void TocoConversionLog::set_tf_lite_version(const char* value, size_t size) {
  set_has_tf_lite_version();
  tf_lite_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.tf_lite_version)
}
inline ::std::string* TocoConversionLog::mutable_tf_lite_version() {
  set_has_tf_lite_version();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.tf_lite_version)
  return tf_lite_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoConversionLog::release_tf_lite_version() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.tf_lite_version)
  if (!has_tf_lite_version()) {
    return NULL;
  }
  clear_has_tf_lite_version();
  return tf_lite_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoConversionLog::set_allocated_tf_lite_version(::std::string* tf_lite_version) {
  if (tf_lite_version != NULL) {
    set_has_tf_lite_version();
  } else {
    clear_has_tf_lite_version();
  }
  tf_lite_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tf_lite_version);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.tf_lite_version)
}

// optional string os_version = 11;
inline bool TocoConversionLog::has_os_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TocoConversionLog::set_has_os_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TocoConversionLog::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TocoConversionLog::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_version();
}
inline const ::std::string& TocoConversionLog::os_version() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.os_version)
  return os_version_.GetNoArena();
}
inline void TocoConversionLog::set_os_version(const ::std::string& value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.os_version)
}
#if LANG_CXX11
inline void TocoConversionLog::set_os_version(::std::string&& value) {
  set_has_os_version();
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoConversionLog.os_version)
}
#endif
inline void TocoConversionLog::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.os_version)
}
inline void TocoConversionLog::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.os_version)
}
inline ::std::string* TocoConversionLog::mutable_os_version() {
  set_has_os_version();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoConversionLog::release_os_version() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.os_version)
  if (!has_os_version()) {
    return NULL;
  }
  clear_has_os_version();
  return os_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoConversionLog::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.os_version)
}

// optional string model_hash = 12;
inline bool TocoConversionLog::has_model_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TocoConversionLog::set_has_model_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TocoConversionLog::clear_has_model_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TocoConversionLog::clear_model_hash() {
  model_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_hash();
}
inline const ::std::string& TocoConversionLog::model_hash() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.model_hash)
  return model_hash_.GetNoArena();
}
inline void TocoConversionLog::set_model_hash(const ::std::string& value) {
  set_has_model_hash();
  model_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.model_hash)
}
#if LANG_CXX11
inline void TocoConversionLog::set_model_hash(::std::string&& value) {
  set_has_model_hash();
  model_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoConversionLog.model_hash)
}
#endif
inline void TocoConversionLog::set_model_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model_hash();
  model_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.model_hash)
}
inline void TocoConversionLog::set_model_hash(const char* value, size_t size) {
  set_has_model_hash();
  model_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.model_hash)
}
inline ::std::string* TocoConversionLog::mutable_model_hash() {
  set_has_model_hash();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.model_hash)
  return model_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoConversionLog::release_model_hash() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.model_hash)
  if (!has_model_hash()) {
    return NULL;
  }
  clear_has_model_hash();
  return model_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoConversionLog::set_allocated_model_hash(::std::string* model_hash) {
  if (model_hash != NULL) {
    set_has_model_hash();
  } else {
    clear_has_model_hash();
  }
  model_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_hash);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.model_hash)
}

// optional string toco_err_logs = 13;
inline bool TocoConversionLog::has_toco_err_logs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TocoConversionLog::set_has_toco_err_logs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TocoConversionLog::clear_has_toco_err_logs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TocoConversionLog::clear_toco_err_logs() {
  toco_err_logs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_toco_err_logs();
}
inline const ::std::string& TocoConversionLog::toco_err_logs() const {
  // @@protoc_insertion_point(field_get:toco.TocoConversionLog.toco_err_logs)
  return toco_err_logs_.GetNoArena();
}
inline void TocoConversionLog::set_toco_err_logs(const ::std::string& value) {
  set_has_toco_err_logs();
  toco_err_logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoConversionLog.toco_err_logs)
}
#if LANG_CXX11
inline void TocoConversionLog::set_toco_err_logs(::std::string&& value) {
  set_has_toco_err_logs();
  toco_err_logs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoConversionLog.toco_err_logs)
}
#endif
inline void TocoConversionLog::set_toco_err_logs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_toco_err_logs();
  toco_err_logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoConversionLog.toco_err_logs)
}
inline void TocoConversionLog::set_toco_err_logs(const char* value, size_t size) {
  set_has_toco_err_logs();
  toco_err_logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoConversionLog.toco_err_logs)
}
inline ::std::string* TocoConversionLog::mutable_toco_err_logs() {
  set_has_toco_err_logs();
  // @@protoc_insertion_point(field_mutable:toco.TocoConversionLog.toco_err_logs)
  return toco_err_logs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoConversionLog::release_toco_err_logs() {
  // @@protoc_insertion_point(field_release:toco.TocoConversionLog.toco_err_logs)
  if (!has_toco_err_logs()) {
    return NULL;
  }
  clear_has_toco_err_logs();
  return toco_err_logs_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoConversionLog::set_allocated_toco_err_logs(::std::string* toco_err_logs) {
  if (toco_err_logs != NULL) {
    set_has_toco_err_logs();
  } else {
    clear_has_toco_err_logs();
  }
  toco_err_logs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), toco_err_logs);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoConversionLog.toco_err_logs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace toco

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto
