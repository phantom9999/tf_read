// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/toco_flags.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/lite/toco/types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto 

namespace protobuf_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
namespace toco {
class TocoFlags;
class TocoFlagsDefaultTypeInternal;
extern TocoFlagsDefaultTypeInternal _TocoFlags_default_instance_;
}  // namespace toco
namespace google {
namespace protobuf {
template<> ::toco::TocoFlags* Arena::CreateMaybeMessage<::toco::TocoFlags>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace toco {

enum FileFormat {
  FILE_FORMAT_UNKNOWN = 0,
  TENSORFLOW_GRAPHDEF = 1,
  TFLITE = 2,
  GRAPHVIZ_DOT = 3
};
bool FileFormat_IsValid(int value);
const FileFormat FileFormat_MIN = FILE_FORMAT_UNKNOWN;
const FileFormat FileFormat_MAX = GRAPHVIZ_DOT;
const int FileFormat_ARRAYSIZE = FileFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileFormat_descriptor();
inline const ::std::string& FileFormat_Name(FileFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileFormat_descriptor(), value);
}
inline bool FileFormat_Parse(
    const ::std::string& name, FileFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileFormat>(
    FileFormat_descriptor(), name, value);
}
// ===================================================================

class TocoFlags : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:toco.TocoFlags) */ {
 public:
  TocoFlags();
  virtual ~TocoFlags();

  TocoFlags(const TocoFlags& from);

  inline TocoFlags& operator=(const TocoFlags& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TocoFlags(TocoFlags&& from) noexcept
    : TocoFlags() {
    *this = ::std::move(from);
  }

  inline TocoFlags& operator=(TocoFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TocoFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TocoFlags* internal_default_instance() {
    return reinterpret_cast<const TocoFlags*>(
               &_TocoFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TocoFlags* other);
  friend void swap(TocoFlags& a, TocoFlags& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TocoFlags* New() const final {
    return CreateMaybeMessage<TocoFlags>(NULL);
  }

  TocoFlags* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TocoFlags>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TocoFlags& from);
  void MergeFrom(const TocoFlags& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TocoFlags* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string custom_opdefs = 32 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int custom_opdefs_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_custom_opdefs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCustomOpdefsFieldNumber = 32;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& custom_opdefs(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_custom_opdefs(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_custom_opdefs(int index, const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_custom_opdefs(int index, ::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_custom_opdefs(int index, const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_custom_opdefs(int index, const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* add_custom_opdefs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_custom_opdefs(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_custom_opdefs(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_custom_opdefs(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_custom_opdefs(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::std::string>& custom_opdefs() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_custom_opdefs();

  // repeated string select_user_tf_ops = 33;
  int select_user_tf_ops_size() const;
  void clear_select_user_tf_ops();
  static const int kSelectUserTfOpsFieldNumber = 33;
  const ::std::string& select_user_tf_ops(int index) const;
  ::std::string* mutable_select_user_tf_ops(int index);
  void set_select_user_tf_ops(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_select_user_tf_ops(int index, ::std::string&& value);
  #endif
  void set_select_user_tf_ops(int index, const char* value);
  void set_select_user_tf_ops(int index, const char* value, size_t size);
  ::std::string* add_select_user_tf_ops();
  void add_select_user_tf_ops(const ::std::string& value);
  #if LANG_CXX11
  void add_select_user_tf_ops(::std::string&& value);
  #endif
  void add_select_user_tf_ops(const char* value);
  void add_select_user_tf_ops(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& select_user_tf_ops() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_select_user_tf_ops();

  // repeated string supported_backends = 41;
  int supported_backends_size() const;
  void clear_supported_backends();
  static const int kSupportedBackendsFieldNumber = 41;
  const ::std::string& supported_backends(int index) const;
  ::std::string* mutable_supported_backends(int index);
  void set_supported_backends(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_supported_backends(int index, ::std::string&& value);
  #endif
  void set_supported_backends(int index, const char* value);
  void set_supported_backends(int index, const char* value, size_t size);
  ::std::string* add_supported_backends();
  void add_supported_backends(const ::std::string& value);
  #if LANG_CXX11
  void add_supported_backends(::std::string&& value);
  #endif
  void add_supported_backends(const char* value);
  void add_supported_backends(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_backends() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_backends();

  // optional string dump_graphviz_dir = 24;
  bool has_dump_graphviz_dir() const;
  void clear_dump_graphviz_dir();
  static const int kDumpGraphvizDirFieldNumber = 24;
  const ::std::string& dump_graphviz_dir() const;
  void set_dump_graphviz_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_dump_graphviz_dir(::std::string&& value);
  #endif
  void set_dump_graphviz_dir(const char* value);
  void set_dump_graphviz_dir(const char* value, size_t size);
  ::std::string* mutable_dump_graphviz_dir();
  ::std::string* release_dump_graphviz_dir();
  void set_allocated_dump_graphviz_dir(::std::string* dump_graphviz_dir);

  // optional string conversion_summary_dir = 31;
  bool has_conversion_summary_dir() const;
  void clear_conversion_summary_dir();
  static const int kConversionSummaryDirFieldNumber = 31;
  const ::std::string& conversion_summary_dir() const;
  void set_conversion_summary_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_conversion_summary_dir(::std::string&& value);
  #endif
  void set_conversion_summary_dir(const char* value);
  void set_conversion_summary_dir(const char* value, size_t size);
  ::std::string* mutable_conversion_summary_dir();
  ::std::string* release_conversion_summary_dir();
  void set_allocated_conversion_summary_dir(::std::string* conversion_summary_dir);

  // optional string tf_quantization_mode = 45;
  bool has_tf_quantization_mode() const;
  void clear_tf_quantization_mode();
  static const int kTfQuantizationModeFieldNumber = 45;
  const ::std::string& tf_quantization_mode() const;
  void set_tf_quantization_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_tf_quantization_mode(::std::string&& value);
  #endif
  void set_tf_quantization_mode(const char* value);
  void set_tf_quantization_mode(const char* value, size_t size);
  ::std::string* mutable_tf_quantization_mode();
  ::std::string* release_tf_quantization_mode();
  void set_allocated_tf_quantization_mode(::std::string* tf_quantization_mode);

  // optional .toco.FileFormat input_format = 1;
  bool has_input_format() const;
  void clear_input_format();
  static const int kInputFormatFieldNumber = 1;
  ::toco::FileFormat input_format() const;
  void set_input_format(::toco::FileFormat value);

  // optional .toco.FileFormat output_format = 2;
  bool has_output_format() const;
  void clear_output_format();
  static const int kOutputFormatFieldNumber = 2;
  ::toco::FileFormat output_format() const;
  void set_output_format(::toco::FileFormat value);

  // optional .toco.IODataType inference_type = 4;
  bool has_inference_type() const;
  void clear_inference_type();
  static const int kInferenceTypeFieldNumber = 4;
  ::toco::IODataType inference_type() const;
  void set_inference_type(::toco::IODataType value);

  // optional float default_ranges_min = 5;
  bool has_default_ranges_min() const;
  void clear_default_ranges_min();
  static const int kDefaultRangesMinFieldNumber = 5;
  float default_ranges_min() const;
  void set_default_ranges_min(float value);

  // optional float default_ranges_max = 6;
  bool has_default_ranges_max() const;
  void clear_default_ranges_max();
  static const int kDefaultRangesMaxFieldNumber = 6;
  float default_ranges_max() const;
  void set_default_ranges_max(float value);

  // optional bool drop_fake_quant = 7;
  bool has_drop_fake_quant() const;
  void clear_drop_fake_quant();
  static const int kDropFakeQuantFieldNumber = 7;
  bool drop_fake_quant() const;
  void set_drop_fake_quant(bool value);

  // optional bool reorder_across_fake_quant = 8;
  bool has_reorder_across_fake_quant() const;
  void clear_reorder_across_fake_quant();
  static const int kReorderAcrossFakeQuantFieldNumber = 8;
  bool reorder_across_fake_quant() const;
  void set_reorder_across_fake_quant(bool value);

  // optional bool allow_custom_ops = 10;
  bool has_allow_custom_ops() const;
  void clear_allow_custom_ops();
  static const int kAllowCustomOpsFieldNumber = 10;
  bool allow_custom_ops() const;
  void set_allow_custom_ops(bool value);

  // optional bool drop_control_dependency = 12;
  bool has_drop_control_dependency() const;
  void clear_drop_control_dependency();
  static const int kDropControlDependencyFieldNumber = 12;
  bool drop_control_dependency() const;
  void set_drop_control_dependency(bool value);

  // optional .toco.IODataType inference_input_type = 11;
  bool has_inference_input_type() const;
  void clear_inference_input_type();
  static const int kInferenceInputTypeFieldNumber = 11;
  ::toco::IODataType inference_input_type() const;
  void set_inference_input_type(::toco::IODataType value);

  // optional float default_int16_ranges_min = 15;
  bool has_default_int16_ranges_min() const;
  void clear_default_int16_ranges_min();
  static const int kDefaultInt16RangesMinFieldNumber = 15;
  float default_int16_ranges_min() const;
  void set_default_int16_ranges_min(float value);

  // optional float default_int16_ranges_max = 16;
  bool has_default_int16_ranges_max() const;
  void clear_default_int16_ranges_max();
  static const int kDefaultInt16RangesMaxFieldNumber = 16;
  float default_int16_ranges_max() const;
  void set_default_int16_ranges_max(float value);

  // optional bool debug_disable_recurrent_cell_fusion = 13;
  bool has_debug_disable_recurrent_cell_fusion() const;
  void clear_debug_disable_recurrent_cell_fusion();
  static const int kDebugDisableRecurrentCellFusionFieldNumber = 13;
  bool debug_disable_recurrent_cell_fusion() const;
  void set_debug_disable_recurrent_cell_fusion(bool value);

  // optional bool propagate_fake_quant_num_bits = 14;
  bool has_propagate_fake_quant_num_bits() const;
  void clear_propagate_fake_quant_num_bits();
  static const int kPropagateFakeQuantNumBitsFieldNumber = 14;
  bool propagate_fake_quant_num_bits() const;
  void set_propagate_fake_quant_num_bits(bool value);

  // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
  bool has_allow_nudging_weights_to_use_fast_gemm_kernel() const;
  void clear_allow_nudging_weights_to_use_fast_gemm_kernel();
  static const int kAllowNudgingWeightsToUseFastGemmKernelFieldNumber = 17;
  bool allow_nudging_weights_to_use_fast_gemm_kernel() const;
  void set_allow_nudging_weights_to_use_fast_gemm_kernel(bool value);

  // optional bool quantize_weights = 20 [default = false];
  bool has_quantize_weights() const;
  void clear_quantize_weights();
  static const int kQuantizeWeightsFieldNumber = 20;
  bool quantize_weights() const;
  void set_quantize_weights(bool value);

  // optional bool dump_graphviz_include_video = 25;
  bool has_dump_graphviz_include_video() const;
  void clear_dump_graphviz_include_video();
  static const int kDumpGraphvizIncludeVideoFieldNumber = 25;
  bool dump_graphviz_include_video() const;
  void set_dump_graphviz_include_video(bool value);

  // optional bool post_training_quantize = 26 [default = false];
  bool has_post_training_quantize() const;
  void clear_post_training_quantize();
  static const int kPostTrainingQuantizeFieldNumber = 26;
  bool post_training_quantize() const;
  void set_post_training_quantize(bool value);

  // optional bool enable_select_tf_ops = 27 [default = false];
  bool has_enable_select_tf_ops() const;
  void clear_enable_select_tf_ops();
  static const int kEnableSelectTfOpsFieldNumber = 27;
  bool enable_select_tf_ops() const;
  void set_enable_select_tf_ops(bool value);

  // optional bool force_select_tf_ops = 28 [default = false];
  bool has_force_select_tf_ops() const;
  void clear_force_select_tf_ops();
  static const int kForceSelectTfOpsFieldNumber = 28;
  bool force_select_tf_ops() const;
  void set_force_select_tf_ops(bool value);

  // optional bool quantize_to_float16 = 29 [default = false];
  bool has_quantize_to_float16() const;
  void clear_quantize_to_float16();
  static const int kQuantizeToFloat16FieldNumber = 29;
  bool quantize_to_float16() const;
  void set_quantize_to_float16(bool value);

  // optional bool allow_bfloat16 = 38 [default = false];
  bool has_allow_bfloat16() const;
  void clear_allow_bfloat16();
  static const int kAllowBfloat16FieldNumber = 38;
  bool allow_bfloat16() const;
  void set_allow_bfloat16(bool value);

  // optional bool allow_all_select_tf_ops = 39;
  bool has_allow_all_select_tf_ops() const;
  void clear_allow_all_select_tf_ops();
  static const int kAllowAllSelectTfOpsFieldNumber = 39;
  bool allow_all_select_tf_ops() const;
  void set_allow_all_select_tf_ops(bool value);

  // optional bool unfold_large_splat_constant = 40 [default = false];
  bool has_unfold_large_splat_constant() const;
  void clear_unfold_large_splat_constant();
  static const int kUnfoldLargeSplatConstantFieldNumber = 40;
  bool unfold_large_splat_constant() const;
  void set_unfold_large_splat_constant(bool value);

  // optional .toco.IODataType accumulation_type = 37;
  bool has_accumulation_type() const;
  void clear_accumulation_type();
  static const int kAccumulationTypeFieldNumber = 37;
  ::toco::IODataType accumulation_type() const;
  void set_accumulation_type(::toco::IODataType value);

  // optional bool default_to_single_batch_in_tensor_list_ops = 42 [default = false];
  bool has_default_to_single_batch_in_tensor_list_ops() const;
  void clear_default_to_single_batch_in_tensor_list_ops();
  static const int kDefaultToSingleBatchInTensorListOpsFieldNumber = 42;
  bool default_to_single_batch_in_tensor_list_ops() const;
  void set_default_to_single_batch_in_tensor_list_ops(bool value);

  // optional bool disable_per_channel_quantization = 43 [default = false];
  bool has_disable_per_channel_quantization() const;
  void clear_disable_per_channel_quantization();
  static const int kDisablePerChannelQuantizationFieldNumber = 43;
  bool disable_per_channel_quantization() const;
  void set_disable_per_channel_quantization(bool value);

  // optional bool enable_mlir_dynamic_range_quantizer = 44 [default = false];
  bool has_enable_mlir_dynamic_range_quantizer() const;
  void clear_enable_mlir_dynamic_range_quantizer();
  static const int kEnableMlirDynamicRangeQuantizerFieldNumber = 44;
  bool enable_mlir_dynamic_range_quantizer() const;
  void set_enable_mlir_dynamic_range_quantizer(bool value);

  // optional bool disable_infer_tensor_range = 46 [default = false];
  bool has_disable_infer_tensor_range() const;
  void clear_disable_infer_tensor_range();
  static const int kDisableInferTensorRangeFieldNumber = 46;
  bool disable_infer_tensor_range() const;
  void set_disable_infer_tensor_range(bool value);

  // optional bool use_fake_quant_num_bits = 47 [default = false];
  bool has_use_fake_quant_num_bits() const;
  void clear_use_fake_quant_num_bits();
  static const int kUseFakeQuantNumBitsFieldNumber = 47;
  bool use_fake_quant_num_bits() const;
  void set_use_fake_quant_num_bits(bool value);

  // optional bool enable_dynamic_update_slice = 48 [default = false];
  bool has_enable_dynamic_update_slice() const;
  void clear_enable_dynamic_update_slice();
  static const int kEnableDynamicUpdateSliceFieldNumber = 48;
  bool enable_dynamic_update_slice() const;
  void set_enable_dynamic_update_slice(bool value);

  // optional bool preserve_assert_op = 49 [default = false];
  bool has_preserve_assert_op() const;
  void clear_preserve_assert_op();
  static const int kPreserveAssertOpFieldNumber = 49;
  bool preserve_assert_op() const;
  void set_preserve_assert_op(bool value);

  // optional bool guarantee_all_funcs_one_use = 50 [default = false];
  bool has_guarantee_all_funcs_one_use() const;
  void clear_guarantee_all_funcs_one_use();
  static const int kGuaranteeAllFuncsOneUseFieldNumber = 50;
  bool guarantee_all_funcs_one_use() const;
  void set_guarantee_all_funcs_one_use(bool value);

  // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
  bool has_dedupe_array_min_size_bytes() const;
  void clear_dedupe_array_min_size_bytes();
  static const int kDedupeArrayMinSizeBytesFieldNumber = 18;
  ::google::protobuf::int64 dedupe_array_min_size_bytes() const;
  void set_dedupe_array_min_size_bytes(::google::protobuf::int64 value);

  // optional bool split_tflite_lstm_inputs = 19 [default = true];
  bool has_split_tflite_lstm_inputs() const;
  void clear_split_tflite_lstm_inputs();
  static const int kSplitTfliteLstmInputsFieldNumber = 19;
  bool split_tflite_lstm_inputs() const;
  void set_split_tflite_lstm_inputs(bool value);

  // optional bool allow_dynamic_tensors = 30 [default = true];
  bool has_allow_dynamic_tensors() const;
  void clear_allow_dynamic_tensors();
  static const int kAllowDynamicTensorsFieldNumber = 30;
  bool allow_dynamic_tensors() const;
  void set_allow_dynamic_tensors(bool value);

  // optional bool enable_tflite_resource_variables = 34 [default = true];
  bool has_enable_tflite_resource_variables() const;
  void clear_enable_tflite_resource_variables();
  static const int kEnableTfliteResourceVariablesFieldNumber = 34;
  bool enable_tflite_resource_variables() const;
  void set_enable_tflite_resource_variables(bool value);

  // optional bool unfold_batchmatmul = 35 [default = true];
  bool has_unfold_batchmatmul() const;
  void clear_unfold_batchmatmul();
  static const int kUnfoldBatchmatmulFieldNumber = 35;
  bool unfold_batchmatmul() const;
  void set_unfold_batchmatmul(bool value);

  // optional bool lower_tensor_list_ops = 36 [default = true];
  bool has_lower_tensor_list_ops() const;
  void clear_lower_tensor_list_ops();
  static const int kLowerTensorListOpsFieldNumber = 36;
  bool lower_tensor_list_ops() const;
  void set_lower_tensor_list_ops(bool value);

  // @@protoc_insertion_point(class_scope:toco.TocoFlags)
 private:
  void set_has_input_format();
  void clear_has_input_format();
  void set_has_output_format();
  void clear_has_output_format();
  void set_has_inference_input_type();
  void clear_has_inference_input_type();
  void set_has_inference_type();
  void clear_has_inference_type();
  void set_has_default_ranges_min();
  void clear_has_default_ranges_min();
  void set_has_default_ranges_max();
  void clear_has_default_ranges_max();
  void set_has_default_int16_ranges_min();
  void clear_has_default_int16_ranges_min();
  void set_has_default_int16_ranges_max();
  void clear_has_default_int16_ranges_max();
  void set_has_drop_fake_quant();
  void clear_has_drop_fake_quant();
  void set_has_reorder_across_fake_quant();
  void clear_has_reorder_across_fake_quant();
  void set_has_allow_custom_ops();
  void clear_has_allow_custom_ops();
  void set_has_drop_control_dependency();
  void clear_has_drop_control_dependency();
  void set_has_debug_disable_recurrent_cell_fusion();
  void clear_has_debug_disable_recurrent_cell_fusion();
  void set_has_propagate_fake_quant_num_bits();
  void clear_has_propagate_fake_quant_num_bits();
  void set_has_allow_nudging_weights_to_use_fast_gemm_kernel();
  void clear_has_allow_nudging_weights_to_use_fast_gemm_kernel();
  void set_has_dedupe_array_min_size_bytes();
  void clear_has_dedupe_array_min_size_bytes();
  void set_has_split_tflite_lstm_inputs();
  void clear_has_split_tflite_lstm_inputs();
  void set_has_quantize_weights();
  void clear_has_quantize_weights();
  void set_has_dump_graphviz_dir();
  void clear_has_dump_graphviz_dir();
  void set_has_dump_graphviz_include_video();
  void clear_has_dump_graphviz_include_video();
  void set_has_post_training_quantize();
  void clear_has_post_training_quantize();
  void set_has_enable_select_tf_ops();
  void clear_has_enable_select_tf_ops();
  void set_has_force_select_tf_ops();
  void clear_has_force_select_tf_ops();
  void set_has_quantize_to_float16();
  void clear_has_quantize_to_float16();
  void set_has_allow_dynamic_tensors();
  void clear_has_allow_dynamic_tensors();
  void set_has_conversion_summary_dir();
  void clear_has_conversion_summary_dir();
  void set_has_enable_tflite_resource_variables();
  void clear_has_enable_tflite_resource_variables();
  void set_has_unfold_batchmatmul();
  void clear_has_unfold_batchmatmul();
  void set_has_lower_tensor_list_ops();
  void clear_has_lower_tensor_list_ops();
  void set_has_accumulation_type();
  void clear_has_accumulation_type();
  void set_has_allow_bfloat16();
  void clear_has_allow_bfloat16();
  void set_has_allow_all_select_tf_ops();
  void clear_has_allow_all_select_tf_ops();
  void set_has_unfold_large_splat_constant();
  void clear_has_unfold_large_splat_constant();
  void set_has_default_to_single_batch_in_tensor_list_ops();
  void clear_has_default_to_single_batch_in_tensor_list_ops();
  void set_has_disable_per_channel_quantization();
  void clear_has_disable_per_channel_quantization();
  void set_has_enable_mlir_dynamic_range_quantizer();
  void clear_has_enable_mlir_dynamic_range_quantizer();
  void set_has_tf_quantization_mode();
  void clear_has_tf_quantization_mode();
  void set_has_disable_infer_tensor_range();
  void clear_has_disable_infer_tensor_range();
  void set_has_use_fake_quant_num_bits();
  void clear_has_use_fake_quant_num_bits();
  void set_has_enable_dynamic_update_slice();
  void clear_has_enable_dynamic_update_slice();
  void set_has_preserve_assert_op();
  void clear_has_preserve_assert_op();
  void set_has_guarantee_all_funcs_one_use();
  void clear_has_guarantee_all_funcs_one_use();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> custom_opdefs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> select_user_tf_ops_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_backends_;
  ::google::protobuf::internal::ArenaStringPtr dump_graphviz_dir_;
  ::google::protobuf::internal::ArenaStringPtr conversion_summary_dir_;
  ::google::protobuf::internal::ArenaStringPtr tf_quantization_mode_;
  int input_format_;
  int output_format_;
  int inference_type_;
  float default_ranges_min_;
  float default_ranges_max_;
  bool drop_fake_quant_;
  bool reorder_across_fake_quant_;
  bool allow_custom_ops_;
  bool drop_control_dependency_;
  int inference_input_type_;
  float default_int16_ranges_min_;
  float default_int16_ranges_max_;
  bool debug_disable_recurrent_cell_fusion_;
  bool propagate_fake_quant_num_bits_;
  bool allow_nudging_weights_to_use_fast_gemm_kernel_;
  bool quantize_weights_;
  bool dump_graphviz_include_video_;
  bool post_training_quantize_;
  bool enable_select_tf_ops_;
  bool force_select_tf_ops_;
  bool quantize_to_float16_;
  bool allow_bfloat16_;
  bool allow_all_select_tf_ops_;
  bool unfold_large_splat_constant_;
  int accumulation_type_;
  bool default_to_single_batch_in_tensor_list_ops_;
  bool disable_per_channel_quantization_;
  bool enable_mlir_dynamic_range_quantizer_;
  bool disable_infer_tensor_range_;
  bool use_fake_quant_num_bits_;
  bool enable_dynamic_update_slice_;
  bool preserve_assert_op_;
  bool guarantee_all_funcs_one_use_;
  ::google::protobuf::int64 dedupe_array_min_size_bytes_;
  bool split_tflite_lstm_inputs_;
  bool allow_dynamic_tensors_;
  bool enable_tflite_resource_variables_;
  bool unfold_batchmatmul_;
  bool lower_tensor_list_ops_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TocoFlags

// optional .toco.FileFormat input_format = 1;
inline bool TocoFlags::has_input_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TocoFlags::set_has_input_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TocoFlags::clear_has_input_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TocoFlags::clear_input_format() {
  input_format_ = 0;
  clear_has_input_format();
}
inline ::toco::FileFormat TocoFlags::input_format() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.input_format)
  return static_cast< ::toco::FileFormat >(input_format_);
}
inline void TocoFlags::set_input_format(::toco::FileFormat value) {
  assert(::toco::FileFormat_IsValid(value));
  set_has_input_format();
  input_format_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.input_format)
}

// optional .toco.FileFormat output_format = 2;
inline bool TocoFlags::has_output_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TocoFlags::set_has_output_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TocoFlags::clear_has_output_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TocoFlags::clear_output_format() {
  output_format_ = 0;
  clear_has_output_format();
}
inline ::toco::FileFormat TocoFlags::output_format() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.output_format)
  return static_cast< ::toco::FileFormat >(output_format_);
}
inline void TocoFlags::set_output_format(::toco::FileFormat value) {
  assert(::toco::FileFormat_IsValid(value));
  set_has_output_format();
  output_format_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.output_format)
}

// optional .toco.IODataType inference_input_type = 11;
inline bool TocoFlags::has_inference_input_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TocoFlags::set_has_inference_input_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TocoFlags::clear_has_inference_input_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TocoFlags::clear_inference_input_type() {
  inference_input_type_ = 0;
  clear_has_inference_input_type();
}
inline ::toco::IODataType TocoFlags::inference_input_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.inference_input_type)
  return static_cast< ::toco::IODataType >(inference_input_type_);
}
inline void TocoFlags::set_inference_input_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  set_has_inference_input_type();
  inference_input_type_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.inference_input_type)
}

// optional .toco.IODataType inference_type = 4;
inline bool TocoFlags::has_inference_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TocoFlags::set_has_inference_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TocoFlags::clear_has_inference_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TocoFlags::clear_inference_type() {
  inference_type_ = 0;
  clear_has_inference_type();
}
inline ::toco::IODataType TocoFlags::inference_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.inference_type)
  return static_cast< ::toco::IODataType >(inference_type_);
}
inline void TocoFlags::set_inference_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  set_has_inference_type();
  inference_type_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.inference_type)
}

// optional float default_ranges_min = 5;
inline bool TocoFlags::has_default_ranges_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TocoFlags::set_has_default_ranges_min() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TocoFlags::clear_has_default_ranges_min() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TocoFlags::clear_default_ranges_min() {
  default_ranges_min_ = 0;
  clear_has_default_ranges_min();
}
inline float TocoFlags::default_ranges_min() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_ranges_min)
  return default_ranges_min_;
}
inline void TocoFlags::set_default_ranges_min(float value) {
  set_has_default_ranges_min();
  default_ranges_min_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_ranges_min)
}

// optional float default_ranges_max = 6;
inline bool TocoFlags::has_default_ranges_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TocoFlags::set_has_default_ranges_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TocoFlags::clear_has_default_ranges_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TocoFlags::clear_default_ranges_max() {
  default_ranges_max_ = 0;
  clear_has_default_ranges_max();
}
inline float TocoFlags::default_ranges_max() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_ranges_max)
  return default_ranges_max_;
}
inline void TocoFlags::set_default_ranges_max(float value) {
  set_has_default_ranges_max();
  default_ranges_max_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_ranges_max)
}

// optional float default_int16_ranges_min = 15;
inline bool TocoFlags::has_default_int16_ranges_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TocoFlags::set_has_default_int16_ranges_min() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TocoFlags::clear_has_default_int16_ranges_min() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TocoFlags::clear_default_int16_ranges_min() {
  default_int16_ranges_min_ = 0;
  clear_has_default_int16_ranges_min();
}
inline float TocoFlags::default_int16_ranges_min() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_int16_ranges_min)
  return default_int16_ranges_min_;
}
inline void TocoFlags::set_default_int16_ranges_min(float value) {
  set_has_default_int16_ranges_min();
  default_int16_ranges_min_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_int16_ranges_min)
}

// optional float default_int16_ranges_max = 16;
inline bool TocoFlags::has_default_int16_ranges_max() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TocoFlags::set_has_default_int16_ranges_max() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TocoFlags::clear_has_default_int16_ranges_max() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TocoFlags::clear_default_int16_ranges_max() {
  default_int16_ranges_max_ = 0;
  clear_has_default_int16_ranges_max();
}
inline float TocoFlags::default_int16_ranges_max() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_int16_ranges_max)
  return default_int16_ranges_max_;
}
inline void TocoFlags::set_default_int16_ranges_max(float value) {
  set_has_default_int16_ranges_max();
  default_int16_ranges_max_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_int16_ranges_max)
}

// optional bool drop_fake_quant = 7;
inline bool TocoFlags::has_drop_fake_quant() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TocoFlags::set_has_drop_fake_quant() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TocoFlags::clear_has_drop_fake_quant() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TocoFlags::clear_drop_fake_quant() {
  drop_fake_quant_ = false;
  clear_has_drop_fake_quant();
}
inline bool TocoFlags::drop_fake_quant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.drop_fake_quant)
  return drop_fake_quant_;
}
inline void TocoFlags::set_drop_fake_quant(bool value) {
  set_has_drop_fake_quant();
  drop_fake_quant_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.drop_fake_quant)
}

// optional bool reorder_across_fake_quant = 8;
inline bool TocoFlags::has_reorder_across_fake_quant() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TocoFlags::set_has_reorder_across_fake_quant() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TocoFlags::clear_has_reorder_across_fake_quant() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TocoFlags::clear_reorder_across_fake_quant() {
  reorder_across_fake_quant_ = false;
  clear_has_reorder_across_fake_quant();
}
inline bool TocoFlags::reorder_across_fake_quant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.reorder_across_fake_quant)
  return reorder_across_fake_quant_;
}
inline void TocoFlags::set_reorder_across_fake_quant(bool value) {
  set_has_reorder_across_fake_quant();
  reorder_across_fake_quant_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.reorder_across_fake_quant)
}

// optional bool allow_custom_ops = 10;
inline bool TocoFlags::has_allow_custom_ops() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TocoFlags::set_has_allow_custom_ops() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TocoFlags::clear_has_allow_custom_ops() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TocoFlags::clear_allow_custom_ops() {
  allow_custom_ops_ = false;
  clear_has_allow_custom_ops();
}
inline bool TocoFlags::allow_custom_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_custom_ops)
  return allow_custom_ops_;
}
inline void TocoFlags::set_allow_custom_ops(bool value) {
  set_has_allow_custom_ops();
  allow_custom_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_custom_ops)
}

// optional bool drop_control_dependency = 12;
inline bool TocoFlags::has_drop_control_dependency() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TocoFlags::set_has_drop_control_dependency() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TocoFlags::clear_has_drop_control_dependency() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TocoFlags::clear_drop_control_dependency() {
  drop_control_dependency_ = false;
  clear_has_drop_control_dependency();
}
inline bool TocoFlags::drop_control_dependency() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.drop_control_dependency)
  return drop_control_dependency_;
}
inline void TocoFlags::set_drop_control_dependency(bool value) {
  set_has_drop_control_dependency();
  drop_control_dependency_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.drop_control_dependency)
}

// optional bool debug_disable_recurrent_cell_fusion = 13;
inline bool TocoFlags::has_debug_disable_recurrent_cell_fusion() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TocoFlags::set_has_debug_disable_recurrent_cell_fusion() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TocoFlags::clear_has_debug_disable_recurrent_cell_fusion() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TocoFlags::clear_debug_disable_recurrent_cell_fusion() {
  debug_disable_recurrent_cell_fusion_ = false;
  clear_has_debug_disable_recurrent_cell_fusion();
}
inline bool TocoFlags::debug_disable_recurrent_cell_fusion() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.debug_disable_recurrent_cell_fusion)
  return debug_disable_recurrent_cell_fusion_;
}
inline void TocoFlags::set_debug_disable_recurrent_cell_fusion(bool value) {
  set_has_debug_disable_recurrent_cell_fusion();
  debug_disable_recurrent_cell_fusion_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.debug_disable_recurrent_cell_fusion)
}

// optional bool propagate_fake_quant_num_bits = 14;
inline bool TocoFlags::has_propagate_fake_quant_num_bits() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TocoFlags::set_has_propagate_fake_quant_num_bits() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TocoFlags::clear_has_propagate_fake_quant_num_bits() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TocoFlags::clear_propagate_fake_quant_num_bits() {
  propagate_fake_quant_num_bits_ = false;
  clear_has_propagate_fake_quant_num_bits();
}
inline bool TocoFlags::propagate_fake_quant_num_bits() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.propagate_fake_quant_num_bits)
  return propagate_fake_quant_num_bits_;
}
inline void TocoFlags::set_propagate_fake_quant_num_bits(bool value) {
  set_has_propagate_fake_quant_num_bits();
  propagate_fake_quant_num_bits_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.propagate_fake_quant_num_bits)
}

// optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
inline bool TocoFlags::has_allow_nudging_weights_to_use_fast_gemm_kernel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TocoFlags::set_has_allow_nudging_weights_to_use_fast_gemm_kernel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TocoFlags::clear_has_allow_nudging_weights_to_use_fast_gemm_kernel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TocoFlags::clear_allow_nudging_weights_to_use_fast_gemm_kernel() {
  allow_nudging_weights_to_use_fast_gemm_kernel_ = false;
  clear_has_allow_nudging_weights_to_use_fast_gemm_kernel();
}
inline bool TocoFlags::allow_nudging_weights_to_use_fast_gemm_kernel() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_nudging_weights_to_use_fast_gemm_kernel)
  return allow_nudging_weights_to_use_fast_gemm_kernel_;
}
inline void TocoFlags::set_allow_nudging_weights_to_use_fast_gemm_kernel(bool value) {
  set_has_allow_nudging_weights_to_use_fast_gemm_kernel();
  allow_nudging_weights_to_use_fast_gemm_kernel_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_nudging_weights_to_use_fast_gemm_kernel)
}

// optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
inline bool TocoFlags::has_dedupe_array_min_size_bytes() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TocoFlags::set_has_dedupe_array_min_size_bytes() {
  _has_bits_[1] |= 0x00000010u;
}
inline void TocoFlags::clear_has_dedupe_array_min_size_bytes() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void TocoFlags::clear_dedupe_array_min_size_bytes() {
  dedupe_array_min_size_bytes_ = GOOGLE_LONGLONG(64);
  clear_has_dedupe_array_min_size_bytes();
}
inline ::google::protobuf::int64 TocoFlags::dedupe_array_min_size_bytes() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.dedupe_array_min_size_bytes)
  return dedupe_array_min_size_bytes_;
}
inline void TocoFlags::set_dedupe_array_min_size_bytes(::google::protobuf::int64 value) {
  set_has_dedupe_array_min_size_bytes();
  dedupe_array_min_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.dedupe_array_min_size_bytes)
}

// optional bool split_tflite_lstm_inputs = 19 [default = true];
inline bool TocoFlags::has_split_tflite_lstm_inputs() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void TocoFlags::set_has_split_tflite_lstm_inputs() {
  _has_bits_[1] |= 0x00000020u;
}
inline void TocoFlags::clear_has_split_tflite_lstm_inputs() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void TocoFlags::clear_split_tflite_lstm_inputs() {
  split_tflite_lstm_inputs_ = true;
  clear_has_split_tflite_lstm_inputs();
}
inline bool TocoFlags::split_tflite_lstm_inputs() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.split_tflite_lstm_inputs)
  return split_tflite_lstm_inputs_;
}
inline void TocoFlags::set_split_tflite_lstm_inputs(bool value) {
  set_has_split_tflite_lstm_inputs();
  split_tflite_lstm_inputs_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.split_tflite_lstm_inputs)
}

// optional bool quantize_weights = 20 [default = false];
inline bool TocoFlags::has_quantize_weights() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TocoFlags::set_has_quantize_weights() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TocoFlags::clear_has_quantize_weights() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TocoFlags::clear_quantize_weights() {
  quantize_weights_ = false;
  clear_has_quantize_weights();
}
inline bool TocoFlags::quantize_weights() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.quantize_weights)
  return quantize_weights_;
}
inline void TocoFlags::set_quantize_weights(bool value) {
  set_has_quantize_weights();
  quantize_weights_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.quantize_weights)
}

// optional string dump_graphviz_dir = 24;
inline bool TocoFlags::has_dump_graphviz_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TocoFlags::set_has_dump_graphviz_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TocoFlags::clear_has_dump_graphviz_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TocoFlags::clear_dump_graphviz_dir() {
  dump_graphviz_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_graphviz_dir();
}
inline const ::std::string& TocoFlags::dump_graphviz_dir() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.dump_graphviz_dir)
  return dump_graphviz_dir_.GetNoArena();
}
inline void TocoFlags::set_dump_graphviz_dir(const ::std::string& value) {
  set_has_dump_graphviz_dir();
  dump_graphviz_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.dump_graphviz_dir)
}
#if LANG_CXX11
inline void TocoFlags::set_dump_graphviz_dir(::std::string&& value) {
  set_has_dump_graphviz_dir();
  dump_graphviz_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoFlags.dump_graphviz_dir)
}
#endif
inline void TocoFlags::set_dump_graphviz_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dump_graphviz_dir();
  dump_graphviz_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.dump_graphviz_dir)
}
inline void TocoFlags::set_dump_graphviz_dir(const char* value, size_t size) {
  set_has_dump_graphviz_dir();
  dump_graphviz_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.dump_graphviz_dir)
}
inline ::std::string* TocoFlags::mutable_dump_graphviz_dir() {
  set_has_dump_graphviz_dir();
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.dump_graphviz_dir)
  return dump_graphviz_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoFlags::release_dump_graphviz_dir() {
  // @@protoc_insertion_point(field_release:toco.TocoFlags.dump_graphviz_dir)
  if (!has_dump_graphviz_dir()) {
    return NULL;
  }
  clear_has_dump_graphviz_dir();
  return dump_graphviz_dir_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoFlags::set_allocated_dump_graphviz_dir(::std::string* dump_graphviz_dir) {
  if (dump_graphviz_dir != NULL) {
    set_has_dump_graphviz_dir();
  } else {
    clear_has_dump_graphviz_dir();
  }
  dump_graphviz_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_graphviz_dir);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoFlags.dump_graphviz_dir)
}

// optional bool dump_graphviz_include_video = 25;
inline bool TocoFlags::has_dump_graphviz_include_video() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TocoFlags::set_has_dump_graphviz_include_video() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TocoFlags::clear_has_dump_graphviz_include_video() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TocoFlags::clear_dump_graphviz_include_video() {
  dump_graphviz_include_video_ = false;
  clear_has_dump_graphviz_include_video();
}
inline bool TocoFlags::dump_graphviz_include_video() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.dump_graphviz_include_video)
  return dump_graphviz_include_video_;
}
inline void TocoFlags::set_dump_graphviz_include_video(bool value) {
  set_has_dump_graphviz_include_video();
  dump_graphviz_include_video_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.dump_graphviz_include_video)
}

// optional bool post_training_quantize = 26 [default = false];
inline bool TocoFlags::has_post_training_quantize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TocoFlags::set_has_post_training_quantize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TocoFlags::clear_has_post_training_quantize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TocoFlags::clear_post_training_quantize() {
  post_training_quantize_ = false;
  clear_has_post_training_quantize();
}
inline bool TocoFlags::post_training_quantize() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.post_training_quantize)
  return post_training_quantize_;
}
inline void TocoFlags::set_post_training_quantize(bool value) {
  set_has_post_training_quantize();
  post_training_quantize_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.post_training_quantize)
}

// optional bool enable_select_tf_ops = 27 [default = false];
inline bool TocoFlags::has_enable_select_tf_ops() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TocoFlags::set_has_enable_select_tf_ops() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TocoFlags::clear_has_enable_select_tf_ops() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TocoFlags::clear_enable_select_tf_ops() {
  enable_select_tf_ops_ = false;
  clear_has_enable_select_tf_ops();
}
inline bool TocoFlags::enable_select_tf_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_select_tf_ops)
  return enable_select_tf_ops_;
}
inline void TocoFlags::set_enable_select_tf_ops(bool value) {
  set_has_enable_select_tf_ops();
  enable_select_tf_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_select_tf_ops)
}

// optional bool force_select_tf_ops = 28 [default = false];
inline bool TocoFlags::has_force_select_tf_ops() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TocoFlags::set_has_force_select_tf_ops() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TocoFlags::clear_has_force_select_tf_ops() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TocoFlags::clear_force_select_tf_ops() {
  force_select_tf_ops_ = false;
  clear_has_force_select_tf_ops();
}
inline bool TocoFlags::force_select_tf_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.force_select_tf_ops)
  return force_select_tf_ops_;
}
inline void TocoFlags::set_force_select_tf_ops(bool value) {
  set_has_force_select_tf_ops();
  force_select_tf_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.force_select_tf_ops)
}

// optional bool quantize_to_float16 = 29 [default = false];
inline bool TocoFlags::has_quantize_to_float16() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TocoFlags::set_has_quantize_to_float16() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TocoFlags::clear_has_quantize_to_float16() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TocoFlags::clear_quantize_to_float16() {
  quantize_to_float16_ = false;
  clear_has_quantize_to_float16();
}
inline bool TocoFlags::quantize_to_float16() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.quantize_to_float16)
  return quantize_to_float16_;
}
inline void TocoFlags::set_quantize_to_float16(bool value) {
  set_has_quantize_to_float16();
  quantize_to_float16_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.quantize_to_float16)
}

// optional bool allow_dynamic_tensors = 30 [default = true];
inline bool TocoFlags::has_allow_dynamic_tensors() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void TocoFlags::set_has_allow_dynamic_tensors() {
  _has_bits_[1] |= 0x00000040u;
}
inline void TocoFlags::clear_has_allow_dynamic_tensors() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void TocoFlags::clear_allow_dynamic_tensors() {
  allow_dynamic_tensors_ = true;
  clear_has_allow_dynamic_tensors();
}
inline bool TocoFlags::allow_dynamic_tensors() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_dynamic_tensors)
  return allow_dynamic_tensors_;
}
inline void TocoFlags::set_allow_dynamic_tensors(bool value) {
  set_has_allow_dynamic_tensors();
  allow_dynamic_tensors_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_dynamic_tensors)
}

// optional string conversion_summary_dir = 31;
inline bool TocoFlags::has_conversion_summary_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TocoFlags::set_has_conversion_summary_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TocoFlags::clear_has_conversion_summary_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TocoFlags::clear_conversion_summary_dir() {
  conversion_summary_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conversion_summary_dir();
}
inline const ::std::string& TocoFlags::conversion_summary_dir() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.conversion_summary_dir)
  return conversion_summary_dir_.GetNoArena();
}
inline void TocoFlags::set_conversion_summary_dir(const ::std::string& value) {
  set_has_conversion_summary_dir();
  conversion_summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.conversion_summary_dir)
}
#if LANG_CXX11
inline void TocoFlags::set_conversion_summary_dir(::std::string&& value) {
  set_has_conversion_summary_dir();
  conversion_summary_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoFlags.conversion_summary_dir)
}
#endif
inline void TocoFlags::set_conversion_summary_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conversion_summary_dir();
  conversion_summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.conversion_summary_dir)
}
inline void TocoFlags::set_conversion_summary_dir(const char* value, size_t size) {
  set_has_conversion_summary_dir();
  conversion_summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.conversion_summary_dir)
}
inline ::std::string* TocoFlags::mutable_conversion_summary_dir() {
  set_has_conversion_summary_dir();
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.conversion_summary_dir)
  return conversion_summary_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoFlags::release_conversion_summary_dir() {
  // @@protoc_insertion_point(field_release:toco.TocoFlags.conversion_summary_dir)
  if (!has_conversion_summary_dir()) {
    return NULL;
  }
  clear_has_conversion_summary_dir();
  return conversion_summary_dir_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoFlags::set_allocated_conversion_summary_dir(::std::string* conversion_summary_dir) {
  if (conversion_summary_dir != NULL) {
    set_has_conversion_summary_dir();
  } else {
    clear_has_conversion_summary_dir();
  }
  conversion_summary_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversion_summary_dir);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoFlags.conversion_summary_dir)
}

// repeated string custom_opdefs = 32 [deprecated = true];
inline int TocoFlags::custom_opdefs_size() const {
  return custom_opdefs_.size();
}
inline void TocoFlags::clear_custom_opdefs() {
  custom_opdefs_.Clear();
}
inline const ::std::string& TocoFlags::custom_opdefs(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.custom_opdefs)
  return custom_opdefs_.Get(index);
}
inline ::std::string* TocoFlags::mutable_custom_opdefs(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.custom_opdefs)
  return custom_opdefs_.Mutable(index);
}
inline void TocoFlags::set_custom_opdefs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoFlags.custom_opdefs)
  custom_opdefs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoFlags::set_custom_opdefs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoFlags.custom_opdefs)
  custom_opdefs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoFlags::set_custom_opdefs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  custom_opdefs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::set_custom_opdefs(int index, const char* value, size_t size) {
  custom_opdefs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.custom_opdefs)
}
inline ::std::string* TocoFlags::add_custom_opdefs() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoFlags.custom_opdefs)
  return custom_opdefs_.Add();
}
inline void TocoFlags::add_custom_opdefs(const ::std::string& value) {
  custom_opdefs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoFlags.custom_opdefs)
}
#if LANG_CXX11
inline void TocoFlags::add_custom_opdefs(::std::string&& value) {
  custom_opdefs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoFlags.custom_opdefs)
}
#endif
inline void TocoFlags::add_custom_opdefs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  custom_opdefs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoFlags.custom_opdefs)
}
inline void TocoFlags::add_custom_opdefs(const char* value, size_t size) {
  custom_opdefs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoFlags.custom_opdefs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoFlags::custom_opdefs() const {
  // @@protoc_insertion_point(field_list:toco.TocoFlags.custom_opdefs)
  return custom_opdefs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoFlags::mutable_custom_opdefs() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoFlags.custom_opdefs)
  return &custom_opdefs_;
}

// repeated string select_user_tf_ops = 33;
inline int TocoFlags::select_user_tf_ops_size() const {
  return select_user_tf_ops_.size();
}
inline void TocoFlags::clear_select_user_tf_ops() {
  select_user_tf_ops_.Clear();
}
inline const ::std::string& TocoFlags::select_user_tf_ops(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.select_user_tf_ops)
  return select_user_tf_ops_.Get(index);
}
inline ::std::string* TocoFlags::mutable_select_user_tf_ops(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.select_user_tf_ops)
  return select_user_tf_ops_.Mutable(index);
}
inline void TocoFlags::set_select_user_tf_ops(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoFlags.select_user_tf_ops)
  select_user_tf_ops_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoFlags::set_select_user_tf_ops(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoFlags.select_user_tf_ops)
  select_user_tf_ops_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoFlags::set_select_user_tf_ops(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  select_user_tf_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::set_select_user_tf_ops(int index, const char* value, size_t size) {
  select_user_tf_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.select_user_tf_ops)
}
inline ::std::string* TocoFlags::add_select_user_tf_ops() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoFlags.select_user_tf_ops)
  return select_user_tf_ops_.Add();
}
inline void TocoFlags::add_select_user_tf_ops(const ::std::string& value) {
  select_user_tf_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoFlags.select_user_tf_ops)
}
#if LANG_CXX11
inline void TocoFlags::add_select_user_tf_ops(::std::string&& value) {
  select_user_tf_ops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoFlags.select_user_tf_ops)
}
#endif
inline void TocoFlags::add_select_user_tf_ops(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  select_user_tf_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoFlags.select_user_tf_ops)
}
inline void TocoFlags::add_select_user_tf_ops(const char* value, size_t size) {
  select_user_tf_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoFlags.select_user_tf_ops)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoFlags::select_user_tf_ops() const {
  // @@protoc_insertion_point(field_list:toco.TocoFlags.select_user_tf_ops)
  return select_user_tf_ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoFlags::mutable_select_user_tf_ops() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoFlags.select_user_tf_ops)
  return &select_user_tf_ops_;
}

// optional bool enable_tflite_resource_variables = 34 [default = true];
inline bool TocoFlags::has_enable_tflite_resource_variables() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void TocoFlags::set_has_enable_tflite_resource_variables() {
  _has_bits_[1] |= 0x00000080u;
}
inline void TocoFlags::clear_has_enable_tflite_resource_variables() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void TocoFlags::clear_enable_tflite_resource_variables() {
  enable_tflite_resource_variables_ = true;
  clear_has_enable_tflite_resource_variables();
}
inline bool TocoFlags::enable_tflite_resource_variables() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_tflite_resource_variables)
  return enable_tflite_resource_variables_;
}
inline void TocoFlags::set_enable_tflite_resource_variables(bool value) {
  set_has_enable_tflite_resource_variables();
  enable_tflite_resource_variables_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_tflite_resource_variables)
}

// optional bool unfold_batchmatmul = 35 [default = true];
inline bool TocoFlags::has_unfold_batchmatmul() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void TocoFlags::set_has_unfold_batchmatmul() {
  _has_bits_[1] |= 0x00000100u;
}
inline void TocoFlags::clear_has_unfold_batchmatmul() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void TocoFlags::clear_unfold_batchmatmul() {
  unfold_batchmatmul_ = true;
  clear_has_unfold_batchmatmul();
}
inline bool TocoFlags::unfold_batchmatmul() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.unfold_batchmatmul)
  return unfold_batchmatmul_;
}
inline void TocoFlags::set_unfold_batchmatmul(bool value) {
  set_has_unfold_batchmatmul();
  unfold_batchmatmul_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.unfold_batchmatmul)
}

// optional bool lower_tensor_list_ops = 36 [default = true];
inline bool TocoFlags::has_lower_tensor_list_ops() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void TocoFlags::set_has_lower_tensor_list_ops() {
  _has_bits_[1] |= 0x00000200u;
}
inline void TocoFlags::clear_has_lower_tensor_list_ops() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void TocoFlags::clear_lower_tensor_list_ops() {
  lower_tensor_list_ops_ = true;
  clear_has_lower_tensor_list_ops();
}
inline bool TocoFlags::lower_tensor_list_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.lower_tensor_list_ops)
  return lower_tensor_list_ops_;
}
inline void TocoFlags::set_lower_tensor_list_ops(bool value) {
  set_has_lower_tensor_list_ops();
  lower_tensor_list_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.lower_tensor_list_ops)
}

// optional .toco.IODataType accumulation_type = 37;
inline bool TocoFlags::has_accumulation_type() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TocoFlags::set_has_accumulation_type() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TocoFlags::clear_has_accumulation_type() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TocoFlags::clear_accumulation_type() {
  accumulation_type_ = 0;
  clear_has_accumulation_type();
}
inline ::toco::IODataType TocoFlags::accumulation_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.accumulation_type)
  return static_cast< ::toco::IODataType >(accumulation_type_);
}
inline void TocoFlags::set_accumulation_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  set_has_accumulation_type();
  accumulation_type_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.accumulation_type)
}

// optional bool allow_bfloat16 = 38 [default = false];
inline bool TocoFlags::has_allow_bfloat16() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TocoFlags::set_has_allow_bfloat16() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TocoFlags::clear_has_allow_bfloat16() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TocoFlags::clear_allow_bfloat16() {
  allow_bfloat16_ = false;
  clear_has_allow_bfloat16();
}
inline bool TocoFlags::allow_bfloat16() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_bfloat16)
  return allow_bfloat16_;
}
inline void TocoFlags::set_allow_bfloat16(bool value) {
  set_has_allow_bfloat16();
  allow_bfloat16_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_bfloat16)
}

// optional bool allow_all_select_tf_ops = 39;
inline bool TocoFlags::has_allow_all_select_tf_ops() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TocoFlags::set_has_allow_all_select_tf_ops() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TocoFlags::clear_has_allow_all_select_tf_ops() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TocoFlags::clear_allow_all_select_tf_ops() {
  allow_all_select_tf_ops_ = false;
  clear_has_allow_all_select_tf_ops();
}
inline bool TocoFlags::allow_all_select_tf_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_all_select_tf_ops)
  return allow_all_select_tf_ops_;
}
inline void TocoFlags::set_allow_all_select_tf_ops(bool value) {
  set_has_allow_all_select_tf_ops();
  allow_all_select_tf_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_all_select_tf_ops)
}

// optional bool unfold_large_splat_constant = 40 [default = false];
inline bool TocoFlags::has_unfold_large_splat_constant() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TocoFlags::set_has_unfold_large_splat_constant() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TocoFlags::clear_has_unfold_large_splat_constant() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TocoFlags::clear_unfold_large_splat_constant() {
  unfold_large_splat_constant_ = false;
  clear_has_unfold_large_splat_constant();
}
inline bool TocoFlags::unfold_large_splat_constant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.unfold_large_splat_constant)
  return unfold_large_splat_constant_;
}
inline void TocoFlags::set_unfold_large_splat_constant(bool value) {
  set_has_unfold_large_splat_constant();
  unfold_large_splat_constant_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.unfold_large_splat_constant)
}

// repeated string supported_backends = 41;
inline int TocoFlags::supported_backends_size() const {
  return supported_backends_.size();
}
inline void TocoFlags::clear_supported_backends() {
  supported_backends_.Clear();
}
inline const ::std::string& TocoFlags::supported_backends(int index) const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.supported_backends)
  return supported_backends_.Get(index);
}
inline ::std::string* TocoFlags::mutable_supported_backends(int index) {
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.supported_backends)
  return supported_backends_.Mutable(index);
}
inline void TocoFlags::set_supported_backends(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:toco.TocoFlags.supported_backends)
  supported_backends_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TocoFlags::set_supported_backends(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:toco.TocoFlags.supported_backends)
  supported_backends_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TocoFlags::set_supported_backends(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_backends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::set_supported_backends(int index, const char* value, size_t size) {
  supported_backends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.supported_backends)
}
inline ::std::string* TocoFlags::add_supported_backends() {
  // @@protoc_insertion_point(field_add_mutable:toco.TocoFlags.supported_backends)
  return supported_backends_.Add();
}
inline void TocoFlags::add_supported_backends(const ::std::string& value) {
  supported_backends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:toco.TocoFlags.supported_backends)
}
#if LANG_CXX11
inline void TocoFlags::add_supported_backends(::std::string&& value) {
  supported_backends_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:toco.TocoFlags.supported_backends)
}
#endif
inline void TocoFlags::add_supported_backends(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_backends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:toco.TocoFlags.supported_backends)
}
inline void TocoFlags::add_supported_backends(const char* value, size_t size) {
  supported_backends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:toco.TocoFlags.supported_backends)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TocoFlags::supported_backends() const {
  // @@protoc_insertion_point(field_list:toco.TocoFlags.supported_backends)
  return supported_backends_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TocoFlags::mutable_supported_backends() {
  // @@protoc_insertion_point(field_mutable_list:toco.TocoFlags.supported_backends)
  return &supported_backends_;
}

// optional bool default_to_single_batch_in_tensor_list_ops = 42 [default = false];
inline bool TocoFlags::has_default_to_single_batch_in_tensor_list_ops() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TocoFlags::set_has_default_to_single_batch_in_tensor_list_ops() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TocoFlags::clear_has_default_to_single_batch_in_tensor_list_ops() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TocoFlags::clear_default_to_single_batch_in_tensor_list_ops() {
  default_to_single_batch_in_tensor_list_ops_ = false;
  clear_has_default_to_single_batch_in_tensor_list_ops();
}
inline bool TocoFlags::default_to_single_batch_in_tensor_list_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_to_single_batch_in_tensor_list_ops)
  return default_to_single_batch_in_tensor_list_ops_;
}
inline void TocoFlags::set_default_to_single_batch_in_tensor_list_ops(bool value) {
  set_has_default_to_single_batch_in_tensor_list_ops();
  default_to_single_batch_in_tensor_list_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_to_single_batch_in_tensor_list_ops)
}

// optional bool disable_per_channel_quantization = 43 [default = false];
inline bool TocoFlags::has_disable_per_channel_quantization() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TocoFlags::set_has_disable_per_channel_quantization() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TocoFlags::clear_has_disable_per_channel_quantization() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TocoFlags::clear_disable_per_channel_quantization() {
  disable_per_channel_quantization_ = false;
  clear_has_disable_per_channel_quantization();
}
inline bool TocoFlags::disable_per_channel_quantization() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.disable_per_channel_quantization)
  return disable_per_channel_quantization_;
}
inline void TocoFlags::set_disable_per_channel_quantization(bool value) {
  set_has_disable_per_channel_quantization();
  disable_per_channel_quantization_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.disable_per_channel_quantization)
}

// optional bool enable_mlir_dynamic_range_quantizer = 44 [default = false];
inline bool TocoFlags::has_enable_mlir_dynamic_range_quantizer() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TocoFlags::set_has_enable_mlir_dynamic_range_quantizer() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TocoFlags::clear_has_enable_mlir_dynamic_range_quantizer() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TocoFlags::clear_enable_mlir_dynamic_range_quantizer() {
  enable_mlir_dynamic_range_quantizer_ = false;
  clear_has_enable_mlir_dynamic_range_quantizer();
}
inline bool TocoFlags::enable_mlir_dynamic_range_quantizer() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_mlir_dynamic_range_quantizer)
  return enable_mlir_dynamic_range_quantizer_;
}
inline void TocoFlags::set_enable_mlir_dynamic_range_quantizer(bool value) {
  set_has_enable_mlir_dynamic_range_quantizer();
  enable_mlir_dynamic_range_quantizer_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_mlir_dynamic_range_quantizer)
}

// optional string tf_quantization_mode = 45;
inline bool TocoFlags::has_tf_quantization_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TocoFlags::set_has_tf_quantization_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TocoFlags::clear_has_tf_quantization_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TocoFlags::clear_tf_quantization_mode() {
  tf_quantization_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tf_quantization_mode();
}
inline const ::std::string& TocoFlags::tf_quantization_mode() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.tf_quantization_mode)
  return tf_quantization_mode_.GetNoArena();
}
inline void TocoFlags::set_tf_quantization_mode(const ::std::string& value) {
  set_has_tf_quantization_mode();
  tf_quantization_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:toco.TocoFlags.tf_quantization_mode)
}
#if LANG_CXX11
inline void TocoFlags::set_tf_quantization_mode(::std::string&& value) {
  set_has_tf_quantization_mode();
  tf_quantization_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:toco.TocoFlags.tf_quantization_mode)
}
#endif
inline void TocoFlags::set_tf_quantization_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tf_quantization_mode();
  tf_quantization_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:toco.TocoFlags.tf_quantization_mode)
}
inline void TocoFlags::set_tf_quantization_mode(const char* value, size_t size) {
  set_has_tf_quantization_mode();
  tf_quantization_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:toco.TocoFlags.tf_quantization_mode)
}
inline ::std::string* TocoFlags::mutable_tf_quantization_mode() {
  set_has_tf_quantization_mode();
  // @@protoc_insertion_point(field_mutable:toco.TocoFlags.tf_quantization_mode)
  return tf_quantization_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TocoFlags::release_tf_quantization_mode() {
  // @@protoc_insertion_point(field_release:toco.TocoFlags.tf_quantization_mode)
  if (!has_tf_quantization_mode()) {
    return NULL;
  }
  clear_has_tf_quantization_mode();
  return tf_quantization_mode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TocoFlags::set_allocated_tf_quantization_mode(::std::string* tf_quantization_mode) {
  if (tf_quantization_mode != NULL) {
    set_has_tf_quantization_mode();
  } else {
    clear_has_tf_quantization_mode();
  }
  tf_quantization_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tf_quantization_mode);
  // @@protoc_insertion_point(field_set_allocated:toco.TocoFlags.tf_quantization_mode)
}

// optional bool disable_infer_tensor_range = 46 [default = false];
inline bool TocoFlags::has_disable_infer_tensor_range() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TocoFlags::set_has_disable_infer_tensor_range() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TocoFlags::clear_has_disable_infer_tensor_range() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TocoFlags::clear_disable_infer_tensor_range() {
  disable_infer_tensor_range_ = false;
  clear_has_disable_infer_tensor_range();
}
inline bool TocoFlags::disable_infer_tensor_range() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.disable_infer_tensor_range)
  return disable_infer_tensor_range_;
}
inline void TocoFlags::set_disable_infer_tensor_range(bool value) {
  set_has_disable_infer_tensor_range();
  disable_infer_tensor_range_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.disable_infer_tensor_range)
}

// optional bool use_fake_quant_num_bits = 47 [default = false];
inline bool TocoFlags::has_use_fake_quant_num_bits() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TocoFlags::set_has_use_fake_quant_num_bits() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TocoFlags::clear_has_use_fake_quant_num_bits() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TocoFlags::clear_use_fake_quant_num_bits() {
  use_fake_quant_num_bits_ = false;
  clear_has_use_fake_quant_num_bits();
}
inline bool TocoFlags::use_fake_quant_num_bits() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.use_fake_quant_num_bits)
  return use_fake_quant_num_bits_;
}
inline void TocoFlags::set_use_fake_quant_num_bits(bool value) {
  set_has_use_fake_quant_num_bits();
  use_fake_quant_num_bits_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.use_fake_quant_num_bits)
}

// optional bool enable_dynamic_update_slice = 48 [default = false];
inline bool TocoFlags::has_enable_dynamic_update_slice() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TocoFlags::set_has_enable_dynamic_update_slice() {
  _has_bits_[1] |= 0x00000002u;
}
inline void TocoFlags::clear_has_enable_dynamic_update_slice() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void TocoFlags::clear_enable_dynamic_update_slice() {
  enable_dynamic_update_slice_ = false;
  clear_has_enable_dynamic_update_slice();
}
inline bool TocoFlags::enable_dynamic_update_slice() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.enable_dynamic_update_slice)
  return enable_dynamic_update_slice_;
}
inline void TocoFlags::set_enable_dynamic_update_slice(bool value) {
  set_has_enable_dynamic_update_slice();
  enable_dynamic_update_slice_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.enable_dynamic_update_slice)
}

// optional bool preserve_assert_op = 49 [default = false];
inline bool TocoFlags::has_preserve_assert_op() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void TocoFlags::set_has_preserve_assert_op() {
  _has_bits_[1] |= 0x00000004u;
}
inline void TocoFlags::clear_has_preserve_assert_op() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void TocoFlags::clear_preserve_assert_op() {
  preserve_assert_op_ = false;
  clear_has_preserve_assert_op();
}
inline bool TocoFlags::preserve_assert_op() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.preserve_assert_op)
  return preserve_assert_op_;
}
inline void TocoFlags::set_preserve_assert_op(bool value) {
  set_has_preserve_assert_op();
  preserve_assert_op_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.preserve_assert_op)
}

// optional bool guarantee_all_funcs_one_use = 50 [default = false];
inline bool TocoFlags::has_guarantee_all_funcs_one_use() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TocoFlags::set_has_guarantee_all_funcs_one_use() {
  _has_bits_[1] |= 0x00000008u;
}
inline void TocoFlags::clear_has_guarantee_all_funcs_one_use() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void TocoFlags::clear_guarantee_all_funcs_one_use() {
  guarantee_all_funcs_one_use_ = false;
  clear_has_guarantee_all_funcs_one_use();
}
inline bool TocoFlags::guarantee_all_funcs_one_use() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.guarantee_all_funcs_one_use)
  return guarantee_all_funcs_one_use_;
}
inline void TocoFlags::set_guarantee_all_funcs_one_use(bool value) {
  set_has_guarantee_all_funcs_one_use();
  guarantee_all_funcs_one_use_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.guarantee_all_funcs_one_use)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace toco

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::toco::FileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toco::FileFormat>() {
  return ::toco::FileFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
