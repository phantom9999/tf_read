// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/profiler_options.proto

#include "tensorflow/core/profiler/profiler_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProfileOptions;
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto
namespace tensorflow {
class ProfileOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfileOptions>
      _instance;
} _ProfileOptions_default_instance_;
class RemoteProfilerSessionManagerOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteProfilerSessionManagerOptions>
      _instance;
} _RemoteProfilerSessionManagerOptions_default_instance_;
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto {
static void InitDefaultsProfileOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileOptions_default_instance_;
    new (ptr) ::tensorflow::ProfileOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProfileOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProfileOptions}, {}};

static void InitDefaultsRemoteProfilerSessionManagerOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RemoteProfilerSessionManagerOptions_default_instance_;
    new (ptr) ::tensorflow::RemoteProfilerSessionManagerOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RemoteProfilerSessionManagerOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteProfilerSessionManagerOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteProfilerSessionManagerOptions}, {
      &protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::scc_info_ProfileOptions.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProfileOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteProfilerSessionManagerOptions.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, include_dataset_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, host_tracer_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, device_tracer_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, python_tracer_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, enable_hlo_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, start_timestamp_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, duration_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::ProfileOptions, repository_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, profiler_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, service_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, session_creation_timestamp_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, max_session_duration_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, delay_ms_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::ProfileOptions)},
  { 15, -1, sizeof(::tensorflow::RemoteProfilerSessionManagerOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_ProfileOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_RemoteProfilerSessionManagerOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/profiler/profiler_options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/tensorflow/core/profiler/profiler_opti"
      "ons.proto\022\ntensorflow\"\203\003\n\016ProfileOptions"
      "\022\017\n\007version\030\005 \001(\r\022:\n\013device_type\030\006 \001(\0162%"
      ".tensorflow.ProfileOptions.DeviceType\022\033\n"
      "\023include_dataset_ops\030\001 \001(\010\022\031\n\021host_trace"
      "r_level\030\002 \001(\r\022\033\n\023device_tracer_level\030\003 \001"
      "(\r\022\033\n\023python_tracer_level\030\004 \001(\r\022\030\n\020enabl"
      "e_hlo_proto\030\007 \001(\010\022\032\n\022start_timestamp_ns\030"
      "\010 \001(\004\022\023\n\013duration_ms\030\t \001(\004\022\027\n\017repository"
      "_path\030\n \001(\t\"N\n\nDeviceType\022\017\n\013UNSPECIFIED"
      "\020\000\022\007\n\003CPU\020\001\022\007\n\003GPU\020\002\022\007\n\003TPU\020\003\022\024\n\020PLUGGAB"
      "LE_DEVICE\020\004\"\320\001\n#RemoteProfilerSessionMan"
      "agerOptions\0224\n\020profiler_options\030\001 \001(\0132\032."
      "tensorflow.ProfileOptions\022\031\n\021service_add"
      "resses\030\002 \003(\t\022%\n\035session_creation_timesta"
      "mp_ns\030\003 \001(\004\022\037\n\027max_session_duration_ms\030\004"
      " \001(\004\022\020\n\010delay_ms\030\005 \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/profiler_options.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto
namespace tensorflow {
const ::google::protobuf::EnumDescriptor* ProfileOptions_DeviceType_descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::file_level_enum_descriptors[0];
}
bool ProfileOptions_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfileOptions_DeviceType ProfileOptions::UNSPECIFIED;
const ProfileOptions_DeviceType ProfileOptions::CPU;
const ProfileOptions_DeviceType ProfileOptions::GPU;
const ProfileOptions_DeviceType ProfileOptions::TPU;
const ProfileOptions_DeviceType ProfileOptions::PLUGGABLE_DEVICE;
const ProfileOptions_DeviceType ProfileOptions::DeviceType_MIN;
const ProfileOptions_DeviceType ProfileOptions::DeviceType_MAX;
const int ProfileOptions::DeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ProfileOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileOptions::kVersionFieldNumber;
const int ProfileOptions::kDeviceTypeFieldNumber;
const int ProfileOptions::kIncludeDatasetOpsFieldNumber;
const int ProfileOptions::kHostTracerLevelFieldNumber;
const int ProfileOptions::kDeviceTracerLevelFieldNumber;
const int ProfileOptions::kPythonTracerLevelFieldNumber;
const int ProfileOptions::kEnableHloProtoFieldNumber;
const int ProfileOptions::kStartTimestampNsFieldNumber;
const int ProfileOptions::kDurationMsFieldNumber;
const int ProfileOptions::kRepositoryPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileOptions::ProfileOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::scc_info_ProfileOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileOptions)
}
ProfileOptions::ProfileOptions(const ProfileOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repository_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.repository_path().size() > 0) {
    repository_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repository_path_);
  }
  ::memcpy(&host_tracer_level_, &from.host_tracer_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&host_tracer_level_)) + sizeof(duration_ms_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileOptions)
}

void ProfileOptions::SharedCtor() {
  repository_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&host_tracer_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_ms_) -
      reinterpret_cast<char*>(&host_tracer_level_)) + sizeof(duration_ms_));
}

ProfileOptions::~ProfileOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileOptions)
  SharedDtor();
}

void ProfileOptions::SharedDtor() {
  repository_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfileOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProfileOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileOptions& ProfileOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::scc_info_ProfileOptions.base);
  return *internal_default_instance();
}


void ProfileOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repository_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&host_tracer_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_ms_) -
      reinterpret_cast<char*>(&host_tracer_level_)) + sizeof(duration_ms_));
  _internal_metadata_.Clear();
}

bool ProfileOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ProfileOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool include_dataset_ops = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_dataset_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 host_tracer_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_tracer_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 device_tracer_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_tracer_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 python_tracer_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &python_tracer_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ProfileOptions.DeviceType device_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::tensorflow::ProfileOptions_DeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_hlo_proto = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hlo_proto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_timestamp_ns = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 duration_ms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string repository_path = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repository_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repository_path().data(), static_cast<int>(this->repository_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ProfileOptions.repository_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ProfileOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ProfileOptions)
  return false;
#undef DO_
}

void ProfileOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ProfileOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_dataset_ops = 1;
  if (this->include_dataset_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->include_dataset_ops(), output);
  }

  // uint32 host_tracer_level = 2;
  if (this->host_tracer_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_tracer_level(), output);
  }

  // uint32 device_tracer_level = 3;
  if (this->device_tracer_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->device_tracer_level(), output);
  }

  // uint32 python_tracer_level = 4;
  if (this->python_tracer_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->python_tracer_level(), output);
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  // .tensorflow.ProfileOptions.DeviceType device_type = 6;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->device_type(), output);
  }

  // bool enable_hlo_proto = 7;
  if (this->enable_hlo_proto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_hlo_proto(), output);
  }

  // uint64 start_timestamp_ns = 8;
  if (this->start_timestamp_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->start_timestamp_ns(), output);
  }

  // uint64 duration_ms = 9;
  if (this->duration_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->duration_ms(), output);
  }

  // string repository_path = 10;
  if (this->repository_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repository_path().data(), static_cast<int>(this->repository_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileOptions.repository_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->repository_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ProfileOptions)
}

::google::protobuf::uint8* ProfileOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_dataset_ops = 1;
  if (this->include_dataset_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->include_dataset_ops(), target);
  }

  // uint32 host_tracer_level = 2;
  if (this->host_tracer_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_tracer_level(), target);
  }

  // uint32 device_tracer_level = 3;
  if (this->device_tracer_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->device_tracer_level(), target);
  }

  // uint32 python_tracer_level = 4;
  if (this->python_tracer_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->python_tracer_level(), target);
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  // .tensorflow.ProfileOptions.DeviceType device_type = 6;
  if (this->device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->device_type(), target);
  }

  // bool enable_hlo_proto = 7;
  if (this->enable_hlo_proto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_hlo_proto(), target);
  }

  // uint64 start_timestamp_ns = 8;
  if (this->start_timestamp_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->start_timestamp_ns(), target);
  }

  // uint64 duration_ms = 9;
  if (this->duration_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->duration_ms(), target);
  }

  // string repository_path = 10;
  if (this->repository_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repository_path().data(), static_cast<int>(this->repository_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileOptions.repository_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->repository_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileOptions)
  return target;
}

size_t ProfileOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string repository_path = 10;
  if (this->repository_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->repository_path());
  }

  // uint32 host_tracer_level = 2;
  if (this->host_tracer_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->host_tracer_level());
  }

  // uint32 device_tracer_level = 3;
  if (this->device_tracer_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_tracer_level());
  }

  // uint32 python_tracer_level = 4;
  if (this->python_tracer_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->python_tracer_level());
  }

  // bool include_dataset_ops = 1;
  if (this->include_dataset_ops() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_hlo_proto = 7;
  if (this->enable_hlo_proto() != 0) {
    total_size += 1 + 1;
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // .tensorflow.ProfileOptions.DeviceType device_type = 6;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // uint64 start_timestamp_ns = 8;
  if (this->start_timestamp_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp_ns());
  }

  // uint64 duration_ms = 9;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileOptions)
    MergeFrom(*source);
  }
}

void ProfileOptions::MergeFrom(const ProfileOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.repository_path().size() > 0) {

    repository_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repository_path_);
  }
  if (from.host_tracer_level() != 0) {
    set_host_tracer_level(from.host_tracer_level());
  }
  if (from.device_tracer_level() != 0) {
    set_device_tracer_level(from.device_tracer_level());
  }
  if (from.python_tracer_level() != 0) {
    set_python_tracer_level(from.python_tracer_level());
  }
  if (from.include_dataset_ops() != 0) {
    set_include_dataset_ops(from.include_dataset_ops());
  }
  if (from.enable_hlo_proto() != 0) {
    set_enable_hlo_proto(from.enable_hlo_proto());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.start_timestamp_ns() != 0) {
    set_start_timestamp_ns(from.start_timestamp_ns());
  }
  if (from.duration_ms() != 0) {
    set_duration_ms(from.duration_ms());
  }
}

void ProfileOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileOptions::CopyFrom(const ProfileOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileOptions::IsInitialized() const {
  return true;
}

void ProfileOptions::Swap(ProfileOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileOptions::InternalSwap(ProfileOptions* other) {
  using std::swap;
  repository_path_.Swap(&other->repository_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(host_tracer_level_, other->host_tracer_level_);
  swap(device_tracer_level_, other->device_tracer_level_);
  swap(python_tracer_level_, other->python_tracer_level_);
  swap(include_dataset_ops_, other->include_dataset_ops_);
  swap(enable_hlo_proto_, other->enable_hlo_proto_);
  swap(version_, other->version_);
  swap(device_type_, other->device_type_);
  swap(start_timestamp_ns_, other->start_timestamp_ns_);
  swap(duration_ms_, other->duration_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProfileOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteProfilerSessionManagerOptions::InitAsDefaultInstance() {
  ::tensorflow::_RemoteProfilerSessionManagerOptions_default_instance_._instance.get_mutable()->profiler_options_ = const_cast< ::tensorflow::ProfileOptions*>(
      ::tensorflow::ProfileOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteProfilerSessionManagerOptions::kProfilerOptionsFieldNumber;
const int RemoteProfilerSessionManagerOptions::kServiceAddressesFieldNumber;
const int RemoteProfilerSessionManagerOptions::kSessionCreationTimestampNsFieldNumber;
const int RemoteProfilerSessionManagerOptions::kMaxSessionDurationMsFieldNumber;
const int RemoteProfilerSessionManagerOptions::kDelayMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteProfilerSessionManagerOptions::RemoteProfilerSessionManagerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::scc_info_RemoteProfilerSessionManagerOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RemoteProfilerSessionManagerOptions)
}
RemoteProfilerSessionManagerOptions::RemoteProfilerSessionManagerOptions(const RemoteProfilerSessionManagerOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      service_addresses_(from.service_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_profiler_options()) {
    profiler_options_ = new ::tensorflow::ProfileOptions(*from.profiler_options_);
  } else {
    profiler_options_ = NULL;
  }
  ::memcpy(&session_creation_timestamp_ns_, &from.session_creation_timestamp_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_ms_) -
    reinterpret_cast<char*>(&session_creation_timestamp_ns_)) + sizeof(delay_ms_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RemoteProfilerSessionManagerOptions)
}

void RemoteProfilerSessionManagerOptions::SharedCtor() {
  ::memset(&profiler_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_ms_) -
      reinterpret_cast<char*>(&profiler_options_)) + sizeof(delay_ms_));
}

RemoteProfilerSessionManagerOptions::~RemoteProfilerSessionManagerOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RemoteProfilerSessionManagerOptions)
  SharedDtor();
}

void RemoteProfilerSessionManagerOptions::SharedDtor() {
  if (this != internal_default_instance()) delete profiler_options_;
}

void RemoteProfilerSessionManagerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteProfilerSessionManagerOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteProfilerSessionManagerOptions& RemoteProfilerSessionManagerOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::scc_info_RemoteProfilerSessionManagerOptions.base);
  return *internal_default_instance();
}


void RemoteProfilerSessionManagerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RemoteProfilerSessionManagerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_addresses_.Clear();
  if (GetArenaNoVirtual() == NULL && profiler_options_ != NULL) {
    delete profiler_options_;
  }
  profiler_options_ = NULL;
  ::memset(&session_creation_timestamp_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_ms_) -
      reinterpret_cast<char*>(&session_creation_timestamp_ns_)) + sizeof(delay_ms_));
  _internal_metadata_.Clear();
}

bool RemoteProfilerSessionManagerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RemoteProfilerSessionManagerOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.ProfileOptions profiler_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_profiler_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string service_addresses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_service_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_addresses(this->service_addresses_size() - 1).data(),
            static_cast<int>(this->service_addresses(this->service_addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RemoteProfilerSessionManagerOptions.service_addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 session_creation_timestamp_ns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_creation_timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_session_duration_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_session_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 delay_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RemoteProfilerSessionManagerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RemoteProfilerSessionManagerOptions)
  return false;
#undef DO_
}

void RemoteProfilerSessionManagerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RemoteProfilerSessionManagerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ProfileOptions profiler_options = 1;
  if (this->has_profiler_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_profiler_options(), output);
  }

  // repeated string service_addresses = 2;
  for (int i = 0, n = this->service_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_addresses(i).data(), static_cast<int>(this->service_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RemoteProfilerSessionManagerOptions.service_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_addresses(i), output);
  }

  // uint64 session_creation_timestamp_ns = 3;
  if (this->session_creation_timestamp_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session_creation_timestamp_ns(), output);
  }

  // uint64 max_session_duration_ms = 4;
  if (this->max_session_duration_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_session_duration_ms(), output);
  }

  // uint64 delay_ms = 5;
  if (this->delay_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->delay_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RemoteProfilerSessionManagerOptions)
}

::google::protobuf::uint8* RemoteProfilerSessionManagerOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RemoteProfilerSessionManagerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ProfileOptions profiler_options = 1;
  if (this->has_profiler_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_profiler_options(), deterministic, target);
  }

  // repeated string service_addresses = 2;
  for (int i = 0, n = this->service_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_addresses(i).data(), static_cast<int>(this->service_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RemoteProfilerSessionManagerOptions.service_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->service_addresses(i), target);
  }

  // uint64 session_creation_timestamp_ns = 3;
  if (this->session_creation_timestamp_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->session_creation_timestamp_ns(), target);
  }

  // uint64 max_session_duration_ms = 4;
  if (this->max_session_duration_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_session_duration_ms(), target);
  }

  // uint64 delay_ms = 5;
  if (this->delay_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->delay_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RemoteProfilerSessionManagerOptions)
  return target;
}

size_t RemoteProfilerSessionManagerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RemoteProfilerSessionManagerOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string service_addresses = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->service_addresses_size());
  for (int i = 0, n = this->service_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->service_addresses(i));
  }

  // .tensorflow.ProfileOptions profiler_options = 1;
  if (this->has_profiler_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *profiler_options_);
  }

  // uint64 session_creation_timestamp_ns = 3;
  if (this->session_creation_timestamp_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session_creation_timestamp_ns());
  }

  // uint64 max_session_duration_ms = 4;
  if (this->max_session_duration_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_session_duration_ms());
  }

  // uint64 delay_ms = 5;
  if (this->delay_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->delay_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteProfilerSessionManagerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RemoteProfilerSessionManagerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteProfilerSessionManagerOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteProfilerSessionManagerOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RemoteProfilerSessionManagerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RemoteProfilerSessionManagerOptions)
    MergeFrom(*source);
  }
}

void RemoteProfilerSessionManagerOptions::MergeFrom(const RemoteProfilerSessionManagerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RemoteProfilerSessionManagerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_addresses_.MergeFrom(from.service_addresses_);
  if (from.has_profiler_options()) {
    mutable_profiler_options()->::tensorflow::ProfileOptions::MergeFrom(from.profiler_options());
  }
  if (from.session_creation_timestamp_ns() != 0) {
    set_session_creation_timestamp_ns(from.session_creation_timestamp_ns());
  }
  if (from.max_session_duration_ms() != 0) {
    set_max_session_duration_ms(from.max_session_duration_ms());
  }
  if (from.delay_ms() != 0) {
    set_delay_ms(from.delay_ms());
  }
}

void RemoteProfilerSessionManagerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RemoteProfilerSessionManagerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteProfilerSessionManagerOptions::CopyFrom(const RemoteProfilerSessionManagerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RemoteProfilerSessionManagerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteProfilerSessionManagerOptions::IsInitialized() const {
  return true;
}

void RemoteProfilerSessionManagerOptions::Swap(RemoteProfilerSessionManagerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteProfilerSessionManagerOptions::InternalSwap(RemoteProfilerSessionManagerOptions* other) {
  using std::swap;
  service_addresses_.InternalSwap(CastToBase(&other->service_addresses_));
  swap(profiler_options_, other->profiler_options_);
  swap(session_creation_timestamp_ns_, other->session_creation_timestamp_ns_);
  swap(max_session_duration_ms_, other->max_session_duration_ms_);
  swap(delay_ms_, other->delay_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteProfilerSessionManagerOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::ProfileOptions* Arena::CreateMaybeMessage< ::tensorflow::ProfileOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::RemoteProfilerSessionManagerOptions* Arena::CreateMaybeMessage< ::tensorflow::RemoteProfilerSessionManagerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::RemoteProfilerSessionManagerOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
