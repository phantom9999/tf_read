// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/tf_stats.proto

#include "tensorflow/core/profiler/protobuf/tf_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TfStatsRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TfStatsTable;
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
namespace tensorflow {
namespace profiler {
class TfStatsDatabaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TfStatsDatabase>
      _instance;
} _TfStatsDatabase_default_instance_;
class TfStatsTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TfStatsTable>
      _instance;
} _TfStatsTable_default_instance_;
class TfStatsRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TfStatsRecord>
      _instance;
} _TfStatsRecord_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto {
static void InitDefaultsTfStatsDatabase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_TfStatsDatabase_default_instance_;
    new (ptr) ::tensorflow::profiler::TfStatsDatabase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::TfStatsDatabase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TfStatsDatabase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTfStatsDatabase}, {
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsTable.base,}};

static void InitDefaultsTfStatsTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_TfStatsTable_default_instance_;
    new (ptr) ::tensorflow::profiler::TfStatsTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::TfStatsTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TfStatsTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTfStatsTable}, {
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsRecord.base,}};

static void InitDefaultsTfStatsRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_TfStatsRecord_default_instance_;
    new (ptr) ::tensorflow::profiler::TfStatsRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::TfStatsRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TfStatsRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTfStatsRecord}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TfStatsDatabase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TfStatsTable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TfStatsRecord.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, with_idle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, without_idle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, device_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, tf_stats_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, host_tf_pprof_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, device_tf_pprof_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, host_or_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, op_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, occurrences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, total_time_in_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, avg_time_in_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, total_self_time_in_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, avg_self_time_in_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, device_total_self_time_as_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, device_cumulative_total_self_time_as_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, host_total_self_time_as_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, host_cumulative_total_self_time_as_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, measured_flop_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, measured_memory_bw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, operational_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, bound_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, is_eager_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, gpu_tensorcore_utilization_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::TfStatsDatabase)},
  { 8, -1, sizeof(::tensorflow::profiler::TfStatsTable)},
  { 16, -1, sizeof(::tensorflow::profiler::TfStatsRecord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::profiler::_TfStatsDatabase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::profiler::_TfStatsTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::profiler::_TfStatsRecord_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/profiler/protobuf/tf_stats.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n0tensorflow/core/profiler/protobuf/tf_s"
      "tats.proto\022\023tensorflow.profiler\"\247\001\n\017TfSt"
      "atsDatabase\0224\n\twith_idle\030\004 \001(\0132!.tensorf"
      "low.profiler.TfStatsTable\0227\n\014without_idl"
      "e\030\005 \001(\0132!.tensorflow.profiler.TfStatsTab"
      "le\022\023\n\013device_type\030\006 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020"
      "\004\"\203\001\n\014TfStatsTable\022;\n\017tf_stats_record\030\001 "
      "\003(\0132\".tensorflow.profiler.TfStatsRecord\022"
      "\031\n\021host_tf_pprof_key\030\002 \001(\t\022\033\n\023device_tf_"
      "pprof_key\030\003 \001(\t\"\273\004\n\rTfStatsRecord\022\014\n\004ran"
      "k\030\001 \001(\004\022\026\n\016host_or_device\030\002 \001(\t\022\017\n\007op_ty"
      "pe\030\003 \001(\t\022\017\n\007op_name\030\004 \001(\t\022\023\n\013occurrences"
      "\030\005 \001(\003\022\030\n\020total_time_in_us\030\006 \001(\001\022\026\n\016avg_"
      "time_in_us\030\007 \001(\001\022\035\n\025total_self_time_in_u"
      "s\030\010 \001(\001\022\033\n\023avg_self_time_in_us\030\t \001(\001\022*\n\""
      "device_total_self_time_as_fraction\030\n \001(\001"
      "\0225\n-device_cumulative_total_self_time_as"
      "_fraction\030\013 \001(\001\022(\n host_total_self_time_"
      "as_fraction\030\014 \001(\001\0223\n+host_cumulative_tot"
      "al_self_time_as_fraction\030\r \001(\001\022\032\n\022measur"
      "ed_flop_rate\030\016 \001(\001\022\032\n\022measured_memory_bw"
      "\030\017 \001(\001\022\035\n\025operational_intensity\030\020 \001(\001\022\020\n"
      "\010bound_by\030\021 \001(\t\022\020\n\010is_eager\030\022 \001(\010\022\"\n\032gpu"
      "_tensorcore_utilization\030\023 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 957);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/protobuf/tf_stats.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
namespace tensorflow {
namespace profiler {

// ===================================================================

void TfStatsDatabase::InitAsDefaultInstance() {
  ::tensorflow::profiler::_TfStatsDatabase_default_instance_._instance.get_mutable()->with_idle_ = const_cast< ::tensorflow::profiler::TfStatsTable*>(
      ::tensorflow::profiler::TfStatsTable::internal_default_instance());
  ::tensorflow::profiler::_TfStatsDatabase_default_instance_._instance.get_mutable()->without_idle_ = const_cast< ::tensorflow::profiler::TfStatsTable*>(
      ::tensorflow::profiler::TfStatsTable::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TfStatsDatabase::kWithIdleFieldNumber;
const int TfStatsDatabase::kWithoutIdleFieldNumber;
const int TfStatsDatabase::kDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TfStatsDatabase::TfStatsDatabase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsDatabase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.TfStatsDatabase)
}
TfStatsDatabase::TfStatsDatabase(const TfStatsDatabase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_type().size() > 0) {
    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.has_with_idle()) {
    with_idle_ = new ::tensorflow::profiler::TfStatsTable(*from.with_idle_);
  } else {
    with_idle_ = NULL;
  }
  if (from.has_without_idle()) {
    without_idle_ = new ::tensorflow::profiler::TfStatsTable(*from.without_idle_);
  } else {
    without_idle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.TfStatsDatabase)
}

void TfStatsDatabase::SharedCtor() {
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&with_idle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&without_idle_) -
      reinterpret_cast<char*>(&with_idle_)) + sizeof(without_idle_));
}

TfStatsDatabase::~TfStatsDatabase() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.TfStatsDatabase)
  SharedDtor();
}

void TfStatsDatabase::SharedDtor() {
  device_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete with_idle_;
  if (this != internal_default_instance()) delete without_idle_;
}

void TfStatsDatabase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TfStatsDatabase::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TfStatsDatabase& TfStatsDatabase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsDatabase.base);
  return *internal_default_instance();
}


void TfStatsDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.TfStatsDatabase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && with_idle_ != NULL) {
    delete with_idle_;
  }
  with_idle_ = NULL;
  if (GetArenaNoVirtual() == NULL && without_idle_ != NULL) {
    delete without_idle_;
  }
  without_idle_ = NULL;
  _internal_metadata_.Clear();
}

bool TfStatsDatabase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.profiler.TfStatsDatabase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.profiler.TfStatsTable with_idle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_with_idle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.profiler.TfStatsTable without_idle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_without_idle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsDatabase.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.profiler.TfStatsDatabase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.profiler.TfStatsDatabase)
  return false;
#undef DO_
}

void TfStatsDatabase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.profiler.TfStatsDatabase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  if (this->has_with_idle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_with_idle(), output);
  }

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  if (this->has_without_idle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_without_idle(), output);
  }

  // string device_type = 6;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsDatabase.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.profiler.TfStatsDatabase)
}

::google::protobuf::uint8* TfStatsDatabase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.TfStatsDatabase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  if (this->has_with_idle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_with_idle(), deterministic, target);
  }

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  if (this->has_without_idle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_without_idle(), deterministic, target);
  }

  // string device_type = 6;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsDatabase.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.TfStatsDatabase)
  return target;
}

size_t TfStatsDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.TfStatsDatabase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device_type = 6;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  if (this->has_with_idle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *with_idle_);
  }

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  if (this->has_without_idle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *without_idle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfStatsDatabase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.TfStatsDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  const TfStatsDatabase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TfStatsDatabase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.TfStatsDatabase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.TfStatsDatabase)
    MergeFrom(*source);
  }
}

void TfStatsDatabase::MergeFrom(const TfStatsDatabase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.TfStatsDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.has_with_idle()) {
    mutable_with_idle()->::tensorflow::profiler::TfStatsTable::MergeFrom(from.with_idle());
  }
  if (from.has_without_idle()) {
    mutable_without_idle()->::tensorflow::profiler::TfStatsTable::MergeFrom(from.without_idle());
  }
}

void TfStatsDatabase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.TfStatsDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfStatsDatabase::CopyFrom(const TfStatsDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.TfStatsDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfStatsDatabase::IsInitialized() const {
  return true;
}

void TfStatsDatabase::Swap(TfStatsDatabase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TfStatsDatabase::InternalSwap(TfStatsDatabase* other) {
  using std::swap;
  device_type_.Swap(&other->device_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(with_idle_, other->with_idle_);
  swap(without_idle_, other->without_idle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TfStatsDatabase::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TfStatsTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TfStatsTable::kTfStatsRecordFieldNumber;
const int TfStatsTable::kHostTfPprofKeyFieldNumber;
const int TfStatsTable::kDeviceTfPprofKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TfStatsTable::TfStatsTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.TfStatsTable)
}
TfStatsTable::TfStatsTable(const TfStatsTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tf_stats_record_(from.tf_stats_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_tf_pprof_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_tf_pprof_key().size() > 0) {
    host_tf_pprof_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_tf_pprof_key_);
  }
  device_tf_pprof_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_tf_pprof_key().size() > 0) {
    device_tf_pprof_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_tf_pprof_key_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.TfStatsTable)
}

void TfStatsTable::SharedCtor() {
  host_tf_pprof_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_tf_pprof_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TfStatsTable::~TfStatsTable() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.TfStatsTable)
  SharedDtor();
}

void TfStatsTable::SharedDtor() {
  host_tf_pprof_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_tf_pprof_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TfStatsTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TfStatsTable::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TfStatsTable& TfStatsTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsTable.base);
  return *internal_default_instance();
}


void TfStatsTable::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.TfStatsTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tf_stats_record_.Clear();
  host_tf_pprof_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_tf_pprof_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TfStatsTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.profiler.TfStatsTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tf_stats_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_tf_pprof_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_tf_pprof_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_tf_pprof_key().data(), static_cast<int>(this->host_tf_pprof_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsTable.host_tf_pprof_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_tf_pprof_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_tf_pprof_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_tf_pprof_key().data(), static_cast<int>(this->device_tf_pprof_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsTable.device_tf_pprof_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.profiler.TfStatsTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.profiler.TfStatsTable)
  return false;
#undef DO_
}

void TfStatsTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.profiler.TfStatsTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tf_stats_record_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tf_stats_record(static_cast<int>(i)),
      output);
  }

  // string host_tf_pprof_key = 2;
  if (this->host_tf_pprof_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_tf_pprof_key().data(), static_cast<int>(this->host_tf_pprof_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsTable.host_tf_pprof_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host_tf_pprof_key(), output);
  }

  // string device_tf_pprof_key = 3;
  if (this->device_tf_pprof_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_tf_pprof_key().data(), static_cast<int>(this->device_tf_pprof_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsTable.device_tf_pprof_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_tf_pprof_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.profiler.TfStatsTable)
}

::google::protobuf::uint8* TfStatsTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.TfStatsTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tf_stats_record_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tf_stats_record(static_cast<int>(i)), deterministic, target);
  }

  // string host_tf_pprof_key = 2;
  if (this->host_tf_pprof_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_tf_pprof_key().data(), static_cast<int>(this->host_tf_pprof_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsTable.host_tf_pprof_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_tf_pprof_key(), target);
  }

  // string device_tf_pprof_key = 3;
  if (this->device_tf_pprof_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_tf_pprof_key().data(), static_cast<int>(this->device_tf_pprof_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsTable.device_tf_pprof_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_tf_pprof_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.TfStatsTable)
  return target;
}

size_t TfStatsTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.TfStatsTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tf_stats_record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tf_stats_record(static_cast<int>(i)));
    }
  }

  // string host_tf_pprof_key = 2;
  if (this->host_tf_pprof_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_tf_pprof_key());
  }

  // string device_tf_pprof_key = 3;
  if (this->device_tf_pprof_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_tf_pprof_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfStatsTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.TfStatsTable)
  GOOGLE_DCHECK_NE(&from, this);
  const TfStatsTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TfStatsTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.TfStatsTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.TfStatsTable)
    MergeFrom(*source);
  }
}

void TfStatsTable::MergeFrom(const TfStatsTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.TfStatsTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tf_stats_record_.MergeFrom(from.tf_stats_record_);
  if (from.host_tf_pprof_key().size() > 0) {

    host_tf_pprof_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_tf_pprof_key_);
  }
  if (from.device_tf_pprof_key().size() > 0) {

    device_tf_pprof_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_tf_pprof_key_);
  }
}

void TfStatsTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.TfStatsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfStatsTable::CopyFrom(const TfStatsTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.TfStatsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfStatsTable::IsInitialized() const {
  return true;
}

void TfStatsTable::Swap(TfStatsTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TfStatsTable::InternalSwap(TfStatsTable* other) {
  using std::swap;
  CastToBase(&tf_stats_record_)->InternalSwap(CastToBase(&other->tf_stats_record_));
  host_tf_pprof_key_.Swap(&other->host_tf_pprof_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_tf_pprof_key_.Swap(&other->device_tf_pprof_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TfStatsTable::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TfStatsRecord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TfStatsRecord::kRankFieldNumber;
const int TfStatsRecord::kHostOrDeviceFieldNumber;
const int TfStatsRecord::kOpTypeFieldNumber;
const int TfStatsRecord::kOpNameFieldNumber;
const int TfStatsRecord::kOccurrencesFieldNumber;
const int TfStatsRecord::kTotalTimeInUsFieldNumber;
const int TfStatsRecord::kAvgTimeInUsFieldNumber;
const int TfStatsRecord::kTotalSelfTimeInUsFieldNumber;
const int TfStatsRecord::kAvgSelfTimeInUsFieldNumber;
const int TfStatsRecord::kDeviceTotalSelfTimeAsFractionFieldNumber;
const int TfStatsRecord::kDeviceCumulativeTotalSelfTimeAsFractionFieldNumber;
const int TfStatsRecord::kHostTotalSelfTimeAsFractionFieldNumber;
const int TfStatsRecord::kHostCumulativeTotalSelfTimeAsFractionFieldNumber;
const int TfStatsRecord::kMeasuredFlopRateFieldNumber;
const int TfStatsRecord::kMeasuredMemoryBwFieldNumber;
const int TfStatsRecord::kOperationalIntensityFieldNumber;
const int TfStatsRecord::kBoundByFieldNumber;
const int TfStatsRecord::kIsEagerFieldNumber;
const int TfStatsRecord::kGpuTensorcoreUtilizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TfStatsRecord::TfStatsRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.TfStatsRecord)
}
TfStatsRecord::TfStatsRecord(const TfStatsRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_or_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_or_device().size() > 0) {
    host_or_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_or_device_);
  }
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op_type().size() > 0) {
    op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op_name().size() > 0) {
    op_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  bound_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bound_by().size() > 0) {
    bound_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bound_by_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_eager_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(is_eager_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.TfStatsRecord)
}

void TfStatsRecord::SharedCtor() {
  host_or_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bound_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_eager_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(is_eager_));
}

TfStatsRecord::~TfStatsRecord() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.TfStatsRecord)
  SharedDtor();
}

void TfStatsRecord::SharedDtor() {
  host_or_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bound_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TfStatsRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TfStatsRecord::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TfStatsRecord& TfStatsRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::scc_info_TfStatsRecord.base);
  return *internal_default_instance();
}


void TfStatsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.TfStatsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_or_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bound_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_eager_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(is_eager_));
  _internal_metadata_.Clear();
}

bool TfStatsRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.profiler.TfStatsRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_or_device = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_or_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_or_device().data(), static_cast<int>(this->host_or_device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsRecord.host_or_device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_type().data(), static_cast<int>(this->op_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsRecord.op_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_name().data(), static_cast<int>(this->op_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsRecord.op_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 occurrences = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occurrences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_time_in_us = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_in_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double avg_time_in_us = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_time_in_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_self_time_in_us = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_self_time_in_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double avg_self_time_in_us = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_self_time_in_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double device_total_self_time_as_fraction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &device_total_self_time_as_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double device_cumulative_total_self_time_as_fraction = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &device_cumulative_total_self_time_as_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double host_total_self_time_as_fraction = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &host_total_self_time_as_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double host_cumulative_total_self_time_as_fraction = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &host_cumulative_total_self_time_as_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double measured_flop_rate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measured_flop_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double measured_memory_bw = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measured_memory_bw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double operational_intensity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &operational_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bound_by = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bound_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bound_by().data(), static_cast<int>(this->bound_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.TfStatsRecord.bound_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_eager = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gpu_tensorcore_utilization = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gpu_tensorcore_utilization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.profiler.TfStatsRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.profiler.TfStatsRecord)
  return false;
#undef DO_
}

void TfStatsRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.profiler.TfStatsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rank = 1;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rank(), output);
  }

  // string host_or_device = 2;
  if (this->host_or_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_or_device().data(), static_cast<int>(this->host_or_device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.host_or_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host_or_device(), output);
  }

  // string op_type = 3;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), static_cast<int>(this->op_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.op_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->op_type(), output);
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), static_cast<int>(this->op_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.op_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->op_name(), output);
  }

  // int64 occurrences = 5;
  if (this->occurrences() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->occurrences(), output);
  }

  // double total_time_in_us = 6;
  if (this->total_time_in_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->total_time_in_us(), output);
  }

  // double avg_time_in_us = 7;
  if (this->avg_time_in_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->avg_time_in_us(), output);
  }

  // double total_self_time_in_us = 8;
  if (this->total_self_time_in_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->total_self_time_in_us(), output);
  }

  // double avg_self_time_in_us = 9;
  if (this->avg_self_time_in_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->avg_self_time_in_us(), output);
  }

  // double device_total_self_time_as_fraction = 10;
  if (this->device_total_self_time_as_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->device_total_self_time_as_fraction(), output);
  }

  // double device_cumulative_total_self_time_as_fraction = 11;
  if (this->device_cumulative_total_self_time_as_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->device_cumulative_total_self_time_as_fraction(), output);
  }

  // double host_total_self_time_as_fraction = 12;
  if (this->host_total_self_time_as_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->host_total_self_time_as_fraction(), output);
  }

  // double host_cumulative_total_self_time_as_fraction = 13;
  if (this->host_cumulative_total_self_time_as_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->host_cumulative_total_self_time_as_fraction(), output);
  }

  // double measured_flop_rate = 14;
  if (this->measured_flop_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->measured_flop_rate(), output);
  }

  // double measured_memory_bw = 15;
  if (this->measured_memory_bw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->measured_memory_bw(), output);
  }

  // double operational_intensity = 16;
  if (this->operational_intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->operational_intensity(), output);
  }

  // string bound_by = 17;
  if (this->bound_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bound_by().data(), static_cast<int>(this->bound_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.bound_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->bound_by(), output);
  }

  // bool is_eager = 18;
  if (this->is_eager() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_eager(), output);
  }

  // double gpu_tensorcore_utilization = 19;
  if (this->gpu_tensorcore_utilization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->gpu_tensorcore_utilization(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.profiler.TfStatsRecord)
}

::google::protobuf::uint8* TfStatsRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.TfStatsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rank = 1;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rank(), target);
  }

  // string host_or_device = 2;
  if (this->host_or_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_or_device().data(), static_cast<int>(this->host_or_device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.host_or_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_or_device(), target);
  }

  // string op_type = 3;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), static_cast<int>(this->op_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.op_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->op_type(), target);
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), static_cast<int>(this->op_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.op_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->op_name(), target);
  }

  // int64 occurrences = 5;
  if (this->occurrences() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->occurrences(), target);
  }

  // double total_time_in_us = 6;
  if (this->total_time_in_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->total_time_in_us(), target);
  }

  // double avg_time_in_us = 7;
  if (this->avg_time_in_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->avg_time_in_us(), target);
  }

  // double total_self_time_in_us = 8;
  if (this->total_self_time_in_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->total_self_time_in_us(), target);
  }

  // double avg_self_time_in_us = 9;
  if (this->avg_self_time_in_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->avg_self_time_in_us(), target);
  }

  // double device_total_self_time_as_fraction = 10;
  if (this->device_total_self_time_as_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->device_total_self_time_as_fraction(), target);
  }

  // double device_cumulative_total_self_time_as_fraction = 11;
  if (this->device_cumulative_total_self_time_as_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->device_cumulative_total_self_time_as_fraction(), target);
  }

  // double host_total_self_time_as_fraction = 12;
  if (this->host_total_self_time_as_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->host_total_self_time_as_fraction(), target);
  }

  // double host_cumulative_total_self_time_as_fraction = 13;
  if (this->host_cumulative_total_self_time_as_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->host_cumulative_total_self_time_as_fraction(), target);
  }

  // double measured_flop_rate = 14;
  if (this->measured_flop_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->measured_flop_rate(), target);
  }

  // double measured_memory_bw = 15;
  if (this->measured_memory_bw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->measured_memory_bw(), target);
  }

  // double operational_intensity = 16;
  if (this->operational_intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->operational_intensity(), target);
  }

  // string bound_by = 17;
  if (this->bound_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bound_by().data(), static_cast<int>(this->bound_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.bound_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bound_by(), target);
  }

  // bool is_eager = 18;
  if (this->is_eager() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_eager(), target);
  }

  // double gpu_tensorcore_utilization = 19;
  if (this->gpu_tensorcore_utilization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->gpu_tensorcore_utilization(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.TfStatsRecord)
  return target;
}

size_t TfStatsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.TfStatsRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host_or_device = 2;
  if (this->host_or_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_or_device());
  }

  // string op_type = 3;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_type());
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_name());
  }

  // string bound_by = 17;
  if (this->bound_by().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bound_by());
  }

  // uint64 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rank());
  }

  // int64 occurrences = 5;
  if (this->occurrences() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->occurrences());
  }

  // double total_time_in_us = 6;
  if (this->total_time_in_us() != 0) {
    total_size += 1 + 8;
  }

  // double avg_time_in_us = 7;
  if (this->avg_time_in_us() != 0) {
    total_size += 1 + 8;
  }

  // double total_self_time_in_us = 8;
  if (this->total_self_time_in_us() != 0) {
    total_size += 1 + 8;
  }

  // double avg_self_time_in_us = 9;
  if (this->avg_self_time_in_us() != 0) {
    total_size += 1 + 8;
  }

  // double device_total_self_time_as_fraction = 10;
  if (this->device_total_self_time_as_fraction() != 0) {
    total_size += 1 + 8;
  }

  // double device_cumulative_total_self_time_as_fraction = 11;
  if (this->device_cumulative_total_self_time_as_fraction() != 0) {
    total_size += 1 + 8;
  }

  // double host_total_self_time_as_fraction = 12;
  if (this->host_total_self_time_as_fraction() != 0) {
    total_size += 1 + 8;
  }

  // double host_cumulative_total_self_time_as_fraction = 13;
  if (this->host_cumulative_total_self_time_as_fraction() != 0) {
    total_size += 1 + 8;
  }

  // double measured_flop_rate = 14;
  if (this->measured_flop_rate() != 0) {
    total_size += 1 + 8;
  }

  // double measured_memory_bw = 15;
  if (this->measured_memory_bw() != 0) {
    total_size += 1 + 8;
  }

  // double operational_intensity = 16;
  if (this->operational_intensity() != 0) {
    total_size += 2 + 8;
  }

  // double gpu_tensorcore_utilization = 19;
  if (this->gpu_tensorcore_utilization() != 0) {
    total_size += 2 + 8;
  }

  // bool is_eager = 18;
  if (this->is_eager() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfStatsRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.TfStatsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TfStatsRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TfStatsRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.TfStatsRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.TfStatsRecord)
    MergeFrom(*source);
  }
}

void TfStatsRecord::MergeFrom(const TfStatsRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.TfStatsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_or_device().size() > 0) {

    host_or_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_or_device_);
  }
  if (from.op_type().size() > 0) {

    op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  if (from.op_name().size() > 0) {

    op_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  if (from.bound_by().size() > 0) {

    bound_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bound_by_);
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.occurrences() != 0) {
    set_occurrences(from.occurrences());
  }
  if (from.total_time_in_us() != 0) {
    set_total_time_in_us(from.total_time_in_us());
  }
  if (from.avg_time_in_us() != 0) {
    set_avg_time_in_us(from.avg_time_in_us());
  }
  if (from.total_self_time_in_us() != 0) {
    set_total_self_time_in_us(from.total_self_time_in_us());
  }
  if (from.avg_self_time_in_us() != 0) {
    set_avg_self_time_in_us(from.avg_self_time_in_us());
  }
  if (from.device_total_self_time_as_fraction() != 0) {
    set_device_total_self_time_as_fraction(from.device_total_self_time_as_fraction());
  }
  if (from.device_cumulative_total_self_time_as_fraction() != 0) {
    set_device_cumulative_total_self_time_as_fraction(from.device_cumulative_total_self_time_as_fraction());
  }
  if (from.host_total_self_time_as_fraction() != 0) {
    set_host_total_self_time_as_fraction(from.host_total_self_time_as_fraction());
  }
  if (from.host_cumulative_total_self_time_as_fraction() != 0) {
    set_host_cumulative_total_self_time_as_fraction(from.host_cumulative_total_self_time_as_fraction());
  }
  if (from.measured_flop_rate() != 0) {
    set_measured_flop_rate(from.measured_flop_rate());
  }
  if (from.measured_memory_bw() != 0) {
    set_measured_memory_bw(from.measured_memory_bw());
  }
  if (from.operational_intensity() != 0) {
    set_operational_intensity(from.operational_intensity());
  }
  if (from.gpu_tensorcore_utilization() != 0) {
    set_gpu_tensorcore_utilization(from.gpu_tensorcore_utilization());
  }
  if (from.is_eager() != 0) {
    set_is_eager(from.is_eager());
  }
}

void TfStatsRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.TfStatsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfStatsRecord::CopyFrom(const TfStatsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.TfStatsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfStatsRecord::IsInitialized() const {
  return true;
}

void TfStatsRecord::Swap(TfStatsRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TfStatsRecord::InternalSwap(TfStatsRecord* other) {
  using std::swap;
  host_or_device_.Swap(&other->host_or_device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  op_type_.Swap(&other->op_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  op_name_.Swap(&other->op_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bound_by_.Swap(&other->bound_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rank_, other->rank_);
  swap(occurrences_, other->occurrences_);
  swap(total_time_in_us_, other->total_time_in_us_);
  swap(avg_time_in_us_, other->avg_time_in_us_);
  swap(total_self_time_in_us_, other->total_self_time_in_us_);
  swap(avg_self_time_in_us_, other->avg_self_time_in_us_);
  swap(device_total_self_time_as_fraction_, other->device_total_self_time_as_fraction_);
  swap(device_cumulative_total_self_time_as_fraction_, other->device_cumulative_total_self_time_as_fraction_);
  swap(host_total_self_time_as_fraction_, other->host_total_self_time_as_fraction_);
  swap(host_cumulative_total_self_time_as_fraction_, other->host_cumulative_total_self_time_as_fraction_);
  swap(measured_flop_rate_, other->measured_flop_rate_);
  swap(measured_memory_bw_, other->measured_memory_bw_);
  swap(operational_intensity_, other->operational_intensity_);
  swap(gpu_tensorcore_utilization_, other->gpu_tensorcore_utilization_);
  swap(is_eager_, other->is_eager_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TfStatsRecord::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::profiler::TfStatsDatabase* Arena::CreateMaybeMessage< ::tensorflow::profiler::TfStatsDatabase >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::TfStatsDatabase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::profiler::TfStatsTable* Arena::CreateMaybeMessage< ::tensorflow::profiler::TfStatsTable >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::TfStatsTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::profiler::TfStatsRecord* Arena::CreateMaybeMessage< ::tensorflow::profiler::TfStatsRecord >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::TfStatsRecord >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
