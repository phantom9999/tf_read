// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/memory_profile.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto 

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto
namespace tensorflow {
namespace profiler {
class ActiveAllocation;
class ActiveAllocationDefaultTypeInternal;
extern ActiveAllocationDefaultTypeInternal _ActiveAllocation_default_instance_;
class MemoryActivityMetadata;
class MemoryActivityMetadataDefaultTypeInternal;
extern MemoryActivityMetadataDefaultTypeInternal _MemoryActivityMetadata_default_instance_;
class MemoryAggregationStats;
class MemoryAggregationStatsDefaultTypeInternal;
extern MemoryAggregationStatsDefaultTypeInternal _MemoryAggregationStats_default_instance_;
class MemoryProfile;
class MemoryProfileDefaultTypeInternal;
extern MemoryProfileDefaultTypeInternal _MemoryProfile_default_instance_;
class MemoryProfileSnapshot;
class MemoryProfileSnapshotDefaultTypeInternal;
extern MemoryProfileSnapshotDefaultTypeInternal _MemoryProfileSnapshot_default_instance_;
class MemoryProfileSummary;
class MemoryProfileSummaryDefaultTypeInternal;
extern MemoryProfileSummaryDefaultTypeInternal _MemoryProfileSummary_default_instance_;
class MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse;
class MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUseDefaultTypeInternal;
extern MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUseDefaultTypeInternal _MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse_default_instance_;
class PerAllocatorMemoryProfile;
class PerAllocatorMemoryProfileDefaultTypeInternal;
extern PerAllocatorMemoryProfileDefaultTypeInternal _PerAllocatorMemoryProfile_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::profiler::ActiveAllocation* Arena::CreateMaybeMessage<::tensorflow::profiler::ActiveAllocation>(Arena*);
template<> ::tensorflow::profiler::MemoryActivityMetadata* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryActivityMetadata>(Arena*);
template<> ::tensorflow::profiler::MemoryAggregationStats* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryAggregationStats>(Arena*);
template<> ::tensorflow::profiler::MemoryProfile* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfile>(Arena*);
template<> ::tensorflow::profiler::MemoryProfileSnapshot* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfileSnapshot>(Arena*);
template<> ::tensorflow::profiler::MemoryProfileSummary* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfileSummary>(Arena*);
template<> ::tensorflow::profiler::MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::profiler::MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse>(Arena*);
template<> ::tensorflow::profiler::PerAllocatorMemoryProfile* Arena::CreateMaybeMessage<::tensorflow::profiler::PerAllocatorMemoryProfile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace profiler {

enum MemoryActivity {
  UNKNOWN_ACTIVITY = 0,
  ALLOCATION = 1,
  DEALLOCATION = 2,
  RESERVATION = 3,
  EXPANSION = 4,
  MemoryActivity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MemoryActivity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MemoryActivity_IsValid(int value);
const MemoryActivity MemoryActivity_MIN = UNKNOWN_ACTIVITY;
const MemoryActivity MemoryActivity_MAX = EXPANSION;
const int MemoryActivity_ARRAYSIZE = MemoryActivity_MAX + 1;

const ::google::protobuf::EnumDescriptor* MemoryActivity_descriptor();
inline const ::std::string& MemoryActivity_Name(MemoryActivity value) {
  return ::google::protobuf::internal::NameOfEnum(
    MemoryActivity_descriptor(), value);
}
inline bool MemoryActivity_Parse(
    const ::std::string& name, MemoryActivity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemoryActivity>(
    MemoryActivity_descriptor(), name, value);
}
// ===================================================================

class MemoryAggregationStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryAggregationStats) */ {
 public:
  MemoryAggregationStats();
  virtual ~MemoryAggregationStats();

  MemoryAggregationStats(const MemoryAggregationStats& from);

  inline MemoryAggregationStats& operator=(const MemoryAggregationStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryAggregationStats(MemoryAggregationStats&& from) noexcept
    : MemoryAggregationStats() {
    *this = ::std::move(from);
  }

  inline MemoryAggregationStats& operator=(MemoryAggregationStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryAggregationStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryAggregationStats* internal_default_instance() {
    return reinterpret_cast<const MemoryAggregationStats*>(
               &_MemoryAggregationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MemoryAggregationStats* other);
  friend void swap(MemoryAggregationStats& a, MemoryAggregationStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryAggregationStats* New() const final {
    return CreateMaybeMessage<MemoryAggregationStats>(NULL);
  }

  MemoryAggregationStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryAggregationStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryAggregationStats& from);
  void MergeFrom(const MemoryAggregationStats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryAggregationStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 stack_reserved_bytes = 1;
  void clear_stack_reserved_bytes();
  static const int kStackReservedBytesFieldNumber = 1;
  ::google::protobuf::int64 stack_reserved_bytes() const;
  void set_stack_reserved_bytes(::google::protobuf::int64 value);

  // int64 heap_allocated_bytes = 2;
  void clear_heap_allocated_bytes();
  static const int kHeapAllocatedBytesFieldNumber = 2;
  ::google::protobuf::int64 heap_allocated_bytes() const;
  void set_heap_allocated_bytes(::google::protobuf::int64 value);

  // int64 free_memory_bytes = 3;
  void clear_free_memory_bytes();
  static const int kFreeMemoryBytesFieldNumber = 3;
  ::google::protobuf::int64 free_memory_bytes() const;
  void set_free_memory_bytes(::google::protobuf::int64 value);

  // double fragmentation = 4;
  void clear_fragmentation();
  static const int kFragmentationFieldNumber = 4;
  double fragmentation() const;
  void set_fragmentation(double value);

  // int64 peak_bytes_in_use = 5;
  void clear_peak_bytes_in_use();
  static const int kPeakBytesInUseFieldNumber = 5;
  ::google::protobuf::int64 peak_bytes_in_use() const;
  void set_peak_bytes_in_use(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryAggregationStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 stack_reserved_bytes_;
  ::google::protobuf::int64 heap_allocated_bytes_;
  ::google::protobuf::int64 free_memory_bytes_;
  double fragmentation_;
  ::google::protobuf::int64 peak_bytes_in_use_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryActivityMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryActivityMetadata) */ {
 public:
  MemoryActivityMetadata();
  virtual ~MemoryActivityMetadata();

  MemoryActivityMetadata(const MemoryActivityMetadata& from);

  inline MemoryActivityMetadata& operator=(const MemoryActivityMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryActivityMetadata(MemoryActivityMetadata&& from) noexcept
    : MemoryActivityMetadata() {
    *this = ::std::move(from);
  }

  inline MemoryActivityMetadata& operator=(MemoryActivityMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryActivityMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryActivityMetadata* internal_default_instance() {
    return reinterpret_cast<const MemoryActivityMetadata*>(
               &_MemoryActivityMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MemoryActivityMetadata* other);
  friend void swap(MemoryActivityMetadata& a, MemoryActivityMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryActivityMetadata* New() const final {
    return CreateMaybeMessage<MemoryActivityMetadata>(NULL);
  }

  MemoryActivityMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryActivityMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryActivityMetadata& from);
  void MergeFrom(const MemoryActivityMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryActivityMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tf_op_name = 5;
  void clear_tf_op_name();
  static const int kTfOpNameFieldNumber = 5;
  const ::std::string& tf_op_name() const;
  void set_tf_op_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tf_op_name(::std::string&& value);
  #endif
  void set_tf_op_name(const char* value);
  void set_tf_op_name(const char* value, size_t size);
  ::std::string* mutable_tf_op_name();
  ::std::string* release_tf_op_name();
  void set_allocated_tf_op_name(::std::string* tf_op_name);

  // string region_type = 7;
  void clear_region_type();
  static const int kRegionTypeFieldNumber = 7;
  const ::std::string& region_type() const;
  void set_region_type(const ::std::string& value);
  #if LANG_CXX11
  void set_region_type(::std::string&& value);
  #endif
  void set_region_type(const char* value);
  void set_region_type(const char* value, size_t size);
  ::std::string* mutable_region_type();
  ::std::string* release_region_type();
  void set_allocated_region_type(::std::string* region_type);

  // string data_type = 8;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 8;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  #if LANG_CXX11
  void set_data_type(::std::string&& value);
  #endif
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // string tensor_shape = 9;
  void clear_tensor_shape();
  static const int kTensorShapeFieldNumber = 9;
  const ::std::string& tensor_shape() const;
  void set_tensor_shape(const ::std::string& value);
  #if LANG_CXX11
  void set_tensor_shape(::std::string&& value);
  #endif
  void set_tensor_shape(const char* value);
  void set_tensor_shape(const char* value, size_t size);
  ::std::string* mutable_tensor_shape();
  ::std::string* release_tensor_shape();
  void set_allocated_tensor_shape(::std::string* tensor_shape);

  // int64 requested_bytes = 2;
  void clear_requested_bytes();
  static const int kRequestedBytesFieldNumber = 2;
  ::google::protobuf::int64 requested_bytes() const;
  void set_requested_bytes(::google::protobuf::int64 value);

  // int64 allocation_bytes = 3;
  void clear_allocation_bytes();
  static const int kAllocationBytesFieldNumber = 3;
  ::google::protobuf::int64 allocation_bytes() const;
  void set_allocation_bytes(::google::protobuf::int64 value);

  // uint64 address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // int64 step_id = 6;
  void clear_step_id();
  static const int kStepIdFieldNumber = 6;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // .tensorflow.profiler.MemoryActivity memory_activity = 1;
  void clear_memory_activity();
  static const int kMemoryActivityFieldNumber = 1;
  ::tensorflow::profiler::MemoryActivity memory_activity() const;
  void set_memory_activity(::tensorflow::profiler::MemoryActivity value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryActivityMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tf_op_name_;
  ::google::protobuf::internal::ArenaStringPtr region_type_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  ::google::protobuf::internal::ArenaStringPtr tensor_shape_;
  ::google::protobuf::int64 requested_bytes_;
  ::google::protobuf::int64 allocation_bytes_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::int64 step_id_;
  int memory_activity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryProfileSnapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryProfileSnapshot) */ {
 public:
  MemoryProfileSnapshot();
  virtual ~MemoryProfileSnapshot();

  MemoryProfileSnapshot(const MemoryProfileSnapshot& from);

  inline MemoryProfileSnapshot& operator=(const MemoryProfileSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryProfileSnapshot(MemoryProfileSnapshot&& from) noexcept
    : MemoryProfileSnapshot() {
    *this = ::std::move(from);
  }

  inline MemoryProfileSnapshot& operator=(MemoryProfileSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryProfileSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryProfileSnapshot* internal_default_instance() {
    return reinterpret_cast<const MemoryProfileSnapshot*>(
               &_MemoryProfileSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MemoryProfileSnapshot* other);
  friend void swap(MemoryProfileSnapshot& a, MemoryProfileSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryProfileSnapshot* New() const final {
    return CreateMaybeMessage<MemoryProfileSnapshot>(NULL);
  }

  MemoryProfileSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryProfileSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryProfileSnapshot& from);
  void MergeFrom(const MemoryProfileSnapshot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProfileSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.profiler.MemoryAggregationStats aggregation_stats = 2;
  bool has_aggregation_stats() const;
  void clear_aggregation_stats();
  static const int kAggregationStatsFieldNumber = 2;
  private:
  const ::tensorflow::profiler::MemoryAggregationStats& _internal_aggregation_stats() const;
  public:
  const ::tensorflow::profiler::MemoryAggregationStats& aggregation_stats() const;
  ::tensorflow::profiler::MemoryAggregationStats* release_aggregation_stats();
  ::tensorflow::profiler::MemoryAggregationStats* mutable_aggregation_stats();
  void set_allocated_aggregation_stats(::tensorflow::profiler::MemoryAggregationStats* aggregation_stats);

  // .tensorflow.profiler.MemoryActivityMetadata activity_metadata = 3;
  bool has_activity_metadata() const;
  void clear_activity_metadata();
  static const int kActivityMetadataFieldNumber = 3;
  private:
  const ::tensorflow::profiler::MemoryActivityMetadata& _internal_activity_metadata() const;
  public:
  const ::tensorflow::profiler::MemoryActivityMetadata& activity_metadata() const;
  ::tensorflow::profiler::MemoryActivityMetadata* release_activity_metadata();
  ::tensorflow::profiler::MemoryActivityMetadata* mutable_activity_metadata();
  void set_allocated_activity_metadata(::tensorflow::profiler::MemoryActivityMetadata* activity_metadata);

  // int64 time_offset_ps = 1;
  void clear_time_offset_ps();
  static const int kTimeOffsetPsFieldNumber = 1;
  ::google::protobuf::int64 time_offset_ps() const;
  void set_time_offset_ps(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryProfileSnapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::profiler::MemoryAggregationStats* aggregation_stats_;
  ::tensorflow::profiler::MemoryActivityMetadata* activity_metadata_;
  ::google::protobuf::int64 time_offset_ps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryProfileSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryProfileSummary) */ {
 public:
  MemoryProfileSummary();
  virtual ~MemoryProfileSummary();

  MemoryProfileSummary(const MemoryProfileSummary& from);

  inline MemoryProfileSummary& operator=(const MemoryProfileSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryProfileSummary(MemoryProfileSummary&& from) noexcept
    : MemoryProfileSummary() {
    *this = ::std::move(from);
  }

  inline MemoryProfileSummary& operator=(MemoryProfileSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryProfileSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryProfileSummary* internal_default_instance() {
    return reinterpret_cast<const MemoryProfileSummary*>(
               &_MemoryProfileSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MemoryProfileSummary* other);
  friend void swap(MemoryProfileSummary& a, MemoryProfileSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryProfileSummary* New() const final {
    return CreateMaybeMessage<MemoryProfileSummary>(NULL);
  }

  MemoryProfileSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryProfileSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryProfileSummary& from);
  void MergeFrom(const MemoryProfileSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProfileSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.profiler.MemoryAggregationStats peak_stats = 2;
  bool has_peak_stats() const;
  void clear_peak_stats();
  static const int kPeakStatsFieldNumber = 2;
  private:
  const ::tensorflow::profiler::MemoryAggregationStats& _internal_peak_stats() const;
  public:
  const ::tensorflow::profiler::MemoryAggregationStats& peak_stats() const;
  ::tensorflow::profiler::MemoryAggregationStats* release_peak_stats();
  ::tensorflow::profiler::MemoryAggregationStats* mutable_peak_stats();
  void set_allocated_peak_stats(::tensorflow::profiler::MemoryAggregationStats* peak_stats);

  // int64 peak_bytes_usage_lifetime = 1;
  void clear_peak_bytes_usage_lifetime();
  static const int kPeakBytesUsageLifetimeFieldNumber = 1;
  ::google::protobuf::int64 peak_bytes_usage_lifetime() const;
  void set_peak_bytes_usage_lifetime(::google::protobuf::int64 value);

  // int64 peak_stats_time_ps = 3;
  void clear_peak_stats_time_ps();
  static const int kPeakStatsTimePsFieldNumber = 3;
  ::google::protobuf::int64 peak_stats_time_ps() const;
  void set_peak_stats_time_ps(::google::protobuf::int64 value);

  // int64 memory_capacity = 4;
  void clear_memory_capacity();
  static const int kMemoryCapacityFieldNumber = 4;
  ::google::protobuf::int64 memory_capacity() const;
  void set_memory_capacity(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryProfileSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::profiler::MemoryAggregationStats* peak_stats_;
  ::google::protobuf::int64 peak_bytes_usage_lifetime_;
  ::google::protobuf::int64 peak_stats_time_ps_;
  ::google::protobuf::int64 memory_capacity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActiveAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.ActiveAllocation) */ {
 public:
  ActiveAllocation();
  virtual ~ActiveAllocation();

  ActiveAllocation(const ActiveAllocation& from);

  inline ActiveAllocation& operator=(const ActiveAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActiveAllocation(ActiveAllocation&& from) noexcept
    : ActiveAllocation() {
    *this = ::std::move(from);
  }

  inline ActiveAllocation& operator=(ActiveAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActiveAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveAllocation* internal_default_instance() {
    return reinterpret_cast<const ActiveAllocation*>(
               &_ActiveAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ActiveAllocation* other);
  friend void swap(ActiveAllocation& a, ActiveAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActiveAllocation* New() const final {
    return CreateMaybeMessage<ActiveAllocation>(NULL);
  }

  ActiveAllocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActiveAllocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActiveAllocation& from);
  void MergeFrom(const ActiveAllocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveAllocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 snapshot_index = 1;
  void clear_snapshot_index();
  static const int kSnapshotIndexFieldNumber = 1;
  ::google::protobuf::int64 snapshot_index() const;
  void set_snapshot_index(::google::protobuf::int64 value);

  // int64 special_index = 2;
  void clear_special_index();
  static const int kSpecialIndexFieldNumber = 2;
  ::google::protobuf::int64 special_index() const;
  void set_special_index(::google::protobuf::int64 value);

  // int64 num_occurrences = 3;
  void clear_num_occurrences();
  static const int kNumOccurrencesFieldNumber = 3;
  ::google::protobuf::int64 num_occurrences() const;
  void set_num_occurrences(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.ActiveAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 snapshot_index_;
  ::google::protobuf::int64 special_index_;
  ::google::protobuf::int64 num_occurrences_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerAllocatorMemoryProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PerAllocatorMemoryProfile) */ {
 public:
  PerAllocatorMemoryProfile();
  virtual ~PerAllocatorMemoryProfile();

  PerAllocatorMemoryProfile(const PerAllocatorMemoryProfile& from);

  inline PerAllocatorMemoryProfile& operator=(const PerAllocatorMemoryProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerAllocatorMemoryProfile(PerAllocatorMemoryProfile&& from) noexcept
    : PerAllocatorMemoryProfile() {
    *this = ::std::move(from);
  }

  inline PerAllocatorMemoryProfile& operator=(PerAllocatorMemoryProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerAllocatorMemoryProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerAllocatorMemoryProfile* internal_default_instance() {
    return reinterpret_cast<const PerAllocatorMemoryProfile*>(
               &_PerAllocatorMemoryProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PerAllocatorMemoryProfile* other);
  friend void swap(PerAllocatorMemoryProfile& a, PerAllocatorMemoryProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerAllocatorMemoryProfile* New() const final {
    return CreateMaybeMessage<PerAllocatorMemoryProfile>(NULL);
  }

  PerAllocatorMemoryProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerAllocatorMemoryProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerAllocatorMemoryProfile& from);
  void MergeFrom(const PerAllocatorMemoryProfile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerAllocatorMemoryProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.profiler.MemoryProfileSnapshot memory_profile_snapshots = 1;
  int memory_profile_snapshots_size() const;
  void clear_memory_profile_snapshots();
  static const int kMemoryProfileSnapshotsFieldNumber = 1;
  ::tensorflow::profiler::MemoryProfileSnapshot* mutable_memory_profile_snapshots(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >*
      mutable_memory_profile_snapshots();
  const ::tensorflow::profiler::MemoryProfileSnapshot& memory_profile_snapshots(int index) const;
  ::tensorflow::profiler::MemoryProfileSnapshot* add_memory_profile_snapshots();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >&
      memory_profile_snapshots() const;

  // repeated .tensorflow.profiler.ActiveAllocation active_allocations = 3;
  int active_allocations_size() const;
  void clear_active_allocations();
  static const int kActiveAllocationsFieldNumber = 3;
  ::tensorflow::profiler::ActiveAllocation* mutable_active_allocations(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >*
      mutable_active_allocations();
  const ::tensorflow::profiler::ActiveAllocation& active_allocations(int index) const;
  ::tensorflow::profiler::ActiveAllocation* add_active_allocations();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >&
      active_allocations() const;

  // repeated .tensorflow.profiler.MemoryActivityMetadata special_allocations = 4;
  int special_allocations_size() const;
  void clear_special_allocations();
  static const int kSpecialAllocationsFieldNumber = 4;
  ::tensorflow::profiler::MemoryActivityMetadata* mutable_special_allocations(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >*
      mutable_special_allocations();
  const ::tensorflow::profiler::MemoryActivityMetadata& special_allocations(int index) const;
  ::tensorflow::profiler::MemoryActivityMetadata* add_special_allocations();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >&
      special_allocations() const;

  // repeated .tensorflow.profiler.MemoryProfileSnapshot sampled_timeline_snapshots = 5;
  int sampled_timeline_snapshots_size() const;
  void clear_sampled_timeline_snapshots();
  static const int kSampledTimelineSnapshotsFieldNumber = 5;
  ::tensorflow::profiler::MemoryProfileSnapshot* mutable_sampled_timeline_snapshots(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >*
      mutable_sampled_timeline_snapshots();
  const ::tensorflow::profiler::MemoryProfileSnapshot& sampled_timeline_snapshots(int index) const;
  ::tensorflow::profiler::MemoryProfileSnapshot* add_sampled_timeline_snapshots();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >&
      sampled_timeline_snapshots() const;

  // .tensorflow.profiler.MemoryProfileSummary profile_summary = 2;
  bool has_profile_summary() const;
  void clear_profile_summary();
  static const int kProfileSummaryFieldNumber = 2;
  private:
  const ::tensorflow::profiler::MemoryProfileSummary& _internal_profile_summary() const;
  public:
  const ::tensorflow::profiler::MemoryProfileSummary& profile_summary() const;
  ::tensorflow::profiler::MemoryProfileSummary* release_profile_summary();
  ::tensorflow::profiler::MemoryProfileSummary* mutable_profile_summary();
  void set_allocated_profile_summary(::tensorflow::profiler::MemoryProfileSummary* profile_summary);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PerAllocatorMemoryProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot > memory_profile_snapshots_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation > active_allocations_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata > special_allocations_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot > sampled_timeline_snapshots_;
  ::tensorflow::profiler::MemoryProfileSummary* profile_summary_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse, 
    ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse, 
    ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse();
  MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse& other);
  static const MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse*>(&_MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MemoryProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.MemoryProfile) */ {
 public:
  MemoryProfile();
  virtual ~MemoryProfile();

  MemoryProfile(const MemoryProfile& from);

  inline MemoryProfile& operator=(const MemoryProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryProfile(MemoryProfile&& from) noexcept
    : MemoryProfile() {
    *this = ::std::move(from);
  }

  inline MemoryProfile& operator=(MemoryProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryProfile* internal_default_instance() {
    return reinterpret_cast<const MemoryProfile*>(
               &_MemoryProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MemoryProfile* other);
  friend void swap(MemoryProfile& a, MemoryProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryProfile* New() const final {
    return CreateMaybeMessage<MemoryProfile>(NULL);
  }

  MemoryProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryProfile& from);
  void MergeFrom(const MemoryProfile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .tensorflow.profiler.PerAllocatorMemoryProfile> memory_profile_per_allocator = 1;
  int memory_profile_per_allocator_size() const;
  void clear_memory_profile_per_allocator();
  static const int kMemoryProfilePerAllocatorFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >&
      memory_profile_per_allocator() const;
  ::google::protobuf::Map< ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >*
      mutable_memory_profile_per_allocator();

  // repeated string memory_ids = 3;
  int memory_ids_size() const;
  void clear_memory_ids();
  static const int kMemoryIdsFieldNumber = 3;
  const ::std::string& memory_ids(int index) const;
  ::std::string* mutable_memory_ids(int index);
  void set_memory_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_memory_ids(int index, ::std::string&& value);
  #endif
  void set_memory_ids(int index, const char* value);
  void set_memory_ids(int index, const char* value, size_t size);
  ::std::string* add_memory_ids();
  void add_memory_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_memory_ids(::std::string&& value);
  #endif
  void add_memory_ids(const char* value);
  void add_memory_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& memory_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_memory_ids();

  // int32 num_hosts = 2;
  void clear_num_hosts();
  static const int kNumHostsFieldNumber = 2;
  ::google::protobuf::int32 num_hosts() const;
  void set_num_hosts(::google::protobuf::int32 value);

  // int32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.MemoryProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MemoryProfile_MemoryProfilePerAllocatorEntry_DoNotUse,
      ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > memory_profile_per_allocator_;
  ::google::protobuf::RepeatedPtrField< ::std::string> memory_ids_;
  ::google::protobuf::int32 num_hosts_;
  ::google::protobuf::int32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryAggregationStats

// int64 stack_reserved_bytes = 1;
inline void MemoryAggregationStats::clear_stack_reserved_bytes() {
  stack_reserved_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryAggregationStats::stack_reserved_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.stack_reserved_bytes)
  return stack_reserved_bytes_;
}
inline void MemoryAggregationStats::set_stack_reserved_bytes(::google::protobuf::int64 value) {
  
  stack_reserved_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.stack_reserved_bytes)
}

// int64 heap_allocated_bytes = 2;
inline void MemoryAggregationStats::clear_heap_allocated_bytes() {
  heap_allocated_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryAggregationStats::heap_allocated_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.heap_allocated_bytes)
  return heap_allocated_bytes_;
}
inline void MemoryAggregationStats::set_heap_allocated_bytes(::google::protobuf::int64 value) {
  
  heap_allocated_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.heap_allocated_bytes)
}

// int64 free_memory_bytes = 3;
inline void MemoryAggregationStats::clear_free_memory_bytes() {
  free_memory_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryAggregationStats::free_memory_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.free_memory_bytes)
  return free_memory_bytes_;
}
inline void MemoryAggregationStats::set_free_memory_bytes(::google::protobuf::int64 value) {
  
  free_memory_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.free_memory_bytes)
}

// double fragmentation = 4;
inline void MemoryAggregationStats::clear_fragmentation() {
  fragmentation_ = 0;
}
inline double MemoryAggregationStats::fragmentation() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.fragmentation)
  return fragmentation_;
}
inline void MemoryAggregationStats::set_fragmentation(double value) {
  
  fragmentation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.fragmentation)
}

// int64 peak_bytes_in_use = 5;
inline void MemoryAggregationStats::clear_peak_bytes_in_use() {
  peak_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryAggregationStats::peak_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryAggregationStats.peak_bytes_in_use)
  return peak_bytes_in_use_;
}
inline void MemoryAggregationStats::set_peak_bytes_in_use(::google::protobuf::int64 value) {
  
  peak_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryAggregationStats.peak_bytes_in_use)
}

// -------------------------------------------------------------------

// MemoryActivityMetadata

// .tensorflow.profiler.MemoryActivity memory_activity = 1;
inline void MemoryActivityMetadata::clear_memory_activity() {
  memory_activity_ = 0;
}
inline ::tensorflow::profiler::MemoryActivity MemoryActivityMetadata::memory_activity() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.memory_activity)
  return static_cast< ::tensorflow::profiler::MemoryActivity >(memory_activity_);
}
inline void MemoryActivityMetadata::set_memory_activity(::tensorflow::profiler::MemoryActivity value) {
  
  memory_activity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.memory_activity)
}

// int64 requested_bytes = 2;
inline void MemoryActivityMetadata::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryActivityMetadata::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.requested_bytes)
  return requested_bytes_;
}
inline void MemoryActivityMetadata::set_requested_bytes(::google::protobuf::int64 value) {
  
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.requested_bytes)
}

// int64 allocation_bytes = 3;
inline void MemoryActivityMetadata::clear_allocation_bytes() {
  allocation_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryActivityMetadata::allocation_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.allocation_bytes)
  return allocation_bytes_;
}
inline void MemoryActivityMetadata::set_allocation_bytes(::google::protobuf::int64 value) {
  
  allocation_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.allocation_bytes)
}

// uint64 address = 4;
inline void MemoryActivityMetadata::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemoryActivityMetadata::address() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.address)
  return address_;
}
inline void MemoryActivityMetadata::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.address)
}

// string tf_op_name = 5;
inline void MemoryActivityMetadata::clear_tf_op_name() {
  tf_op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemoryActivityMetadata::tf_op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
  return tf_op_name_.GetNoArena();
}
inline void MemoryActivityMetadata::set_tf_op_name(const ::std::string& value) {
  
  tf_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}
#if LANG_CXX11
inline void MemoryActivityMetadata::set_tf_op_name(::std::string&& value) {
  
  tf_op_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}
#endif
inline void MemoryActivityMetadata::set_tf_op_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tf_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}
inline void MemoryActivityMetadata::set_tf_op_name(const char* value, size_t size) {
  
  tf_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}
inline ::std::string* MemoryActivityMetadata::mutable_tf_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
  return tf_op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemoryActivityMetadata::release_tf_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
  
  return tf_op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryActivityMetadata::set_allocated_tf_op_name(::std::string* tf_op_name) {
  if (tf_op_name != NULL) {
    
  } else {
    
  }
  tf_op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tf_op_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.tf_op_name)
}

// int64 step_id = 6;
inline void MemoryActivityMetadata::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryActivityMetadata::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.step_id)
  return step_id_;
}
inline void MemoryActivityMetadata::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.step_id)
}

// string region_type = 7;
inline void MemoryActivityMetadata::clear_region_type() {
  region_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemoryActivityMetadata::region_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.region_type)
  return region_type_.GetNoArena();
}
inline void MemoryActivityMetadata::set_region_type(const ::std::string& value) {
  
  region_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.region_type)
}
#if LANG_CXX11
inline void MemoryActivityMetadata::set_region_type(::std::string&& value) {
  
  region_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.MemoryActivityMetadata.region_type)
}
#endif
inline void MemoryActivityMetadata::set_region_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.MemoryActivityMetadata.region_type)
}
inline void MemoryActivityMetadata::set_region_type(const char* value, size_t size) {
  
  region_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.MemoryActivityMetadata.region_type)
}
inline ::std::string* MemoryActivityMetadata::mutable_region_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.region_type)
  return region_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemoryActivityMetadata::release_region_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.region_type)
  
  return region_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryActivityMetadata::set_allocated_region_type(::std::string* region_type) {
  if (region_type != NULL) {
    
  } else {
    
  }
  region_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.region_type)
}

// string data_type = 8;
inline void MemoryActivityMetadata::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemoryActivityMetadata::data_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.data_type)
  return data_type_.GetNoArena();
}
inline void MemoryActivityMetadata::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.data_type)
}
#if LANG_CXX11
inline void MemoryActivityMetadata::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.MemoryActivityMetadata.data_type)
}
#endif
inline void MemoryActivityMetadata::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.MemoryActivityMetadata.data_type)
}
inline void MemoryActivityMetadata::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.MemoryActivityMetadata.data_type)
}
inline ::std::string* MemoryActivityMetadata::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemoryActivityMetadata::release_data_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryActivityMetadata::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.data_type)
}

// string tensor_shape = 9;
inline void MemoryActivityMetadata::clear_tensor_shape() {
  tensor_shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemoryActivityMetadata::tensor_shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
  return tensor_shape_.GetNoArena();
}
inline void MemoryActivityMetadata::set_tensor_shape(const ::std::string& value) {
  
  tensor_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}
#if LANG_CXX11
inline void MemoryActivityMetadata::set_tensor_shape(::std::string&& value) {
  
  tensor_shape_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}
#endif
inline void MemoryActivityMetadata::set_tensor_shape(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tensor_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}
inline void MemoryActivityMetadata::set_tensor_shape(const char* value, size_t size) {
  
  tensor_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}
inline ::std::string* MemoryActivityMetadata::mutable_tensor_shape() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
  return tensor_shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemoryActivityMetadata::release_tensor_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
  
  return tensor_shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryActivityMetadata::set_allocated_tensor_shape(::std::string* tensor_shape) {
  if (tensor_shape != NULL) {
    
  } else {
    
  }
  tensor_shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_shape);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryActivityMetadata.tensor_shape)
}

// -------------------------------------------------------------------

// MemoryProfileSnapshot

// int64 time_offset_ps = 1;
inline void MemoryProfileSnapshot::clear_time_offset_ps() {
  time_offset_ps_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryProfileSnapshot::time_offset_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSnapshot.time_offset_ps)
  return time_offset_ps_;
}
inline void MemoryProfileSnapshot::set_time_offset_ps(::google::protobuf::int64 value) {
  
  time_offset_ps_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSnapshot.time_offset_ps)
}

// .tensorflow.profiler.MemoryAggregationStats aggregation_stats = 2;
inline bool MemoryProfileSnapshot::has_aggregation_stats() const {
  return this != internal_default_instance() && aggregation_stats_ != NULL;
}
inline void MemoryProfileSnapshot::clear_aggregation_stats() {
  if (GetArenaNoVirtual() == NULL && aggregation_stats_ != NULL) {
    delete aggregation_stats_;
  }
  aggregation_stats_ = NULL;
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSnapshot::_internal_aggregation_stats() const {
  return *aggregation_stats_;
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSnapshot::aggregation_stats() const {
  const ::tensorflow::profiler::MemoryAggregationStats* p = aggregation_stats_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::MemoryAggregationStats*>(
      &::tensorflow::profiler::_MemoryAggregationStats_default_instance_);
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSnapshot::release_aggregation_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
  
  ::tensorflow::profiler::MemoryAggregationStats* temp = aggregation_stats_;
  aggregation_stats_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSnapshot::mutable_aggregation_stats() {
  
  if (aggregation_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryAggregationStats>(GetArenaNoVirtual());
    aggregation_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
  return aggregation_stats_;
}
inline void MemoryProfileSnapshot::set_allocated_aggregation_stats(::tensorflow::profiler::MemoryAggregationStats* aggregation_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete aggregation_stats_;
  }
  if (aggregation_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aggregation_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aggregation_stats, submessage_arena);
    }
    
  } else {
    
  }
  aggregation_stats_ = aggregation_stats;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats)
}

// .tensorflow.profiler.MemoryActivityMetadata activity_metadata = 3;
inline bool MemoryProfileSnapshot::has_activity_metadata() const {
  return this != internal_default_instance() && activity_metadata_ != NULL;
}
inline void MemoryProfileSnapshot::clear_activity_metadata() {
  if (GetArenaNoVirtual() == NULL && activity_metadata_ != NULL) {
    delete activity_metadata_;
  }
  activity_metadata_ = NULL;
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& MemoryProfileSnapshot::_internal_activity_metadata() const {
  return *activity_metadata_;
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& MemoryProfileSnapshot::activity_metadata() const {
  const ::tensorflow::profiler::MemoryActivityMetadata* p = activity_metadata_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::MemoryActivityMetadata*>(
      &::tensorflow::profiler::_MemoryActivityMetadata_default_instance_);
}
inline ::tensorflow::profiler::MemoryActivityMetadata* MemoryProfileSnapshot::release_activity_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
  
  ::tensorflow::profiler::MemoryActivityMetadata* temp = activity_metadata_;
  activity_metadata_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::MemoryActivityMetadata* MemoryProfileSnapshot::mutable_activity_metadata() {
  
  if (activity_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryActivityMetadata>(GetArenaNoVirtual());
    activity_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
  return activity_metadata_;
}
inline void MemoryProfileSnapshot::set_allocated_activity_metadata(::tensorflow::profiler::MemoryActivityMetadata* activity_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete activity_metadata_;
  }
  if (activity_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      activity_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, activity_metadata, submessage_arena);
    }
    
  } else {
    
  }
  activity_metadata_ = activity_metadata;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryProfileSnapshot.activity_metadata)
}

// -------------------------------------------------------------------

// MemoryProfileSummary

// int64 peak_bytes_usage_lifetime = 1;
inline void MemoryProfileSummary::clear_peak_bytes_usage_lifetime() {
  peak_bytes_usage_lifetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryProfileSummary::peak_bytes_usage_lifetime() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.peak_bytes_usage_lifetime)
  return peak_bytes_usage_lifetime_;
}
inline void MemoryProfileSummary::set_peak_bytes_usage_lifetime(::google::protobuf::int64 value) {
  
  peak_bytes_usage_lifetime_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSummary.peak_bytes_usage_lifetime)
}

// .tensorflow.profiler.MemoryAggregationStats peak_stats = 2;
inline bool MemoryProfileSummary::has_peak_stats() const {
  return this != internal_default_instance() && peak_stats_ != NULL;
}
inline void MemoryProfileSummary::clear_peak_stats() {
  if (GetArenaNoVirtual() == NULL && peak_stats_ != NULL) {
    delete peak_stats_;
  }
  peak_stats_ = NULL;
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSummary::_internal_peak_stats() const {
  return *peak_stats_;
}
inline const ::tensorflow::profiler::MemoryAggregationStats& MemoryProfileSummary::peak_stats() const {
  const ::tensorflow::profiler::MemoryAggregationStats* p = peak_stats_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.peak_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::MemoryAggregationStats*>(
      &::tensorflow::profiler::_MemoryAggregationStats_default_instance_);
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSummary::release_peak_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.MemoryProfileSummary.peak_stats)
  
  ::tensorflow::profiler::MemoryAggregationStats* temp = peak_stats_;
  peak_stats_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::MemoryAggregationStats* MemoryProfileSummary::mutable_peak_stats() {
  
  if (peak_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryAggregationStats>(GetArenaNoVirtual());
    peak_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfileSummary.peak_stats)
  return peak_stats_;
}
inline void MemoryProfileSummary::set_allocated_peak_stats(::tensorflow::profiler::MemoryAggregationStats* peak_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peak_stats_;
  }
  if (peak_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peak_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peak_stats, submessage_arena);
    }
    
  } else {
    
  }
  peak_stats_ = peak_stats;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.MemoryProfileSummary.peak_stats)
}

// int64 peak_stats_time_ps = 3;
inline void MemoryProfileSummary::clear_peak_stats_time_ps() {
  peak_stats_time_ps_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryProfileSummary::peak_stats_time_ps() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.peak_stats_time_ps)
  return peak_stats_time_ps_;
}
inline void MemoryProfileSummary::set_peak_stats_time_ps(::google::protobuf::int64 value) {
  
  peak_stats_time_ps_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSummary.peak_stats_time_ps)
}

// int64 memory_capacity = 4;
inline void MemoryProfileSummary::clear_memory_capacity() {
  memory_capacity_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryProfileSummary::memory_capacity() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfileSummary.memory_capacity)
  return memory_capacity_;
}
inline void MemoryProfileSummary::set_memory_capacity(::google::protobuf::int64 value) {
  
  memory_capacity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfileSummary.memory_capacity)
}

// -------------------------------------------------------------------

// ActiveAllocation

// int64 snapshot_index = 1;
inline void ActiveAllocation::clear_snapshot_index() {
  snapshot_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ActiveAllocation::snapshot_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.ActiveAllocation.snapshot_index)
  return snapshot_index_;
}
inline void ActiveAllocation::set_snapshot_index(::google::protobuf::int64 value) {
  
  snapshot_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.ActiveAllocation.snapshot_index)
}

// int64 special_index = 2;
inline void ActiveAllocation::clear_special_index() {
  special_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ActiveAllocation::special_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.ActiveAllocation.special_index)
  return special_index_;
}
inline void ActiveAllocation::set_special_index(::google::protobuf::int64 value) {
  
  special_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.ActiveAllocation.special_index)
}

// int64 num_occurrences = 3;
inline void ActiveAllocation::clear_num_occurrences() {
  num_occurrences_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ActiveAllocation::num_occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.ActiveAllocation.num_occurrences)
  return num_occurrences_;
}
inline void ActiveAllocation::set_num_occurrences(::google::protobuf::int64 value) {
  
  num_occurrences_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.ActiveAllocation.num_occurrences)
}

// -------------------------------------------------------------------

// PerAllocatorMemoryProfile

// repeated .tensorflow.profiler.MemoryProfileSnapshot memory_profile_snapshots = 1;
inline int PerAllocatorMemoryProfile::memory_profile_snapshots_size() const {
  return memory_profile_snapshots_.size();
}
inline void PerAllocatorMemoryProfile::clear_memory_profile_snapshots() {
  memory_profile_snapshots_.Clear();
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::mutable_memory_profile_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return memory_profile_snapshots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >*
PerAllocatorMemoryProfile::mutable_memory_profile_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return &memory_profile_snapshots_;
}
inline const ::tensorflow::profiler::MemoryProfileSnapshot& PerAllocatorMemoryProfile::memory_profile_snapshots(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return memory_profile_snapshots_.Get(index);
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::add_memory_profile_snapshots() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return memory_profile_snapshots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >&
PerAllocatorMemoryProfile::memory_profile_snapshots() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots)
  return memory_profile_snapshots_;
}

// .tensorflow.profiler.MemoryProfileSummary profile_summary = 2;
inline bool PerAllocatorMemoryProfile::has_profile_summary() const {
  return this != internal_default_instance() && profile_summary_ != NULL;
}
inline void PerAllocatorMemoryProfile::clear_profile_summary() {
  if (GetArenaNoVirtual() == NULL && profile_summary_ != NULL) {
    delete profile_summary_;
  }
  profile_summary_ = NULL;
}
inline const ::tensorflow::profiler::MemoryProfileSummary& PerAllocatorMemoryProfile::_internal_profile_summary() const {
  return *profile_summary_;
}
inline const ::tensorflow::profiler::MemoryProfileSummary& PerAllocatorMemoryProfile::profile_summary() const {
  const ::tensorflow::profiler::MemoryProfileSummary* p = profile_summary_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::MemoryProfileSummary*>(
      &::tensorflow::profiler::_MemoryProfileSummary_default_instance_);
}
inline ::tensorflow::profiler::MemoryProfileSummary* PerAllocatorMemoryProfile::release_profile_summary() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
  
  ::tensorflow::profiler::MemoryProfileSummary* temp = profile_summary_;
  profile_summary_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::MemoryProfileSummary* PerAllocatorMemoryProfile::mutable_profile_summary() {
  
  if (profile_summary_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::MemoryProfileSummary>(GetArenaNoVirtual());
    profile_summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
  return profile_summary_;
}
inline void PerAllocatorMemoryProfile::set_allocated_profile_summary(::tensorflow::profiler::MemoryProfileSummary* profile_summary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete profile_summary_;
  }
  if (profile_summary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      profile_summary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, profile_summary, submessage_arena);
    }
    
  } else {
    
  }
  profile_summary_ = profile_summary;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary)
}

// repeated .tensorflow.profiler.ActiveAllocation active_allocations = 3;
inline int PerAllocatorMemoryProfile::active_allocations_size() const {
  return active_allocations_.size();
}
inline void PerAllocatorMemoryProfile::clear_active_allocations() {
  active_allocations_.Clear();
}
inline ::tensorflow::profiler::ActiveAllocation* PerAllocatorMemoryProfile::mutable_active_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return active_allocations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >*
PerAllocatorMemoryProfile::mutable_active_allocations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return &active_allocations_;
}
inline const ::tensorflow::profiler::ActiveAllocation& PerAllocatorMemoryProfile::active_allocations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return active_allocations_.Get(index);
}
inline ::tensorflow::profiler::ActiveAllocation* PerAllocatorMemoryProfile::add_active_allocations() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return active_allocations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::ActiveAllocation >&
PerAllocatorMemoryProfile::active_allocations() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations)
  return active_allocations_;
}

// repeated .tensorflow.profiler.MemoryActivityMetadata special_allocations = 4;
inline int PerAllocatorMemoryProfile::special_allocations_size() const {
  return special_allocations_.size();
}
inline void PerAllocatorMemoryProfile::clear_special_allocations() {
  special_allocations_.Clear();
}
inline ::tensorflow::profiler::MemoryActivityMetadata* PerAllocatorMemoryProfile::mutable_special_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return special_allocations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >*
PerAllocatorMemoryProfile::mutable_special_allocations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return &special_allocations_;
}
inline const ::tensorflow::profiler::MemoryActivityMetadata& PerAllocatorMemoryProfile::special_allocations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return special_allocations_.Get(index);
}
inline ::tensorflow::profiler::MemoryActivityMetadata* PerAllocatorMemoryProfile::add_special_allocations() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return special_allocations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryActivityMetadata >&
PerAllocatorMemoryProfile::special_allocations() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations)
  return special_allocations_;
}

// repeated .tensorflow.profiler.MemoryProfileSnapshot sampled_timeline_snapshots = 5;
inline int PerAllocatorMemoryProfile::sampled_timeline_snapshots_size() const {
  return sampled_timeline_snapshots_.size();
}
inline void PerAllocatorMemoryProfile::clear_sampled_timeline_snapshots() {
  sampled_timeline_snapshots_.Clear();
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::mutable_sampled_timeline_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.PerAllocatorMemoryProfile.sampled_timeline_snapshots)
  return sampled_timeline_snapshots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >*
PerAllocatorMemoryProfile::mutable_sampled_timeline_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.PerAllocatorMemoryProfile.sampled_timeline_snapshots)
  return &sampled_timeline_snapshots_;
}
inline const ::tensorflow::profiler::MemoryProfileSnapshot& PerAllocatorMemoryProfile::sampled_timeline_snapshots(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerAllocatorMemoryProfile.sampled_timeline_snapshots)
  return sampled_timeline_snapshots_.Get(index);
}
inline ::tensorflow::profiler::MemoryProfileSnapshot* PerAllocatorMemoryProfile::add_sampled_timeline_snapshots() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.PerAllocatorMemoryProfile.sampled_timeline_snapshots)
  return sampled_timeline_snapshots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::MemoryProfileSnapshot >&
PerAllocatorMemoryProfile::sampled_timeline_snapshots() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.PerAllocatorMemoryProfile.sampled_timeline_snapshots)
  return sampled_timeline_snapshots_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MemoryProfile

// map<string, .tensorflow.profiler.PerAllocatorMemoryProfile> memory_profile_per_allocator = 1;
inline int MemoryProfile::memory_profile_per_allocator_size() const {
  return memory_profile_per_allocator_.size();
}
inline void MemoryProfile::clear_memory_profile_per_allocator() {
  memory_profile_per_allocator_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >&
MemoryProfile::memory_profile_per_allocator() const {
  // @@protoc_insertion_point(field_map:tensorflow.profiler.MemoryProfile.memory_profile_per_allocator)
  return memory_profile_per_allocator_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tensorflow::profiler::PerAllocatorMemoryProfile >*
MemoryProfile::mutable_memory_profile_per_allocator() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.profiler.MemoryProfile.memory_profile_per_allocator)
  return memory_profile_per_allocator_.MutableMap();
}

// int32 num_hosts = 2;
inline void MemoryProfile::clear_num_hosts() {
  num_hosts_ = 0;
}
inline ::google::protobuf::int32 MemoryProfile::num_hosts() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfile.num_hosts)
  return num_hosts_;
}
inline void MemoryProfile::set_num_hosts(::google::protobuf::int32 value) {
  
  num_hosts_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.num_hosts)
}

// repeated string memory_ids = 3;
inline int MemoryProfile::memory_ids_size() const {
  return memory_ids_.size();
}
inline void MemoryProfile::clear_memory_ids() {
  memory_ids_.Clear();
}
inline const ::std::string& MemoryProfile::memory_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfile.memory_ids)
  return memory_ids_.Get(index);
}
inline ::std::string* MemoryProfile::mutable_memory_ids(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.MemoryProfile.memory_ids)
  return memory_ids_.Mutable(index);
}
inline void MemoryProfile::set_memory_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.memory_ids)
  memory_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MemoryProfile::set_memory_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.memory_ids)
  memory_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MemoryProfile::set_memory_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  memory_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::set_memory_ids(int index, const char* value, size_t size) {
  memory_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline ::std::string* MemoryProfile::add_memory_ids() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.profiler.MemoryProfile.memory_ids)
  return memory_ids_.Add();
}
inline void MemoryProfile::add_memory_ids(const ::std::string& value) {
  memory_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.MemoryProfile.memory_ids)
}
#if LANG_CXX11
inline void MemoryProfile::add_memory_ids(::std::string&& value) {
  memory_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.profiler.MemoryProfile.memory_ids)
}
#endif
inline void MemoryProfile::add_memory_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  memory_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline void MemoryProfile::add_memory_ids(const char* value, size_t size) {
  memory_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.profiler.MemoryProfile.memory_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MemoryProfile::memory_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.MemoryProfile.memory_ids)
  return memory_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MemoryProfile::mutable_memory_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.MemoryProfile.memory_ids)
  return &memory_ids_;
}

// int32 version = 5;
inline void MemoryProfile::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 MemoryProfile::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.MemoryProfile.version)
  return version_;
}
inline void MemoryProfile::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.MemoryProfile.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::profiler::MemoryActivity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::profiler::MemoryActivity>() {
  return ::tensorflow::profiler::MemoryActivity_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fmemory_5fprofile_2eproto
