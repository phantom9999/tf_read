// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/tf_stats.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto 

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
namespace tensorflow {
namespace profiler {
class TfStatsDatabase;
class TfStatsDatabaseDefaultTypeInternal;
extern TfStatsDatabaseDefaultTypeInternal _TfStatsDatabase_default_instance_;
class TfStatsRecord;
class TfStatsRecordDefaultTypeInternal;
extern TfStatsRecordDefaultTypeInternal _TfStatsRecord_default_instance_;
class TfStatsTable;
class TfStatsTableDefaultTypeInternal;
extern TfStatsTableDefaultTypeInternal _TfStatsTable_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::profiler::TfStatsDatabase* Arena::CreateMaybeMessage<::tensorflow::profiler::TfStatsDatabase>(Arena*);
template<> ::tensorflow::profiler::TfStatsRecord* Arena::CreateMaybeMessage<::tensorflow::profiler::TfStatsRecord>(Arena*);
template<> ::tensorflow::profiler::TfStatsTable* Arena::CreateMaybeMessage<::tensorflow::profiler::TfStatsTable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace profiler {

// ===================================================================

class TfStatsDatabase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.TfStatsDatabase) */ {
 public:
  TfStatsDatabase();
  virtual ~TfStatsDatabase();

  TfStatsDatabase(const TfStatsDatabase& from);

  inline TfStatsDatabase& operator=(const TfStatsDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TfStatsDatabase(TfStatsDatabase&& from) noexcept
    : TfStatsDatabase() {
    *this = ::std::move(from);
  }

  inline TfStatsDatabase& operator=(TfStatsDatabase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TfStatsDatabase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfStatsDatabase* internal_default_instance() {
    return reinterpret_cast<const TfStatsDatabase*>(
               &_TfStatsDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TfStatsDatabase* other);
  friend void swap(TfStatsDatabase& a, TfStatsDatabase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TfStatsDatabase* New() const final {
    return CreateMaybeMessage<TfStatsDatabase>(NULL);
  }

  TfStatsDatabase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TfStatsDatabase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TfStatsDatabase& from);
  void MergeFrom(const TfStatsDatabase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfStatsDatabase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device_type = 6;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 6;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  #if LANG_CXX11
  void set_device_type(::std::string&& value);
  #endif
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  bool has_with_idle() const;
  void clear_with_idle();
  static const int kWithIdleFieldNumber = 4;
  private:
  const ::tensorflow::profiler::TfStatsTable& _internal_with_idle() const;
  public:
  const ::tensorflow::profiler::TfStatsTable& with_idle() const;
  ::tensorflow::profiler::TfStatsTable* release_with_idle();
  ::tensorflow::profiler::TfStatsTable* mutable_with_idle();
  void set_allocated_with_idle(::tensorflow::profiler::TfStatsTable* with_idle);

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  bool has_without_idle() const;
  void clear_without_idle();
  static const int kWithoutIdleFieldNumber = 5;
  private:
  const ::tensorflow::profiler::TfStatsTable& _internal_without_idle() const;
  public:
  const ::tensorflow::profiler::TfStatsTable& without_idle() const;
  ::tensorflow::profiler::TfStatsTable* release_without_idle();
  ::tensorflow::profiler::TfStatsTable* mutable_without_idle();
  void set_allocated_without_idle(::tensorflow::profiler::TfStatsTable* without_idle);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.TfStatsDatabase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::tensorflow::profiler::TfStatsTable* with_idle_;
  ::tensorflow::profiler::TfStatsTable* without_idle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TfStatsTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.TfStatsTable) */ {
 public:
  TfStatsTable();
  virtual ~TfStatsTable();

  TfStatsTable(const TfStatsTable& from);

  inline TfStatsTable& operator=(const TfStatsTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TfStatsTable(TfStatsTable&& from) noexcept
    : TfStatsTable() {
    *this = ::std::move(from);
  }

  inline TfStatsTable& operator=(TfStatsTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TfStatsTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfStatsTable* internal_default_instance() {
    return reinterpret_cast<const TfStatsTable*>(
               &_TfStatsTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TfStatsTable* other);
  friend void swap(TfStatsTable& a, TfStatsTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TfStatsTable* New() const final {
    return CreateMaybeMessage<TfStatsTable>(NULL);
  }

  TfStatsTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TfStatsTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TfStatsTable& from);
  void MergeFrom(const TfStatsTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfStatsTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  int tf_stats_record_size() const;
  void clear_tf_stats_record();
  static const int kTfStatsRecordFieldNumber = 1;
  ::tensorflow::profiler::TfStatsRecord* mutable_tf_stats_record(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >*
      mutable_tf_stats_record();
  const ::tensorflow::profiler::TfStatsRecord& tf_stats_record(int index) const;
  ::tensorflow::profiler::TfStatsRecord* add_tf_stats_record();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >&
      tf_stats_record() const;

  // string host_tf_pprof_key = 2;
  void clear_host_tf_pprof_key();
  static const int kHostTfPprofKeyFieldNumber = 2;
  const ::std::string& host_tf_pprof_key() const;
  void set_host_tf_pprof_key(const ::std::string& value);
  #if LANG_CXX11
  void set_host_tf_pprof_key(::std::string&& value);
  #endif
  void set_host_tf_pprof_key(const char* value);
  void set_host_tf_pprof_key(const char* value, size_t size);
  ::std::string* mutable_host_tf_pprof_key();
  ::std::string* release_host_tf_pprof_key();
  void set_allocated_host_tf_pprof_key(::std::string* host_tf_pprof_key);

  // string device_tf_pprof_key = 3;
  void clear_device_tf_pprof_key();
  static const int kDeviceTfPprofKeyFieldNumber = 3;
  const ::std::string& device_tf_pprof_key() const;
  void set_device_tf_pprof_key(const ::std::string& value);
  #if LANG_CXX11
  void set_device_tf_pprof_key(::std::string&& value);
  #endif
  void set_device_tf_pprof_key(const char* value);
  void set_device_tf_pprof_key(const char* value, size_t size);
  ::std::string* mutable_device_tf_pprof_key();
  ::std::string* release_device_tf_pprof_key();
  void set_allocated_device_tf_pprof_key(::std::string* device_tf_pprof_key);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.TfStatsTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord > tf_stats_record_;
  ::google::protobuf::internal::ArenaStringPtr host_tf_pprof_key_;
  ::google::protobuf::internal::ArenaStringPtr device_tf_pprof_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TfStatsRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.TfStatsRecord) */ {
 public:
  TfStatsRecord();
  virtual ~TfStatsRecord();

  TfStatsRecord(const TfStatsRecord& from);

  inline TfStatsRecord& operator=(const TfStatsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TfStatsRecord(TfStatsRecord&& from) noexcept
    : TfStatsRecord() {
    *this = ::std::move(from);
  }

  inline TfStatsRecord& operator=(TfStatsRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TfStatsRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TfStatsRecord* internal_default_instance() {
    return reinterpret_cast<const TfStatsRecord*>(
               &_TfStatsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TfStatsRecord* other);
  friend void swap(TfStatsRecord& a, TfStatsRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TfStatsRecord* New() const final {
    return CreateMaybeMessage<TfStatsRecord>(NULL);
  }

  TfStatsRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TfStatsRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TfStatsRecord& from);
  void MergeFrom(const TfStatsRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfStatsRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_or_device = 2;
  void clear_host_or_device();
  static const int kHostOrDeviceFieldNumber = 2;
  const ::std::string& host_or_device() const;
  void set_host_or_device(const ::std::string& value);
  #if LANG_CXX11
  void set_host_or_device(::std::string&& value);
  #endif
  void set_host_or_device(const char* value);
  void set_host_or_device(const char* value, size_t size);
  ::std::string* mutable_host_or_device();
  ::std::string* release_host_or_device();
  void set_allocated_host_or_device(::std::string* host_or_device);

  // string op_type = 3;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 3;
  const ::std::string& op_type() const;
  void set_op_type(const ::std::string& value);
  #if LANG_CXX11
  void set_op_type(::std::string&& value);
  #endif
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  ::std::string* mutable_op_type();
  ::std::string* release_op_type();
  void set_allocated_op_type(::std::string* op_type);

  // string op_name = 4;
  void clear_op_name();
  static const int kOpNameFieldNumber = 4;
  const ::std::string& op_name() const;
  void set_op_name(const ::std::string& value);
  #if LANG_CXX11
  void set_op_name(::std::string&& value);
  #endif
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  ::std::string* mutable_op_name();
  ::std::string* release_op_name();
  void set_allocated_op_name(::std::string* op_name);

  // string bound_by = 17;
  void clear_bound_by();
  static const int kBoundByFieldNumber = 17;
  const ::std::string& bound_by() const;
  void set_bound_by(const ::std::string& value);
  #if LANG_CXX11
  void set_bound_by(::std::string&& value);
  #endif
  void set_bound_by(const char* value);
  void set_bound_by(const char* value, size_t size);
  ::std::string* mutable_bound_by();
  ::std::string* release_bound_by();
  void set_allocated_bound_by(::std::string* bound_by);

  // uint64 rank = 1;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::uint64 rank() const;
  void set_rank(::google::protobuf::uint64 value);

  // int64 occurrences = 5;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 5;
  ::google::protobuf::int64 occurrences() const;
  void set_occurrences(::google::protobuf::int64 value);

  // double total_time_in_us = 6;
  void clear_total_time_in_us();
  static const int kTotalTimeInUsFieldNumber = 6;
  double total_time_in_us() const;
  void set_total_time_in_us(double value);

  // double avg_time_in_us = 7;
  void clear_avg_time_in_us();
  static const int kAvgTimeInUsFieldNumber = 7;
  double avg_time_in_us() const;
  void set_avg_time_in_us(double value);

  // double total_self_time_in_us = 8;
  void clear_total_self_time_in_us();
  static const int kTotalSelfTimeInUsFieldNumber = 8;
  double total_self_time_in_us() const;
  void set_total_self_time_in_us(double value);

  // double avg_self_time_in_us = 9;
  void clear_avg_self_time_in_us();
  static const int kAvgSelfTimeInUsFieldNumber = 9;
  double avg_self_time_in_us() const;
  void set_avg_self_time_in_us(double value);

  // double device_total_self_time_as_fraction = 10;
  void clear_device_total_self_time_as_fraction();
  static const int kDeviceTotalSelfTimeAsFractionFieldNumber = 10;
  double device_total_self_time_as_fraction() const;
  void set_device_total_self_time_as_fraction(double value);

  // double device_cumulative_total_self_time_as_fraction = 11;
  void clear_device_cumulative_total_self_time_as_fraction();
  static const int kDeviceCumulativeTotalSelfTimeAsFractionFieldNumber = 11;
  double device_cumulative_total_self_time_as_fraction() const;
  void set_device_cumulative_total_self_time_as_fraction(double value);

  // double host_total_self_time_as_fraction = 12;
  void clear_host_total_self_time_as_fraction();
  static const int kHostTotalSelfTimeAsFractionFieldNumber = 12;
  double host_total_self_time_as_fraction() const;
  void set_host_total_self_time_as_fraction(double value);

  // double host_cumulative_total_self_time_as_fraction = 13;
  void clear_host_cumulative_total_self_time_as_fraction();
  static const int kHostCumulativeTotalSelfTimeAsFractionFieldNumber = 13;
  double host_cumulative_total_self_time_as_fraction() const;
  void set_host_cumulative_total_self_time_as_fraction(double value);

  // double measured_flop_rate = 14;
  void clear_measured_flop_rate();
  static const int kMeasuredFlopRateFieldNumber = 14;
  double measured_flop_rate() const;
  void set_measured_flop_rate(double value);

  // double measured_memory_bw = 15;
  void clear_measured_memory_bw();
  static const int kMeasuredMemoryBwFieldNumber = 15;
  double measured_memory_bw() const;
  void set_measured_memory_bw(double value);

  // double operational_intensity = 16;
  void clear_operational_intensity();
  static const int kOperationalIntensityFieldNumber = 16;
  double operational_intensity() const;
  void set_operational_intensity(double value);

  // double gpu_tensorcore_utilization = 19;
  void clear_gpu_tensorcore_utilization();
  static const int kGpuTensorcoreUtilizationFieldNumber = 19;
  double gpu_tensorcore_utilization() const;
  void set_gpu_tensorcore_utilization(double value);

  // bool is_eager = 18;
  void clear_is_eager();
  static const int kIsEagerFieldNumber = 18;
  bool is_eager() const;
  void set_is_eager(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.TfStatsRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_or_device_;
  ::google::protobuf::internal::ArenaStringPtr op_type_;
  ::google::protobuf::internal::ArenaStringPtr op_name_;
  ::google::protobuf::internal::ArenaStringPtr bound_by_;
  ::google::protobuf::uint64 rank_;
  ::google::protobuf::int64 occurrences_;
  double total_time_in_us_;
  double avg_time_in_us_;
  double total_self_time_in_us_;
  double avg_self_time_in_us_;
  double device_total_self_time_as_fraction_;
  double device_cumulative_total_self_time_as_fraction_;
  double host_total_self_time_as_fraction_;
  double host_cumulative_total_self_time_as_fraction_;
  double measured_flop_rate_;
  double measured_memory_bw_;
  double operational_intensity_;
  double gpu_tensorcore_utilization_;
  bool is_eager_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfStatsDatabase

// .tensorflow.profiler.TfStatsTable with_idle = 4;
inline bool TfStatsDatabase::has_with_idle() const {
  return this != internal_default_instance() && with_idle_ != NULL;
}
inline void TfStatsDatabase::clear_with_idle() {
  if (GetArenaNoVirtual() == NULL && with_idle_ != NULL) {
    delete with_idle_;
  }
  with_idle_ = NULL;
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::_internal_with_idle() const {
  return *with_idle_;
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::with_idle() const {
  const ::tensorflow::profiler::TfStatsTable* p = with_idle_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsDatabase.with_idle)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::TfStatsTable*>(
      &::tensorflow::profiler::_TfStatsTable_default_instance_);
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::release_with_idle() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsDatabase.with_idle)
  
  ::tensorflow::profiler::TfStatsTable* temp = with_idle_;
  with_idle_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::mutable_with_idle() {
  
  if (with_idle_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::TfStatsTable>(GetArenaNoVirtual());
    with_idle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsDatabase.with_idle)
  return with_idle_;
}
inline void TfStatsDatabase::set_allocated_with_idle(::tensorflow::profiler::TfStatsTable* with_idle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_idle_;
  }
  if (with_idle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      with_idle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, with_idle, submessage_arena);
    }
    
  } else {
    
  }
  with_idle_ = with_idle;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsDatabase.with_idle)
}

// .tensorflow.profiler.TfStatsTable without_idle = 5;
inline bool TfStatsDatabase::has_without_idle() const {
  return this != internal_default_instance() && without_idle_ != NULL;
}
inline void TfStatsDatabase::clear_without_idle() {
  if (GetArenaNoVirtual() == NULL && without_idle_ != NULL) {
    delete without_idle_;
  }
  without_idle_ = NULL;
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::_internal_without_idle() const {
  return *without_idle_;
}
inline const ::tensorflow::profiler::TfStatsTable& TfStatsDatabase::without_idle() const {
  const ::tensorflow::profiler::TfStatsTable* p = without_idle_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsDatabase.without_idle)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::TfStatsTable*>(
      &::tensorflow::profiler::_TfStatsTable_default_instance_);
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::release_without_idle() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsDatabase.without_idle)
  
  ::tensorflow::profiler::TfStatsTable* temp = without_idle_;
  without_idle_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::TfStatsTable* TfStatsDatabase::mutable_without_idle() {
  
  if (without_idle_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::TfStatsTable>(GetArenaNoVirtual());
    without_idle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsDatabase.without_idle)
  return without_idle_;
}
inline void TfStatsDatabase::set_allocated_without_idle(::tensorflow::profiler::TfStatsTable* without_idle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete without_idle_;
  }
  if (without_idle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      without_idle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, without_idle, submessage_arena);
    }
    
  } else {
    
  }
  without_idle_ = without_idle;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsDatabase.without_idle)
}

// string device_type = 6;
inline void TfStatsDatabase::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsDatabase::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsDatabase.device_type)
  return device_type_.GetNoArena();
}
inline void TfStatsDatabase::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsDatabase.device_type)
}
#if LANG_CXX11
inline void TfStatsDatabase::set_device_type(::std::string&& value) {
  
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsDatabase.device_type)
}
#endif
inline void TfStatsDatabase::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsDatabase.device_type)
}
inline void TfStatsDatabase::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsDatabase.device_type)
}
inline ::std::string* TfStatsDatabase::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsDatabase.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsDatabase::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsDatabase.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsDatabase::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsDatabase.device_type)
}

// -------------------------------------------------------------------

// TfStatsTable

// repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
inline int TfStatsTable::tf_stats_record_size() const {
  return tf_stats_record_.size();
}
inline void TfStatsTable::clear_tf_stats_record() {
  tf_stats_record_.Clear();
}
inline ::tensorflow::profiler::TfStatsRecord* TfStatsTable::mutable_tf_stats_record(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return tf_stats_record_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >*
TfStatsTable::mutable_tf_stats_record() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return &tf_stats_record_;
}
inline const ::tensorflow::profiler::TfStatsRecord& TfStatsTable::tf_stats_record(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return tf_stats_record_.Get(index);
}
inline ::tensorflow::profiler::TfStatsRecord* TfStatsTable::add_tf_stats_record() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return tf_stats_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::TfStatsRecord >&
TfStatsTable::tf_stats_record() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.TfStatsTable.tf_stats_record)
  return tf_stats_record_;
}

// string host_tf_pprof_key = 2;
inline void TfStatsTable::clear_host_tf_pprof_key() {
  host_tf_pprof_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsTable::host_tf_pprof_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
  return host_tf_pprof_key_.GetNoArena();
}
inline void TfStatsTable::set_host_tf_pprof_key(const ::std::string& value) {
  
  host_tf_pprof_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}
#if LANG_CXX11
inline void TfStatsTable::set_host_tf_pprof_key(::std::string&& value) {
  
  host_tf_pprof_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}
#endif
inline void TfStatsTable::set_host_tf_pprof_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_tf_pprof_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}
inline void TfStatsTable::set_host_tf_pprof_key(const char* value, size_t size) {
  
  host_tf_pprof_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}
inline ::std::string* TfStatsTable::mutable_host_tf_pprof_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
  return host_tf_pprof_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsTable::release_host_tf_pprof_key() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
  
  return host_tf_pprof_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsTable::set_allocated_host_tf_pprof_key(::std::string* host_tf_pprof_key) {
  if (host_tf_pprof_key != NULL) {
    
  } else {
    
  }
  host_tf_pprof_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_tf_pprof_key);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsTable.host_tf_pprof_key)
}

// string device_tf_pprof_key = 3;
inline void TfStatsTable::clear_device_tf_pprof_key() {
  device_tf_pprof_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsTable::device_tf_pprof_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
  return device_tf_pprof_key_.GetNoArena();
}
inline void TfStatsTable::set_device_tf_pprof_key(const ::std::string& value) {
  
  device_tf_pprof_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}
#if LANG_CXX11
inline void TfStatsTable::set_device_tf_pprof_key(::std::string&& value) {
  
  device_tf_pprof_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}
#endif
inline void TfStatsTable::set_device_tf_pprof_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_tf_pprof_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}
inline void TfStatsTable::set_device_tf_pprof_key(const char* value, size_t size) {
  
  device_tf_pprof_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}
inline ::std::string* TfStatsTable::mutable_device_tf_pprof_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
  return device_tf_pprof_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsTable::release_device_tf_pprof_key() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
  
  return device_tf_pprof_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsTable::set_allocated_device_tf_pprof_key(::std::string* device_tf_pprof_key) {
  if (device_tf_pprof_key != NULL) {
    
  } else {
    
  }
  device_tf_pprof_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_tf_pprof_key);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsTable.device_tf_pprof_key)
}

// -------------------------------------------------------------------

// TfStatsRecord

// uint64 rank = 1;
inline void TfStatsRecord::clear_rank() {
  rank_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TfStatsRecord::rank() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.rank)
  return rank_;
}
inline void TfStatsRecord::set_rank(::google::protobuf::uint64 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.rank)
}

// string host_or_device = 2;
inline void TfStatsRecord::clear_host_or_device() {
  host_or_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsRecord::host_or_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.host_or_device)
  return host_or_device_.GetNoArena();
}
inline void TfStatsRecord::set_host_or_device(const ::std::string& value) {
  
  host_or_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.host_or_device)
}
#if LANG_CXX11
inline void TfStatsRecord::set_host_or_device(::std::string&& value) {
  
  host_or_device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsRecord.host_or_device)
}
#endif
inline void TfStatsRecord::set_host_or_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_or_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsRecord.host_or_device)
}
inline void TfStatsRecord::set_host_or_device(const char* value, size_t size) {
  
  host_or_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsRecord.host_or_device)
}
inline ::std::string* TfStatsRecord::mutable_host_or_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.host_or_device)
  return host_or_device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsRecord::release_host_or_device() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.host_or_device)
  
  return host_or_device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsRecord::set_allocated_host_or_device(::std::string* host_or_device) {
  if (host_or_device != NULL) {
    
  } else {
    
  }
  host_or_device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_or_device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.host_or_device)
}

// string op_type = 3;
inline void TfStatsRecord::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsRecord::op_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.op_type)
  return op_type_.GetNoArena();
}
inline void TfStatsRecord::set_op_type(const ::std::string& value) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.op_type)
}
#if LANG_CXX11
inline void TfStatsRecord::set_op_type(::std::string&& value) {
  
  op_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsRecord.op_type)
}
#endif
inline void TfStatsRecord::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsRecord.op_type)
}
inline void TfStatsRecord::set_op_type(const char* value, size_t size) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsRecord.op_type)
}
inline ::std::string* TfStatsRecord::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.op_type)
  return op_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsRecord::release_op_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.op_type)
  
  return op_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsRecord::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.op_type)
}

// string op_name = 4;
inline void TfStatsRecord::clear_op_name() {
  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsRecord::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.op_name)
  return op_name_.GetNoArena();
}
inline void TfStatsRecord::set_op_name(const ::std::string& value) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.op_name)
}
#if LANG_CXX11
inline void TfStatsRecord::set_op_name(::std::string&& value) {
  
  op_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsRecord.op_name)
}
#endif
inline void TfStatsRecord::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsRecord.op_name)
}
inline void TfStatsRecord::set_op_name(const char* value, size_t size) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsRecord.op_name)
}
inline ::std::string* TfStatsRecord::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.op_name)
  return op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsRecord::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.op_name)
  
  return op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsRecord::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.op_name)
}

// int64 occurrences = 5;
inline void TfStatsRecord::clear_occurrences() {
  occurrences_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TfStatsRecord::occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.occurrences)
  return occurrences_;
}
inline void TfStatsRecord::set_occurrences(::google::protobuf::int64 value) {
  
  occurrences_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.occurrences)
}

// double total_time_in_us = 6;
inline void TfStatsRecord::clear_total_time_in_us() {
  total_time_in_us_ = 0;
}
inline double TfStatsRecord::total_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.total_time_in_us)
  return total_time_in_us_;
}
inline void TfStatsRecord::set_total_time_in_us(double value) {
  
  total_time_in_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.total_time_in_us)
}

// double avg_time_in_us = 7;
inline void TfStatsRecord::clear_avg_time_in_us() {
  avg_time_in_us_ = 0;
}
inline double TfStatsRecord::avg_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.avg_time_in_us)
  return avg_time_in_us_;
}
inline void TfStatsRecord::set_avg_time_in_us(double value) {
  
  avg_time_in_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.avg_time_in_us)
}

// double total_self_time_in_us = 8;
inline void TfStatsRecord::clear_total_self_time_in_us() {
  total_self_time_in_us_ = 0;
}
inline double TfStatsRecord::total_self_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.total_self_time_in_us)
  return total_self_time_in_us_;
}
inline void TfStatsRecord::set_total_self_time_in_us(double value) {
  
  total_self_time_in_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.total_self_time_in_us)
}

// double avg_self_time_in_us = 9;
inline void TfStatsRecord::clear_avg_self_time_in_us() {
  avg_self_time_in_us_ = 0;
}
inline double TfStatsRecord::avg_self_time_in_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.avg_self_time_in_us)
  return avg_self_time_in_us_;
}
inline void TfStatsRecord::set_avg_self_time_in_us(double value) {
  
  avg_self_time_in_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.avg_self_time_in_us)
}

// double device_total_self_time_as_fraction = 10;
inline void TfStatsRecord::clear_device_total_self_time_as_fraction() {
  device_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::device_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.device_total_self_time_as_fraction)
  return device_total_self_time_as_fraction_;
}
inline void TfStatsRecord::set_device_total_self_time_as_fraction(double value) {
  
  device_total_self_time_as_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.device_total_self_time_as_fraction)
}

// double device_cumulative_total_self_time_as_fraction = 11;
inline void TfStatsRecord::clear_device_cumulative_total_self_time_as_fraction() {
  device_cumulative_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::device_cumulative_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.device_cumulative_total_self_time_as_fraction)
  return device_cumulative_total_self_time_as_fraction_;
}
inline void TfStatsRecord::set_device_cumulative_total_self_time_as_fraction(double value) {
  
  device_cumulative_total_self_time_as_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.device_cumulative_total_self_time_as_fraction)
}

// double host_total_self_time_as_fraction = 12;
inline void TfStatsRecord::clear_host_total_self_time_as_fraction() {
  host_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::host_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.host_total_self_time_as_fraction)
  return host_total_self_time_as_fraction_;
}
inline void TfStatsRecord::set_host_total_self_time_as_fraction(double value) {
  
  host_total_self_time_as_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.host_total_self_time_as_fraction)
}

// double host_cumulative_total_self_time_as_fraction = 13;
inline void TfStatsRecord::clear_host_cumulative_total_self_time_as_fraction() {
  host_cumulative_total_self_time_as_fraction_ = 0;
}
inline double TfStatsRecord::host_cumulative_total_self_time_as_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.host_cumulative_total_self_time_as_fraction)
  return host_cumulative_total_self_time_as_fraction_;
}
inline void TfStatsRecord::set_host_cumulative_total_self_time_as_fraction(double value) {
  
  host_cumulative_total_self_time_as_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.host_cumulative_total_self_time_as_fraction)
}

// double measured_flop_rate = 14;
inline void TfStatsRecord::clear_measured_flop_rate() {
  measured_flop_rate_ = 0;
}
inline double TfStatsRecord::measured_flop_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.measured_flop_rate)
  return measured_flop_rate_;
}
inline void TfStatsRecord::set_measured_flop_rate(double value) {
  
  measured_flop_rate_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.measured_flop_rate)
}

// double measured_memory_bw = 15;
inline void TfStatsRecord::clear_measured_memory_bw() {
  measured_memory_bw_ = 0;
}
inline double TfStatsRecord::measured_memory_bw() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.measured_memory_bw)
  return measured_memory_bw_;
}
inline void TfStatsRecord::set_measured_memory_bw(double value) {
  
  measured_memory_bw_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.measured_memory_bw)
}

// double operational_intensity = 16;
inline void TfStatsRecord::clear_operational_intensity() {
  operational_intensity_ = 0;
}
inline double TfStatsRecord::operational_intensity() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.operational_intensity)
  return operational_intensity_;
}
inline void TfStatsRecord::set_operational_intensity(double value) {
  
  operational_intensity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.operational_intensity)
}

// string bound_by = 17;
inline void TfStatsRecord::clear_bound_by() {
  bound_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TfStatsRecord::bound_by() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.bound_by)
  return bound_by_.GetNoArena();
}
inline void TfStatsRecord::set_bound_by(const ::std::string& value) {
  
  bound_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.bound_by)
}
#if LANG_CXX11
inline void TfStatsRecord::set_bound_by(::std::string&& value) {
  
  bound_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.TfStatsRecord.bound_by)
}
#endif
inline void TfStatsRecord::set_bound_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bound_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.TfStatsRecord.bound_by)
}
inline void TfStatsRecord::set_bound_by(const char* value, size_t size) {
  
  bound_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.TfStatsRecord.bound_by)
}
inline ::std::string* TfStatsRecord::mutable_bound_by() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.TfStatsRecord.bound_by)
  return bound_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TfStatsRecord::release_bound_by() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.TfStatsRecord.bound_by)
  
  return bound_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TfStatsRecord::set_allocated_bound_by(::std::string* bound_by) {
  if (bound_by != NULL) {
    
  } else {
    
  }
  bound_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bound_by);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.TfStatsRecord.bound_by)
}

// bool is_eager = 18;
inline void TfStatsRecord::clear_is_eager() {
  is_eager_ = false;
}
inline bool TfStatsRecord::is_eager() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.is_eager)
  return is_eager_;
}
inline void TfStatsRecord::set_is_eager(bool value) {
  
  is_eager_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.is_eager)
}

// double gpu_tensorcore_utilization = 19;
inline void TfStatsRecord::clear_gpu_tensorcore_utilization() {
  gpu_tensorcore_utilization_ = 0;
}
inline double TfStatsRecord::gpu_tensorcore_utilization() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.TfStatsRecord.gpu_tensorcore_utilization)
  return gpu_tensorcore_utilization_;
}
inline void TfStatsRecord::set_gpu_tensorcore_utilization(double value) {
  
  gpu_tensorcore_utilization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.TfStatsRecord.gpu_tensorcore_utilization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto
