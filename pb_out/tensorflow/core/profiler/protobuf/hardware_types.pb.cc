// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/hardware_types.proto

#include "tensorflow/core/profiler/protobuf/hardware_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GPUComputeCapability;
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto
namespace tensorflow {
namespace profiler {
class GPUComputeCapabilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GPUComputeCapability>
      _instance;
} _GPUComputeCapability_default_instance_;
class DeviceCapabilitiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceCapabilities>
      _instance;
} _DeviceCapabilities_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto {
static void InitDefaultsGPUComputeCapability() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_GPUComputeCapability_default_instance_;
    new (ptr) ::tensorflow::profiler::GPUComputeCapability();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::GPUComputeCapability::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GPUComputeCapability =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGPUComputeCapability}, {}};

static void InitDefaultsDeviceCapabilities() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_DeviceCapabilities_default_instance_;
    new (ptr) ::tensorflow::profiler::DeviceCapabilities();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::DeviceCapabilities::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceCapabilities =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceCapabilities}, {
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::scc_info_GPUComputeCapability.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GPUComputeCapability.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceCapabilities.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::GPUComputeCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::GPUComputeCapability, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::GPUComputeCapability, minor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, clock_rate_in_ghz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, num_cores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, memory_size_in_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, memory_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, compute_capability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::profiler::DeviceCapabilities, device_vendor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::GPUComputeCapability)},
  { 7, -1, sizeof(::tensorflow::profiler::DeviceCapabilities)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::profiler::_GPUComputeCapability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::profiler::_DeviceCapabilities_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/profiler/protobuf/hardware_types.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n6tensorflow/core/profiler/protobuf/hard"
      "ware_types.proto\022\023tensorflow.profiler\"4\n"
      "\024GPUComputeCapability\022\r\n\005major\030\001 \001(\r\022\r\n\005"
      "minor\030\002 \001(\r\"\330\001\n\022DeviceCapabilities\022\031\n\021cl"
      "ock_rate_in_ghz\030\001 \001(\001\022\021\n\tnum_cores\030\002 \001(\r"
      "\022\034\n\024memory_size_in_bytes\030\003 \001(\004\022\030\n\020memory"
      "_bandwidth\030\004 \001(\004\022E\n\022compute_capability\030\005"
      " \001(\0132).tensorflow.profiler.GPUComputeCap"
      "ability\022\025\n\rdevice_vendor\030\006 \001(\t*D\n\014Hardwa"
      "reType\022\024\n\020UNKNOWN_HARDWARE\020\000\022\014\n\010CPU_ONLY"
      "\020\001\022\007\n\003GPU\020\002\022\007\n\003TPU\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/protobuf/hardware_types.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto
namespace tensorflow {
namespace profiler {
const ::google::protobuf::EnumDescriptor* HardwareType_descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::file_level_enum_descriptors[0];
}
bool HardwareType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GPUComputeCapability::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPUComputeCapability::kMajorFieldNumber;
const int GPUComputeCapability::kMinorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPUComputeCapability::GPUComputeCapability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::scc_info_GPUComputeCapability.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.GPUComputeCapability)
}
GPUComputeCapability::GPUComputeCapability(const GPUComputeCapability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.GPUComputeCapability)
}

void GPUComputeCapability::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

GPUComputeCapability::~GPUComputeCapability() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.GPUComputeCapability)
  SharedDtor();
}

void GPUComputeCapability::SharedDtor() {
}

void GPUComputeCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GPUComputeCapability::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GPUComputeCapability& GPUComputeCapability::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::scc_info_GPUComputeCapability.base);
  return *internal_default_instance();
}


void GPUComputeCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.GPUComputeCapability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  _internal_metadata_.Clear();
}

bool GPUComputeCapability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.profiler.GPUComputeCapability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.profiler.GPUComputeCapability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.profiler.GPUComputeCapability)
  return false;
#undef DO_
}

void GPUComputeCapability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.profiler.GPUComputeCapability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.profiler.GPUComputeCapability)
}

::google::protobuf::uint8* GPUComputeCapability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.GPUComputeCapability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.GPUComputeCapability)
  return target;
}

size_t GPUComputeCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.GPUComputeCapability)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUComputeCapability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.GPUComputeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUComputeCapability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPUComputeCapability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.GPUComputeCapability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.GPUComputeCapability)
    MergeFrom(*source);
  }
}

void GPUComputeCapability::MergeFrom(const GPUComputeCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.GPUComputeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    set_major(from.major());
  }
  if (from.minor() != 0) {
    set_minor(from.minor());
  }
}

void GPUComputeCapability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.GPUComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUComputeCapability::CopyFrom(const GPUComputeCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.GPUComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUComputeCapability::IsInitialized() const {
  return true;
}

void GPUComputeCapability::Swap(GPUComputeCapability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPUComputeCapability::InternalSwap(GPUComputeCapability* other) {
  using std::swap;
  swap(major_, other->major_);
  swap(minor_, other->minor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GPUComputeCapability::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceCapabilities::InitAsDefaultInstance() {
  ::tensorflow::profiler::_DeviceCapabilities_default_instance_._instance.get_mutable()->compute_capability_ = const_cast< ::tensorflow::profiler::GPUComputeCapability*>(
      ::tensorflow::profiler::GPUComputeCapability::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceCapabilities::kClockRateInGhzFieldNumber;
const int DeviceCapabilities::kNumCoresFieldNumber;
const int DeviceCapabilities::kMemorySizeInBytesFieldNumber;
const int DeviceCapabilities::kMemoryBandwidthFieldNumber;
const int DeviceCapabilities::kComputeCapabilityFieldNumber;
const int DeviceCapabilities::kDeviceVendorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceCapabilities::DeviceCapabilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::scc_info_DeviceCapabilities.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.DeviceCapabilities)
}
DeviceCapabilities::DeviceCapabilities(const DeviceCapabilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_vendor().size() > 0) {
    device_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_vendor_);
  }
  if (from.has_compute_capability()) {
    compute_capability_ = new ::tensorflow::profiler::GPUComputeCapability(*from.compute_capability_);
  } else {
    compute_capability_ = NULL;
  }
  ::memcpy(&clock_rate_in_ghz_, &from.clock_rate_in_ghz_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_cores_) -
    reinterpret_cast<char*>(&clock_rate_in_ghz_)) + sizeof(num_cores_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.DeviceCapabilities)
}

void DeviceCapabilities::SharedCtor() {
  device_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&compute_capability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_cores_) -
      reinterpret_cast<char*>(&compute_capability_)) + sizeof(num_cores_));
}

DeviceCapabilities::~DeviceCapabilities() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.DeviceCapabilities)
  SharedDtor();
}

void DeviceCapabilities::SharedDtor() {
  device_vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete compute_capability_;
}

void DeviceCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceCapabilities::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceCapabilities& DeviceCapabilities::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::scc_info_DeviceCapabilities.base);
  return *internal_default_instance();
}


void DeviceCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.DeviceCapabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && compute_capability_ != NULL) {
    delete compute_capability_;
  }
  compute_capability_ = NULL;
  ::memset(&clock_rate_in_ghz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_cores_) -
      reinterpret_cast<char*>(&clock_rate_in_ghz_)) + sizeof(num_cores_));
  _internal_metadata_.Clear();
}

bool DeviceCapabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.profiler.DeviceCapabilities)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double clock_rate_in_ghz = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_rate_in_ghz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_cores = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_size_in_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_size_in_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_bandwidth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.profiler.GPUComputeCapability compute_capability = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compute_capability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_vendor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_vendor().data(), static_cast<int>(this->device_vendor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.profiler.DeviceCapabilities.device_vendor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.profiler.DeviceCapabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.profiler.DeviceCapabilities)
  return false;
#undef DO_
}

void DeviceCapabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.profiler.DeviceCapabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double clock_rate_in_ghz = 1;
  if (this->clock_rate_in_ghz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->clock_rate_in_ghz(), output);
  }

  // uint32 num_cores = 2;
  if (this->num_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_cores(), output);
  }

  // uint64 memory_size_in_bytes = 3;
  if (this->memory_size_in_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memory_size_in_bytes(), output);
  }

  // uint64 memory_bandwidth = 4;
  if (this->memory_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->memory_bandwidth(), output);
  }

  // .tensorflow.profiler.GPUComputeCapability compute_capability = 5;
  if (this->has_compute_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_compute_capability(), output);
  }

  // string device_vendor = 6;
  if (this->device_vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_vendor().data(), static_cast<int>(this->device_vendor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.DeviceCapabilities.device_vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_vendor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.profiler.DeviceCapabilities)
}

::google::protobuf::uint8* DeviceCapabilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.DeviceCapabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double clock_rate_in_ghz = 1;
  if (this->clock_rate_in_ghz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->clock_rate_in_ghz(), target);
  }

  // uint32 num_cores = 2;
  if (this->num_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_cores(), target);
  }

  // uint64 memory_size_in_bytes = 3;
  if (this->memory_size_in_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memory_size_in_bytes(), target);
  }

  // uint64 memory_bandwidth = 4;
  if (this->memory_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->memory_bandwidth(), target);
  }

  // .tensorflow.profiler.GPUComputeCapability compute_capability = 5;
  if (this->has_compute_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_compute_capability(), deterministic, target);
  }

  // string device_vendor = 6;
  if (this->device_vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_vendor().data(), static_cast<int>(this->device_vendor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.DeviceCapabilities.device_vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_vendor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.DeviceCapabilities)
  return target;
}

size_t DeviceCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.DeviceCapabilities)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device_vendor = 6;
  if (this->device_vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_vendor());
  }

  // .tensorflow.profiler.GPUComputeCapability compute_capability = 5;
  if (this->has_compute_capability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *compute_capability_);
  }

  // double clock_rate_in_ghz = 1;
  if (this->clock_rate_in_ghz() != 0) {
    total_size += 1 + 8;
  }

  // uint64 memory_size_in_bytes = 3;
  if (this->memory_size_in_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_size_in_bytes());
  }

  // uint64 memory_bandwidth = 4;
  if (this->memory_bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_bandwidth());
  }

  // uint32 num_cores = 2;
  if (this->num_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_cores());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceCapabilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.DeviceCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceCapabilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceCapabilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.DeviceCapabilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.DeviceCapabilities)
    MergeFrom(*source);
  }
}

void DeviceCapabilities::MergeFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.DeviceCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_vendor().size() > 0) {

    device_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_vendor_);
  }
  if (from.has_compute_capability()) {
    mutable_compute_capability()->::tensorflow::profiler::GPUComputeCapability::MergeFrom(from.compute_capability());
  }
  if (from.clock_rate_in_ghz() != 0) {
    set_clock_rate_in_ghz(from.clock_rate_in_ghz());
  }
  if (from.memory_size_in_bytes() != 0) {
    set_memory_size_in_bytes(from.memory_size_in_bytes());
  }
  if (from.memory_bandwidth() != 0) {
    set_memory_bandwidth(from.memory_bandwidth());
  }
  if (from.num_cores() != 0) {
    set_num_cores(from.num_cores());
  }
}

void DeviceCapabilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.DeviceCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceCapabilities::CopyFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.DeviceCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilities::IsInitialized() const {
  return true;
}

void DeviceCapabilities::Swap(DeviceCapabilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceCapabilities::InternalSwap(DeviceCapabilities* other) {
  using std::swap;
  device_vendor_.Swap(&other->device_vendor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(compute_capability_, other->compute_capability_);
  swap(clock_rate_in_ghz_, other->clock_rate_in_ghz_);
  swap(memory_size_in_bytes_, other->memory_size_in_bytes_);
  swap(memory_bandwidth_, other->memory_bandwidth_);
  swap(num_cores_, other->num_cores_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceCapabilities::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::profiler::GPUComputeCapability* Arena::CreateMaybeMessage< ::tensorflow::profiler::GPUComputeCapability >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::GPUComputeCapability >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::profiler::DeviceCapabilities* Arena::CreateMaybeMessage< ::tensorflow::profiler::DeviceCapabilities >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::DeviceCapabilities >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
