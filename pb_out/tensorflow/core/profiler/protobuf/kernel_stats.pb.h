// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/kernel_stats.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto 

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto
namespace tensorflow {
namespace profiler {
class KernelReport;
class KernelReportDefaultTypeInternal;
extern KernelReportDefaultTypeInternal _KernelReport_default_instance_;
class KernelStatsDb;
class KernelStatsDbDefaultTypeInternal;
extern KernelStatsDbDefaultTypeInternal _KernelStatsDb_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::profiler::KernelReport* Arena::CreateMaybeMessage<::tensorflow::profiler::KernelReport>(Arena*);
template<> ::tensorflow::profiler::KernelStatsDb* Arena::CreateMaybeMessage<::tensorflow::profiler::KernelStatsDb>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace profiler {

// ===================================================================

class KernelReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.KernelReport) */ {
 public:
  KernelReport();
  virtual ~KernelReport();

  KernelReport(const KernelReport& from);

  inline KernelReport& operator=(const KernelReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KernelReport(KernelReport&& from) noexcept
    : KernelReport() {
    *this = ::std::move(from);
  }

  inline KernelReport& operator=(KernelReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KernelReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KernelReport* internal_default_instance() {
    return reinterpret_cast<const KernelReport*>(
               &_KernelReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(KernelReport* other);
  friend void swap(KernelReport& a, KernelReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KernelReport* New() const final {
    return CreateMaybeMessage<KernelReport>(NULL);
  }

  KernelReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KernelReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KernelReport& from);
  void MergeFrom(const KernelReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 block_dim = 5;
  int block_dim_size() const;
  void clear_block_dim();
  static const int kBlockDimFieldNumber = 5;
  ::google::protobuf::uint32 block_dim(int index) const;
  void set_block_dim(int index, ::google::protobuf::uint32 value);
  void add_block_dim(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      block_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_block_dim();

  // repeated uint32 grid_dim = 6;
  int grid_dim_size() const;
  void clear_grid_dim();
  static const int kGridDimFieldNumber = 6;
  ::google::protobuf::uint32 grid_dim(int index) const;
  void set_grid_dim(int index, ::google::protobuf::uint32 value);
  void add_grid_dim(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      grid_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_grid_dim();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string op_name = 12;
  void clear_op_name();
  static const int kOpNameFieldNumber = 12;
  const ::std::string& op_name() const;
  void set_op_name(const ::std::string& value);
  #if LANG_CXX11
  void set_op_name(::std::string&& value);
  #endif
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  ::std::string* mutable_op_name();
  ::std::string* release_op_name();
  void set_allocated_op_name(::std::string* op_name);

  // uint32 registers_per_thread = 2;
  void clear_registers_per_thread();
  static const int kRegistersPerThreadFieldNumber = 2;
  ::google::protobuf::uint32 registers_per_thread() const;
  void set_registers_per_thread(::google::protobuf::uint32 value);

  // uint32 static_shmem_bytes = 3;
  void clear_static_shmem_bytes();
  static const int kStaticShmemBytesFieldNumber = 3;
  ::google::protobuf::uint32 static_shmem_bytes() const;
  void set_static_shmem_bytes(::google::protobuf::uint32 value);

  // uint64 total_duration_ns = 7;
  void clear_total_duration_ns();
  static const int kTotalDurationNsFieldNumber = 7;
  ::google::protobuf::uint64 total_duration_ns() const;
  void set_total_duration_ns(::google::protobuf::uint64 value);

  // uint64 min_duration_ns = 8;
  void clear_min_duration_ns();
  static const int kMinDurationNsFieldNumber = 8;
  ::google::protobuf::uint64 min_duration_ns() const;
  void set_min_duration_ns(::google::protobuf::uint64 value);

  // uint32 dynamic_shmem_bytes = 4;
  void clear_dynamic_shmem_bytes();
  static const int kDynamicShmemBytesFieldNumber = 4;
  ::google::protobuf::uint32 dynamic_shmem_bytes() const;
  void set_dynamic_shmem_bytes(::google::protobuf::uint32 value);

  // bool is_kernel_using_tensor_core = 10;
  void clear_is_kernel_using_tensor_core();
  static const int kIsKernelUsingTensorCoreFieldNumber = 10;
  bool is_kernel_using_tensor_core() const;
  void set_is_kernel_using_tensor_core(bool value);

  // bool is_op_tensor_core_eligible = 11;
  void clear_is_op_tensor_core_eligible();
  static const int kIsOpTensorCoreEligibleFieldNumber = 11;
  bool is_op_tensor_core_eligible() const;
  void set_is_op_tensor_core_eligible(bool value);

  // uint64 max_duration_ns = 9;
  void clear_max_duration_ns();
  static const int kMaxDurationNsFieldNumber = 9;
  ::google::protobuf::uint64 max_duration_ns() const;
  void set_max_duration_ns(::google::protobuf::uint64 value);

  // uint32 occurrences = 13;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 13;
  ::google::protobuf::uint32 occurrences() const;
  void set_occurrences(::google::protobuf::uint32 value);

  // float occupancy_pct = 14;
  void clear_occupancy_pct();
  static const int kOccupancyPctFieldNumber = 14;
  float occupancy_pct() const;
  void set_occupancy_pct(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.KernelReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > block_dim_;
  mutable int _block_dim_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > grid_dim_;
  mutable int _grid_dim_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr op_name_;
  ::google::protobuf::uint32 registers_per_thread_;
  ::google::protobuf::uint32 static_shmem_bytes_;
  ::google::protobuf::uint64 total_duration_ns_;
  ::google::protobuf::uint64 min_duration_ns_;
  ::google::protobuf::uint32 dynamic_shmem_bytes_;
  bool is_kernel_using_tensor_core_;
  bool is_op_tensor_core_eligible_;
  ::google::protobuf::uint64 max_duration_ns_;
  ::google::protobuf::uint32 occurrences_;
  float occupancy_pct_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KernelStatsDb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.KernelStatsDb) */ {
 public:
  KernelStatsDb();
  virtual ~KernelStatsDb();

  KernelStatsDb(const KernelStatsDb& from);

  inline KernelStatsDb& operator=(const KernelStatsDb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KernelStatsDb(KernelStatsDb&& from) noexcept
    : KernelStatsDb() {
    *this = ::std::move(from);
  }

  inline KernelStatsDb& operator=(KernelStatsDb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KernelStatsDb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KernelStatsDb* internal_default_instance() {
    return reinterpret_cast<const KernelStatsDb*>(
               &_KernelStatsDb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KernelStatsDb* other);
  friend void swap(KernelStatsDb& a, KernelStatsDb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KernelStatsDb* New() const final {
    return CreateMaybeMessage<KernelStatsDb>(NULL);
  }

  KernelStatsDb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KernelStatsDb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KernelStatsDb& from);
  void MergeFrom(const KernelStatsDb& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelStatsDb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.profiler.KernelReport reports = 1;
  int reports_size() const;
  void clear_reports();
  static const int kReportsFieldNumber = 1;
  ::tensorflow::profiler::KernelReport* mutable_reports(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::KernelReport >*
      mutable_reports();
  const ::tensorflow::profiler::KernelReport& reports(int index) const;
  ::tensorflow::profiler::KernelReport* add_reports();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::KernelReport >&
      reports() const;

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.KernelStatsDb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::KernelReport > reports_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KernelReport

// string name = 1;
inline void KernelReport::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KernelReport::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.name)
  return name_.GetNoArena();
}
inline void KernelReport::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.name)
}
#if LANG_CXX11
inline void KernelReport::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.KernelReport.name)
}
#endif
inline void KernelReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.KernelReport.name)
}
inline void KernelReport::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.KernelReport.name)
}
inline ::std::string* KernelReport::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.KernelReport.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KernelReport::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.KernelReport.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KernelReport::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.KernelReport.name)
}

// uint32 registers_per_thread = 2;
inline void KernelReport::clear_registers_per_thread() {
  registers_per_thread_ = 0u;
}
inline ::google::protobuf::uint32 KernelReport::registers_per_thread() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.registers_per_thread)
  return registers_per_thread_;
}
inline void KernelReport::set_registers_per_thread(::google::protobuf::uint32 value) {
  
  registers_per_thread_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.registers_per_thread)
}

// uint32 static_shmem_bytes = 3;
inline void KernelReport::clear_static_shmem_bytes() {
  static_shmem_bytes_ = 0u;
}
inline ::google::protobuf::uint32 KernelReport::static_shmem_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.static_shmem_bytes)
  return static_shmem_bytes_;
}
inline void KernelReport::set_static_shmem_bytes(::google::protobuf::uint32 value) {
  
  static_shmem_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.static_shmem_bytes)
}

// uint32 dynamic_shmem_bytes = 4;
inline void KernelReport::clear_dynamic_shmem_bytes() {
  dynamic_shmem_bytes_ = 0u;
}
inline ::google::protobuf::uint32 KernelReport::dynamic_shmem_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.dynamic_shmem_bytes)
  return dynamic_shmem_bytes_;
}
inline void KernelReport::set_dynamic_shmem_bytes(::google::protobuf::uint32 value) {
  
  dynamic_shmem_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.dynamic_shmem_bytes)
}

// repeated uint32 block_dim = 5;
inline int KernelReport::block_dim_size() const {
  return block_dim_.size();
}
inline void KernelReport::clear_block_dim() {
  block_dim_.Clear();
}
inline ::google::protobuf::uint32 KernelReport::block_dim(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.block_dim)
  return block_dim_.Get(index);
}
inline void KernelReport::set_block_dim(int index, ::google::protobuf::uint32 value) {
  block_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.block_dim)
}
inline void KernelReport::add_block_dim(::google::protobuf::uint32 value) {
  block_dim_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.KernelReport.block_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
KernelReport::block_dim() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.KernelReport.block_dim)
  return block_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
KernelReport::mutable_block_dim() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.KernelReport.block_dim)
  return &block_dim_;
}

// repeated uint32 grid_dim = 6;
inline int KernelReport::grid_dim_size() const {
  return grid_dim_.size();
}
inline void KernelReport::clear_grid_dim() {
  grid_dim_.Clear();
}
inline ::google::protobuf::uint32 KernelReport::grid_dim(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.grid_dim)
  return grid_dim_.Get(index);
}
inline void KernelReport::set_grid_dim(int index, ::google::protobuf::uint32 value) {
  grid_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.grid_dim)
}
inline void KernelReport::add_grid_dim(::google::protobuf::uint32 value) {
  grid_dim_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.profiler.KernelReport.grid_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
KernelReport::grid_dim() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.KernelReport.grid_dim)
  return grid_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
KernelReport::mutable_grid_dim() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.KernelReport.grid_dim)
  return &grid_dim_;
}

// uint64 total_duration_ns = 7;
inline void KernelReport::clear_total_duration_ns() {
  total_duration_ns_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KernelReport::total_duration_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.total_duration_ns)
  return total_duration_ns_;
}
inline void KernelReport::set_total_duration_ns(::google::protobuf::uint64 value) {
  
  total_duration_ns_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.total_duration_ns)
}

// uint64 min_duration_ns = 8;
inline void KernelReport::clear_min_duration_ns() {
  min_duration_ns_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KernelReport::min_duration_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.min_duration_ns)
  return min_duration_ns_;
}
inline void KernelReport::set_min_duration_ns(::google::protobuf::uint64 value) {
  
  min_duration_ns_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.min_duration_ns)
}

// uint64 max_duration_ns = 9;
inline void KernelReport::clear_max_duration_ns() {
  max_duration_ns_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KernelReport::max_duration_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.max_duration_ns)
  return max_duration_ns_;
}
inline void KernelReport::set_max_duration_ns(::google::protobuf::uint64 value) {
  
  max_duration_ns_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.max_duration_ns)
}

// bool is_kernel_using_tensor_core = 10;
inline void KernelReport::clear_is_kernel_using_tensor_core() {
  is_kernel_using_tensor_core_ = false;
}
inline bool KernelReport::is_kernel_using_tensor_core() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.is_kernel_using_tensor_core)
  return is_kernel_using_tensor_core_;
}
inline void KernelReport::set_is_kernel_using_tensor_core(bool value) {
  
  is_kernel_using_tensor_core_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.is_kernel_using_tensor_core)
}

// bool is_op_tensor_core_eligible = 11;
inline void KernelReport::clear_is_op_tensor_core_eligible() {
  is_op_tensor_core_eligible_ = false;
}
inline bool KernelReport::is_op_tensor_core_eligible() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.is_op_tensor_core_eligible)
  return is_op_tensor_core_eligible_;
}
inline void KernelReport::set_is_op_tensor_core_eligible(bool value) {
  
  is_op_tensor_core_eligible_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.is_op_tensor_core_eligible)
}

// string op_name = 12;
inline void KernelReport::clear_op_name() {
  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KernelReport::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.op_name)
  return op_name_.GetNoArena();
}
inline void KernelReport::set_op_name(const ::std::string& value) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.op_name)
}
#if LANG_CXX11
inline void KernelReport::set_op_name(::std::string&& value) {
  
  op_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.KernelReport.op_name)
}
#endif
inline void KernelReport::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.KernelReport.op_name)
}
inline void KernelReport::set_op_name(const char* value, size_t size) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.KernelReport.op_name)
}
inline ::std::string* KernelReport::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.KernelReport.op_name)
  return op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KernelReport::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.KernelReport.op_name)
  
  return op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KernelReport::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.KernelReport.op_name)
}

// uint32 occurrences = 13;
inline void KernelReport::clear_occurrences() {
  occurrences_ = 0u;
}
inline ::google::protobuf::uint32 KernelReport::occurrences() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.occurrences)
  return occurrences_;
}
inline void KernelReport::set_occurrences(::google::protobuf::uint32 value) {
  
  occurrences_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.occurrences)
}

// float occupancy_pct = 14;
inline void KernelReport::clear_occupancy_pct() {
  occupancy_pct_ = 0;
}
inline float KernelReport::occupancy_pct() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelReport.occupancy_pct)
  return occupancy_pct_;
}
inline void KernelReport::set_occupancy_pct(float value) {
  
  occupancy_pct_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.KernelReport.occupancy_pct)
}

// -------------------------------------------------------------------

// KernelStatsDb

// repeated .tensorflow.profiler.KernelReport reports = 1;
inline int KernelStatsDb::reports_size() const {
  return reports_.size();
}
inline void KernelStatsDb::clear_reports() {
  reports_.Clear();
}
inline ::tensorflow::profiler::KernelReport* KernelStatsDb::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.KernelStatsDb.reports)
  return reports_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::KernelReport >*
KernelStatsDb::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.KernelStatsDb.reports)
  return &reports_;
}
inline const ::tensorflow::profiler::KernelReport& KernelStatsDb::reports(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.KernelStatsDb.reports)
  return reports_.Get(index);
}
inline ::tensorflow::profiler::KernelReport* KernelStatsDb::add_reports() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.KernelStatsDb.reports)
  return reports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::KernelReport >&
KernelStatsDb::reports() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.KernelStatsDb.reports)
  return reports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fkernel_5fstats_2eproto
