// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/overview_page.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "tensorflow/core/profiler/protobuf/diagnostics.pb.h"
#include "tensorflow/core/profiler/protobuf/input_pipeline.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto 

namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto
namespace tensorflow {
namespace profiler {
class GenericRecommendation;
class GenericRecommendationDefaultTypeInternal;
extern GenericRecommendationDefaultTypeInternal _GenericRecommendation_default_instance_;
class OverviewPage;
class OverviewPageDefaultTypeInternal;
extern OverviewPageDefaultTypeInternal _OverviewPage_default_instance_;
class OverviewPageAnalysis;
class OverviewPageAnalysisDefaultTypeInternal;
extern OverviewPageAnalysisDefaultTypeInternal _OverviewPageAnalysis_default_instance_;
class OverviewPageHostDependentJobInfo;
class OverviewPageHostDependentJobInfoDefaultTypeInternal;
extern OverviewPageHostDependentJobInfoDefaultTypeInternal _OverviewPageHostDependentJobInfo_default_instance_;
class OverviewPageHostIndependentJobInfo;
class OverviewPageHostIndependentJobInfoDefaultTypeInternal;
extern OverviewPageHostIndependentJobInfoDefaultTypeInternal _OverviewPageHostIndependentJobInfo_default_instance_;
class OverviewPageRecommendation;
class OverviewPageRecommendationDefaultTypeInternal;
extern OverviewPageRecommendationDefaultTypeInternal _OverviewPageRecommendation_default_instance_;
class OverviewPageRunEnvironment;
class OverviewPageRunEnvironmentDefaultTypeInternal;
extern OverviewPageRunEnvironmentDefaultTypeInternal _OverviewPageRunEnvironment_default_instance_;
class OverviewPageRunEnvironment_HostnamesEntry_DoNotUse;
class OverviewPageRunEnvironment_HostnamesEntry_DoNotUseDefaultTypeInternal;
extern OverviewPageRunEnvironment_HostnamesEntry_DoNotUseDefaultTypeInternal _OverviewPageRunEnvironment_HostnamesEntry_DoNotUse_default_instance_;
class OverviewPageTip;
class OverviewPageTipDefaultTypeInternal;
extern OverviewPageTipDefaultTypeInternal _OverviewPageTip_default_instance_;
class OverviewTfOp;
class OverviewTfOpDefaultTypeInternal;
extern OverviewTfOpDefaultTypeInternal _OverviewTfOp_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::profiler::GenericRecommendation* Arena::CreateMaybeMessage<::tensorflow::profiler::GenericRecommendation>(Arena*);
template<> ::tensorflow::profiler::OverviewPage* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPage>(Arena*);
template<> ::tensorflow::profiler::OverviewPageAnalysis* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageAnalysis>(Arena*);
template<> ::tensorflow::profiler::OverviewPageHostDependentJobInfo* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageHostDependentJobInfo>(Arena*);
template<> ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageHostIndependentJobInfo>(Arena*);
template<> ::tensorflow::profiler::OverviewPageRecommendation* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageRecommendation>(Arena*);
template<> ::tensorflow::profiler::OverviewPageRunEnvironment* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageRunEnvironment>(Arena*);
template<> ::tensorflow::profiler::OverviewPageRunEnvironment_HostnamesEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageRunEnvironment_HostnamesEntry_DoNotUse>(Arena*);
template<> ::tensorflow::profiler::OverviewPageTip* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewPageTip>(Arena*);
template<> ::tensorflow::profiler::OverviewTfOp* Arena::CreateMaybeMessage<::tensorflow::profiler::OverviewTfOp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace profiler {

// ===================================================================

class OverviewTfOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewTfOp) */ {
 public:
  OverviewTfOp();
  virtual ~OverviewTfOp();

  OverviewTfOp(const OverviewTfOp& from);

  inline OverviewTfOp& operator=(const OverviewTfOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewTfOp(OverviewTfOp&& from) noexcept
    : OverviewTfOp() {
    *this = ::std::move(from);
  }

  inline OverviewTfOp& operator=(OverviewTfOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewTfOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewTfOp* internal_default_instance() {
    return reinterpret_cast<const OverviewTfOp*>(
               &_OverviewTfOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OverviewTfOp* other);
  friend void swap(OverviewTfOp& a, OverviewTfOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewTfOp* New() const final {
    return CreateMaybeMessage<OverviewTfOp>(NULL);
  }

  OverviewTfOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewTfOp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewTfOp& from);
  void MergeFrom(const OverviewTfOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewTfOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string category = 2;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // double self_time_fraction = 3;
  void clear_self_time_fraction();
  static const int kSelfTimeFractionFieldNumber = 3;
  double self_time_fraction() const;
  void set_self_time_fraction(double value);

  // double cumulative_time_fraction = 4;
  void clear_cumulative_time_fraction();
  static const int kCumulativeTimeFractionFieldNumber = 4;
  double cumulative_time_fraction() const;
  void set_cumulative_time_fraction(double value);

  // double flop_rate = 5;
  void clear_flop_rate();
  static const int kFlopRateFieldNumber = 5;
  double flop_rate() const;
  void set_flop_rate(double value);

  // bool is_op_tensorcore_eligible = 6;
  void clear_is_op_tensorcore_eligible();
  static const int kIsOpTensorcoreEligibleFieldNumber = 6;
  bool is_op_tensorcore_eligible() const;
  void set_is_op_tensorcore_eligible(bool value);

  // bool is_op_using_tensorcore = 7;
  void clear_is_op_using_tensorcore();
  static const int kIsOpUsingTensorcoreFieldNumber = 7;
  bool is_op_using_tensorcore() const;
  void set_is_op_using_tensorcore(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewTfOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  double self_time_fraction_;
  double cumulative_time_fraction_;
  double flop_rate_;
  bool is_op_tensorcore_eligible_;
  bool is_op_using_tensorcore_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPageAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPageAnalysis) */ {
 public:
  OverviewPageAnalysis();
  virtual ~OverviewPageAnalysis();

  OverviewPageAnalysis(const OverviewPageAnalysis& from);

  inline OverviewPageAnalysis& operator=(const OverviewPageAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPageAnalysis(OverviewPageAnalysis&& from) noexcept
    : OverviewPageAnalysis() {
    *this = ::std::move(from);
  }

  inline OverviewPageAnalysis& operator=(OverviewPageAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPageAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPageAnalysis* internal_default_instance() {
    return reinterpret_cast<const OverviewPageAnalysis*>(
               &_OverviewPageAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OverviewPageAnalysis* other);
  friend void swap(OverviewPageAnalysis& a, OverviewPageAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPageAnalysis* New() const final {
    return CreateMaybeMessage<OverviewPageAnalysis>(NULL);
  }

  OverviewPageAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPageAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPageAnalysis& from);
  void MergeFrom(const OverviewPageAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPageAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.profiler.OverviewTfOp top_device_ops = 4;
  int top_device_ops_size() const;
  void clear_top_device_ops();
  static const int kTopDeviceOpsFieldNumber = 4;
  ::tensorflow::profiler::OverviewTfOp* mutable_top_device_ops(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewTfOp >*
      mutable_top_device_ops();
  const ::tensorflow::profiler::OverviewTfOp& top_device_ops(int index) const;
  ::tensorflow::profiler::OverviewTfOp* add_top_device_ops();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewTfOp >&
      top_device_ops() const;

  // string remark_text = 5;
  void clear_remark_text();
  static const int kRemarkTextFieldNumber = 5;
  const ::std::string& remark_text() const;
  void set_remark_text(const ::std::string& value);
  #if LANG_CXX11
  void set_remark_text(::std::string&& value);
  #endif
  void set_remark_text(const char* value);
  void set_remark_text(const char* value, size_t size);
  ::std::string* mutable_remark_text();
  ::std::string* release_remark_text();
  void set_allocated_remark_text(::std::string* remark_text);

  // string remark_color = 6;
  void clear_remark_color();
  static const int kRemarkColorFieldNumber = 6;
  const ::std::string& remark_color() const;
  void set_remark_color(const ::std::string& value);
  #if LANG_CXX11
  void set_remark_color(::std::string&& value);
  #endif
  void set_remark_color(const char* value);
  void set_remark_color(const char* value, size_t size);
  ::std::string* mutable_remark_color();
  ::std::string* release_remark_color();
  void set_allocated_remark_color(::std::string* remark_color);

  // double mxu_utilization_percent = 1;
  void clear_mxu_utilization_percent();
  static const int kMxuUtilizationPercentFieldNumber = 1;
  double mxu_utilization_percent() const;
  void set_mxu_utilization_percent(double value);

  // double device_idle_time_percent = 2;
  void clear_device_idle_time_percent();
  static const int kDeviceIdleTimePercentFieldNumber = 2;
  double device_idle_time_percent() const;
  void set_device_idle_time_percent(double value);

  // double host_idle_time_percent = 3;
  void clear_host_idle_time_percent();
  static const int kHostIdleTimePercentFieldNumber = 3;
  double host_idle_time_percent() const;
  void set_host_idle_time_percent(double value);

  // double flop_rate_utilization_relative_to_roofline_percent = 7;
  void clear_flop_rate_utilization_relative_to_roofline_percent();
  static const int kFlopRateUtilizationRelativeToRooflinePercentFieldNumber = 7;
  double flop_rate_utilization_relative_to_roofline_percent() const;
  void set_flop_rate_utilization_relative_to_roofline_percent(double value);

  // double memory_bw_utilization_relative_to_hw_limit_percent = 8;
  void clear_memory_bw_utilization_relative_to_hw_limit_percent();
  static const int kMemoryBwUtilizationRelativeToHwLimitPercentFieldNumber = 8;
  double memory_bw_utilization_relative_to_hw_limit_percent() const;
  void set_memory_bw_utilization_relative_to_hw_limit_percent(double value);

  // double device_compute_16bit_percent = 9;
  void clear_device_compute_16bit_percent();
  static const int kDeviceCompute16BitPercentFieldNumber = 9;
  double device_compute_16bit_percent() const;
  void set_device_compute_16bit_percent(double value);

  // double device_compute_32bit_percent = 10;
  void clear_device_compute_32bit_percent();
  static const int kDeviceCompute32BitPercentFieldNumber = 10;
  double device_compute_32bit_percent() const;
  void set_device_compute_32bit_percent(double value);

  // double host_tf_op_percent = 11;
  void clear_host_tf_op_percent();
  static const int kHostTfOpPercentFieldNumber = 11;
  double host_tf_op_percent() const;
  void set_host_tf_op_percent(double value);

  // double device_tf_op_percent = 12;
  void clear_device_tf_op_percent();
  static const int kDeviceTfOpPercentFieldNumber = 12;
  double device_tf_op_percent() const;
  void set_device_tf_op_percent(double value);

  // double host_op_time_eager_percent = 14;
  void clear_host_op_time_eager_percent();
  static const int kHostOpTimeEagerPercentFieldNumber = 14;
  double host_op_time_eager_percent() const;
  void set_host_op_time_eager_percent(double value);

  // double device_op_time_eager_percent = 15;
  void clear_device_op_time_eager_percent();
  static const int kDeviceOpTimeEagerPercentFieldNumber = 15;
  double device_op_time_eager_percent() const;
  void set_device_op_time_eager_percent(double value);

  // double device_op_time_outside_compilation_percent = 16;
  void clear_device_op_time_outside_compilation_percent();
  static const int kDeviceOpTimeOutsideCompilationPercentFieldNumber = 16;
  double device_op_time_outside_compilation_percent() const;
  void set_device_op_time_outside_compilation_percent(double value);

  // uint32 host_trace_level = 13;
  void clear_host_trace_level();
  static const int kHostTraceLevelFieldNumber = 13;
  ::google::protobuf::uint32 host_trace_level() const;
  void set_host_trace_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPageAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewTfOp > top_device_ops_;
  ::google::protobuf::internal::ArenaStringPtr remark_text_;
  ::google::protobuf::internal::ArenaStringPtr remark_color_;
  double mxu_utilization_percent_;
  double device_idle_time_percent_;
  double host_idle_time_percent_;
  double flop_rate_utilization_relative_to_roofline_percent_;
  double memory_bw_utilization_relative_to_hw_limit_percent_;
  double device_compute_16bit_percent_;
  double device_compute_32bit_percent_;
  double host_tf_op_percent_;
  double device_tf_op_percent_;
  double host_op_time_eager_percent_;
  double device_op_time_eager_percent_;
  double device_op_time_outside_compilation_percent_;
  ::google::protobuf::uint32 host_trace_level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPageTip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPageTip) */ {
 public:
  OverviewPageTip();
  virtual ~OverviewPageTip();

  OverviewPageTip(const OverviewPageTip& from);

  inline OverviewPageTip& operator=(const OverviewPageTip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPageTip(OverviewPageTip&& from) noexcept
    : OverviewPageTip() {
    *this = ::std::move(from);
  }

  inline OverviewPageTip& operator=(OverviewPageTip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPageTip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPageTip* internal_default_instance() {
    return reinterpret_cast<const OverviewPageTip*>(
               &_OverviewPageTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OverviewPageTip* other);
  friend void swap(OverviewPageTip& a, OverviewPageTip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPageTip* New() const final {
    return CreateMaybeMessage<OverviewPageTip>(NULL);
  }

  OverviewPageTip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPageTip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPageTip& from);
  void MergeFrom(const OverviewPageTip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPageTip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string link = 1;
  void clear_link();
  static const int kLinkFieldNumber = 1;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPageTip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenericRecommendation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.GenericRecommendation) */ {
 public:
  GenericRecommendation();
  virtual ~GenericRecommendation();

  GenericRecommendation(const GenericRecommendation& from);

  inline GenericRecommendation& operator=(const GenericRecommendation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenericRecommendation(GenericRecommendation&& from) noexcept
    : GenericRecommendation() {
    *this = ::std::move(from);
  }

  inline GenericRecommendation& operator=(GenericRecommendation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericRecommendation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericRecommendation* internal_default_instance() {
    return reinterpret_cast<const GenericRecommendation*>(
               &_GenericRecommendation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GenericRecommendation* other);
  friend void swap(GenericRecommendation& a, GenericRecommendation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenericRecommendation* New() const final {
    return CreateMaybeMessage<GenericRecommendation>(NULL);
  }

  GenericRecommendation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenericRecommendation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenericRecommendation& from);
  void MergeFrom(const GenericRecommendation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericRecommendation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kernel_launch_bottleneck = 1;
  void clear_kernel_launch_bottleneck();
  static const int kKernelLaunchBottleneckFieldNumber = 1;
  const ::std::string& kernel_launch_bottleneck() const;
  void set_kernel_launch_bottleneck(const ::std::string& value);
  #if LANG_CXX11
  void set_kernel_launch_bottleneck(::std::string&& value);
  #endif
  void set_kernel_launch_bottleneck(const char* value);
  void set_kernel_launch_bottleneck(const char* value, size_t size);
  ::std::string* mutable_kernel_launch_bottleneck();
  ::std::string* release_kernel_launch_bottleneck();
  void set_allocated_kernel_launch_bottleneck(::std::string* kernel_launch_bottleneck);

  // string kernel_launch_statement = 2;
  void clear_kernel_launch_statement();
  static const int kKernelLaunchStatementFieldNumber = 2;
  const ::std::string& kernel_launch_statement() const;
  void set_kernel_launch_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_kernel_launch_statement(::std::string&& value);
  #endif
  void set_kernel_launch_statement(const char* value);
  void set_kernel_launch_statement(const char* value, size_t size);
  ::std::string* mutable_kernel_launch_statement();
  ::std::string* release_kernel_launch_statement();
  void set_allocated_kernel_launch_statement(::std::string* kernel_launch_statement);

  // string all_other_bottleneck = 3;
  void clear_all_other_bottleneck();
  static const int kAllOtherBottleneckFieldNumber = 3;
  const ::std::string& all_other_bottleneck() const;
  void set_all_other_bottleneck(const ::std::string& value);
  #if LANG_CXX11
  void set_all_other_bottleneck(::std::string&& value);
  #endif
  void set_all_other_bottleneck(const char* value);
  void set_all_other_bottleneck(const char* value, size_t size);
  ::std::string* mutable_all_other_bottleneck();
  ::std::string* release_all_other_bottleneck();
  void set_allocated_all_other_bottleneck(::std::string* all_other_bottleneck);

  // string all_other_statement = 4;
  void clear_all_other_statement();
  static const int kAllOtherStatementFieldNumber = 4;
  const ::std::string& all_other_statement() const;
  void set_all_other_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_all_other_statement(::std::string&& value);
  #endif
  void set_all_other_statement(const char* value);
  void set_all_other_statement(const char* value, size_t size);
  ::std::string* mutable_all_other_statement();
  ::std::string* release_all_other_statement();
  void set_allocated_all_other_statement(::std::string* all_other_statement);

  // string precision_statement = 5;
  void clear_precision_statement();
  static const int kPrecisionStatementFieldNumber = 5;
  const ::std::string& precision_statement() const;
  void set_precision_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_precision_statement(::std::string&& value);
  #endif
  void set_precision_statement(const char* value);
  void set_precision_statement(const char* value, size_t size);
  ::std::string* mutable_precision_statement();
  ::std::string* release_precision_statement();
  void set_allocated_precision_statement(::std::string* precision_statement);

  // string device_collectives_bottleneck = 6;
  void clear_device_collectives_bottleneck();
  static const int kDeviceCollectivesBottleneckFieldNumber = 6;
  const ::std::string& device_collectives_bottleneck() const;
  void set_device_collectives_bottleneck(const ::std::string& value);
  #if LANG_CXX11
  void set_device_collectives_bottleneck(::std::string&& value);
  #endif
  void set_device_collectives_bottleneck(const char* value);
  void set_device_collectives_bottleneck(const char* value, size_t size);
  ::std::string* mutable_device_collectives_bottleneck();
  ::std::string* release_device_collectives_bottleneck();
  void set_allocated_device_collectives_bottleneck(::std::string* device_collectives_bottleneck);

  // string device_collectives_statement = 7;
  void clear_device_collectives_statement();
  static const int kDeviceCollectivesStatementFieldNumber = 7;
  const ::std::string& device_collectives_statement() const;
  void set_device_collectives_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_device_collectives_statement(::std::string&& value);
  #endif
  void set_device_collectives_statement(const char* value);
  void set_device_collectives_statement(const char* value, size_t size);
  ::std::string* mutable_device_collectives_statement();
  ::std::string* release_device_collectives_statement();
  void set_allocated_device_collectives_statement(::std::string* device_collectives_statement);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.GenericRecommendation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kernel_launch_bottleneck_;
  ::google::protobuf::internal::ArenaStringPtr kernel_launch_statement_;
  ::google::protobuf::internal::ArenaStringPtr all_other_bottleneck_;
  ::google::protobuf::internal::ArenaStringPtr all_other_statement_;
  ::google::protobuf::internal::ArenaStringPtr precision_statement_;
  ::google::protobuf::internal::ArenaStringPtr device_collectives_bottleneck_;
  ::google::protobuf::internal::ArenaStringPtr device_collectives_statement_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPageRecommendation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPageRecommendation) */ {
 public:
  OverviewPageRecommendation();
  virtual ~OverviewPageRecommendation();

  OverviewPageRecommendation(const OverviewPageRecommendation& from);

  inline OverviewPageRecommendation& operator=(const OverviewPageRecommendation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPageRecommendation(OverviewPageRecommendation&& from) noexcept
    : OverviewPageRecommendation() {
    *this = ::std::move(from);
  }

  inline OverviewPageRecommendation& operator=(OverviewPageRecommendation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPageRecommendation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPageRecommendation* internal_default_instance() {
    return reinterpret_cast<const OverviewPageRecommendation*>(
               &_OverviewPageRecommendation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OverviewPageRecommendation* other);
  friend void swap(OverviewPageRecommendation& a, OverviewPageRecommendation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPageRecommendation* New() const final {
    return CreateMaybeMessage<OverviewPageRecommendation>(NULL);
  }

  OverviewPageRecommendation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPageRecommendation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPageRecommendation& from);
  void MergeFrom(const OverviewPageRecommendation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPageRecommendation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.profiler.OverviewPageTip host_tips = 3;
  int host_tips_size() const;
  void clear_host_tips();
  static const int kHostTipsFieldNumber = 3;
  ::tensorflow::profiler::OverviewPageTip* mutable_host_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
      mutable_host_tips();
  const ::tensorflow::profiler::OverviewPageTip& host_tips(int index) const;
  ::tensorflow::profiler::OverviewPageTip* add_host_tips();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
      host_tips() const;

  // repeated .tensorflow.profiler.OverviewPageTip device_tips = 4;
  int device_tips_size() const;
  void clear_device_tips();
  static const int kDeviceTipsFieldNumber = 4;
  ::tensorflow::profiler::OverviewPageTip* mutable_device_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
      mutable_device_tips();
  const ::tensorflow::profiler::OverviewPageTip& device_tips(int index) const;
  ::tensorflow::profiler::OverviewPageTip* add_device_tips();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
      device_tips() const;

  // repeated .tensorflow.profiler.OverviewPageTip documentation_tips = 5;
  int documentation_tips_size() const;
  void clear_documentation_tips();
  static const int kDocumentationTipsFieldNumber = 5;
  ::tensorflow::profiler::OverviewPageTip* mutable_documentation_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
      mutable_documentation_tips();
  const ::tensorflow::profiler::OverviewPageTip& documentation_tips(int index) const;
  ::tensorflow::profiler::OverviewPageTip* add_documentation_tips();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
      documentation_tips() const;

  // repeated .tensorflow.profiler.OverviewPageTip faq_tips = 7;
  int faq_tips_size() const;
  void clear_faq_tips();
  static const int kFaqTipsFieldNumber = 7;
  ::tensorflow::profiler::OverviewPageTip* mutable_faq_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
      mutable_faq_tips();
  const ::tensorflow::profiler::OverviewPageTip& faq_tips(int index) const;
  ::tensorflow::profiler::OverviewPageTip* add_faq_tips();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
      faq_tips() const;

  // repeated .tensorflow.profiler.OverviewPageTip inference_tips = 8;
  int inference_tips_size() const;
  void clear_inference_tips();
  static const int kInferenceTipsFieldNumber = 8;
  ::tensorflow::profiler::OverviewPageTip* mutable_inference_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
      mutable_inference_tips();
  const ::tensorflow::profiler::OverviewPageTip& inference_tips(int index) const;
  ::tensorflow::profiler::OverviewPageTip* add_inference_tips();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
      inference_tips() const;

  // repeated .tensorflow.profiler.OverviewPageTip input_tips = 11;
  int input_tips_size() const;
  void clear_input_tips();
  static const int kInputTipsFieldNumber = 11;
  ::tensorflow::profiler::OverviewPageTip* mutable_input_tips(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
      mutable_input_tips();
  const ::tensorflow::profiler::OverviewPageTip& input_tips(int index) const;
  ::tensorflow::profiler::OverviewPageTip* add_input_tips();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
      input_tips() const;

  // string bottleneck = 1;
  void clear_bottleneck();
  static const int kBottleneckFieldNumber = 1;
  const ::std::string& bottleneck() const;
  void set_bottleneck(const ::std::string& value);
  #if LANG_CXX11
  void set_bottleneck(::std::string&& value);
  #endif
  void set_bottleneck(const char* value);
  void set_bottleneck(const char* value, size_t size);
  ::std::string* mutable_bottleneck();
  ::std::string* release_bottleneck();
  void set_allocated_bottleneck(::std::string* bottleneck);

  // string statement = 2;
  void clear_statement();
  static const int kStatementFieldNumber = 2;
  const ::std::string& statement() const;
  void set_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_statement(::std::string&& value);
  #endif
  void set_statement(const char* value);
  void set_statement(const char* value, size_t size);
  ::std::string* mutable_statement();
  ::std::string* release_statement();
  void set_allocated_statement(::std::string* statement);

  // string output_statement = 9;
  void clear_output_statement();
  static const int kOutputStatementFieldNumber = 9;
  const ::std::string& output_statement() const;
  void set_output_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_output_statement(::std::string&& value);
  #endif
  void set_output_statement(const char* value);
  void set_output_statement(const char* value, size_t size);
  ::std::string* mutable_output_statement();
  ::std::string* release_output_statement();
  void set_allocated_output_statement(::std::string* output_statement);

  // string tf_function_statement_html = 10;
  void clear_tf_function_statement_html();
  static const int kTfFunctionStatementHtmlFieldNumber = 10;
  const ::std::string& tf_function_statement_html() const;
  void set_tf_function_statement_html(const ::std::string& value);
  #if LANG_CXX11
  void set_tf_function_statement_html(::std::string&& value);
  #endif
  void set_tf_function_statement_html(const char* value);
  void set_tf_function_statement_html(const char* value, size_t size);
  ::std::string* mutable_tf_function_statement_html();
  ::std::string* release_tf_function_statement_html();
  void set_allocated_tf_function_statement_html(::std::string* tf_function_statement_html);

  // string eager_statement_html = 12;
  void clear_eager_statement_html();
  static const int kEagerStatementHtmlFieldNumber = 12;
  const ::std::string& eager_statement_html() const;
  void set_eager_statement_html(const ::std::string& value);
  #if LANG_CXX11
  void set_eager_statement_html(::std::string&& value);
  #endif
  void set_eager_statement_html(const char* value);
  void set_eager_statement_html(const char* value, size_t size);
  ::std::string* mutable_eager_statement_html();
  ::std::string* release_eager_statement_html();
  void set_allocated_eager_statement_html(::std::string* eager_statement_html);

  // string outside_compilation_statement_html = 13;
  void clear_outside_compilation_statement_html();
  static const int kOutsideCompilationStatementHtmlFieldNumber = 13;
  const ::std::string& outside_compilation_statement_html() const;
  void set_outside_compilation_statement_html(const ::std::string& value);
  #if LANG_CXX11
  void set_outside_compilation_statement_html(::std::string&& value);
  #endif
  void set_outside_compilation_statement_html(const char* value);
  void set_outside_compilation_statement_html(const char* value, size_t size);
  ::std::string* mutable_outside_compilation_statement_html();
  ::std::string* release_outside_compilation_statement_html();
  void set_allocated_outside_compilation_statement_html(::std::string* outside_compilation_statement_html);

  // .google.protobuf.Any recommendation = 6;
  bool has_recommendation() const;
  void clear_recommendation();
  static const int kRecommendationFieldNumber = 6;
  private:
  const ::google::protobuf::Any& _internal_recommendation() const;
  public:
  const ::google::protobuf::Any& recommendation() const;
  ::google::protobuf::Any* release_recommendation();
  ::google::protobuf::Any* mutable_recommendation();
  void set_allocated_recommendation(::google::protobuf::Any* recommendation);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPageRecommendation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip > host_tips_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip > device_tips_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip > documentation_tips_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip > faq_tips_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip > inference_tips_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip > input_tips_;
  ::google::protobuf::internal::ArenaStringPtr bottleneck_;
  ::google::protobuf::internal::ArenaStringPtr statement_;
  ::google::protobuf::internal::ArenaStringPtr output_statement_;
  ::google::protobuf::internal::ArenaStringPtr tf_function_statement_html_;
  ::google::protobuf::internal::ArenaStringPtr eager_statement_html_;
  ::google::protobuf::internal::ArenaStringPtr outside_compilation_statement_html_;
  ::google::protobuf::Any* recommendation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPageHostIndependentJobInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPageHostIndependentJobInfo) */ {
 public:
  OverviewPageHostIndependentJobInfo();
  virtual ~OverviewPageHostIndependentJobInfo();

  OverviewPageHostIndependentJobInfo(const OverviewPageHostIndependentJobInfo& from);

  inline OverviewPageHostIndependentJobInfo& operator=(const OverviewPageHostIndependentJobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPageHostIndependentJobInfo(OverviewPageHostIndependentJobInfo&& from) noexcept
    : OverviewPageHostIndependentJobInfo() {
    *this = ::std::move(from);
  }

  inline OverviewPageHostIndependentJobInfo& operator=(OverviewPageHostIndependentJobInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPageHostIndependentJobInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPageHostIndependentJobInfo* internal_default_instance() {
    return reinterpret_cast<const OverviewPageHostIndependentJobInfo*>(
               &_OverviewPageHostIndependentJobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OverviewPageHostIndependentJobInfo* other);
  friend void swap(OverviewPageHostIndependentJobInfo& a, OverviewPageHostIndependentJobInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPageHostIndependentJobInfo* New() const final {
    return CreateMaybeMessage<OverviewPageHostIndependentJobInfo>(NULL);
  }

  OverviewPageHostIndependentJobInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPageHostIndependentJobInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPageHostIndependentJobInfo& from);
  void MergeFrom(const OverviewPageHostIndependentJobInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPageHostIndependentJobInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string build_target = 3;
  void clear_build_target();
  static const int kBuildTargetFieldNumber = 3;
  const ::std::string& build_target() const;
  void set_build_target(const ::std::string& value);
  #if LANG_CXX11
  void set_build_target(::std::string&& value);
  #endif
  void set_build_target(const char* value);
  void set_build_target(const char* value, size_t size);
  ::std::string* mutable_build_target();
  ::std::string* release_build_target();
  void set_allocated_build_target(::std::string* build_target);

  // int64 change_list = 1;
  void clear_change_list();
  static const int kChangeListFieldNumber = 1;
  ::google::protobuf::int64 change_list() const;
  void set_change_list(::google::protobuf::int64 value);

  // int64 build_time = 2;
  void clear_build_time();
  static const int kBuildTimeFieldNumber = 2;
  ::google::protobuf::int64 build_time() const;
  void set_build_time(::google::protobuf::int64 value);

  // uint32 profile_duration_ms = 4;
  void clear_profile_duration_ms();
  static const int kProfileDurationMsFieldNumber = 4;
  ::google::protobuf::uint32 profile_duration_ms() const;
  void set_profile_duration_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPageHostIndependentJobInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr build_target_;
  ::google::protobuf::int64 change_list_;
  ::google::protobuf::int64 build_time_;
  ::google::protobuf::uint32 profile_duration_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPageHostDependentJobInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPageHostDependentJobInfo) */ {
 public:
  OverviewPageHostDependentJobInfo();
  virtual ~OverviewPageHostDependentJobInfo();

  OverviewPageHostDependentJobInfo(const OverviewPageHostDependentJobInfo& from);

  inline OverviewPageHostDependentJobInfo& operator=(const OverviewPageHostDependentJobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPageHostDependentJobInfo(OverviewPageHostDependentJobInfo&& from) noexcept
    : OverviewPageHostDependentJobInfo() {
    *this = ::std::move(from);
  }

  inline OverviewPageHostDependentJobInfo& operator=(OverviewPageHostDependentJobInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPageHostDependentJobInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPageHostDependentJobInfo* internal_default_instance() {
    return reinterpret_cast<const OverviewPageHostDependentJobInfo*>(
               &_OverviewPageHostDependentJobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OverviewPageHostDependentJobInfo* other);
  friend void swap(OverviewPageHostDependentJobInfo& a, OverviewPageHostDependentJobInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPageHostDependentJobInfo* New() const final {
    return CreateMaybeMessage<OverviewPageHostDependentJobInfo>(NULL);
  }

  OverviewPageHostDependentJobInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPageHostDependentJobInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPageHostDependentJobInfo& from);
  void MergeFrom(const OverviewPageHostDependentJobInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPageHostDependentJobInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_id = 1;
  void clear_host_id();
  static const int kHostIdFieldNumber = 1;
  const ::std::string& host_id() const;
  void set_host_id(const ::std::string& value);
  #if LANG_CXX11
  void set_host_id(::std::string&& value);
  #endif
  void set_host_id(const char* value);
  void set_host_id(const char* value, size_t size);
  ::std::string* mutable_host_id();
  ::std::string* release_host_id();
  void set_allocated_host_id(::std::string* host_id);

  // string command_line = 2;
  void clear_command_line();
  static const int kCommandLineFieldNumber = 2;
  const ::std::string& command_line() const;
  void set_command_line(const ::std::string& value);
  #if LANG_CXX11
  void set_command_line(::std::string&& value);
  #endif
  void set_command_line(const char* value);
  void set_command_line(const char* value, size_t size);
  ::std::string* mutable_command_line();
  ::std::string* release_command_line();
  void set_allocated_command_line(::std::string* command_line);

  // string bns_address = 4;
  void clear_bns_address();
  static const int kBnsAddressFieldNumber = 4;
  const ::std::string& bns_address() const;
  void set_bns_address(const ::std::string& value);
  #if LANG_CXX11
  void set_bns_address(::std::string&& value);
  #endif
  void set_bns_address(const char* value);
  void set_bns_address(const char* value, size_t size);
  ::std::string* mutable_bns_address();
  ::std::string* release_bns_address();
  void set_allocated_bns_address(::std::string* bns_address);

  // int64 start_time = 3;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // uint64 profile_time_ns = 5;
  void clear_profile_time_ns();
  static const int kProfileTimeNsFieldNumber = 5;
  ::google::protobuf::uint64 profile_time_ns() const;
  void set_profile_time_ns(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPageHostDependentJobInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_id_;
  ::google::protobuf::internal::ArenaStringPtr command_line_;
  ::google::protobuf::internal::ArenaStringPtr bns_address_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::uint64 profile_time_ns_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPageRunEnvironment_HostnamesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<OverviewPageRunEnvironment_HostnamesEntry_DoNotUse, 
    ::std::string, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<OverviewPageRunEnvironment_HostnamesEntry_DoNotUse, 
    ::std::string, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  OverviewPageRunEnvironment_HostnamesEntry_DoNotUse();
  OverviewPageRunEnvironment_HostnamesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const OverviewPageRunEnvironment_HostnamesEntry_DoNotUse& other);
  static const OverviewPageRunEnvironment_HostnamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OverviewPageRunEnvironment_HostnamesEntry_DoNotUse*>(&_OverviewPageRunEnvironment_HostnamesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class OverviewPageRunEnvironment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPageRunEnvironment) */ {
 public:
  OverviewPageRunEnvironment();
  virtual ~OverviewPageRunEnvironment();

  OverviewPageRunEnvironment(const OverviewPageRunEnvironment& from);

  inline OverviewPageRunEnvironment& operator=(const OverviewPageRunEnvironment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPageRunEnvironment(OverviewPageRunEnvironment&& from) noexcept
    : OverviewPageRunEnvironment() {
    *this = ::std::move(from);
  }

  inline OverviewPageRunEnvironment& operator=(OverviewPageRunEnvironment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPageRunEnvironment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPageRunEnvironment* internal_default_instance() {
    return reinterpret_cast<const OverviewPageRunEnvironment*>(
               &_OverviewPageRunEnvironment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OverviewPageRunEnvironment* other);
  friend void swap(OverviewPageRunEnvironment& a, OverviewPageRunEnvironment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPageRunEnvironment* New() const final {
    return CreateMaybeMessage<OverviewPageRunEnvironment>(NULL);
  }

  OverviewPageRunEnvironment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPageRunEnvironment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPageRunEnvironment& from);
  void MergeFrom(const OverviewPageRunEnvironment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPageRunEnvironment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bool> hostnames = 3;
  int hostnames_size() const;
  void clear_hostnames();
  static const int kHostnamesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, bool >&
      hostnames() const;
  ::google::protobuf::Map< ::std::string, bool >*
      mutable_hostnames();

  // repeated .tensorflow.profiler.OverviewPageHostDependentJobInfo host_dependent_job_info = 8;
  int host_dependent_job_info_size() const;
  void clear_host_dependent_job_info();
  static const int kHostDependentJobInfoFieldNumber = 8;
  ::tensorflow::profiler::OverviewPageHostDependentJobInfo* mutable_host_dependent_job_info(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageHostDependentJobInfo >*
      mutable_host_dependent_job_info();
  const ::tensorflow::profiler::OverviewPageHostDependentJobInfo& host_dependent_job_info(int index) const;
  ::tensorflow::profiler::OverviewPageHostDependentJobInfo* add_host_dependent_job_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageHostDependentJobInfo >&
      host_dependent_job_info() const;

  // string device_type = 4;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 4;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  #if LANG_CXX11
  void set_device_type(::std::string&& value);
  #endif
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // .tensorflow.profiler.OverviewPageHostIndependentJobInfo host_independent_job_info = 7;
  bool has_host_independent_job_info() const;
  void clear_host_independent_job_info();
  static const int kHostIndependentJobInfoFieldNumber = 7;
  private:
  const ::tensorflow::profiler::OverviewPageHostIndependentJobInfo& _internal_host_independent_job_info() const;
  public:
  const ::tensorflow::profiler::OverviewPageHostIndependentJobInfo& host_independent_job_info() const;
  ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* release_host_independent_job_info();
  ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* mutable_host_independent_job_info();
  void set_allocated_host_independent_job_info(::tensorflow::profiler::OverviewPageHostIndependentJobInfo* host_independent_job_info);

  // int32 host_count = 1;
  void clear_host_count();
  static const int kHostCountFieldNumber = 1;
  ::google::protobuf::int32 host_count() const;
  void set_host_count(::google::protobuf::int32 value);

  // int32 task_count = 2;
  void clear_task_count();
  static const int kTaskCountFieldNumber = 2;
  ::google::protobuf::int32 task_count() const;
  void set_task_count(::google::protobuf::int32 value);

  // int32 device_core_count = 5;
  void clear_device_core_count();
  static const int kDeviceCoreCountFieldNumber = 5;
  ::google::protobuf::int32 device_core_count() const;
  void set_device_core_count(::google::protobuf::int32 value);

  // int32 per_core_batch_size = 6;
  void clear_per_core_batch_size();
  static const int kPerCoreBatchSizeFieldNumber = 6;
  ::google::protobuf::int32 per_core_batch_size() const;
  void set_per_core_batch_size(::google::protobuf::int32 value);

  // int32 replica_count = 9;
  void clear_replica_count();
  static const int kReplicaCountFieldNumber = 9;
  ::google::protobuf::int32 replica_count() const;
  void set_replica_count(::google::protobuf::int32 value);

  // int32 num_cores_per_replica = 10;
  void clear_num_cores_per_replica();
  static const int kNumCoresPerReplicaFieldNumber = 10;
  ::google::protobuf::int32 num_cores_per_replica() const;
  void set_num_cores_per_replica(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPageRunEnvironment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      OverviewPageRunEnvironment_HostnamesEntry_DoNotUse,
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 > hostnames_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageHostDependentJobInfo > host_dependent_job_info_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* host_independent_job_info_;
  ::google::protobuf::int32 host_count_;
  ::google::protobuf::int32 task_count_;
  ::google::protobuf::int32 device_core_count_;
  ::google::protobuf::int32 per_core_batch_size_;
  ::google::protobuf::int32 replica_count_;
  ::google::protobuf::int32 num_cores_per_replica_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OverviewPage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OverviewPage) */ {
 public:
  OverviewPage();
  virtual ~OverviewPage();

  OverviewPage(const OverviewPage& from);

  inline OverviewPage& operator=(const OverviewPage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OverviewPage(OverviewPage&& from) noexcept
    : OverviewPage() {
    *this = ::std::move(from);
  }

  inline OverviewPage& operator=(OverviewPage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OverviewPage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverviewPage* internal_default_instance() {
    return reinterpret_cast<const OverviewPage*>(
               &_OverviewPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OverviewPage* other);
  friend void swap(OverviewPage& a, OverviewPage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OverviewPage* New() const final {
    return CreateMaybeMessage<OverviewPage>(NULL);
  }

  OverviewPage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OverviewPage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OverviewPage& from);
  void MergeFrom(const OverviewPage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverviewPage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.profiler.InputPipelineAnalysisResult input_analysis = 2;
  bool has_input_analysis() const;
  void clear_input_analysis();
  static const int kInputAnalysisFieldNumber = 2;
  private:
  const ::tensorflow::profiler::InputPipelineAnalysisResult& _internal_input_analysis() const;
  public:
  const ::tensorflow::profiler::InputPipelineAnalysisResult& input_analysis() const;
  ::tensorflow::profiler::InputPipelineAnalysisResult* release_input_analysis();
  ::tensorflow::profiler::InputPipelineAnalysisResult* mutable_input_analysis();
  void set_allocated_input_analysis(::tensorflow::profiler::InputPipelineAnalysisResult* input_analysis);

  // .tensorflow.profiler.OverviewPageAnalysis analysis = 3;
  bool has_analysis() const;
  void clear_analysis();
  static const int kAnalysisFieldNumber = 3;
  private:
  const ::tensorflow::profiler::OverviewPageAnalysis& _internal_analysis() const;
  public:
  const ::tensorflow::profiler::OverviewPageAnalysis& analysis() const;
  ::tensorflow::profiler::OverviewPageAnalysis* release_analysis();
  ::tensorflow::profiler::OverviewPageAnalysis* mutable_analysis();
  void set_allocated_analysis(::tensorflow::profiler::OverviewPageAnalysis* analysis);

  // .tensorflow.profiler.OverviewPageRecommendation recommendation = 4;
  bool has_recommendation() const;
  void clear_recommendation();
  static const int kRecommendationFieldNumber = 4;
  private:
  const ::tensorflow::profiler::OverviewPageRecommendation& _internal_recommendation() const;
  public:
  const ::tensorflow::profiler::OverviewPageRecommendation& recommendation() const;
  ::tensorflow::profiler::OverviewPageRecommendation* release_recommendation();
  ::tensorflow::profiler::OverviewPageRecommendation* mutable_recommendation();
  void set_allocated_recommendation(::tensorflow::profiler::OverviewPageRecommendation* recommendation);

  // .tensorflow.profiler.OverviewPageRunEnvironment run_environment = 6;
  bool has_run_environment() const;
  void clear_run_environment();
  static const int kRunEnvironmentFieldNumber = 6;
  private:
  const ::tensorflow::profiler::OverviewPageRunEnvironment& _internal_run_environment() const;
  public:
  const ::tensorflow::profiler::OverviewPageRunEnvironment& run_environment() const;
  ::tensorflow::profiler::OverviewPageRunEnvironment* release_run_environment();
  ::tensorflow::profiler::OverviewPageRunEnvironment* mutable_run_environment();
  void set_allocated_run_environment(::tensorflow::profiler::OverviewPageRunEnvironment* run_environment);

  // .tensorflow.profiler.Diagnostics diagnostics = 8;
  bool has_diagnostics() const;
  void clear_diagnostics();
  static const int kDiagnosticsFieldNumber = 8;
  private:
  const ::tensorflow::profiler::Diagnostics& _internal_diagnostics() const;
  public:
  const ::tensorflow::profiler::Diagnostics& diagnostics() const;
  ::tensorflow::profiler::Diagnostics* release_diagnostics();
  ::tensorflow::profiler::Diagnostics* mutable_diagnostics();
  void set_allocated_diagnostics(::tensorflow::profiler::Diagnostics* diagnostics);

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OverviewPage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::profiler::InputPipelineAnalysisResult* input_analysis_;
  ::tensorflow::profiler::OverviewPageAnalysis* analysis_;
  ::tensorflow::profiler::OverviewPageRecommendation* recommendation_;
  ::tensorflow::profiler::OverviewPageRunEnvironment* run_environment_;
  ::tensorflow::profiler::Diagnostics* diagnostics_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OverviewTfOp

// string name = 1;
inline void OverviewTfOp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewTfOp::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.name)
  return name_.GetNoArena();
}
inline void OverviewTfOp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.name)
}
#if LANG_CXX11
inline void OverviewTfOp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewTfOp.name)
}
#endif
inline void OverviewTfOp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewTfOp.name)
}
inline void OverviewTfOp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewTfOp.name)
}
inline ::std::string* OverviewTfOp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewTfOp.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewTfOp::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewTfOp.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewTfOp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewTfOp.name)
}

// string category = 2;
inline void OverviewTfOp::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewTfOp::category() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.category)
  return category_.GetNoArena();
}
inline void OverviewTfOp::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.category)
}
#if LANG_CXX11
inline void OverviewTfOp::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewTfOp.category)
}
#endif
inline void OverviewTfOp::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewTfOp.category)
}
inline void OverviewTfOp::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewTfOp.category)
}
inline ::std::string* OverviewTfOp::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewTfOp.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewTfOp::release_category() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewTfOp.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewTfOp::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewTfOp.category)
}

// double self_time_fraction = 3;
inline void OverviewTfOp::clear_self_time_fraction() {
  self_time_fraction_ = 0;
}
inline double OverviewTfOp::self_time_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.self_time_fraction)
  return self_time_fraction_;
}
inline void OverviewTfOp::set_self_time_fraction(double value) {
  
  self_time_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.self_time_fraction)
}

// double cumulative_time_fraction = 4;
inline void OverviewTfOp::clear_cumulative_time_fraction() {
  cumulative_time_fraction_ = 0;
}
inline double OverviewTfOp::cumulative_time_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.cumulative_time_fraction)
  return cumulative_time_fraction_;
}
inline void OverviewTfOp::set_cumulative_time_fraction(double value) {
  
  cumulative_time_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.cumulative_time_fraction)
}

// double flop_rate = 5;
inline void OverviewTfOp::clear_flop_rate() {
  flop_rate_ = 0;
}
inline double OverviewTfOp::flop_rate() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.flop_rate)
  return flop_rate_;
}
inline void OverviewTfOp::set_flop_rate(double value) {
  
  flop_rate_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.flop_rate)
}

// bool is_op_tensorcore_eligible = 6;
inline void OverviewTfOp::clear_is_op_tensorcore_eligible() {
  is_op_tensorcore_eligible_ = false;
}
inline bool OverviewTfOp::is_op_tensorcore_eligible() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.is_op_tensorcore_eligible)
  return is_op_tensorcore_eligible_;
}
inline void OverviewTfOp::set_is_op_tensorcore_eligible(bool value) {
  
  is_op_tensorcore_eligible_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.is_op_tensorcore_eligible)
}

// bool is_op_using_tensorcore = 7;
inline void OverviewTfOp::clear_is_op_using_tensorcore() {
  is_op_using_tensorcore_ = false;
}
inline bool OverviewTfOp::is_op_using_tensorcore() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewTfOp.is_op_using_tensorcore)
  return is_op_using_tensorcore_;
}
inline void OverviewTfOp::set_is_op_using_tensorcore(bool value) {
  
  is_op_using_tensorcore_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewTfOp.is_op_using_tensorcore)
}

// -------------------------------------------------------------------

// OverviewPageAnalysis

// double mxu_utilization_percent = 1;
inline void OverviewPageAnalysis::clear_mxu_utilization_percent() {
  mxu_utilization_percent_ = 0;
}
inline double OverviewPageAnalysis::mxu_utilization_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.mxu_utilization_percent)
  return mxu_utilization_percent_;
}
inline void OverviewPageAnalysis::set_mxu_utilization_percent(double value) {
  
  mxu_utilization_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.mxu_utilization_percent)
}

// double device_idle_time_percent = 2;
inline void OverviewPageAnalysis::clear_device_idle_time_percent() {
  device_idle_time_percent_ = 0;
}
inline double OverviewPageAnalysis::device_idle_time_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.device_idle_time_percent)
  return device_idle_time_percent_;
}
inline void OverviewPageAnalysis::set_device_idle_time_percent(double value) {
  
  device_idle_time_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.device_idle_time_percent)
}

// double host_idle_time_percent = 3;
inline void OverviewPageAnalysis::clear_host_idle_time_percent() {
  host_idle_time_percent_ = 0;
}
inline double OverviewPageAnalysis::host_idle_time_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.host_idle_time_percent)
  return host_idle_time_percent_;
}
inline void OverviewPageAnalysis::set_host_idle_time_percent(double value) {
  
  host_idle_time_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.host_idle_time_percent)
}

// repeated .tensorflow.profiler.OverviewTfOp top_device_ops = 4;
inline int OverviewPageAnalysis::top_device_ops_size() const {
  return top_device_ops_.size();
}
inline void OverviewPageAnalysis::clear_top_device_ops() {
  top_device_ops_.Clear();
}
inline ::tensorflow::profiler::OverviewTfOp* OverviewPageAnalysis::mutable_top_device_ops(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageAnalysis.top_device_ops)
  return top_device_ops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewTfOp >*
OverviewPageAnalysis::mutable_top_device_ops() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageAnalysis.top_device_ops)
  return &top_device_ops_;
}
inline const ::tensorflow::profiler::OverviewTfOp& OverviewPageAnalysis::top_device_ops(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.top_device_ops)
  return top_device_ops_.Get(index);
}
inline ::tensorflow::profiler::OverviewTfOp* OverviewPageAnalysis::add_top_device_ops() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageAnalysis.top_device_ops)
  return top_device_ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewTfOp >&
OverviewPageAnalysis::top_device_ops() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageAnalysis.top_device_ops)
  return top_device_ops_;
}

// string remark_text = 5;
inline void OverviewPageAnalysis::clear_remark_text() {
  remark_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageAnalysis::remark_text() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.remark_text)
  return remark_text_.GetNoArena();
}
inline void OverviewPageAnalysis::set_remark_text(const ::std::string& value) {
  
  remark_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.remark_text)
}
#if LANG_CXX11
inline void OverviewPageAnalysis::set_remark_text(::std::string&& value) {
  
  remark_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageAnalysis.remark_text)
}
#endif
inline void OverviewPageAnalysis::set_remark_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageAnalysis.remark_text)
}
inline void OverviewPageAnalysis::set_remark_text(const char* value, size_t size) {
  
  remark_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageAnalysis.remark_text)
}
inline ::std::string* OverviewPageAnalysis::mutable_remark_text() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageAnalysis.remark_text)
  return remark_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageAnalysis::release_remark_text() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageAnalysis.remark_text)
  
  return remark_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageAnalysis::set_allocated_remark_text(::std::string* remark_text) {
  if (remark_text != NULL) {
    
  } else {
    
  }
  remark_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark_text);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageAnalysis.remark_text)
}

// string remark_color = 6;
inline void OverviewPageAnalysis::clear_remark_color() {
  remark_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageAnalysis::remark_color() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.remark_color)
  return remark_color_.GetNoArena();
}
inline void OverviewPageAnalysis::set_remark_color(const ::std::string& value) {
  
  remark_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.remark_color)
}
#if LANG_CXX11
inline void OverviewPageAnalysis::set_remark_color(::std::string&& value) {
  
  remark_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageAnalysis.remark_color)
}
#endif
inline void OverviewPageAnalysis::set_remark_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageAnalysis.remark_color)
}
inline void OverviewPageAnalysis::set_remark_color(const char* value, size_t size) {
  
  remark_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageAnalysis.remark_color)
}
inline ::std::string* OverviewPageAnalysis::mutable_remark_color() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageAnalysis.remark_color)
  return remark_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageAnalysis::release_remark_color() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageAnalysis.remark_color)
  
  return remark_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageAnalysis::set_allocated_remark_color(::std::string* remark_color) {
  if (remark_color != NULL) {
    
  } else {
    
  }
  remark_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark_color);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageAnalysis.remark_color)
}

// double flop_rate_utilization_relative_to_roofline_percent = 7;
inline void OverviewPageAnalysis::clear_flop_rate_utilization_relative_to_roofline_percent() {
  flop_rate_utilization_relative_to_roofline_percent_ = 0;
}
inline double OverviewPageAnalysis::flop_rate_utilization_relative_to_roofline_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.flop_rate_utilization_relative_to_roofline_percent)
  return flop_rate_utilization_relative_to_roofline_percent_;
}
inline void OverviewPageAnalysis::set_flop_rate_utilization_relative_to_roofline_percent(double value) {
  
  flop_rate_utilization_relative_to_roofline_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.flop_rate_utilization_relative_to_roofline_percent)
}

// double memory_bw_utilization_relative_to_hw_limit_percent = 8;
inline void OverviewPageAnalysis::clear_memory_bw_utilization_relative_to_hw_limit_percent() {
  memory_bw_utilization_relative_to_hw_limit_percent_ = 0;
}
inline double OverviewPageAnalysis::memory_bw_utilization_relative_to_hw_limit_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.memory_bw_utilization_relative_to_hw_limit_percent)
  return memory_bw_utilization_relative_to_hw_limit_percent_;
}
inline void OverviewPageAnalysis::set_memory_bw_utilization_relative_to_hw_limit_percent(double value) {
  
  memory_bw_utilization_relative_to_hw_limit_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.memory_bw_utilization_relative_to_hw_limit_percent)
}

// double device_compute_16bit_percent = 9;
inline void OverviewPageAnalysis::clear_device_compute_16bit_percent() {
  device_compute_16bit_percent_ = 0;
}
inline double OverviewPageAnalysis::device_compute_16bit_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.device_compute_16bit_percent)
  return device_compute_16bit_percent_;
}
inline void OverviewPageAnalysis::set_device_compute_16bit_percent(double value) {
  
  device_compute_16bit_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.device_compute_16bit_percent)
}

// double device_compute_32bit_percent = 10;
inline void OverviewPageAnalysis::clear_device_compute_32bit_percent() {
  device_compute_32bit_percent_ = 0;
}
inline double OverviewPageAnalysis::device_compute_32bit_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.device_compute_32bit_percent)
  return device_compute_32bit_percent_;
}
inline void OverviewPageAnalysis::set_device_compute_32bit_percent(double value) {
  
  device_compute_32bit_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.device_compute_32bit_percent)
}

// double host_tf_op_percent = 11;
inline void OverviewPageAnalysis::clear_host_tf_op_percent() {
  host_tf_op_percent_ = 0;
}
inline double OverviewPageAnalysis::host_tf_op_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.host_tf_op_percent)
  return host_tf_op_percent_;
}
inline void OverviewPageAnalysis::set_host_tf_op_percent(double value) {
  
  host_tf_op_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.host_tf_op_percent)
}

// double device_tf_op_percent = 12;
inline void OverviewPageAnalysis::clear_device_tf_op_percent() {
  device_tf_op_percent_ = 0;
}
inline double OverviewPageAnalysis::device_tf_op_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.device_tf_op_percent)
  return device_tf_op_percent_;
}
inline void OverviewPageAnalysis::set_device_tf_op_percent(double value) {
  
  device_tf_op_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.device_tf_op_percent)
}

// uint32 host_trace_level = 13;
inline void OverviewPageAnalysis::clear_host_trace_level() {
  host_trace_level_ = 0u;
}
inline ::google::protobuf::uint32 OverviewPageAnalysis::host_trace_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.host_trace_level)
  return host_trace_level_;
}
inline void OverviewPageAnalysis::set_host_trace_level(::google::protobuf::uint32 value) {
  
  host_trace_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.host_trace_level)
}

// double host_op_time_eager_percent = 14;
inline void OverviewPageAnalysis::clear_host_op_time_eager_percent() {
  host_op_time_eager_percent_ = 0;
}
inline double OverviewPageAnalysis::host_op_time_eager_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.host_op_time_eager_percent)
  return host_op_time_eager_percent_;
}
inline void OverviewPageAnalysis::set_host_op_time_eager_percent(double value) {
  
  host_op_time_eager_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.host_op_time_eager_percent)
}

// double device_op_time_eager_percent = 15;
inline void OverviewPageAnalysis::clear_device_op_time_eager_percent() {
  device_op_time_eager_percent_ = 0;
}
inline double OverviewPageAnalysis::device_op_time_eager_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.device_op_time_eager_percent)
  return device_op_time_eager_percent_;
}
inline void OverviewPageAnalysis::set_device_op_time_eager_percent(double value) {
  
  device_op_time_eager_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.device_op_time_eager_percent)
}

// double device_op_time_outside_compilation_percent = 16;
inline void OverviewPageAnalysis::clear_device_op_time_outside_compilation_percent() {
  device_op_time_outside_compilation_percent_ = 0;
}
inline double OverviewPageAnalysis::device_op_time_outside_compilation_percent() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageAnalysis.device_op_time_outside_compilation_percent)
  return device_op_time_outside_compilation_percent_;
}
inline void OverviewPageAnalysis::set_device_op_time_outside_compilation_percent(double value) {
  
  device_op_time_outside_compilation_percent_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageAnalysis.device_op_time_outside_compilation_percent)
}

// -------------------------------------------------------------------

// OverviewPageTip

// string link = 1;
inline void OverviewPageTip::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageTip::link() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageTip.link)
  return link_.GetNoArena();
}
inline void OverviewPageTip::set_link(const ::std::string& value) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageTip.link)
}
#if LANG_CXX11
inline void OverviewPageTip::set_link(::std::string&& value) {
  
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageTip.link)
}
#endif
inline void OverviewPageTip::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageTip.link)
}
inline void OverviewPageTip::set_link(const char* value, size_t size) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageTip.link)
}
inline ::std::string* OverviewPageTip::mutable_link() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageTip.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageTip::release_link() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageTip.link)
  
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageTip::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    
  } else {
    
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageTip.link)
}

// -------------------------------------------------------------------

// GenericRecommendation

// string kernel_launch_bottleneck = 1;
inline void GenericRecommendation::clear_kernel_launch_bottleneck() {
  kernel_launch_bottleneck_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::kernel_launch_bottleneck() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
  return kernel_launch_bottleneck_.GetNoArena();
}
inline void GenericRecommendation::set_kernel_launch_bottleneck(const ::std::string& value) {
  
  kernel_launch_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
}
#if LANG_CXX11
inline void GenericRecommendation::set_kernel_launch_bottleneck(::std::string&& value) {
  
  kernel_launch_bottleneck_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
}
#endif
inline void GenericRecommendation::set_kernel_launch_bottleneck(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kernel_launch_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
}
inline void GenericRecommendation::set_kernel_launch_bottleneck(const char* value, size_t size) {
  
  kernel_launch_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
}
inline ::std::string* GenericRecommendation::mutable_kernel_launch_bottleneck() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
  return kernel_launch_bottleneck_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_kernel_launch_bottleneck() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
  
  return kernel_launch_bottleneck_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_kernel_launch_bottleneck(::std::string* kernel_launch_bottleneck) {
  if (kernel_launch_bottleneck != NULL) {
    
  } else {
    
  }
  kernel_launch_bottleneck_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel_launch_bottleneck);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.kernel_launch_bottleneck)
}

// string kernel_launch_statement = 2;
inline void GenericRecommendation::clear_kernel_launch_statement() {
  kernel_launch_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::kernel_launch_statement() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
  return kernel_launch_statement_.GetNoArena();
}
inline void GenericRecommendation::set_kernel_launch_statement(const ::std::string& value) {
  
  kernel_launch_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
}
#if LANG_CXX11
inline void GenericRecommendation::set_kernel_launch_statement(::std::string&& value) {
  
  kernel_launch_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
}
#endif
inline void GenericRecommendation::set_kernel_launch_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kernel_launch_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
}
inline void GenericRecommendation::set_kernel_launch_statement(const char* value, size_t size) {
  
  kernel_launch_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
}
inline ::std::string* GenericRecommendation::mutable_kernel_launch_statement() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
  return kernel_launch_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_kernel_launch_statement() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
  
  return kernel_launch_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_kernel_launch_statement(::std::string* kernel_launch_statement) {
  if (kernel_launch_statement != NULL) {
    
  } else {
    
  }
  kernel_launch_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel_launch_statement);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.kernel_launch_statement)
}

// string all_other_bottleneck = 3;
inline void GenericRecommendation::clear_all_other_bottleneck() {
  all_other_bottleneck_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::all_other_bottleneck() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
  return all_other_bottleneck_.GetNoArena();
}
inline void GenericRecommendation::set_all_other_bottleneck(const ::std::string& value) {
  
  all_other_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
}
#if LANG_CXX11
inline void GenericRecommendation::set_all_other_bottleneck(::std::string&& value) {
  
  all_other_bottleneck_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
}
#endif
inline void GenericRecommendation::set_all_other_bottleneck(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  all_other_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
}
inline void GenericRecommendation::set_all_other_bottleneck(const char* value, size_t size) {
  
  all_other_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
}
inline ::std::string* GenericRecommendation::mutable_all_other_bottleneck() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
  return all_other_bottleneck_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_all_other_bottleneck() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
  
  return all_other_bottleneck_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_all_other_bottleneck(::std::string* all_other_bottleneck) {
  if (all_other_bottleneck != NULL) {
    
  } else {
    
  }
  all_other_bottleneck_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), all_other_bottleneck);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.all_other_bottleneck)
}

// string all_other_statement = 4;
inline void GenericRecommendation::clear_all_other_statement() {
  all_other_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::all_other_statement() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.all_other_statement)
  return all_other_statement_.GetNoArena();
}
inline void GenericRecommendation::set_all_other_statement(const ::std::string& value) {
  
  all_other_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.all_other_statement)
}
#if LANG_CXX11
inline void GenericRecommendation::set_all_other_statement(::std::string&& value) {
  
  all_other_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.all_other_statement)
}
#endif
inline void GenericRecommendation::set_all_other_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  all_other_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.all_other_statement)
}
inline void GenericRecommendation::set_all_other_statement(const char* value, size_t size) {
  
  all_other_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.all_other_statement)
}
inline ::std::string* GenericRecommendation::mutable_all_other_statement() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.all_other_statement)
  return all_other_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_all_other_statement() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.all_other_statement)
  
  return all_other_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_all_other_statement(::std::string* all_other_statement) {
  if (all_other_statement != NULL) {
    
  } else {
    
  }
  all_other_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), all_other_statement);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.all_other_statement)
}

// string precision_statement = 5;
inline void GenericRecommendation::clear_precision_statement() {
  precision_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::precision_statement() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.precision_statement)
  return precision_statement_.GetNoArena();
}
inline void GenericRecommendation::set_precision_statement(const ::std::string& value) {
  
  precision_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.precision_statement)
}
#if LANG_CXX11
inline void GenericRecommendation::set_precision_statement(::std::string&& value) {
  
  precision_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.precision_statement)
}
#endif
inline void GenericRecommendation::set_precision_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  precision_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.precision_statement)
}
inline void GenericRecommendation::set_precision_statement(const char* value, size_t size) {
  
  precision_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.precision_statement)
}
inline ::std::string* GenericRecommendation::mutable_precision_statement() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.precision_statement)
  return precision_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_precision_statement() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.precision_statement)
  
  return precision_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_precision_statement(::std::string* precision_statement) {
  if (precision_statement != NULL) {
    
  } else {
    
  }
  precision_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), precision_statement);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.precision_statement)
}

// string device_collectives_bottleneck = 6;
inline void GenericRecommendation::clear_device_collectives_bottleneck() {
  device_collectives_bottleneck_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::device_collectives_bottleneck() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
  return device_collectives_bottleneck_.GetNoArena();
}
inline void GenericRecommendation::set_device_collectives_bottleneck(const ::std::string& value) {
  
  device_collectives_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
}
#if LANG_CXX11
inline void GenericRecommendation::set_device_collectives_bottleneck(::std::string&& value) {
  
  device_collectives_bottleneck_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
}
#endif
inline void GenericRecommendation::set_device_collectives_bottleneck(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_collectives_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
}
inline void GenericRecommendation::set_device_collectives_bottleneck(const char* value, size_t size) {
  
  device_collectives_bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
}
inline ::std::string* GenericRecommendation::mutable_device_collectives_bottleneck() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
  return device_collectives_bottleneck_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_device_collectives_bottleneck() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
  
  return device_collectives_bottleneck_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_device_collectives_bottleneck(::std::string* device_collectives_bottleneck) {
  if (device_collectives_bottleneck != NULL) {
    
  } else {
    
  }
  device_collectives_bottleneck_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_collectives_bottleneck);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.device_collectives_bottleneck)
}

// string device_collectives_statement = 7;
inline void GenericRecommendation::clear_device_collectives_statement() {
  device_collectives_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericRecommendation::device_collectives_statement() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
  return device_collectives_statement_.GetNoArena();
}
inline void GenericRecommendation::set_device_collectives_statement(const ::std::string& value) {
  
  device_collectives_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
}
#if LANG_CXX11
inline void GenericRecommendation::set_device_collectives_statement(::std::string&& value) {
  
  device_collectives_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
}
#endif
inline void GenericRecommendation::set_device_collectives_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_collectives_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
}
inline void GenericRecommendation::set_device_collectives_statement(const char* value, size_t size) {
  
  device_collectives_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
}
inline ::std::string* GenericRecommendation::mutable_device_collectives_statement() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
  return device_collectives_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericRecommendation::release_device_collectives_statement() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
  
  return device_collectives_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericRecommendation::set_allocated_device_collectives_statement(::std::string* device_collectives_statement) {
  if (device_collectives_statement != NULL) {
    
  } else {
    
  }
  device_collectives_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_collectives_statement);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.GenericRecommendation.device_collectives_statement)
}

// -------------------------------------------------------------------

// OverviewPageRecommendation

// string bottleneck = 1;
inline void OverviewPageRecommendation::clear_bottleneck() {
  bottleneck_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRecommendation::bottleneck() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
  return bottleneck_.GetNoArena();
}
inline void OverviewPageRecommendation::set_bottleneck(const ::std::string& value) {
  
  bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
}
#if LANG_CXX11
inline void OverviewPageRecommendation::set_bottleneck(::std::string&& value) {
  
  bottleneck_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
}
#endif
inline void OverviewPageRecommendation::set_bottleneck(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
}
inline void OverviewPageRecommendation::set_bottleneck(const char* value, size_t size) {
  
  bottleneck_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
}
inline ::std::string* OverviewPageRecommendation::mutable_bottleneck() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
  return bottleneck_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRecommendation::release_bottleneck() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
  
  return bottleneck_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRecommendation::set_allocated_bottleneck(::std::string* bottleneck) {
  if (bottleneck != NULL) {
    
  } else {
    
  }
  bottleneck_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bottleneck);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.bottleneck)
}

// string statement = 2;
inline void OverviewPageRecommendation::clear_statement() {
  statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRecommendation::statement() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.statement)
  return statement_.GetNoArena();
}
inline void OverviewPageRecommendation::set_statement(const ::std::string& value) {
  
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRecommendation.statement)
}
#if LANG_CXX11
inline void OverviewPageRecommendation::set_statement(::std::string&& value) {
  
  statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRecommendation.statement)
}
#endif
inline void OverviewPageRecommendation::set_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRecommendation.statement)
}
inline void OverviewPageRecommendation::set_statement(const char* value, size_t size) {
  
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRecommendation.statement)
}
inline ::std::string* OverviewPageRecommendation::mutable_statement() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.statement)
  return statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRecommendation::release_statement() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.statement)
  
  return statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRecommendation::set_allocated_statement(::std::string* statement) {
  if (statement != NULL) {
    
  } else {
    
  }
  statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statement);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.statement)
}

// repeated .tensorflow.profiler.OverviewPageTip input_tips = 11;
inline int OverviewPageRecommendation::input_tips_size() const {
  return input_tips_.size();
}
inline void OverviewPageRecommendation::clear_input_tips() {
  input_tips_.Clear();
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::mutable_input_tips(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.input_tips)
  return input_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
OverviewPageRecommendation::mutable_input_tips() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRecommendation.input_tips)
  return &input_tips_;
}
inline const ::tensorflow::profiler::OverviewPageTip& OverviewPageRecommendation::input_tips(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.input_tips)
  return input_tips_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::add_input_tips() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRecommendation.input_tips)
  return input_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
OverviewPageRecommendation::input_tips() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRecommendation.input_tips)
  return input_tips_;
}

// string output_statement = 9;
inline void OverviewPageRecommendation::clear_output_statement() {
  output_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRecommendation::output_statement() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.output_statement)
  return output_statement_.GetNoArena();
}
inline void OverviewPageRecommendation::set_output_statement(const ::std::string& value) {
  
  output_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRecommendation.output_statement)
}
#if LANG_CXX11
inline void OverviewPageRecommendation::set_output_statement(::std::string&& value) {
  
  output_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRecommendation.output_statement)
}
#endif
inline void OverviewPageRecommendation::set_output_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRecommendation.output_statement)
}
inline void OverviewPageRecommendation::set_output_statement(const char* value, size_t size) {
  
  output_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRecommendation.output_statement)
}
inline ::std::string* OverviewPageRecommendation::mutable_output_statement() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.output_statement)
  return output_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRecommendation::release_output_statement() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.output_statement)
  
  return output_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRecommendation::set_allocated_output_statement(::std::string* output_statement) {
  if (output_statement != NULL) {
    
  } else {
    
  }
  output_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_statement);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.output_statement)
}

// string eager_statement_html = 12;
inline void OverviewPageRecommendation::clear_eager_statement_html() {
  eager_statement_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRecommendation::eager_statement_html() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
  return eager_statement_html_.GetNoArena();
}
inline void OverviewPageRecommendation::set_eager_statement_html(const ::std::string& value) {
  
  eager_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
}
#if LANG_CXX11
inline void OverviewPageRecommendation::set_eager_statement_html(::std::string&& value) {
  
  eager_statement_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
}
#endif
inline void OverviewPageRecommendation::set_eager_statement_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eager_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
}
inline void OverviewPageRecommendation::set_eager_statement_html(const char* value, size_t size) {
  
  eager_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
}
inline ::std::string* OverviewPageRecommendation::mutable_eager_statement_html() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
  return eager_statement_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRecommendation::release_eager_statement_html() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
  
  return eager_statement_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRecommendation::set_allocated_eager_statement_html(::std::string* eager_statement_html) {
  if (eager_statement_html != NULL) {
    
  } else {
    
  }
  eager_statement_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eager_statement_html);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.eager_statement_html)
}

// string outside_compilation_statement_html = 13;
inline void OverviewPageRecommendation::clear_outside_compilation_statement_html() {
  outside_compilation_statement_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRecommendation::outside_compilation_statement_html() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
  return outside_compilation_statement_html_.GetNoArena();
}
inline void OverviewPageRecommendation::set_outside_compilation_statement_html(const ::std::string& value) {
  
  outside_compilation_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
}
#if LANG_CXX11
inline void OverviewPageRecommendation::set_outside_compilation_statement_html(::std::string&& value) {
  
  outside_compilation_statement_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
}
#endif
inline void OverviewPageRecommendation::set_outside_compilation_statement_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  outside_compilation_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
}
inline void OverviewPageRecommendation::set_outside_compilation_statement_html(const char* value, size_t size) {
  
  outside_compilation_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
}
inline ::std::string* OverviewPageRecommendation::mutable_outside_compilation_statement_html() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
  return outside_compilation_statement_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRecommendation::release_outside_compilation_statement_html() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
  
  return outside_compilation_statement_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRecommendation::set_allocated_outside_compilation_statement_html(::std::string* outside_compilation_statement_html) {
  if (outside_compilation_statement_html != NULL) {
    
  } else {
    
  }
  outside_compilation_statement_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outside_compilation_statement_html);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.outside_compilation_statement_html)
}

// string tf_function_statement_html = 10;
inline void OverviewPageRecommendation::clear_tf_function_statement_html() {
  tf_function_statement_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRecommendation::tf_function_statement_html() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
  return tf_function_statement_html_.GetNoArena();
}
inline void OverviewPageRecommendation::set_tf_function_statement_html(const ::std::string& value) {
  
  tf_function_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
}
#if LANG_CXX11
inline void OverviewPageRecommendation::set_tf_function_statement_html(::std::string&& value) {
  
  tf_function_statement_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
}
#endif
inline void OverviewPageRecommendation::set_tf_function_statement_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tf_function_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
}
inline void OverviewPageRecommendation::set_tf_function_statement_html(const char* value, size_t size) {
  
  tf_function_statement_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
}
inline ::std::string* OverviewPageRecommendation::mutable_tf_function_statement_html() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
  return tf_function_statement_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRecommendation::release_tf_function_statement_html() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
  
  return tf_function_statement_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRecommendation::set_allocated_tf_function_statement_html(::std::string* tf_function_statement_html) {
  if (tf_function_statement_html != NULL) {
    
  } else {
    
  }
  tf_function_statement_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tf_function_statement_html);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.tf_function_statement_html)
}

// repeated .tensorflow.profiler.OverviewPageTip host_tips = 3;
inline int OverviewPageRecommendation::host_tips_size() const {
  return host_tips_.size();
}
inline void OverviewPageRecommendation::clear_host_tips() {
  host_tips_.Clear();
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::mutable_host_tips(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.host_tips)
  return host_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
OverviewPageRecommendation::mutable_host_tips() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRecommendation.host_tips)
  return &host_tips_;
}
inline const ::tensorflow::profiler::OverviewPageTip& OverviewPageRecommendation::host_tips(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.host_tips)
  return host_tips_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::add_host_tips() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRecommendation.host_tips)
  return host_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
OverviewPageRecommendation::host_tips() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRecommendation.host_tips)
  return host_tips_;
}

// repeated .tensorflow.profiler.OverviewPageTip device_tips = 4;
inline int OverviewPageRecommendation::device_tips_size() const {
  return device_tips_.size();
}
inline void OverviewPageRecommendation::clear_device_tips() {
  device_tips_.Clear();
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::mutable_device_tips(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.device_tips)
  return device_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
OverviewPageRecommendation::mutable_device_tips() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRecommendation.device_tips)
  return &device_tips_;
}
inline const ::tensorflow::profiler::OverviewPageTip& OverviewPageRecommendation::device_tips(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.device_tips)
  return device_tips_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::add_device_tips() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRecommendation.device_tips)
  return device_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
OverviewPageRecommendation::device_tips() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRecommendation.device_tips)
  return device_tips_;
}

// repeated .tensorflow.profiler.OverviewPageTip documentation_tips = 5;
inline int OverviewPageRecommendation::documentation_tips_size() const {
  return documentation_tips_.size();
}
inline void OverviewPageRecommendation::clear_documentation_tips() {
  documentation_tips_.Clear();
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::mutable_documentation_tips(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.documentation_tips)
  return documentation_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
OverviewPageRecommendation::mutable_documentation_tips() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRecommendation.documentation_tips)
  return &documentation_tips_;
}
inline const ::tensorflow::profiler::OverviewPageTip& OverviewPageRecommendation::documentation_tips(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.documentation_tips)
  return documentation_tips_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::add_documentation_tips() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRecommendation.documentation_tips)
  return documentation_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
OverviewPageRecommendation::documentation_tips() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRecommendation.documentation_tips)
  return documentation_tips_;
}

// .google.protobuf.Any recommendation = 6;
inline bool OverviewPageRecommendation::has_recommendation() const {
  return this != internal_default_instance() && recommendation_ != NULL;
}
inline const ::google::protobuf::Any& OverviewPageRecommendation::_internal_recommendation() const {
  return *recommendation_;
}
inline const ::google::protobuf::Any& OverviewPageRecommendation::recommendation() const {
  const ::google::protobuf::Any* p = recommendation_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.recommendation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* OverviewPageRecommendation::release_recommendation() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRecommendation.recommendation)
  
  ::google::protobuf::Any* temp = recommendation_;
  recommendation_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* OverviewPageRecommendation::mutable_recommendation() {
  
  if (recommendation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    recommendation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.recommendation)
  return recommendation_;
}
inline void OverviewPageRecommendation::set_allocated_recommendation(::google::protobuf::Any* recommendation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(recommendation_);
  }
  if (recommendation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recommendation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recommendation, submessage_arena);
    }
    
  } else {
    
  }
  recommendation_ = recommendation;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRecommendation.recommendation)
}

// repeated .tensorflow.profiler.OverviewPageTip faq_tips = 7;
inline int OverviewPageRecommendation::faq_tips_size() const {
  return faq_tips_.size();
}
inline void OverviewPageRecommendation::clear_faq_tips() {
  faq_tips_.Clear();
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::mutable_faq_tips(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.faq_tips)
  return faq_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
OverviewPageRecommendation::mutable_faq_tips() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRecommendation.faq_tips)
  return &faq_tips_;
}
inline const ::tensorflow::profiler::OverviewPageTip& OverviewPageRecommendation::faq_tips(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.faq_tips)
  return faq_tips_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::add_faq_tips() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRecommendation.faq_tips)
  return faq_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
OverviewPageRecommendation::faq_tips() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRecommendation.faq_tips)
  return faq_tips_;
}

// repeated .tensorflow.profiler.OverviewPageTip inference_tips = 8;
inline int OverviewPageRecommendation::inference_tips_size() const {
  return inference_tips_.size();
}
inline void OverviewPageRecommendation::clear_inference_tips() {
  inference_tips_.Clear();
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::mutable_inference_tips(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRecommendation.inference_tips)
  return inference_tips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >*
OverviewPageRecommendation::mutable_inference_tips() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRecommendation.inference_tips)
  return &inference_tips_;
}
inline const ::tensorflow::profiler::OverviewPageTip& OverviewPageRecommendation::inference_tips(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRecommendation.inference_tips)
  return inference_tips_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageTip* OverviewPageRecommendation::add_inference_tips() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRecommendation.inference_tips)
  return inference_tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageTip >&
OverviewPageRecommendation::inference_tips() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRecommendation.inference_tips)
  return inference_tips_;
}

// -------------------------------------------------------------------

// OverviewPageHostIndependentJobInfo

// int64 change_list = 1;
inline void OverviewPageHostIndependentJobInfo::clear_change_list() {
  change_list_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OverviewPageHostIndependentJobInfo::change_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostIndependentJobInfo.change_list)
  return change_list_;
}
inline void OverviewPageHostIndependentJobInfo::set_change_list(::google::protobuf::int64 value) {
  
  change_list_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostIndependentJobInfo.change_list)
}

// int64 build_time = 2;
inline void OverviewPageHostIndependentJobInfo::clear_build_time() {
  build_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OverviewPageHostIndependentJobInfo::build_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_time)
  return build_time_;
}
inline void OverviewPageHostIndependentJobInfo::set_build_time(::google::protobuf::int64 value) {
  
  build_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_time)
}

// string build_target = 3;
inline void OverviewPageHostIndependentJobInfo::clear_build_target() {
  build_target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageHostIndependentJobInfo::build_target() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
  return build_target_.GetNoArena();
}
inline void OverviewPageHostIndependentJobInfo::set_build_target(const ::std::string& value) {
  
  build_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
}
#if LANG_CXX11
inline void OverviewPageHostIndependentJobInfo::set_build_target(::std::string&& value) {
  
  build_target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
}
#endif
inline void OverviewPageHostIndependentJobInfo::set_build_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  build_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
}
inline void OverviewPageHostIndependentJobInfo::set_build_target(const char* value, size_t size) {
  
  build_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
}
inline ::std::string* OverviewPageHostIndependentJobInfo::mutable_build_target() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
  return build_target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageHostIndependentJobInfo::release_build_target() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
  
  return build_target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageHostIndependentJobInfo::set_allocated_build_target(::std::string* build_target) {
  if (build_target != NULL) {
    
  } else {
    
  }
  build_target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_target);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageHostIndependentJobInfo.build_target)
}

// uint32 profile_duration_ms = 4;
inline void OverviewPageHostIndependentJobInfo::clear_profile_duration_ms() {
  profile_duration_ms_ = 0u;
}
inline ::google::protobuf::uint32 OverviewPageHostIndependentJobInfo::profile_duration_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostIndependentJobInfo.profile_duration_ms)
  return profile_duration_ms_;
}
inline void OverviewPageHostIndependentJobInfo::set_profile_duration_ms(::google::protobuf::uint32 value) {
  
  profile_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostIndependentJobInfo.profile_duration_ms)
}

// -------------------------------------------------------------------

// OverviewPageHostDependentJobInfo

// string host_id = 1;
inline void OverviewPageHostDependentJobInfo::clear_host_id() {
  host_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageHostDependentJobInfo::host_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
  return host_id_.GetNoArena();
}
inline void OverviewPageHostDependentJobInfo::set_host_id(const ::std::string& value) {
  
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
}
#if LANG_CXX11
inline void OverviewPageHostDependentJobInfo::set_host_id(::std::string&& value) {
  
  host_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
}
#endif
inline void OverviewPageHostDependentJobInfo::set_host_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
}
inline void OverviewPageHostDependentJobInfo::set_host_id(const char* value, size_t size) {
  
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
}
inline ::std::string* OverviewPageHostDependentJobInfo::mutable_host_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
  return host_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageHostDependentJobInfo::release_host_id() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
  
  return host_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageHostDependentJobInfo::set_allocated_host_id(::std::string* host_id) {
  if (host_id != NULL) {
    
  } else {
    
  }
  host_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageHostDependentJobInfo.host_id)
}

// string command_line = 2;
inline void OverviewPageHostDependentJobInfo::clear_command_line() {
  command_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageHostDependentJobInfo::command_line() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
  return command_line_.GetNoArena();
}
inline void OverviewPageHostDependentJobInfo::set_command_line(const ::std::string& value) {
  
  command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
}
#if LANG_CXX11
inline void OverviewPageHostDependentJobInfo::set_command_line(::std::string&& value) {
  
  command_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
}
#endif
inline void OverviewPageHostDependentJobInfo::set_command_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
}
inline void OverviewPageHostDependentJobInfo::set_command_line(const char* value, size_t size) {
  
  command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
}
inline ::std::string* OverviewPageHostDependentJobInfo::mutable_command_line() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
  return command_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageHostDependentJobInfo::release_command_line() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
  
  return command_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageHostDependentJobInfo::set_allocated_command_line(::std::string* command_line) {
  if (command_line != NULL) {
    
  } else {
    
  }
  command_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_line);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageHostDependentJobInfo.command_line)
}

// int64 start_time = 3;
inline void OverviewPageHostDependentJobInfo::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OverviewPageHostDependentJobInfo::start_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostDependentJobInfo.start_time)
  return start_time_;
}
inline void OverviewPageHostDependentJobInfo::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostDependentJobInfo.start_time)
}

// string bns_address = 4;
inline void OverviewPageHostDependentJobInfo::clear_bns_address() {
  bns_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageHostDependentJobInfo::bns_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
  return bns_address_.GetNoArena();
}
inline void OverviewPageHostDependentJobInfo::set_bns_address(const ::std::string& value) {
  
  bns_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
}
#if LANG_CXX11
inline void OverviewPageHostDependentJobInfo::set_bns_address(::std::string&& value) {
  
  bns_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
}
#endif
inline void OverviewPageHostDependentJobInfo::set_bns_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bns_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
}
inline void OverviewPageHostDependentJobInfo::set_bns_address(const char* value, size_t size) {
  
  bns_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
}
inline ::std::string* OverviewPageHostDependentJobInfo::mutable_bns_address() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
  return bns_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageHostDependentJobInfo::release_bns_address() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
  
  return bns_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageHostDependentJobInfo::set_allocated_bns_address(::std::string* bns_address) {
  if (bns_address != NULL) {
    
  } else {
    
  }
  bns_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bns_address);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageHostDependentJobInfo.bns_address)
}

// uint64 profile_time_ns = 5;
inline void OverviewPageHostDependentJobInfo::clear_profile_time_ns() {
  profile_time_ns_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OverviewPageHostDependentJobInfo::profile_time_ns() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageHostDependentJobInfo.profile_time_ns)
  return profile_time_ns_;
}
inline void OverviewPageHostDependentJobInfo::set_profile_time_ns(::google::protobuf::uint64 value) {
  
  profile_time_ns_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageHostDependentJobInfo.profile_time_ns)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OverviewPageRunEnvironment

// int32 host_count = 1;
inline void OverviewPageRunEnvironment::clear_host_count() {
  host_count_ = 0;
}
inline ::google::protobuf::int32 OverviewPageRunEnvironment::host_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.host_count)
  return host_count_;
}
inline void OverviewPageRunEnvironment::set_host_count(::google::protobuf::int32 value) {
  
  host_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.host_count)
}

// int32 task_count = 2;
inline void OverviewPageRunEnvironment::clear_task_count() {
  task_count_ = 0;
}
inline ::google::protobuf::int32 OverviewPageRunEnvironment::task_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.task_count)
  return task_count_;
}
inline void OverviewPageRunEnvironment::set_task_count(::google::protobuf::int32 value) {
  
  task_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.task_count)
}

// map<string, bool> hostnames = 3;
inline int OverviewPageRunEnvironment::hostnames_size() const {
  return hostnames_.size();
}
inline void OverviewPageRunEnvironment::clear_hostnames() {
  hostnames_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, bool >&
OverviewPageRunEnvironment::hostnames() const {
  // @@protoc_insertion_point(field_map:tensorflow.profiler.OverviewPageRunEnvironment.hostnames)
  return hostnames_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, bool >*
OverviewPageRunEnvironment::mutable_hostnames() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.profiler.OverviewPageRunEnvironment.hostnames)
  return hostnames_.MutableMap();
}

// string device_type = 4;
inline void OverviewPageRunEnvironment::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OverviewPageRunEnvironment::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
  return device_type_.GetNoArena();
}
inline void OverviewPageRunEnvironment::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
}
#if LANG_CXX11
inline void OverviewPageRunEnvironment::set_device_type(::std::string&& value) {
  
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
}
#endif
inline void OverviewPageRunEnvironment::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
}
inline void OverviewPageRunEnvironment::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
}
inline ::std::string* OverviewPageRunEnvironment::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OverviewPageRunEnvironment::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OverviewPageRunEnvironment::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRunEnvironment.device_type)
}

// int32 device_core_count = 5;
inline void OverviewPageRunEnvironment::clear_device_core_count() {
  device_core_count_ = 0;
}
inline ::google::protobuf::int32 OverviewPageRunEnvironment::device_core_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.device_core_count)
  return device_core_count_;
}
inline void OverviewPageRunEnvironment::set_device_core_count(::google::protobuf::int32 value) {
  
  device_core_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.device_core_count)
}

// int32 per_core_batch_size = 6;
inline void OverviewPageRunEnvironment::clear_per_core_batch_size() {
  per_core_batch_size_ = 0;
}
inline ::google::protobuf::int32 OverviewPageRunEnvironment::per_core_batch_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.per_core_batch_size)
  return per_core_batch_size_;
}
inline void OverviewPageRunEnvironment::set_per_core_batch_size(::google::protobuf::int32 value) {
  
  per_core_batch_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.per_core_batch_size)
}

// .tensorflow.profiler.OverviewPageHostIndependentJobInfo host_independent_job_info = 7;
inline bool OverviewPageRunEnvironment::has_host_independent_job_info() const {
  return this != internal_default_instance() && host_independent_job_info_ != NULL;
}
inline void OverviewPageRunEnvironment::clear_host_independent_job_info() {
  if (GetArenaNoVirtual() == NULL && host_independent_job_info_ != NULL) {
    delete host_independent_job_info_;
  }
  host_independent_job_info_ = NULL;
}
inline const ::tensorflow::profiler::OverviewPageHostIndependentJobInfo& OverviewPageRunEnvironment::_internal_host_independent_job_info() const {
  return *host_independent_job_info_;
}
inline const ::tensorflow::profiler::OverviewPageHostIndependentJobInfo& OverviewPageRunEnvironment::host_independent_job_info() const {
  const ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* p = host_independent_job_info_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.host_independent_job_info)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::OverviewPageHostIndependentJobInfo*>(
      &::tensorflow::profiler::_OverviewPageHostIndependentJobInfo_default_instance_);
}
inline ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* OverviewPageRunEnvironment::release_host_independent_job_info() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPageRunEnvironment.host_independent_job_info)
  
  ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* temp = host_independent_job_info_;
  host_independent_job_info_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::OverviewPageHostIndependentJobInfo* OverviewPageRunEnvironment::mutable_host_independent_job_info() {
  
  if (host_independent_job_info_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OverviewPageHostIndependentJobInfo>(GetArenaNoVirtual());
    host_independent_job_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRunEnvironment.host_independent_job_info)
  return host_independent_job_info_;
}
inline void OverviewPageRunEnvironment::set_allocated_host_independent_job_info(::tensorflow::profiler::OverviewPageHostIndependentJobInfo* host_independent_job_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete host_independent_job_info_;
  }
  if (host_independent_job_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      host_independent_job_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, host_independent_job_info, submessage_arena);
    }
    
  } else {
    
  }
  host_independent_job_info_ = host_independent_job_info;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPageRunEnvironment.host_independent_job_info)
}

// repeated .tensorflow.profiler.OverviewPageHostDependentJobInfo host_dependent_job_info = 8;
inline int OverviewPageRunEnvironment::host_dependent_job_info_size() const {
  return host_dependent_job_info_.size();
}
inline void OverviewPageRunEnvironment::clear_host_dependent_job_info() {
  host_dependent_job_info_.Clear();
}
inline ::tensorflow::profiler::OverviewPageHostDependentJobInfo* OverviewPageRunEnvironment::mutable_host_dependent_job_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPageRunEnvironment.host_dependent_job_info)
  return host_dependent_job_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageHostDependentJobInfo >*
OverviewPageRunEnvironment::mutable_host_dependent_job_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.profiler.OverviewPageRunEnvironment.host_dependent_job_info)
  return &host_dependent_job_info_;
}
inline const ::tensorflow::profiler::OverviewPageHostDependentJobInfo& OverviewPageRunEnvironment::host_dependent_job_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.host_dependent_job_info)
  return host_dependent_job_info_.Get(index);
}
inline ::tensorflow::profiler::OverviewPageHostDependentJobInfo* OverviewPageRunEnvironment::add_host_dependent_job_info() {
  // @@protoc_insertion_point(field_add:tensorflow.profiler.OverviewPageRunEnvironment.host_dependent_job_info)
  return host_dependent_job_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::profiler::OverviewPageHostDependentJobInfo >&
OverviewPageRunEnvironment::host_dependent_job_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.profiler.OverviewPageRunEnvironment.host_dependent_job_info)
  return host_dependent_job_info_;
}

// int32 replica_count = 9;
inline void OverviewPageRunEnvironment::clear_replica_count() {
  replica_count_ = 0;
}
inline ::google::protobuf::int32 OverviewPageRunEnvironment::replica_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.replica_count)
  return replica_count_;
}
inline void OverviewPageRunEnvironment::set_replica_count(::google::protobuf::int32 value) {
  
  replica_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.replica_count)
}

// int32 num_cores_per_replica = 10;
inline void OverviewPageRunEnvironment::clear_num_cores_per_replica() {
  num_cores_per_replica_ = 0;
}
inline ::google::protobuf::int32 OverviewPageRunEnvironment::num_cores_per_replica() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPageRunEnvironment.num_cores_per_replica)
  return num_cores_per_replica_;
}
inline void OverviewPageRunEnvironment::set_num_cores_per_replica(::google::protobuf::int32 value) {
  
  num_cores_per_replica_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.profiler.OverviewPageRunEnvironment.num_cores_per_replica)
}

// -------------------------------------------------------------------

// OverviewPage

// .tensorflow.profiler.OverviewPageRunEnvironment run_environment = 6;
inline bool OverviewPage::has_run_environment() const {
  return this != internal_default_instance() && run_environment_ != NULL;
}
inline void OverviewPage::clear_run_environment() {
  if (GetArenaNoVirtual() == NULL && run_environment_ != NULL) {
    delete run_environment_;
  }
  run_environment_ = NULL;
}
inline const ::tensorflow::profiler::OverviewPageRunEnvironment& OverviewPage::_internal_run_environment() const {
  return *run_environment_;
}
inline const ::tensorflow::profiler::OverviewPageRunEnvironment& OverviewPage::run_environment() const {
  const ::tensorflow::profiler::OverviewPageRunEnvironment* p = run_environment_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPage.run_environment)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::OverviewPageRunEnvironment*>(
      &::tensorflow::profiler::_OverviewPageRunEnvironment_default_instance_);
}
inline ::tensorflow::profiler::OverviewPageRunEnvironment* OverviewPage::release_run_environment() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPage.run_environment)
  
  ::tensorflow::profiler::OverviewPageRunEnvironment* temp = run_environment_;
  run_environment_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::OverviewPageRunEnvironment* OverviewPage::mutable_run_environment() {
  
  if (run_environment_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OverviewPageRunEnvironment>(GetArenaNoVirtual());
    run_environment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPage.run_environment)
  return run_environment_;
}
inline void OverviewPage::set_allocated_run_environment(::tensorflow::profiler::OverviewPageRunEnvironment* run_environment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete run_environment_;
  }
  if (run_environment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      run_environment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_environment, submessage_arena);
    }
    
  } else {
    
  }
  run_environment_ = run_environment;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPage.run_environment)
}

// .tensorflow.profiler.InputPipelineAnalysisResult input_analysis = 2;
inline bool OverviewPage::has_input_analysis() const {
  return this != internal_default_instance() && input_analysis_ != NULL;
}
inline const ::tensorflow::profiler::InputPipelineAnalysisResult& OverviewPage::_internal_input_analysis() const {
  return *input_analysis_;
}
inline const ::tensorflow::profiler::InputPipelineAnalysisResult& OverviewPage::input_analysis() const {
  const ::tensorflow::profiler::InputPipelineAnalysisResult* p = input_analysis_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPage.input_analysis)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::InputPipelineAnalysisResult*>(
      &::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_);
}
inline ::tensorflow::profiler::InputPipelineAnalysisResult* OverviewPage::release_input_analysis() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPage.input_analysis)
  
  ::tensorflow::profiler::InputPipelineAnalysisResult* temp = input_analysis_;
  input_analysis_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::InputPipelineAnalysisResult* OverviewPage::mutable_input_analysis() {
  
  if (input_analysis_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::InputPipelineAnalysisResult>(GetArenaNoVirtual());
    input_analysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPage.input_analysis)
  return input_analysis_;
}
inline void OverviewPage::set_allocated_input_analysis(::tensorflow::profiler::InputPipelineAnalysisResult* input_analysis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(input_analysis_);
  }
  if (input_analysis) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_analysis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_analysis, submessage_arena);
    }
    
  } else {
    
  }
  input_analysis_ = input_analysis;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPage.input_analysis)
}

// .tensorflow.profiler.OverviewPageAnalysis analysis = 3;
inline bool OverviewPage::has_analysis() const {
  return this != internal_default_instance() && analysis_ != NULL;
}
inline void OverviewPage::clear_analysis() {
  if (GetArenaNoVirtual() == NULL && analysis_ != NULL) {
    delete analysis_;
  }
  analysis_ = NULL;
}
inline const ::tensorflow::profiler::OverviewPageAnalysis& OverviewPage::_internal_analysis() const {
  return *analysis_;
}
inline const ::tensorflow::profiler::OverviewPageAnalysis& OverviewPage::analysis() const {
  const ::tensorflow::profiler::OverviewPageAnalysis* p = analysis_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPage.analysis)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::OverviewPageAnalysis*>(
      &::tensorflow::profiler::_OverviewPageAnalysis_default_instance_);
}
inline ::tensorflow::profiler::OverviewPageAnalysis* OverviewPage::release_analysis() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPage.analysis)
  
  ::tensorflow::profiler::OverviewPageAnalysis* temp = analysis_;
  analysis_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::OverviewPageAnalysis* OverviewPage::mutable_analysis() {
  
  if (analysis_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OverviewPageAnalysis>(GetArenaNoVirtual());
    analysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPage.analysis)
  return analysis_;
}
inline void OverviewPage::set_allocated_analysis(::tensorflow::profiler::OverviewPageAnalysis* analysis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete analysis_;
  }
  if (analysis) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      analysis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, analysis, submessage_arena);
    }
    
  } else {
    
  }
  analysis_ = analysis;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPage.analysis)
}

// .tensorflow.profiler.OverviewPageRecommendation recommendation = 4;
inline bool OverviewPage::has_recommendation() const {
  return this != internal_default_instance() && recommendation_ != NULL;
}
inline void OverviewPage::clear_recommendation() {
  if (GetArenaNoVirtual() == NULL && recommendation_ != NULL) {
    delete recommendation_;
  }
  recommendation_ = NULL;
}
inline const ::tensorflow::profiler::OverviewPageRecommendation& OverviewPage::_internal_recommendation() const {
  return *recommendation_;
}
inline const ::tensorflow::profiler::OverviewPageRecommendation& OverviewPage::recommendation() const {
  const ::tensorflow::profiler::OverviewPageRecommendation* p = recommendation_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPage.recommendation)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::OverviewPageRecommendation*>(
      &::tensorflow::profiler::_OverviewPageRecommendation_default_instance_);
}
inline ::tensorflow::profiler::OverviewPageRecommendation* OverviewPage::release_recommendation() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPage.recommendation)
  
  ::tensorflow::profiler::OverviewPageRecommendation* temp = recommendation_;
  recommendation_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::OverviewPageRecommendation* OverviewPage::mutable_recommendation() {
  
  if (recommendation_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OverviewPageRecommendation>(GetArenaNoVirtual());
    recommendation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPage.recommendation)
  return recommendation_;
}
inline void OverviewPage::set_allocated_recommendation(::tensorflow::profiler::OverviewPageRecommendation* recommendation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recommendation_;
  }
  if (recommendation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recommendation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recommendation, submessage_arena);
    }
    
  } else {
    
  }
  recommendation_ = recommendation;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPage.recommendation)
}

// .tensorflow.profiler.Diagnostics diagnostics = 8;
inline bool OverviewPage::has_diagnostics() const {
  return this != internal_default_instance() && diagnostics_ != NULL;
}
inline const ::tensorflow::profiler::Diagnostics& OverviewPage::_internal_diagnostics() const {
  return *diagnostics_;
}
inline const ::tensorflow::profiler::Diagnostics& OverviewPage::diagnostics() const {
  const ::tensorflow::profiler::Diagnostics* p = diagnostics_;
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OverviewPage.diagnostics)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::profiler::Diagnostics*>(
      &::tensorflow::profiler::_Diagnostics_default_instance_);
}
inline ::tensorflow::profiler::Diagnostics* OverviewPage::release_diagnostics() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OverviewPage.diagnostics)
  
  ::tensorflow::profiler::Diagnostics* temp = diagnostics_;
  diagnostics_ = NULL;
  return temp;
}
inline ::tensorflow::profiler::Diagnostics* OverviewPage::mutable_diagnostics() {
  
  if (diagnostics_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::Diagnostics>(GetArenaNoVirtual());
    diagnostics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OverviewPage.diagnostics)
  return diagnostics_;
}
inline void OverviewPage::set_allocated_diagnostics(::tensorflow::profiler::Diagnostics* diagnostics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(diagnostics_);
  }
  if (diagnostics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      diagnostics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, diagnostics, submessage_arena);
    }
    
  } else {
    
  }
  diagnostics_ = diagnostics;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OverviewPage.diagnostics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2foverview_5fpage_2eproto
