// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/data/dataset.proto

#include "tensorflow/core/data/dataset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CompressedComponentMetadata;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto
namespace protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TensorProto;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto
namespace protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorShapeProto;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto
namespace tensorflow {
namespace data {
class CompressedComponentMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompressedComponentMetadata>
      _instance;
} _CompressedComponentMetadata_default_instance_;
class CompressedElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompressedElement>
      _instance;
} _CompressedElement_default_instance_;
class UncompressedElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UncompressedElement>
      _instance;
} _UncompressedElement_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto {
static void InitDefaultsCompressedComponentMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_CompressedComponentMetadata_default_instance_;
    new (ptr) ::tensorflow::data::CompressedComponentMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::CompressedComponentMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CompressedComponentMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCompressedComponentMetadata}, {
      &protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::scc_info_TensorShapeProto.base,}};

static void InitDefaultsCompressedElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_CompressedElement_default_instance_;
    new (ptr) ::tensorflow::data::CompressedElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::CompressedElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CompressedElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCompressedElement}, {
      &protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_CompressedComponentMetadata.base,}};

static void InitDefaultsUncompressedElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_UncompressedElement_default_instance_;
    new (ptr) ::tensorflow::data::UncompressedElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::UncompressedElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UncompressedElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUncompressedElement}, {
      &protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::scc_info_TensorProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CompressedComponentMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompressedElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UncompressedElement.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, dtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, tensor_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, tensor_size_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedElement, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CompressedElement, component_metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::UncompressedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::UncompressedElement, components_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::CompressedComponentMetadata)},
  { 8, -1, sizeof(::tensorflow::data::CompressedElement)},
  { 15, -1, sizeof(::tensorflow::data::UncompressedElement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_CompressedComponentMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_CompressedElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_UncompressedElement_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/data/dataset.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"tensorflow/core/data/dataset.proto\022\017te"
      "nsorflow.data\032&tensorflow/core/framework"
      "/tensor.proto\032,tensorflow/core/framework"
      "/tensor_shape.proto\032%tensorflow/core/fra"
      "mework/types.proto\"\221\001\n\033CompressedCompone"
      "ntMetadata\022#\n\005dtype\030\001 \001(\0162\024.tensorflow.D"
      "ataType\0222\n\014tensor_shape\030\002 \001(\0132\034.tensorfl"
      "ow.TensorShapeProto\022\031\n\021tensor_size_bytes"
      "\030\003 \001(\003\"k\n\021CompressedElement\022\014\n\004data\030\001 \001("
      "\014\022H\n\022component_metadata\030\002 \003(\0132,.tensorfl"
      "ow.data.CompressedComponentMetadata\"B\n\023U"
      "ncompressedElement\022+\n\ncomponents\030\001 \003(\0132\027"
      ".tensorflow.TensorProtob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/data/dataset.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto
namespace tensorflow {
namespace data {

// ===================================================================

void CompressedComponentMetadata::InitAsDefaultInstance() {
  ::tensorflow::data::_CompressedComponentMetadata_default_instance_._instance.get_mutable()->tensor_shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
void CompressedComponentMetadata::clear_tensor_shape() {
  if (GetArenaNoVirtual() == NULL && tensor_shape_ != NULL) {
    delete tensor_shape_;
  }
  tensor_shape_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedComponentMetadata::kDtypeFieldNumber;
const int CompressedComponentMetadata::kTensorShapeFieldNumber;
const int CompressedComponentMetadata::kTensorSizeBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedComponentMetadata::CompressedComponentMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_CompressedComponentMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.CompressedComponentMetadata)
}
CompressedComponentMetadata::CompressedComponentMetadata(const CompressedComponentMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_shape()) {
    tensor_shape_ = new ::tensorflow::TensorShapeProto(*from.tensor_shape_);
  } else {
    tensor_shape_ = NULL;
  }
  ::memcpy(&tensor_size_bytes_, &from.tensor_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&tensor_size_bytes_)) + sizeof(dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CompressedComponentMetadata)
}

void CompressedComponentMetadata::SharedCtor() {
  ::memset(&tensor_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&tensor_shape_)) + sizeof(dtype_));
}

CompressedComponentMetadata::~CompressedComponentMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CompressedComponentMetadata)
  SharedDtor();
}

void CompressedComponentMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete tensor_shape_;
}

void CompressedComponentMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CompressedComponentMetadata::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedComponentMetadata& CompressedComponentMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_CompressedComponentMetadata.base);
  return *internal_default_instance();
}


void CompressedComponentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CompressedComponentMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tensor_shape_ != NULL) {
    delete tensor_shape_;
  }
  tensor_shape_ = NULL;
  ::memset(&tensor_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&tensor_size_bytes_)) + sizeof(dtype_));
  _internal_metadata_.Clear();
}

bool CompressedComponentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.CompressedComponentMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.DataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto tensor_shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tensor_size_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tensor_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.CompressedComponentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.CompressedComponentMetadata)
  return false;
#undef DO_
}

void CompressedComponentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.CompressedComponentMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->has_tensor_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tensor_shape(), output);
  }

  // int64 tensor_size_bytes = 3;
  if (this->tensor_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tensor_size_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.CompressedComponentMetadata)
}

::google::protobuf::uint8* CompressedComponentMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CompressedComponentMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->has_tensor_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tensor_shape(), deterministic, target);
  }

  // int64 tensor_size_bytes = 3;
  if (this->tensor_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tensor_size_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CompressedComponentMetadata)
  return target;
}

size_t CompressedComponentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CompressedComponentMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->has_tensor_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tensor_shape_);
  }

  // int64 tensor_size_bytes = 3;
  if (this->tensor_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tensor_size_bytes());
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedComponentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.CompressedComponentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedComponentMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedComponentMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.CompressedComponentMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.CompressedComponentMetadata)
    MergeFrom(*source);
  }
}

void CompressedComponentMetadata::MergeFrom(const CompressedComponentMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CompressedComponentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor_shape()) {
    mutable_tensor_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.tensor_shape());
  }
  if (from.tensor_size_bytes() != 0) {
    set_tensor_size_bytes(from.tensor_size_bytes());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void CompressedComponentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.CompressedComponentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedComponentMetadata::CopyFrom(const CompressedComponentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CompressedComponentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedComponentMetadata::IsInitialized() const {
  return true;
}

void CompressedComponentMetadata::Swap(CompressedComponentMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedComponentMetadata::InternalSwap(CompressedComponentMetadata* other) {
  using std::swap;
  swap(tensor_shape_, other->tensor_shape_);
  swap(tensor_size_bytes_, other->tensor_size_bytes_);
  swap(dtype_, other->dtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompressedComponentMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CompressedElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedElement::kDataFieldNumber;
const int CompressedElement::kComponentMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedElement::CompressedElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_CompressedElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.CompressedElement)
}
CompressedElement::CompressedElement(const CompressedElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      component_metadata_(from.component_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CompressedElement)
}

void CompressedElement::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CompressedElement::~CompressedElement() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CompressedElement)
  SharedDtor();
}

void CompressedElement::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompressedElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CompressedElement::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedElement& CompressedElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_CompressedElement.base);
  return *internal_default_instance();
}


void CompressedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CompressedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_metadata_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CompressedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.CompressedElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_component_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.CompressedElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.CompressedElement)
  return false;
#undef DO_
}

void CompressedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.CompressedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->component_metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->component_metadata(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.CompressedElement)
}

::google::protobuf::uint8* CompressedElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CompressedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->component_metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->component_metadata(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CompressedElement)
  return target;
}

size_t CompressedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CompressedElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->component_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->component_metadata(static_cast<int>(i)));
    }
  }

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.CompressedElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.CompressedElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.CompressedElement)
    MergeFrom(*source);
  }
}

void CompressedElement::MergeFrom(const CompressedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CompressedElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  component_metadata_.MergeFrom(from.component_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CompressedElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.CompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedElement::CopyFrom(const CompressedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedElement::IsInitialized() const {
  return true;
}

void CompressedElement::Swap(CompressedElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedElement::InternalSwap(CompressedElement* other) {
  using std::swap;
  CastToBase(&component_metadata_)->InternalSwap(CastToBase(&other->component_metadata_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompressedElement::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UncompressedElement::InitAsDefaultInstance() {
}
void UncompressedElement::clear_components() {
  components_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UncompressedElement::kComponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UncompressedElement::UncompressedElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_UncompressedElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.UncompressedElement)
}
UncompressedElement::UncompressedElement(const UncompressedElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      components_(from.components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.UncompressedElement)
}

void UncompressedElement::SharedCtor() {
}

UncompressedElement::~UncompressedElement() {
  // @@protoc_insertion_point(destructor:tensorflow.data.UncompressedElement)
  SharedDtor();
}

void UncompressedElement::SharedDtor() {
}

void UncompressedElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UncompressedElement::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UncompressedElement& UncompressedElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_UncompressedElement.base);
  return *internal_default_instance();
}


void UncompressedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.UncompressedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  _internal_metadata_.Clear();
}

bool UncompressedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.UncompressedElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TensorProto components = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.UncompressedElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.UncompressedElement)
  return false;
#undef DO_
}

void UncompressedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.UncompressedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto components = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->components_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->components(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.UncompressedElement)
}

::google::protobuf::uint8* UncompressedElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.UncompressedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto components = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->components_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->components(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.UncompressedElement)
  return target;
}

size_t UncompressedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.UncompressedElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.TensorProto components = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->components_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->components(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UncompressedElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.UncompressedElement)
  GOOGLE_DCHECK_NE(&from, this);
  const UncompressedElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UncompressedElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.UncompressedElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.UncompressedElement)
    MergeFrom(*source);
  }
}

void UncompressedElement::MergeFrom(const UncompressedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.UncompressedElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
}

void UncompressedElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.UncompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UncompressedElement::CopyFrom(const UncompressedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.UncompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UncompressedElement::IsInitialized() const {
  return true;
}

void UncompressedElement::Swap(UncompressedElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UncompressedElement::InternalSwap(UncompressedElement* other) {
  using std::swap;
  CastToBase(&components_)->InternalSwap(CastToBase(&other->components_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UncompressedElement::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::CompressedComponentMetadata* Arena::CreateMaybeMessage< ::tensorflow::data::CompressedComponentMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::CompressedComponentMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::CompressedElement* Arena::CreateMaybeMessage< ::tensorflow::data::CompressedElement >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::CompressedElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::UncompressedElement* Arena::CreateMaybeMessage< ::tensorflow::data::UncompressedElement >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::UncompressedElement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
