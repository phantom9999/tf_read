// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/data/service/worker.proto

#include "tensorflow/core/data/service/worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CompressedElement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UncompressedElement;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto
namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskDef;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto
namespace tensorflow {
namespace data {
class ProcessTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessTaskRequest>
      _instance;
} _ProcessTaskRequest_default_instance_;
class ProcessTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessTaskResponse>
      _instance;
} _ProcessTaskResponse_default_instance_;
class GetElementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetElementRequest>
      _instance;
  ::google::protobuf::int64 consumer_index_;
  ::google::protobuf::int64 round_index_;
} _GetElementRequest_default_instance_;
class GetElementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetElementResponse>
      _instance;
  const ::tensorflow::data::CompressedElement* compressed_;
  const ::tensorflow::data::UncompressedElement* uncompressed_;
} _GetElementResponse_default_instance_;
class GetWorkerTasksRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWorkerTasksRequest>
      _instance;
} _GetWorkerTasksRequest_default_instance_;
class GetWorkerTasksResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWorkerTasksResponse>
      _instance;
} _GetWorkerTasksResponse_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto {
static void InitDefaultsProcessTaskRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ProcessTaskRequest_default_instance_;
    new (ptr) ::tensorflow::data::ProcessTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ProcessTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProcessTaskRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProcessTaskRequest}, {
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_TaskDef.base,}};

static void InitDefaultsProcessTaskResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ProcessTaskResponse_default_instance_;
    new (ptr) ::tensorflow::data::ProcessTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ProcessTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessTaskResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessTaskResponse}, {}};

static void InitDefaultsGetElementRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_GetElementRequest_default_instance_;
    new (ptr) ::tensorflow::data::GetElementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::GetElementRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetElementRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetElementRequest}, {}};

static void InitDefaultsGetElementResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_GetElementResponse_default_instance_;
    new (ptr) ::tensorflow::data::GetElementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::GetElementResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetElementResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetElementResponse}, {
      &protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_CompressedElement.base,
      &protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::scc_info_UncompressedElement.base,}};

static void InitDefaultsGetWorkerTasksRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_GetWorkerTasksRequest_default_instance_;
    new (ptr) ::tensorflow::data::GetWorkerTasksRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::GetWorkerTasksRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetWorkerTasksRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetWorkerTasksRequest}, {}};

static void InitDefaultsGetWorkerTasksResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_GetWorkerTasksResponse_default_instance_;
    new (ptr) ::tensorflow::data::GetWorkerTasksResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::GetWorkerTasksResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetWorkerTasksResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetWorkerTasksResponse}, {
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_TaskInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessTaskRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessTaskResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetElementRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetElementResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWorkerTasksRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWorkerTasksResponse.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProcessTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProcessTaskRequest, task_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProcessTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, task_id_),
  offsetof(::tensorflow::data::GetElementRequestDefaultTypeInternal, consumer_index_),
  offsetof(::tensorflow::data::GetElementRequestDefaultTypeInternal, round_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, skipped_previous_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, allow_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, trainer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, optional_consumer_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementRequest, optional_round_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::GetElementResponseDefaultTypeInternal, compressed_),
  offsetof(::tensorflow::data::GetElementResponseDefaultTypeInternal, uncompressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementResponse, element_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementResponse, end_of_sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementResponse, skip_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetElementResponse, element_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetWorkerTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetWorkerTasksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GetWorkerTasksResponse, tasks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::ProcessTaskRequest)},
  { 6, -1, sizeof(::tensorflow::data::ProcessTaskResponse)},
  { 11, -1, sizeof(::tensorflow::data::GetElementRequest)},
  { 24, -1, sizeof(::tensorflow::data::GetElementResponse)},
  { 35, -1, sizeof(::tensorflow::data::GetWorkerTasksRequest)},
  { 40, -1, sizeof(::tensorflow::data::GetWorkerTasksResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ProcessTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ProcessTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_GetElementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_GetElementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_GetWorkerTasksRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_GetWorkerTasksResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/data/service/worker.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)tensorflow/core/data/service/worker.pr"
      "oto\022\017tensorflow.data\032\"tensorflow/core/da"
      "ta/dataset.proto\032)tensorflow/core/data/s"
      "ervice/common.proto\"<\n\022ProcessTaskReques"
      "t\022&\n\004task\030\001 \001(\0132\030.tensorflow.data.TaskDe"
      "f\"\025\n\023ProcessTaskResponse\"\320\001\n\021GetElementR"
      "equest\022\017\n\007task_id\030\001 \001(\003\022\030\n\016consumer_inde"
      "x\030\002 \001(\003H\000\022\025\n\013round_index\030\003 \001(\003H\001\022\036\n\026skip"
      "ped_previous_round\030\004 \001(\010\022\022\n\nallow_skip\030\005"
      " \001(\010\022\022\n\ntrainer_id\030\006 \001(\tB\031\n\027optional_con"
      "sumer_indexB\026\n\024optional_round_index\"\332\001\n\022"
      "GetElementResponse\0228\n\ncompressed\030\003 \001(\0132\""
      ".tensorflow.data.CompressedElementH\000\022<\n\014"
      "uncompressed\030\005 \001(\0132$.tensorflow.data.Unc"
      "ompressedElementH\000\022\025\n\relement_index\030\006 \001("
      "\003\022\027\n\017end_of_sequence\030\002 \001(\010\022\021\n\tskip_task\030"
      "\004 \001(\010B\t\n\007element\"\027\n\025GetWorkerTasksReques"
      "t\"B\n\026GetWorkerTasksResponse\022(\n\005tasks\030\001 \003"
      "(\0132\031.tensorflow.data.TaskInfo2\243\002\n\rWorker"
      "Service\022X\n\013ProcessTask\022#.tensorflow.data"
      ".ProcessTaskRequest\032$.tensorflow.data.Pr"
      "ocessTaskResponse\022U\n\nGetElement\022\".tensor"
      "flow.data.GetElementRequest\032#.tensorflow"
      ".data.GetElementResponse\022a\n\016GetWorkerTas"
      "ks\022&.tensorflow.data.GetWorkerTasksReque"
      "st\032\'.tensorflow.data.GetWorkerTasksRespo"
      "nseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1051);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/data/service/worker.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fdata_2fdataset_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto
namespace tensorflow {
namespace data {

// ===================================================================

void ProcessTaskRequest::InitAsDefaultInstance() {
  ::tensorflow::data::_ProcessTaskRequest_default_instance_._instance.get_mutable()->task_ = const_cast< ::tensorflow::data::TaskDef*>(
      ::tensorflow::data::TaskDef::internal_default_instance());
}
void ProcessTaskRequest::clear_task() {
  if (GetArenaNoVirtual() == NULL && task_ != NULL) {
    delete task_;
  }
  task_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessTaskRequest::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessTaskRequest::ProcessTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_ProcessTaskRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ProcessTaskRequest)
}
ProcessTaskRequest::ProcessTaskRequest(const ProcessTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::tensorflow::data::TaskDef(*from.task_);
  } else {
    task_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ProcessTaskRequest)
}

void ProcessTaskRequest::SharedCtor() {
  task_ = NULL;
}

ProcessTaskRequest::~ProcessTaskRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ProcessTaskRequest)
  SharedDtor();
}

void ProcessTaskRequest::SharedDtor() {
  if (this != internal_default_instance()) delete task_;
}

void ProcessTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProcessTaskRequest::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessTaskRequest& ProcessTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_ProcessTaskRequest.base);
  return *internal_default_instance();
}


void ProcessTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ProcessTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && task_ != NULL) {
    delete task_;
  }
  task_ = NULL;
  _internal_metadata_.Clear();
}

bool ProcessTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ProcessTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.TaskDef task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ProcessTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ProcessTaskRequest)
  return false;
#undef DO_
}

void ProcessTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ProcessTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.TaskDef task = 1;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_task(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ProcessTaskRequest)
}

::google::protobuf::uint8* ProcessTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ProcessTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.TaskDef task = 1;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_task(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ProcessTaskRequest)
  return target;
}

size_t ProcessTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ProcessTaskRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.TaskDef task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ProcessTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ProcessTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ProcessTaskRequest)
    MergeFrom(*source);
  }
}

void ProcessTaskRequest::MergeFrom(const ProcessTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ProcessTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::tensorflow::data::TaskDef::MergeFrom(from.task());
  }
}

void ProcessTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ProcessTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTaskRequest::CopyFrom(const ProcessTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ProcessTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTaskRequest::IsInitialized() const {
  return true;
}

void ProcessTaskRequest::Swap(ProcessTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessTaskRequest::InternalSwap(ProcessTaskRequest* other) {
  using std::swap;
  swap(task_, other->task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProcessTaskRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProcessTaskResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessTaskResponse::ProcessTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_ProcessTaskResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ProcessTaskResponse)
}
ProcessTaskResponse::ProcessTaskResponse(const ProcessTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ProcessTaskResponse)
}

void ProcessTaskResponse::SharedCtor() {
}

ProcessTaskResponse::~ProcessTaskResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ProcessTaskResponse)
  SharedDtor();
}

void ProcessTaskResponse::SharedDtor() {
}

void ProcessTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProcessTaskResponse::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessTaskResponse& ProcessTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_ProcessTaskResponse.base);
  return *internal_default_instance();
}


void ProcessTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ProcessTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ProcessTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ProcessTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ProcessTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ProcessTaskResponse)
  return false;
#undef DO_
}

void ProcessTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ProcessTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ProcessTaskResponse)
}

::google::protobuf::uint8* ProcessTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ProcessTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ProcessTaskResponse)
  return target;
}

size_t ProcessTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ProcessTaskResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ProcessTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ProcessTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ProcessTaskResponse)
    MergeFrom(*source);
  }
}

void ProcessTaskResponse::MergeFrom(const ProcessTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ProcessTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ProcessTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTaskResponse::CopyFrom(const ProcessTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ProcessTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTaskResponse::IsInitialized() const {
  return true;
}

void ProcessTaskResponse::Swap(ProcessTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessTaskResponse::InternalSwap(ProcessTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProcessTaskResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetElementRequest::InitAsDefaultInstance() {
  ::tensorflow::data::_GetElementRequest_default_instance_.consumer_index_ = GOOGLE_LONGLONG(0);
  ::tensorflow::data::_GetElementRequest_default_instance_.round_index_ = GOOGLE_LONGLONG(0);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetElementRequest::kTaskIdFieldNumber;
const int GetElementRequest::kConsumerIndexFieldNumber;
const int GetElementRequest::kRoundIndexFieldNumber;
const int GetElementRequest::kSkippedPreviousRoundFieldNumber;
const int GetElementRequest::kAllowSkipFieldNumber;
const int GetElementRequest::kTrainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetElementRequest::GetElementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetElementRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.GetElementRequest)
}
GetElementRequest::GetElementRequest(const GetElementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trainer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trainer_id().size() > 0) {
    trainer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trainer_id_);
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_skip_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(allow_skip_));
  clear_has_optional_consumer_index();
  switch (from.optional_consumer_index_case()) {
    case kConsumerIndex: {
      set_consumer_index(from.consumer_index());
      break;
    }
    case OPTIONAL_CONSUMER_INDEX_NOT_SET: {
      break;
    }
  }
  clear_has_optional_round_index();
  switch (from.optional_round_index_case()) {
    case kRoundIndex: {
      set_round_index(from.round_index());
      break;
    }
    case OPTIONAL_ROUND_INDEX_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.GetElementRequest)
}

void GetElementRequest::SharedCtor() {
  trainer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_skip_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(allow_skip_));
  clear_has_optional_consumer_index();
  clear_has_optional_round_index();
}

GetElementRequest::~GetElementRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.data.GetElementRequest)
  SharedDtor();
}

void GetElementRequest::SharedDtor() {
  trainer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_optional_consumer_index()) {
    clear_optional_consumer_index();
  }
  if (has_optional_round_index()) {
    clear_optional_round_index();
  }
}

void GetElementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetElementRequest::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetElementRequest& GetElementRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetElementRequest.base);
  return *internal_default_instance();
}


void GetElementRequest::clear_optional_consumer_index() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.GetElementRequest)
  switch (optional_consumer_index_case()) {
    case kConsumerIndex: {
      // No need to clear
      break;
    }
    case OPTIONAL_CONSUMER_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_CONSUMER_INDEX_NOT_SET;
}

void GetElementRequest::clear_optional_round_index() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.GetElementRequest)
  switch (optional_round_index_case()) {
    case kRoundIndex: {
      // No need to clear
      break;
    }
    case OPTIONAL_ROUND_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_ROUND_INDEX_NOT_SET;
}


void GetElementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.GetElementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trainer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_skip_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(allow_skip_));
  clear_optional_consumer_index();
  clear_optional_round_index();
  _internal_metadata_.Clear();
}

bool GetElementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.GetElementRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 consumer_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_optional_consumer_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_consumer_index_.consumer_index_)));
          set_has_consumer_index();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 round_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_optional_round_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_round_index_.round_index_)));
          set_has_round_index();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skipped_previous_round = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipped_previous_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_skip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trainer_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trainer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trainer_id().data(), static_cast<int>(this->trainer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.GetElementRequest.trainer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.GetElementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.GetElementRequest)
  return false;
#undef DO_
}

void GetElementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.GetElementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  // int64 consumer_index = 2;
  if (has_consumer_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->consumer_index(), output);
  }

  // int64 round_index = 3;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->round_index(), output);
  }

  // bool skipped_previous_round = 4;
  if (this->skipped_previous_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skipped_previous_round(), output);
  }

  // bool allow_skip = 5;
  if (this->allow_skip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_skip(), output);
  }

  // string trainer_id = 6;
  if (this->trainer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_id().data(), static_cast<int>(this->trainer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.GetElementRequest.trainer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trainer_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.GetElementRequest)
}

::google::protobuf::uint8* GetElementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.GetElementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  // int64 consumer_index = 2;
  if (has_consumer_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->consumer_index(), target);
  }

  // int64 round_index = 3;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->round_index(), target);
  }

  // bool skipped_previous_round = 4;
  if (this->skipped_previous_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skipped_previous_round(), target);
  }

  // bool allow_skip = 5;
  if (this->allow_skip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_skip(), target);
  }

  // string trainer_id = 6;
  if (this->trainer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_id().data(), static_cast<int>(this->trainer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.GetElementRequest.trainer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trainer_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.GetElementRequest)
  return target;
}

size_t GetElementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.GetElementRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string trainer_id = 6;
  if (this->trainer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trainer_id());
  }

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  // bool skipped_previous_round = 4;
  if (this->skipped_previous_round() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_skip = 5;
  if (this->allow_skip() != 0) {
    total_size += 1 + 1;
  }

  switch (optional_consumer_index_case()) {
    // int64 consumer_index = 2;
    case kConsumerIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->consumer_index());
      break;
    }
    case OPTIONAL_CONSUMER_INDEX_NOT_SET: {
      break;
    }
  }
  switch (optional_round_index_case()) {
    // int64 round_index = 3;
    case kRoundIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->round_index());
      break;
    }
    case OPTIONAL_ROUND_INDEX_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetElementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.GetElementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetElementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetElementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.GetElementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.GetElementRequest)
    MergeFrom(*source);
  }
}

void GetElementRequest::MergeFrom(const GetElementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.GetElementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trainer_id().size() > 0) {

    trainer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trainer_id_);
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.skipped_previous_round() != 0) {
    set_skipped_previous_round(from.skipped_previous_round());
  }
  if (from.allow_skip() != 0) {
    set_allow_skip(from.allow_skip());
  }
  switch (from.optional_consumer_index_case()) {
    case kConsumerIndex: {
      set_consumer_index(from.consumer_index());
      break;
    }
    case OPTIONAL_CONSUMER_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.optional_round_index_case()) {
    case kRoundIndex: {
      set_round_index(from.round_index());
      break;
    }
    case OPTIONAL_ROUND_INDEX_NOT_SET: {
      break;
    }
  }
}

void GetElementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.GetElementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetElementRequest::CopyFrom(const GetElementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.GetElementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetElementRequest::IsInitialized() const {
  return true;
}

void GetElementRequest::Swap(GetElementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetElementRequest::InternalSwap(GetElementRequest* other) {
  using std::swap;
  trainer_id_.Swap(&other->trainer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_id_, other->task_id_);
  swap(skipped_previous_round_, other->skipped_previous_round_);
  swap(allow_skip_, other->allow_skip_);
  swap(optional_consumer_index_, other->optional_consumer_index_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_round_index_, other->optional_round_index_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetElementRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetElementResponse::InitAsDefaultInstance() {
  ::tensorflow::data::_GetElementResponse_default_instance_.compressed_ = const_cast< ::tensorflow::data::CompressedElement*>(
      ::tensorflow::data::CompressedElement::internal_default_instance());
  ::tensorflow::data::_GetElementResponse_default_instance_.uncompressed_ = const_cast< ::tensorflow::data::UncompressedElement*>(
      ::tensorflow::data::UncompressedElement::internal_default_instance());
}
void GetElementResponse::set_allocated_compressed(::tensorflow::data::CompressedElement* compressed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_element();
  if (compressed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compressed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compressed, submessage_arena);
    }
    set_has_compressed();
    element_.compressed_ = compressed;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.GetElementResponse.compressed)
}
void GetElementResponse::clear_compressed() {
  if (has_compressed()) {
    delete element_.compressed_;
    clear_has_element();
  }
}
void GetElementResponse::set_allocated_uncompressed(::tensorflow::data::UncompressedElement* uncompressed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_element();
  if (uncompressed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uncompressed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uncompressed, submessage_arena);
    }
    set_has_uncompressed();
    element_.uncompressed_ = uncompressed;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.GetElementResponse.uncompressed)
}
void GetElementResponse::clear_uncompressed() {
  if (has_uncompressed()) {
    delete element_.uncompressed_;
    clear_has_element();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetElementResponse::kCompressedFieldNumber;
const int GetElementResponse::kUncompressedFieldNumber;
const int GetElementResponse::kElementIndexFieldNumber;
const int GetElementResponse::kEndOfSequenceFieldNumber;
const int GetElementResponse::kSkipTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetElementResponse::GetElementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetElementResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.GetElementResponse)
}
GetElementResponse::GetElementResponse(const GetElementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&end_of_sequence_, &from.end_of_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_index_) -
    reinterpret_cast<char*>(&end_of_sequence_)) + sizeof(element_index_));
  clear_has_element();
  switch (from.element_case()) {
    case kCompressed: {
      mutable_compressed()->::tensorflow::data::CompressedElement::MergeFrom(from.compressed());
      break;
    }
    case kUncompressed: {
      mutable_uncompressed()->::tensorflow::data::UncompressedElement::MergeFrom(from.uncompressed());
      break;
    }
    case ELEMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.GetElementResponse)
}

void GetElementResponse::SharedCtor() {
  ::memset(&end_of_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_index_) -
      reinterpret_cast<char*>(&end_of_sequence_)) + sizeof(element_index_));
  clear_has_element();
}

GetElementResponse::~GetElementResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.data.GetElementResponse)
  SharedDtor();
}

void GetElementResponse::SharedDtor() {
  if (has_element()) {
    clear_element();
  }
}

void GetElementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetElementResponse::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetElementResponse& GetElementResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetElementResponse.base);
  return *internal_default_instance();
}


void GetElementResponse::clear_element() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.GetElementResponse)
  switch (element_case()) {
    case kCompressed: {
      delete element_.compressed_;
      break;
    }
    case kUncompressed: {
      delete element_.uncompressed_;
      break;
    }
    case ELEMENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ELEMENT_NOT_SET;
}


void GetElementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.GetElementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&end_of_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_index_) -
      reinterpret_cast<char*>(&end_of_sequence_)) + sizeof(element_index_));
  clear_element();
  _internal_metadata_.Clear();
}

bool GetElementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.GetElementResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool end_of_sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_of_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.CompressedElement compressed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skip_task = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.UncompressedElement uncompressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uncompressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 element_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &element_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.GetElementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.GetElementResponse)
  return false;
#undef DO_
}

void GetElementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.GetElementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool end_of_sequence = 2;
  if (this->end_of_sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end_of_sequence(), output);
  }

  // .tensorflow.data.CompressedElement compressed = 3;
  if (has_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_compressed(), output);
  }

  // bool skip_task = 4;
  if (this->skip_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skip_task(), output);
  }

  // .tensorflow.data.UncompressedElement uncompressed = 5;
  if (has_uncompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_uncompressed(), output);
  }

  // int64 element_index = 6;
  if (this->element_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->element_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.GetElementResponse)
}

::google::protobuf::uint8* GetElementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.GetElementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool end_of_sequence = 2;
  if (this->end_of_sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end_of_sequence(), target);
  }

  // .tensorflow.data.CompressedElement compressed = 3;
  if (has_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_compressed(), deterministic, target);
  }

  // bool skip_task = 4;
  if (this->skip_task() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skip_task(), target);
  }

  // .tensorflow.data.UncompressedElement uncompressed = 5;
  if (has_uncompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_uncompressed(), deterministic, target);
  }

  // int64 element_index = 6;
  if (this->element_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->element_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.GetElementResponse)
  return target;
}

size_t GetElementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.GetElementResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool end_of_sequence = 2;
  if (this->end_of_sequence() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_task = 4;
  if (this->skip_task() != 0) {
    total_size += 1 + 1;
  }

  // int64 element_index = 6;
  if (this->element_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->element_index());
  }

  switch (element_case()) {
    // .tensorflow.data.CompressedElement compressed = 3;
    case kCompressed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *element_.compressed_);
      break;
    }
    // .tensorflow.data.UncompressedElement uncompressed = 5;
    case kUncompressed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *element_.uncompressed_);
      break;
    }
    case ELEMENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetElementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.GetElementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetElementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetElementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.GetElementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.GetElementResponse)
    MergeFrom(*source);
  }
}

void GetElementResponse::MergeFrom(const GetElementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.GetElementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.end_of_sequence() != 0) {
    set_end_of_sequence(from.end_of_sequence());
  }
  if (from.skip_task() != 0) {
    set_skip_task(from.skip_task());
  }
  if (from.element_index() != 0) {
    set_element_index(from.element_index());
  }
  switch (from.element_case()) {
    case kCompressed: {
      mutable_compressed()->::tensorflow::data::CompressedElement::MergeFrom(from.compressed());
      break;
    }
    case kUncompressed: {
      mutable_uncompressed()->::tensorflow::data::UncompressedElement::MergeFrom(from.uncompressed());
      break;
    }
    case ELEMENT_NOT_SET: {
      break;
    }
  }
}

void GetElementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.GetElementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetElementResponse::CopyFrom(const GetElementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.GetElementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetElementResponse::IsInitialized() const {
  return true;
}

void GetElementResponse::Swap(GetElementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetElementResponse::InternalSwap(GetElementResponse* other) {
  using std::swap;
  swap(end_of_sequence_, other->end_of_sequence_);
  swap(skip_task_, other->skip_task_);
  swap(element_index_, other->element_index_);
  swap(element_, other->element_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetElementResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWorkerTasksRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWorkerTasksRequest::GetWorkerTasksRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetWorkerTasksRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.GetWorkerTasksRequest)
}
GetWorkerTasksRequest::GetWorkerTasksRequest(const GetWorkerTasksRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.GetWorkerTasksRequest)
}

void GetWorkerTasksRequest::SharedCtor() {
}

GetWorkerTasksRequest::~GetWorkerTasksRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.data.GetWorkerTasksRequest)
  SharedDtor();
}

void GetWorkerTasksRequest::SharedDtor() {
}

void GetWorkerTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWorkerTasksRequest::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWorkerTasksRequest& GetWorkerTasksRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetWorkerTasksRequest.base);
  return *internal_default_instance();
}


void GetWorkerTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.GetWorkerTasksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetWorkerTasksRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.GetWorkerTasksRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.GetWorkerTasksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.GetWorkerTasksRequest)
  return false;
#undef DO_
}

void GetWorkerTasksRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.GetWorkerTasksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.GetWorkerTasksRequest)
}

::google::protobuf::uint8* GetWorkerTasksRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.GetWorkerTasksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.GetWorkerTasksRequest)
  return target;
}

size_t GetWorkerTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.GetWorkerTasksRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkerTasksRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.GetWorkerTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkerTasksRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWorkerTasksRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.GetWorkerTasksRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.GetWorkerTasksRequest)
    MergeFrom(*source);
  }
}

void GetWorkerTasksRequest::MergeFrom(const GetWorkerTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.GetWorkerTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetWorkerTasksRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.GetWorkerTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkerTasksRequest::CopyFrom(const GetWorkerTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.GetWorkerTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkerTasksRequest::IsInitialized() const {
  return true;
}

void GetWorkerTasksRequest::Swap(GetWorkerTasksRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWorkerTasksRequest::InternalSwap(GetWorkerTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWorkerTasksRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWorkerTasksResponse::InitAsDefaultInstance() {
}
void GetWorkerTasksResponse::clear_tasks() {
  tasks_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWorkerTasksResponse::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWorkerTasksResponse::GetWorkerTasksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetWorkerTasksResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.GetWorkerTasksResponse)
}
GetWorkerTasksResponse::GetWorkerTasksResponse(const GetWorkerTasksResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.GetWorkerTasksResponse)
}

void GetWorkerTasksResponse::SharedCtor() {
}

GetWorkerTasksResponse::~GetWorkerTasksResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.data.GetWorkerTasksResponse)
  SharedDtor();
}

void GetWorkerTasksResponse::SharedDtor() {
}

void GetWorkerTasksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWorkerTasksResponse::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWorkerTasksResponse& GetWorkerTasksResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::scc_info_GetWorkerTasksResponse.base);
  return *internal_default_instance();
}


void GetWorkerTasksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.GetWorkerTasksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _internal_metadata_.Clear();
}

bool GetWorkerTasksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.GetWorkerTasksResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.data.TaskInfo tasks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.GetWorkerTasksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.GetWorkerTasksResponse)
  return false;
#undef DO_
}

void GetWorkerTasksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.GetWorkerTasksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.data.TaskInfo tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tasks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.GetWorkerTasksResponse)
}

::google::protobuf::uint8* GetWorkerTasksResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.GetWorkerTasksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.data.TaskInfo tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.GetWorkerTasksResponse)
  return target;
}

size_t GetWorkerTasksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.GetWorkerTasksResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.data.TaskInfo tasks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkerTasksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.GetWorkerTasksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkerTasksResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWorkerTasksResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.GetWorkerTasksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.GetWorkerTasksResponse)
    MergeFrom(*source);
  }
}

void GetWorkerTasksResponse::MergeFrom(const GetWorkerTasksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.GetWorkerTasksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
}

void GetWorkerTasksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.GetWorkerTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkerTasksResponse::CopyFrom(const GetWorkerTasksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.GetWorkerTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkerTasksResponse::IsInitialized() const {
  return true;
}

void GetWorkerTasksResponse::Swap(GetWorkerTasksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWorkerTasksResponse::InternalSwap(GetWorkerTasksResponse* other) {
  using std::swap;
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWorkerTasksResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ProcessTaskRequest* Arena::CreateMaybeMessage< ::tensorflow::data::ProcessTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ProcessTaskRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ProcessTaskResponse* Arena::CreateMaybeMessage< ::tensorflow::data::ProcessTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ProcessTaskResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::GetElementRequest* Arena::CreateMaybeMessage< ::tensorflow::data::GetElementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::GetElementRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::GetElementResponse* Arena::CreateMaybeMessage< ::tensorflow::data::GetElementResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::GetElementResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::GetWorkerTasksRequest* Arena::CreateMaybeMessage< ::tensorflow::data::GetWorkerTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::GetWorkerTasksRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::GetWorkerTasksResponse* Arena::CreateMaybeMessage< ::tensorflow::data::GetWorkerTasksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::GetWorkerTasksResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
