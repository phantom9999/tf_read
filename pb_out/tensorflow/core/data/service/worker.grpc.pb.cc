// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/data/service/worker.proto

#include "tensorflow/core/data/service/worker.pb.h"
#include "tensorflow/core/data/service/worker.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tensorflow {
namespace data {

static const char* WorkerService_method_names[] = {
  "/tensorflow.data.WorkerService/ProcessTask",
  "/tensorflow.data.WorkerService/GetElement",
  "/tensorflow.data.WorkerService/GetWorkerTasks",
};

std::unique_ptr< WorkerService::Stub> WorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorkerService::Stub> stub(new WorkerService::Stub(channel));
  return stub;
}

WorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ProcessTask_(WorkerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetElement_(WorkerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkerTasks_(WorkerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorkerService::Stub::ProcessTask(::grpc::ClientContext* context, const ::tensorflow::data::ProcessTaskRequest& request, ::tensorflow::data::ProcessTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessTask_, context, request, response);
}

void WorkerService::Stub::experimental_async::ProcessTask(::grpc::ClientContext* context, const ::tensorflow::data::ProcessTaskRequest* request, ::tensorflow::data::ProcessTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessTask_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::ProcessTaskResponse>* WorkerService::Stub::AsyncProcessTaskRaw(::grpc::ClientContext* context, const ::tensorflow::data::ProcessTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::ProcessTaskResponse>::Create(channel_.get(), cq, rpcmethod_ProcessTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::ProcessTaskResponse>* WorkerService::Stub::PrepareAsyncProcessTaskRaw(::grpc::ClientContext* context, const ::tensorflow::data::ProcessTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::ProcessTaskResponse>::Create(channel_.get(), cq, rpcmethod_ProcessTask_, context, request, false);
}

::grpc::Status WorkerService::Stub::GetElement(::grpc::ClientContext* context, const ::tensorflow::data::GetElementRequest& request, ::tensorflow::data::GetElementResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetElement_, context, request, response);
}

void WorkerService::Stub::experimental_async::GetElement(::grpc::ClientContext* context, const ::tensorflow::data::GetElementRequest* request, ::tensorflow::data::GetElementResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetElement_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetElementResponse>* WorkerService::Stub::AsyncGetElementRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetElementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetElementResponse>::Create(channel_.get(), cq, rpcmethod_GetElement_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetElementResponse>* WorkerService::Stub::PrepareAsyncGetElementRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetElementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetElementResponse>::Create(channel_.get(), cq, rpcmethod_GetElement_, context, request, false);
}

::grpc::Status WorkerService::Stub::GetWorkerTasks(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkerTasksRequest& request, ::tensorflow::data::GetWorkerTasksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkerTasks_, context, request, response);
}

void WorkerService::Stub::experimental_async::GetWorkerTasks(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkerTasksRequest* request, ::tensorflow::data::GetWorkerTasksResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkerTasks_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetWorkerTasksResponse>* WorkerService::Stub::AsyncGetWorkerTasksRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkerTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetWorkerTasksResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkerTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetWorkerTasksResponse>* WorkerService::Stub::PrepareAsyncGetWorkerTasksRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkerTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetWorkerTasksResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkerTasks_, context, request, false);
}

WorkerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::data::ProcessTaskRequest, ::tensorflow::data::ProcessTaskResponse>(
          std::mem_fn(&WorkerService::Service::ProcessTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::data::GetElementRequest, ::tensorflow::data::GetElementResponse>(
          std::mem_fn(&WorkerService::Service::GetElement), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::tensorflow::data::GetWorkerTasksRequest, ::tensorflow::data::GetWorkerTasksResponse>(
          std::mem_fn(&WorkerService::Service::GetWorkerTasks), this)));
}

WorkerService::Service::~Service() {
}

::grpc::Status WorkerService::Service::ProcessTask(::grpc::ServerContext* context, const ::tensorflow::data::ProcessTaskRequest* request, ::tensorflow::data::ProcessTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::GetElement(::grpc::ServerContext* context, const ::tensorflow::data::GetElementRequest* request, ::tensorflow::data::GetElementResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::GetWorkerTasks(::grpc::ServerContext* context, const ::tensorflow::data::GetWorkerTasksRequest* request, ::tensorflow::data::GetWorkerTasksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow
}  // namespace data

