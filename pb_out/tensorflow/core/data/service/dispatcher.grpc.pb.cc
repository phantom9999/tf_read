// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/data/service/dispatcher.proto

#include "tensorflow/core/data/service/dispatcher.pb.h"
#include "tensorflow/core/data/service/dispatcher.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tensorflow {
namespace data {

static const char* DispatcherService_method_names[] = {
  "/tensorflow.data.DispatcherService/WorkerHeartbeat",
  "/tensorflow.data.DispatcherService/WorkerUpdate",
  "/tensorflow.data.DispatcherService/GetDatasetDef",
  "/tensorflow.data.DispatcherService/GetSplit",
  "/tensorflow.data.DispatcherService/GetVersion",
  "/tensorflow.data.DispatcherService/GetOrRegisterDataset",
  "/tensorflow.data.DispatcherService/GetOrCreateJob",
  "/tensorflow.data.DispatcherService/MaybeRemoveTask",
  "/tensorflow.data.DispatcherService/ReleaseJobClient",
  "/tensorflow.data.DispatcherService/ClientHeartbeat",
  "/tensorflow.data.DispatcherService/GetWorkers",
  "/tensorflow.data.DispatcherService/GetDataServiceMetadata",
  "/tensorflow.data.DispatcherService/GetDataServiceConfig",
};

std::unique_ptr< DispatcherService::Stub> DispatcherService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DispatcherService::Stub> stub(new DispatcherService::Stub(channel));
  return stub;
}

DispatcherService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_WorkerHeartbeat_(DispatcherService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WorkerUpdate_(DispatcherService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDatasetDef_(DispatcherService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSplit_(DispatcherService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(DispatcherService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrRegisterDataset_(DispatcherService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrCreateJob_(DispatcherService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MaybeRemoveTask_(DispatcherService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReleaseJobClient_(DispatcherService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientHeartbeat_(DispatcherService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkers_(DispatcherService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataServiceMetadata_(DispatcherService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataServiceConfig_(DispatcherService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DispatcherService::Stub::WorkerHeartbeat(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest& request, ::tensorflow::data::WorkerHeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WorkerHeartbeat_, context, request, response);
}

void DispatcherService::Stub::experimental_async::WorkerHeartbeat(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest* request, ::tensorflow::data::WorkerHeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WorkerHeartbeat_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::WorkerHeartbeatResponse>* DispatcherService::Stub::AsyncWorkerHeartbeatRaw(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::WorkerHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_WorkerHeartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::WorkerHeartbeatResponse>* DispatcherService::Stub::PrepareAsyncWorkerHeartbeatRaw(::grpc::ClientContext* context, const ::tensorflow::data::WorkerHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::WorkerHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_WorkerHeartbeat_, context, request, false);
}

::grpc::Status DispatcherService::Stub::WorkerUpdate(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest& request, ::tensorflow::data::WorkerUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WorkerUpdate_, context, request, response);
}

void DispatcherService::Stub::experimental_async::WorkerUpdate(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest* request, ::tensorflow::data::WorkerUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WorkerUpdate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::WorkerUpdateResponse>* DispatcherService::Stub::AsyncWorkerUpdateRaw(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::WorkerUpdateResponse>::Create(channel_.get(), cq, rpcmethod_WorkerUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::WorkerUpdateResponse>* DispatcherService::Stub::PrepareAsyncWorkerUpdateRaw(::grpc::ClientContext* context, const ::tensorflow::data::WorkerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::WorkerUpdateResponse>::Create(channel_.get(), cq, rpcmethod_WorkerUpdate_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetDatasetDef(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest& request, ::tensorflow::data::GetDatasetDefResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDatasetDef_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetDatasetDef(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest* request, ::tensorflow::data::GetDatasetDefResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDatasetDef_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetDatasetDefResponse>* DispatcherService::Stub::AsyncGetDatasetDefRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetDatasetDefResponse>::Create(channel_.get(), cq, rpcmethod_GetDatasetDef_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetDatasetDefResponse>* DispatcherService::Stub::PrepareAsyncGetDatasetDefRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetDatasetDefRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetDatasetDefResponse>::Create(channel_.get(), cq, rpcmethod_GetDatasetDef_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetSplit(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest& request, ::tensorflow::data::GetSplitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSplit_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetSplit(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest* request, ::tensorflow::data::GetSplitResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSplit_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetSplitResponse>* DispatcherService::Stub::AsyncGetSplitRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetSplitResponse>::Create(channel_.get(), cq, rpcmethod_GetSplit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetSplitResponse>* DispatcherService::Stub::PrepareAsyncGetSplitRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetSplitResponse>::Create(channel_.get(), cq, rpcmethod_GetSplit_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetVersion(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest& request, ::tensorflow::data::GetVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest* request, ::tensorflow::data::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetVersionResponse>* DispatcherService::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetVersionResponse>* DispatcherService::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetOrRegisterDataset(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest& request, ::tensorflow::data::GetOrRegisterDatasetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOrRegisterDataset_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetOrRegisterDataset(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest* request, ::tensorflow::data::GetOrRegisterDatasetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrRegisterDataset_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetOrRegisterDatasetResponse>* DispatcherService::Stub::AsyncGetOrRegisterDatasetRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetOrRegisterDatasetResponse>::Create(channel_.get(), cq, rpcmethod_GetOrRegisterDataset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetOrRegisterDatasetResponse>* DispatcherService::Stub::PrepareAsyncGetOrRegisterDatasetRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetOrRegisterDatasetResponse>::Create(channel_.get(), cq, rpcmethod_GetOrRegisterDataset_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetOrCreateJob(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest& request, ::tensorflow::data::GetOrCreateJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOrCreateJob_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetOrCreateJob(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest* request, ::tensorflow::data::GetOrCreateJobResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrCreateJob_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetOrCreateJobResponse>* DispatcherService::Stub::AsyncGetOrCreateJobRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetOrCreateJobResponse>::Create(channel_.get(), cq, rpcmethod_GetOrCreateJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetOrCreateJobResponse>* DispatcherService::Stub::PrepareAsyncGetOrCreateJobRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetOrCreateJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetOrCreateJobResponse>::Create(channel_.get(), cq, rpcmethod_GetOrCreateJob_, context, request, false);
}

::grpc::Status DispatcherService::Stub::MaybeRemoveTask(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest& request, ::tensorflow::data::MaybeRemoveTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MaybeRemoveTask_, context, request, response);
}

void DispatcherService::Stub::experimental_async::MaybeRemoveTask(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest* request, ::tensorflow::data::MaybeRemoveTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MaybeRemoveTask_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::MaybeRemoveTaskResponse>* DispatcherService::Stub::AsyncMaybeRemoveTaskRaw(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::MaybeRemoveTaskResponse>::Create(channel_.get(), cq, rpcmethod_MaybeRemoveTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::MaybeRemoveTaskResponse>* DispatcherService::Stub::PrepareAsyncMaybeRemoveTaskRaw(::grpc::ClientContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::MaybeRemoveTaskResponse>::Create(channel_.get(), cq, rpcmethod_MaybeRemoveTask_, context, request, false);
}

::grpc::Status DispatcherService::Stub::ReleaseJobClient(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest& request, ::tensorflow::data::ReleaseJobClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReleaseJobClient_, context, request, response);
}

void DispatcherService::Stub::experimental_async::ReleaseJobClient(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest* request, ::tensorflow::data::ReleaseJobClientResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReleaseJobClient_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::ReleaseJobClientResponse>* DispatcherService::Stub::AsyncReleaseJobClientRaw(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::ReleaseJobClientResponse>::Create(channel_.get(), cq, rpcmethod_ReleaseJobClient_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::ReleaseJobClientResponse>* DispatcherService::Stub::PrepareAsyncReleaseJobClientRaw(::grpc::ClientContext* context, const ::tensorflow::data::ReleaseJobClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::ReleaseJobClientResponse>::Create(channel_.get(), cq, rpcmethod_ReleaseJobClient_, context, request, false);
}

::grpc::Status DispatcherService::Stub::ClientHeartbeat(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest& request, ::tensorflow::data::ClientHeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientHeartbeat_, context, request, response);
}

void DispatcherService::Stub::experimental_async::ClientHeartbeat(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest* request, ::tensorflow::data::ClientHeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClientHeartbeat_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::ClientHeartbeatResponse>* DispatcherService::Stub::AsyncClientHeartbeatRaw(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::ClientHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_ClientHeartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::ClientHeartbeatResponse>* DispatcherService::Stub::PrepareAsyncClientHeartbeatRaw(::grpc::ClientContext* context, const ::tensorflow::data::ClientHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::ClientHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_ClientHeartbeat_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetWorkers(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest& request, ::tensorflow::data::GetWorkersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkers_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetWorkers(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest* request, ::tensorflow::data::GetWorkersResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetWorkersResponse>* DispatcherService::Stub::AsyncGetWorkersRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetWorkersResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetWorkersResponse>* DispatcherService::Stub::PrepareAsyncGetWorkersRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetWorkersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetWorkersResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkers_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetDataServiceMetadata(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest& request, ::tensorflow::data::GetDataServiceMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDataServiceMetadata_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetDataServiceMetadata(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest* request, ::tensorflow::data::GetDataServiceMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDataServiceMetadata_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetDataServiceMetadataResponse>* DispatcherService::Stub::AsyncGetDataServiceMetadataRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetDataServiceMetadataResponse>::Create(channel_.get(), cq, rpcmethod_GetDataServiceMetadata_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetDataServiceMetadataResponse>* DispatcherService::Stub::PrepareAsyncGetDataServiceMetadataRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetDataServiceMetadataResponse>::Create(channel_.get(), cq, rpcmethod_GetDataServiceMetadata_, context, request, false);
}

::grpc::Status DispatcherService::Stub::GetDataServiceConfig(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceConfigRequest& request, ::tensorflow::data::GetDataServiceConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDataServiceConfig_, context, request, response);
}

void DispatcherService::Stub::experimental_async::GetDataServiceConfig(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceConfigRequest* request, ::tensorflow::data::GetDataServiceConfigResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDataServiceConfig_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetDataServiceConfigResponse>* DispatcherService::Stub::AsyncGetDataServiceConfigRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetDataServiceConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetDataServiceConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::data::GetDataServiceConfigResponse>* DispatcherService::Stub::PrepareAsyncGetDataServiceConfigRaw(::grpc::ClientContext* context, const ::tensorflow::data::GetDataServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::data::GetDataServiceConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetDataServiceConfig_, context, request, false);
}

DispatcherService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::WorkerHeartbeatRequest, ::tensorflow::data::WorkerHeartbeatResponse>(
          std::mem_fn(&DispatcherService::Service::WorkerHeartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::WorkerUpdateRequest, ::tensorflow::data::WorkerUpdateResponse>(
          std::mem_fn(&DispatcherService::Service::WorkerUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetDatasetDefRequest, ::tensorflow::data::GetDatasetDefResponse>(
          std::mem_fn(&DispatcherService::Service::GetDatasetDef), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetSplitRequest, ::tensorflow::data::GetSplitResponse>(
          std::mem_fn(&DispatcherService::Service::GetSplit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetVersionRequest, ::tensorflow::data::GetVersionResponse>(
          std::mem_fn(&DispatcherService::Service::GetVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetOrRegisterDatasetRequest, ::tensorflow::data::GetOrRegisterDatasetResponse>(
          std::mem_fn(&DispatcherService::Service::GetOrRegisterDataset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetOrCreateJobRequest, ::tensorflow::data::GetOrCreateJobResponse>(
          std::mem_fn(&DispatcherService::Service::GetOrCreateJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::MaybeRemoveTaskRequest, ::tensorflow::data::MaybeRemoveTaskResponse>(
          std::mem_fn(&DispatcherService::Service::MaybeRemoveTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::ReleaseJobClientRequest, ::tensorflow::data::ReleaseJobClientResponse>(
          std::mem_fn(&DispatcherService::Service::ReleaseJobClient), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::ClientHeartbeatRequest, ::tensorflow::data::ClientHeartbeatResponse>(
          std::mem_fn(&DispatcherService::Service::ClientHeartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetWorkersRequest, ::tensorflow::data::GetWorkersResponse>(
          std::mem_fn(&DispatcherService::Service::GetWorkers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetDataServiceMetadataRequest, ::tensorflow::data::GetDataServiceMetadataResponse>(
          std::mem_fn(&DispatcherService::Service::GetDataServiceMetadata), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DispatcherService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DispatcherService::Service, ::tensorflow::data::GetDataServiceConfigRequest, ::tensorflow::data::GetDataServiceConfigResponse>(
          std::mem_fn(&DispatcherService::Service::GetDataServiceConfig), this)));
}

DispatcherService::Service::~Service() {
}

::grpc::Status DispatcherService::Service::WorkerHeartbeat(::grpc::ServerContext* context, const ::tensorflow::data::WorkerHeartbeatRequest* request, ::tensorflow::data::WorkerHeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::WorkerUpdate(::grpc::ServerContext* context, const ::tensorflow::data::WorkerUpdateRequest* request, ::tensorflow::data::WorkerUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetDatasetDef(::grpc::ServerContext* context, const ::tensorflow::data::GetDatasetDefRequest* request, ::tensorflow::data::GetDatasetDefResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetSplit(::grpc::ServerContext* context, const ::tensorflow::data::GetSplitRequest* request, ::tensorflow::data::GetSplitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetVersion(::grpc::ServerContext* context, const ::tensorflow::data::GetVersionRequest* request, ::tensorflow::data::GetVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetOrRegisterDataset(::grpc::ServerContext* context, const ::tensorflow::data::GetOrRegisterDatasetRequest* request, ::tensorflow::data::GetOrRegisterDatasetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetOrCreateJob(::grpc::ServerContext* context, const ::tensorflow::data::GetOrCreateJobRequest* request, ::tensorflow::data::GetOrCreateJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::MaybeRemoveTask(::grpc::ServerContext* context, const ::tensorflow::data::MaybeRemoveTaskRequest* request, ::tensorflow::data::MaybeRemoveTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::ReleaseJobClient(::grpc::ServerContext* context, const ::tensorflow::data::ReleaseJobClientRequest* request, ::tensorflow::data::ReleaseJobClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::ClientHeartbeat(::grpc::ServerContext* context, const ::tensorflow::data::ClientHeartbeatRequest* request, ::tensorflow::data::ClientHeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetWorkers(::grpc::ServerContext* context, const ::tensorflow::data::GetWorkersRequest* request, ::tensorflow::data::GetWorkersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetDataServiceMetadata(::grpc::ServerContext* context, const ::tensorflow::data::GetDataServiceMetadataRequest* request, ::tensorflow::data::GetDataServiceMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DispatcherService::Service::GetDataServiceConfig(::grpc::ServerContext* context, const ::tensorflow::data::GetDataServiceConfigRequest* request, ::tensorflow::data::GetDataServiceConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow
}  // namespace data

