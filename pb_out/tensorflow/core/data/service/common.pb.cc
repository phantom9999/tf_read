// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/data/service/common.proto

#include "tensorflow/core/data/service/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DatasetDef;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto
namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GraphDef;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto
namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProcessingModeDef;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto
namespace tensorflow {
namespace data {
class DatasetDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatasetDef>
      _instance;
} _DatasetDef_default_instance_;
class JobKeyDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobKeyDef>
      _instance;
} _JobKeyDef_default_instance_;
class TaskDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskDef>
      _instance;
  const ::tensorflow::data::DatasetDef* dataset_def_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int64 num_consumers_;
} _TaskDef_default_instance_;
class TaskInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskInfo>
      _instance;
} _TaskInfo_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto {
static void InitDefaultsDatasetDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_DatasetDef_default_instance_;
    new (ptr) ::tensorflow::data::DatasetDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::DatasetDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DatasetDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDatasetDef}, {
      &protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::scc_info_GraphDef.base,}};

static void InitDefaultsJobKeyDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_JobKeyDef_default_instance_;
    new (ptr) ::tensorflow::data::JobKeyDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::JobKeyDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JobKeyDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJobKeyDef}, {}};

static void InitDefaultsTaskDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_TaskDef_default_instance_;
    new (ptr) ::tensorflow::data::TaskDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::TaskDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskDef}, {
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_DatasetDef.base,
      &protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_ProcessingModeDef.base,}};

static void InitDefaultsTaskInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_TaskInfo_default_instance_;
    new (ptr) ::tensorflow::data::TaskInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::TaskInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DatasetDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobKeyDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskInfo.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DatasetDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DatasetDef, graph_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::JobKeyDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::JobKeyDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::JobKeyDef, iteration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::TaskDefDefaultTypeInternal, dataset_def_),
  offsetof(::tensorflow::data::TaskDefDefaultTypeInternal, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, num_split_providers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, worker_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, processing_mode_def_),
  offsetof(::tensorflow::data::TaskDefDefaultTypeInternal, num_consumers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, num_workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, worker_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, dataset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskDef, optional_num_consumers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, worker_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, transfer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, worker_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, worker_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskInfo, starting_round_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::DatasetDef)},
  { 6, -1, sizeof(::tensorflow::data::JobKeyDef)},
  { 13, -1, sizeof(::tensorflow::data::TaskDef)},
  { 31, -1, sizeof(::tensorflow::data::TaskInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_DatasetDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_JobKeyDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_TaskDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_TaskInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/data/service/common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)tensorflow/core/data/service/common.pr"
      "oto\022\017tensorflow.data\032%tensorflow/core/fr"
      "amework/graph.proto\032+tensorflow/core/pro"
      "tobuf/data_service.proto\"1\n\nDatasetDef\022#"
      "\n\005graph\030\001 \001(\0132\024.tensorflow.GraphDef\",\n\tJ"
      "obKeyDef\022\014\n\004name\030\001 \001(\t\022\021\n\titeration\030\002 \001("
      "\003\"\347\002\n\007TaskDef\0222\n\013dataset_def\030\001 \001(\0132\033.ten"
      "sorflow.data.DatasetDefH\000\022\016\n\004path\030\002 \001(\tH"
      "\000\022\022\n\ndataset_id\030\003 \001(\003\022\017\n\007task_id\030\004 \001(\003\022\016"
      "\n\006job_id\030\005 \001(\003\022\033\n\023num_split_providers\030\t "
      "\001(\003\022\026\n\016worker_address\030\010 \001(\t\022\?\n\023processin"
      "g_mode_def\030\n \001(\0132\".tensorflow.data.Proce"
      "ssingModeDef\022\027\n\rnum_consumers\030\007 \001(\003H\001\022\023\n"
      "\013num_workers\030\013 \001(\003\022\024\n\014worker_index\030\014 \001(\003"
      "B\t\n\007datasetB\030\n\026optional_num_consumersJ\004\010"
      "\006\020\007\"\236\001\n\010TaskInfo\022\026\n\016worker_address\030\001 \001(\t"
      "\022\030\n\020transfer_address\030\004 \001(\t\022\023\n\013worker_tag"
      "s\030\006 \003(\t\022\017\n\007task_id\030\002 \001(\003\022\016\n\006job_id\030\003 \001(\003"
      "\022\022\n\nworker_uid\030\007 \001(\003\022\026\n\016starting_round\030\005"
      " \001(\003*z\n\rTargetWorkers\022\036\n\032TARGET_WORKERS_"
      "UNSPECIFIED\020\000\022\027\n\023TARGET_WORKERS_AUTO\020\001\022\026"
      "\n\022TARGET_WORKERS_ANY\020\002\022\030\n\024TARGET_WORKERS"
      "_LOCAL\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 896);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/data/service/common.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto
namespace tensorflow {
namespace data {
const ::google::protobuf::EnumDescriptor* TargetWorkers_descriptor() {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_enum_descriptors[0];
}
bool TargetWorkers_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DatasetDef::InitAsDefaultInstance() {
  ::tensorflow::data::_DatasetDef_default_instance_._instance.get_mutable()->graph_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
}
void DatasetDef::clear_graph() {
  if (GetArenaNoVirtual() == NULL && graph_ != NULL) {
    delete graph_;
  }
  graph_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetDef::kGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetDef::DatasetDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_DatasetDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.DatasetDef)
}
DatasetDef::DatasetDef(const DatasetDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_graph()) {
    graph_ = new ::tensorflow::GraphDef(*from.graph_);
  } else {
    graph_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DatasetDef)
}

void DatasetDef::SharedCtor() {
  graph_ = NULL;
}

DatasetDef::~DatasetDef() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DatasetDef)
  SharedDtor();
}

void DatasetDef::SharedDtor() {
  if (this != internal_default_instance()) delete graph_;
}

void DatasetDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DatasetDef::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetDef& DatasetDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_DatasetDef.base);
  return *internal_default_instance();
}


void DatasetDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DatasetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && graph_ != NULL) {
    delete graph_;
  }
  graph_ = NULL;
  _internal_metadata_.Clear();
}

bool DatasetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.DatasetDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.GraphDef graph = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.DatasetDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.DatasetDef)
  return false;
#undef DO_
}

void DatasetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.DatasetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.GraphDef graph = 1;
  if (this->has_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_graph(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.DatasetDef)
}

::google::protobuf::uint8* DatasetDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DatasetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.GraphDef graph = 1;
  if (this->has_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_graph(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DatasetDef)
  return target;
}

size_t DatasetDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DatasetDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.GraphDef graph = 1;
  if (this->has_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.DatasetDef)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.DatasetDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.DatasetDef)
    MergeFrom(*source);
  }
}

void DatasetDef::MergeFrom(const DatasetDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DatasetDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graph()) {
    mutable_graph()->::tensorflow::GraphDef::MergeFrom(from.graph());
  }
}

void DatasetDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.DatasetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetDef::CopyFrom(const DatasetDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DatasetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetDef::IsInitialized() const {
  return true;
}

void DatasetDef::Swap(DatasetDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetDef::InternalSwap(DatasetDef* other) {
  using std::swap;
  swap(graph_, other->graph_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DatasetDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JobKeyDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobKeyDef::kNameFieldNumber;
const int JobKeyDef::kIterationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobKeyDef::JobKeyDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_JobKeyDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.JobKeyDef)
}
JobKeyDef::JobKeyDef(const JobKeyDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  iteration_ = from.iteration_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.JobKeyDef)
}

void JobKeyDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iteration_ = GOOGLE_LONGLONG(0);
}

JobKeyDef::~JobKeyDef() {
  // @@protoc_insertion_point(destructor:tensorflow.data.JobKeyDef)
  SharedDtor();
}

void JobKeyDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobKeyDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JobKeyDef::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobKeyDef& JobKeyDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_JobKeyDef.base);
  return *internal_default_instance();
}


void JobKeyDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.JobKeyDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iteration_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool JobKeyDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.JobKeyDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.JobKeyDef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 iteration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.JobKeyDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.JobKeyDef)
  return false;
#undef DO_
}

void JobKeyDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.JobKeyDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.JobKeyDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 iteration = 2;
  if (this->iteration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iteration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.JobKeyDef)
}

::google::protobuf::uint8* JobKeyDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.JobKeyDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.JobKeyDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 iteration = 2;
  if (this->iteration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iteration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.JobKeyDef)
  return target;
}

size_t JobKeyDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.JobKeyDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 iteration = 2;
  if (this->iteration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->iteration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobKeyDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.JobKeyDef)
  GOOGLE_DCHECK_NE(&from, this);
  const JobKeyDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobKeyDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.JobKeyDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.JobKeyDef)
    MergeFrom(*source);
  }
}

void JobKeyDef::MergeFrom(const JobKeyDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.JobKeyDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.iteration() != 0) {
    set_iteration(from.iteration());
  }
}

void JobKeyDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.JobKeyDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobKeyDef::CopyFrom(const JobKeyDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.JobKeyDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobKeyDef::IsInitialized() const {
  return true;
}

void JobKeyDef::Swap(JobKeyDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobKeyDef::InternalSwap(JobKeyDef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iteration_, other->iteration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JobKeyDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskDef::InitAsDefaultInstance() {
  ::tensorflow::data::_TaskDef_default_instance_.dataset_def_ = const_cast< ::tensorflow::data::DatasetDef*>(
      ::tensorflow::data::DatasetDef::internal_default_instance());
  ::tensorflow::data::_TaskDef_default_instance_.path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::data::_TaskDef_default_instance_._instance.get_mutable()->processing_mode_def_ = const_cast< ::tensorflow::data::ProcessingModeDef*>(
      ::tensorflow::data::ProcessingModeDef::internal_default_instance());
  ::tensorflow::data::_TaskDef_default_instance_.num_consumers_ = GOOGLE_LONGLONG(0);
}
void TaskDef::set_allocated_dataset_def(::tensorflow::data::DatasetDef* dataset_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dataset();
  if (dataset_def) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dataset_def = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dataset_def, submessage_arena);
    }
    set_has_dataset_def();
    dataset_.dataset_def_ = dataset_def;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.TaskDef.dataset_def)
}
void TaskDef::clear_processing_mode_def() {
  if (GetArenaNoVirtual() == NULL && processing_mode_def_ != NULL) {
    delete processing_mode_def_;
  }
  processing_mode_def_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskDef::kDatasetDefFieldNumber;
const int TaskDef::kPathFieldNumber;
const int TaskDef::kDatasetIdFieldNumber;
const int TaskDef::kTaskIdFieldNumber;
const int TaskDef::kJobIdFieldNumber;
const int TaskDef::kNumSplitProvidersFieldNumber;
const int TaskDef::kWorkerAddressFieldNumber;
const int TaskDef::kProcessingModeDefFieldNumber;
const int TaskDef::kNumConsumersFieldNumber;
const int TaskDef::kNumWorkersFieldNumber;
const int TaskDef::kWorkerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskDef::TaskDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_TaskDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.TaskDef)
}
TaskDef::TaskDef(const TaskDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_address().size() > 0) {
    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.has_processing_mode_def()) {
    processing_mode_def_ = new ::tensorflow::data::ProcessingModeDef(*from.processing_mode_def_);
  } else {
    processing_mode_def_ = NULL;
  }
  ::memcpy(&dataset_id_, &from.dataset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&worker_index_) -
    reinterpret_cast<char*>(&dataset_id_)) + sizeof(worker_index_));
  clear_has_dataset();
  switch (from.dataset_case()) {
    case kDatasetDef: {
      mutable_dataset_def()->::tensorflow::data::DatasetDef::MergeFrom(from.dataset_def());
      break;
    }
    case kPath: {
      set_path(from.path());
      break;
    }
    case DATASET_NOT_SET: {
      break;
    }
  }
  clear_has_optional_num_consumers();
  switch (from.optional_num_consumers_case()) {
    case kNumConsumers: {
      set_num_consumers(from.num_consumers());
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.TaskDef)
}

void TaskDef::SharedCtor() {
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&processing_mode_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_index_) -
      reinterpret_cast<char*>(&processing_mode_def_)) + sizeof(worker_index_));
  clear_has_dataset();
  clear_has_optional_num_consumers();
}

TaskDef::~TaskDef() {
  // @@protoc_insertion_point(destructor:tensorflow.data.TaskDef)
  SharedDtor();
}

void TaskDef::SharedDtor() {
  worker_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete processing_mode_def_;
  if (has_dataset()) {
    clear_dataset();
  }
  if (has_optional_num_consumers()) {
    clear_optional_num_consumers();
  }
}

void TaskDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskDef::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskDef& TaskDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_TaskDef.base);
  return *internal_default_instance();
}


void TaskDef::clear_dataset() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.TaskDef)
  switch (dataset_case()) {
    case kDatasetDef: {
      delete dataset_.dataset_def_;
      break;
    }
    case kPath: {
      dataset_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATASET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATASET_NOT_SET;
}

void TaskDef::clear_optional_num_consumers() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.TaskDef)
  switch (optional_num_consumers_case()) {
    case kNumConsumers: {
      // No need to clear
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_NUM_CONSUMERS_NOT_SET;
}


void TaskDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.TaskDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && processing_mode_def_ != NULL) {
    delete processing_mode_def_;
  }
  processing_mode_def_ = NULL;
  ::memset(&dataset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_index_) -
      reinterpret_cast<char*>(&dataset_id_)) + sizeof(worker_index_));
  clear_dataset();
  clear_optional_num_consumers();
  _internal_metadata_.Clear();
}

bool TaskDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.TaskDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.DatasetDef dataset_def = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.TaskDef.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dataset_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dataset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 task_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_consumers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          clear_optional_num_consumers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_num_consumers_.num_consumers_)));
          set_has_num_consumers();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string worker_address = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_address().data(), static_cast<int>(this->worker_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.TaskDef.worker_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_split_providers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_split_providers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ProcessingModeDef processing_mode_def = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_mode_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_workers = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 worker_index = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worker_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.TaskDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.TaskDef)
  return false;
#undef DO_
}

void TaskDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.TaskDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.DatasetDef dataset_def = 1;
  if (has_dataset_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_dataset_def(), output);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskDef.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // int64 dataset_id = 3;
  if (this->dataset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dataset_id(), output);
  }

  // int64 task_id = 4;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->task_id(), output);
  }

  // int64 job_id = 5;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->job_id(), output);
  }

  // int64 num_consumers = 7;
  if (has_num_consumers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->num_consumers(), output);
  }

  // string worker_address = 8;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskDef.worker_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->worker_address(), output);
  }

  // int64 num_split_providers = 9;
  if (this->num_split_providers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->num_split_providers(), output);
  }

  // .tensorflow.data.ProcessingModeDef processing_mode_def = 10;
  if (this->has_processing_mode_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_processing_mode_def(), output);
  }

  // int64 num_workers = 11;
  if (this->num_workers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->num_workers(), output);
  }

  // int64 worker_index = 12;
  if (this->worker_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->worker_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.TaskDef)
}

::google::protobuf::uint8* TaskDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.TaskDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.DatasetDef dataset_def = 1;
  if (has_dataset_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_dataset_def(), deterministic, target);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskDef.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // int64 dataset_id = 3;
  if (this->dataset_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dataset_id(), target);
  }

  // int64 task_id = 4;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->task_id(), target);
  }

  // int64 job_id = 5;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->job_id(), target);
  }

  // int64 num_consumers = 7;
  if (has_num_consumers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->num_consumers(), target);
  }

  // string worker_address = 8;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskDef.worker_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->worker_address(), target);
  }

  // int64 num_split_providers = 9;
  if (this->num_split_providers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->num_split_providers(), target);
  }

  // .tensorflow.data.ProcessingModeDef processing_mode_def = 10;
  if (this->has_processing_mode_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_processing_mode_def(), deterministic, target);
  }

  // int64 num_workers = 11;
  if (this->num_workers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->num_workers(), target);
  }

  // int64 worker_index = 12;
  if (this->worker_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->worker_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.TaskDef)
  return target;
}

size_t TaskDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.TaskDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string worker_address = 8;
  if (this->worker_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_address());
  }

  // .tensorflow.data.ProcessingModeDef processing_mode_def = 10;
  if (this->has_processing_mode_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *processing_mode_def_);
  }

  // int64 dataset_id = 3;
  if (this->dataset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dataset_id());
  }

  // int64 task_id = 4;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  // int64 job_id = 5;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 num_split_providers = 9;
  if (this->num_split_providers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_split_providers());
  }

  // int64 num_workers = 11;
  if (this->num_workers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_workers());
  }

  // int64 worker_index = 12;
  if (this->worker_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worker_index());
  }

  switch (dataset_case()) {
    // .tensorflow.data.DatasetDef dataset_def = 1;
    case kDatasetDef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dataset_.dataset_def_);
      break;
    }
    // string path = 2;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
      break;
    }
    case DATASET_NOT_SET: {
      break;
    }
  }
  switch (optional_num_consumers_case()) {
    // int64 num_consumers = 7;
    case kNumConsumers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_consumers());
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.TaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.TaskDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.TaskDef)
    MergeFrom(*source);
  }
}

void TaskDef::MergeFrom(const TaskDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.TaskDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worker_address().size() > 0) {

    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.has_processing_mode_def()) {
    mutable_processing_mode_def()->::tensorflow::data::ProcessingModeDef::MergeFrom(from.processing_mode_def());
  }
  if (from.dataset_id() != 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.num_split_providers() != 0) {
    set_num_split_providers(from.num_split_providers());
  }
  if (from.num_workers() != 0) {
    set_num_workers(from.num_workers());
  }
  if (from.worker_index() != 0) {
    set_worker_index(from.worker_index());
  }
  switch (from.dataset_case()) {
    case kDatasetDef: {
      mutable_dataset_def()->::tensorflow::data::DatasetDef::MergeFrom(from.dataset_def());
      break;
    }
    case kPath: {
      set_path(from.path());
      break;
    }
    case DATASET_NOT_SET: {
      break;
    }
  }
  switch (from.optional_num_consumers_case()) {
    case kNumConsumers: {
      set_num_consumers(from.num_consumers());
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
}

void TaskDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.TaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDef::CopyFrom(const TaskDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.TaskDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDef::IsInitialized() const {
  return true;
}

void TaskDef::Swap(TaskDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskDef::InternalSwap(TaskDef* other) {
  using std::swap;
  worker_address_.Swap(&other->worker_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(processing_mode_def_, other->processing_mode_def_);
  swap(dataset_id_, other->dataset_id_);
  swap(task_id_, other->task_id_);
  swap(job_id_, other->job_id_);
  swap(num_split_providers_, other->num_split_providers_);
  swap(num_workers_, other->num_workers_);
  swap(worker_index_, other->worker_index_);
  swap(dataset_, other->dataset_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_num_consumers_, other->optional_num_consumers_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfo::kWorkerAddressFieldNumber;
const int TaskInfo::kTransferAddressFieldNumber;
const int TaskInfo::kWorkerTagsFieldNumber;
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kJobIdFieldNumber;
const int TaskInfo::kWorkerUidFieldNumber;
const int TaskInfo::kStartingRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfo::TaskInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_TaskInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      worker_tags_(from.worker_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_address().size() > 0) {
    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transfer_address().size() > 0) {
    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&worker_uid_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.TaskInfo)
}

void TaskInfo::SharedCtor() {
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_uid_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.data.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  worker_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskInfo& TaskInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_TaskInfo.base);
  return *internal_default_instance();
}


void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_tags_.Clear();
  worker_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_uid_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
  _internal_metadata_.Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.TaskInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string worker_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_address().data(), static_cast<int>(this->worker_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.TaskInfo.worker_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 task_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transfer_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.TaskInfo.transfer_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 starting_round = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starting_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string worker_tags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worker_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_tags(this->worker_tags_size() - 1).data(),
            static_cast<int>(this->worker_tags(this->worker_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.TaskInfo.worker_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 worker_uid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worker_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.TaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.TaskInfo)
  return false;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_address = 1;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskInfo.worker_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->worker_address(), output);
  }

  // int64 task_id = 2;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->task_id(), output);
  }

  // int64 job_id = 3;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->job_id(), output);
  }

  // string transfer_address = 4;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskInfo.transfer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->transfer_address(), output);
  }

  // int64 starting_round = 5;
  if (this->starting_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starting_round(), output);
  }

  // repeated string worker_tags = 6;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskInfo.worker_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->worker_tags(i), output);
  }

  // int64 worker_uid = 7;
  if (this->worker_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->worker_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.TaskInfo)
}

::google::protobuf::uint8* TaskInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_address = 1;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskInfo.worker_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->worker_address(), target);
  }

  // int64 task_id = 2;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->task_id(), target);
  }

  // int64 job_id = 3;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->job_id(), target);
  }

  // string transfer_address = 4;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskInfo.transfer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->transfer_address(), target);
  }

  // int64 starting_round = 5;
  if (this->starting_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->starting_round(), target);
  }

  // repeated string worker_tags = 6;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.TaskInfo.worker_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->worker_tags(i), target);
  }

  // int64 worker_uid = 7;
  if (this->worker_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->worker_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.TaskInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string worker_tags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->worker_tags_size());
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worker_tags(i));
  }

  // string worker_address = 1;
  if (this->worker_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_address());
  }

  // string transfer_address = 4;
  if (this->transfer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transfer_address());
  }

  // int64 task_id = 2;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  // int64 job_id = 3;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 starting_round = 5;
  if (this->starting_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starting_round());
  }

  // int64 worker_uid = 7;
  if (this->worker_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worker_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.TaskInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.TaskInfo)
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_tags_.MergeFrom(from.worker_tags_);
  if (from.worker_address().size() > 0) {

    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.transfer_address().size() > 0) {

    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.starting_round() != 0) {
    set_starting_round(from.starting_round());
  }
  if (from.worker_uid() != 0) {
    set_worker_uid(from.worker_uid());
  }
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  worker_tags_.InternalSwap(CastToBase(&other->worker_tags_));
  worker_address_.Swap(&other->worker_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transfer_address_.Swap(&other->transfer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_id_, other->task_id_);
  swap(job_id_, other->job_id_);
  swap(starting_round_, other->starting_round_);
  swap(worker_uid_, other->worker_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::DatasetDef* Arena::CreateMaybeMessage< ::tensorflow::data::DatasetDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::DatasetDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::JobKeyDef* Arena::CreateMaybeMessage< ::tensorflow::data::JobKeyDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::JobKeyDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::TaskDef* Arena::CreateMaybeMessage< ::tensorflow::data::TaskDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::TaskDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::TaskInfo* Arena::CreateMaybeMessage< ::tensorflow::data::TaskInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::TaskInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
