// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/data/service/worker.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/data/dataset.pb.h"
#include "tensorflow/core/data/service/common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto 

namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto
namespace tensorflow {
namespace data {
class GetElementRequest;
class GetElementRequestDefaultTypeInternal;
extern GetElementRequestDefaultTypeInternal _GetElementRequest_default_instance_;
class GetElementResponse;
class GetElementResponseDefaultTypeInternal;
extern GetElementResponseDefaultTypeInternal _GetElementResponse_default_instance_;
class GetWorkerTasksRequest;
class GetWorkerTasksRequestDefaultTypeInternal;
extern GetWorkerTasksRequestDefaultTypeInternal _GetWorkerTasksRequest_default_instance_;
class GetWorkerTasksResponse;
class GetWorkerTasksResponseDefaultTypeInternal;
extern GetWorkerTasksResponseDefaultTypeInternal _GetWorkerTasksResponse_default_instance_;
class ProcessTaskRequest;
class ProcessTaskRequestDefaultTypeInternal;
extern ProcessTaskRequestDefaultTypeInternal _ProcessTaskRequest_default_instance_;
class ProcessTaskResponse;
class ProcessTaskResponseDefaultTypeInternal;
extern ProcessTaskResponseDefaultTypeInternal _ProcessTaskResponse_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::data::GetElementRequest* Arena::CreateMaybeMessage<::tensorflow::data::GetElementRequest>(Arena*);
template<> ::tensorflow::data::GetElementResponse* Arena::CreateMaybeMessage<::tensorflow::data::GetElementResponse>(Arena*);
template<> ::tensorflow::data::GetWorkerTasksRequest* Arena::CreateMaybeMessage<::tensorflow::data::GetWorkerTasksRequest>(Arena*);
template<> ::tensorflow::data::GetWorkerTasksResponse* Arena::CreateMaybeMessage<::tensorflow::data::GetWorkerTasksResponse>(Arena*);
template<> ::tensorflow::data::ProcessTaskRequest* Arena::CreateMaybeMessage<::tensorflow::data::ProcessTaskRequest>(Arena*);
template<> ::tensorflow::data::ProcessTaskResponse* Arena::CreateMaybeMessage<::tensorflow::data::ProcessTaskResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace data {

// ===================================================================

class ProcessTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.ProcessTaskRequest) */ {
 public:
  ProcessTaskRequest();
  virtual ~ProcessTaskRequest();

  ProcessTaskRequest(const ProcessTaskRequest& from);

  inline ProcessTaskRequest& operator=(const ProcessTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessTaskRequest(ProcessTaskRequest&& from) noexcept
    : ProcessTaskRequest() {
    *this = ::std::move(from);
  }

  inline ProcessTaskRequest& operator=(ProcessTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessTaskRequest*>(
               &_ProcessTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProcessTaskRequest* other);
  friend void swap(ProcessTaskRequest& a, ProcessTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessTaskRequest* New() const final {
    return CreateMaybeMessage<ProcessTaskRequest>(NULL);
  }

  ProcessTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessTaskRequest& from);
  void MergeFrom(const ProcessTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.data.TaskDef task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  private:
  const ::tensorflow::data::TaskDef& _internal_task() const;
  public:
  const ::tensorflow::data::TaskDef& task() const;
  ::tensorflow::data::TaskDef* release_task();
  ::tensorflow::data::TaskDef* mutable_task();
  void set_allocated_task(::tensorflow::data::TaskDef* task);

  // @@protoc_insertion_point(class_scope:tensorflow.data.ProcessTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::data::TaskDef* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.ProcessTaskResponse) */ {
 public:
  ProcessTaskResponse();
  virtual ~ProcessTaskResponse();

  ProcessTaskResponse(const ProcessTaskResponse& from);

  inline ProcessTaskResponse& operator=(const ProcessTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessTaskResponse(ProcessTaskResponse&& from) noexcept
    : ProcessTaskResponse() {
    *this = ::std::move(from);
  }

  inline ProcessTaskResponse& operator=(ProcessTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessTaskResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessTaskResponse*>(
               &_ProcessTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProcessTaskResponse* other);
  friend void swap(ProcessTaskResponse& a, ProcessTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessTaskResponse* New() const final {
    return CreateMaybeMessage<ProcessTaskResponse>(NULL);
  }

  ProcessTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessTaskResponse& from);
  void MergeFrom(const ProcessTaskResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.data.ProcessTaskResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetElementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.GetElementRequest) */ {
 public:
  GetElementRequest();
  virtual ~GetElementRequest();

  GetElementRequest(const GetElementRequest& from);

  inline GetElementRequest& operator=(const GetElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetElementRequest(GetElementRequest&& from) noexcept
    : GetElementRequest() {
    *this = ::std::move(from);
  }

  inline GetElementRequest& operator=(GetElementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetElementRequest& default_instance();

  enum OptionalConsumerIndexCase {
    kConsumerIndex = 2,
    OPTIONAL_CONSUMER_INDEX_NOT_SET = 0,
  };

  enum OptionalRoundIndexCase {
    kRoundIndex = 3,
    OPTIONAL_ROUND_INDEX_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetElementRequest* internal_default_instance() {
    return reinterpret_cast<const GetElementRequest*>(
               &_GetElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetElementRequest* other);
  friend void swap(GetElementRequest& a, GetElementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetElementRequest* New() const final {
    return CreateMaybeMessage<GetElementRequest>(NULL);
  }

  GetElementRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetElementRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetElementRequest& from);
  void MergeFrom(const GetElementRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetElementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trainer_id = 6;
  void clear_trainer_id();
  static const int kTrainerIdFieldNumber = 6;
  const ::std::string& trainer_id() const;
  void set_trainer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trainer_id(::std::string&& value);
  #endif
  void set_trainer_id(const char* value);
  void set_trainer_id(const char* value, size_t size);
  ::std::string* mutable_trainer_id();
  ::std::string* release_trainer_id();
  void set_allocated_trainer_id(::std::string* trainer_id);

  // int64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::int64 task_id() const;
  void set_task_id(::google::protobuf::int64 value);

  // bool skipped_previous_round = 4;
  void clear_skipped_previous_round();
  static const int kSkippedPreviousRoundFieldNumber = 4;
  bool skipped_previous_round() const;
  void set_skipped_previous_round(bool value);

  // bool allow_skip = 5;
  void clear_allow_skip();
  static const int kAllowSkipFieldNumber = 5;
  bool allow_skip() const;
  void set_allow_skip(bool value);

  // int64 consumer_index = 2;
  private:
  bool has_consumer_index() const;
  public:
  void clear_consumer_index();
  static const int kConsumerIndexFieldNumber = 2;
  ::google::protobuf::int64 consumer_index() const;
  void set_consumer_index(::google::protobuf::int64 value);

  // int64 round_index = 3;
  private:
  bool has_round_index() const;
  public:
  void clear_round_index();
  static const int kRoundIndexFieldNumber = 3;
  ::google::protobuf::int64 round_index() const;
  void set_round_index(::google::protobuf::int64 value);

  void clear_optional_consumer_index();
  OptionalConsumerIndexCase optional_consumer_index_case() const;
  void clear_optional_round_index();
  OptionalRoundIndexCase optional_round_index_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.data.GetElementRequest)
 private:
  void set_has_consumer_index();
  void set_has_round_index();

  inline bool has_optional_consumer_index() const;
  inline void clear_has_optional_consumer_index();

  inline bool has_optional_round_index() const;
  inline void clear_has_optional_round_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trainer_id_;
  ::google::protobuf::int64 task_id_;
  bool skipped_previous_round_;
  bool allow_skip_;
  union OptionalConsumerIndexUnion {
    OptionalConsumerIndexUnion() {}
    ::google::protobuf::int64 consumer_index_;
  } optional_consumer_index_;
  union OptionalRoundIndexUnion {
    OptionalRoundIndexUnion() {}
    ::google::protobuf::int64 round_index_;
  } optional_round_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetElementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.GetElementResponse) */ {
 public:
  GetElementResponse();
  virtual ~GetElementResponse();

  GetElementResponse(const GetElementResponse& from);

  inline GetElementResponse& operator=(const GetElementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetElementResponse(GetElementResponse&& from) noexcept
    : GetElementResponse() {
    *this = ::std::move(from);
  }

  inline GetElementResponse& operator=(GetElementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetElementResponse& default_instance();

  enum ElementCase {
    kCompressed = 3,
    kUncompressed = 5,
    ELEMENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetElementResponse* internal_default_instance() {
    return reinterpret_cast<const GetElementResponse*>(
               &_GetElementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetElementResponse* other);
  friend void swap(GetElementResponse& a, GetElementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetElementResponse* New() const final {
    return CreateMaybeMessage<GetElementResponse>(NULL);
  }

  GetElementResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetElementResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetElementResponse& from);
  void MergeFrom(const GetElementResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetElementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool end_of_sequence = 2;
  void clear_end_of_sequence();
  static const int kEndOfSequenceFieldNumber = 2;
  bool end_of_sequence() const;
  void set_end_of_sequence(bool value);

  // bool skip_task = 4;
  void clear_skip_task();
  static const int kSkipTaskFieldNumber = 4;
  bool skip_task() const;
  void set_skip_task(bool value);

  // int64 element_index = 6;
  void clear_element_index();
  static const int kElementIndexFieldNumber = 6;
  ::google::protobuf::int64 element_index() const;
  void set_element_index(::google::protobuf::int64 value);

  // .tensorflow.data.CompressedElement compressed = 3;
  bool has_compressed() const;
  void clear_compressed();
  static const int kCompressedFieldNumber = 3;
  private:
  const ::tensorflow::data::CompressedElement& _internal_compressed() const;
  public:
  const ::tensorflow::data::CompressedElement& compressed() const;
  ::tensorflow::data::CompressedElement* release_compressed();
  ::tensorflow::data::CompressedElement* mutable_compressed();
  void set_allocated_compressed(::tensorflow::data::CompressedElement* compressed);

  // .tensorflow.data.UncompressedElement uncompressed = 5;
  bool has_uncompressed() const;
  void clear_uncompressed();
  static const int kUncompressedFieldNumber = 5;
  private:
  const ::tensorflow::data::UncompressedElement& _internal_uncompressed() const;
  public:
  const ::tensorflow::data::UncompressedElement& uncompressed() const;
  ::tensorflow::data::UncompressedElement* release_uncompressed();
  ::tensorflow::data::UncompressedElement* mutable_uncompressed();
  void set_allocated_uncompressed(::tensorflow::data::UncompressedElement* uncompressed);

  void clear_element();
  ElementCase element_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.data.GetElementResponse)
 private:
  void set_has_compressed();
  void set_has_uncompressed();

  inline bool has_element() const;
  inline void clear_has_element();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool end_of_sequence_;
  bool skip_task_;
  ::google::protobuf::int64 element_index_;
  union ElementUnion {
    ElementUnion() {}
    ::tensorflow::data::CompressedElement* compressed_;
    ::tensorflow::data::UncompressedElement* uncompressed_;
  } element_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetWorkerTasksRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.GetWorkerTasksRequest) */ {
 public:
  GetWorkerTasksRequest();
  virtual ~GetWorkerTasksRequest();

  GetWorkerTasksRequest(const GetWorkerTasksRequest& from);

  inline GetWorkerTasksRequest& operator=(const GetWorkerTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetWorkerTasksRequest(GetWorkerTasksRequest&& from) noexcept
    : GetWorkerTasksRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkerTasksRequest& operator=(GetWorkerTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWorkerTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkerTasksRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkerTasksRequest*>(
               &_GetWorkerTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetWorkerTasksRequest* other);
  friend void swap(GetWorkerTasksRequest& a, GetWorkerTasksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerTasksRequest* New() const final {
    return CreateMaybeMessage<GetWorkerTasksRequest>(NULL);
  }

  GetWorkerTasksRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerTasksRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetWorkerTasksRequest& from);
  void MergeFrom(const GetWorkerTasksRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerTasksRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.data.GetWorkerTasksRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetWorkerTasksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.GetWorkerTasksResponse) */ {
 public:
  GetWorkerTasksResponse();
  virtual ~GetWorkerTasksResponse();

  GetWorkerTasksResponse(const GetWorkerTasksResponse& from);

  inline GetWorkerTasksResponse& operator=(const GetWorkerTasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetWorkerTasksResponse(GetWorkerTasksResponse&& from) noexcept
    : GetWorkerTasksResponse() {
    *this = ::std::move(from);
  }

  inline GetWorkerTasksResponse& operator=(GetWorkerTasksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWorkerTasksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkerTasksResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorkerTasksResponse*>(
               &_GetWorkerTasksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetWorkerTasksResponse* other);
  friend void swap(GetWorkerTasksResponse& a, GetWorkerTasksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerTasksResponse* New() const final {
    return CreateMaybeMessage<GetWorkerTasksResponse>(NULL);
  }

  GetWorkerTasksResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerTasksResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetWorkerTasksResponse& from);
  void MergeFrom(const GetWorkerTasksResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerTasksResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.data.TaskInfo tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  ::tensorflow::data::TaskInfo* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::data::TaskInfo >*
      mutable_tasks();
  const ::tensorflow::data::TaskInfo& tasks(int index) const;
  ::tensorflow::data::TaskInfo* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::data::TaskInfo >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:tensorflow.data.GetWorkerTasksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::data::TaskInfo > tasks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessTaskRequest

// .tensorflow.data.TaskDef task = 1;
inline bool ProcessTaskRequest::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
inline const ::tensorflow::data::TaskDef& ProcessTaskRequest::_internal_task() const {
  return *task_;
}
inline const ::tensorflow::data::TaskDef& ProcessTaskRequest::task() const {
  const ::tensorflow::data::TaskDef* p = task_;
  // @@protoc_insertion_point(field_get:tensorflow.data.ProcessTaskRequest.task)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::data::TaskDef*>(
      &::tensorflow::data::_TaskDef_default_instance_);
}
inline ::tensorflow::data::TaskDef* ProcessTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:tensorflow.data.ProcessTaskRequest.task)
  
  ::tensorflow::data::TaskDef* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::tensorflow::data::TaskDef* ProcessTaskRequest::mutable_task() {
  
  if (task_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::data::TaskDef>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.data.ProcessTaskRequest.task)
  return task_;
}
inline void ProcessTaskRequest::set_allocated_task(::tensorflow::data::TaskDef* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_);
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.ProcessTaskRequest.task)
}

// -------------------------------------------------------------------

// ProcessTaskResponse

// -------------------------------------------------------------------

// GetElementRequest

// int64 task_id = 1;
inline void GetElementRequest::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetElementRequest::task_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementRequest.task_id)
  return task_id_;
}
inline void GetElementRequest::set_task_id(::google::protobuf::int64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementRequest.task_id)
}

// int64 consumer_index = 2;
inline bool GetElementRequest::has_consumer_index() const {
  return optional_consumer_index_case() == kConsumerIndex;
}
inline void GetElementRequest::set_has_consumer_index() {
  _oneof_case_[0] = kConsumerIndex;
}
inline void GetElementRequest::clear_consumer_index() {
  if (has_consumer_index()) {
    optional_consumer_index_.consumer_index_ = GOOGLE_LONGLONG(0);
    clear_has_optional_consumer_index();
  }
}
inline ::google::protobuf::int64 GetElementRequest::consumer_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementRequest.consumer_index)
  if (has_consumer_index()) {
    return optional_consumer_index_.consumer_index_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void GetElementRequest::set_consumer_index(::google::protobuf::int64 value) {
  if (!has_consumer_index()) {
    clear_optional_consumer_index();
    set_has_consumer_index();
  }
  optional_consumer_index_.consumer_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementRequest.consumer_index)
}

// int64 round_index = 3;
inline bool GetElementRequest::has_round_index() const {
  return optional_round_index_case() == kRoundIndex;
}
inline void GetElementRequest::set_has_round_index() {
  _oneof_case_[1] = kRoundIndex;
}
inline void GetElementRequest::clear_round_index() {
  if (has_round_index()) {
    optional_round_index_.round_index_ = GOOGLE_LONGLONG(0);
    clear_has_optional_round_index();
  }
}
inline ::google::protobuf::int64 GetElementRequest::round_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementRequest.round_index)
  if (has_round_index()) {
    return optional_round_index_.round_index_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void GetElementRequest::set_round_index(::google::protobuf::int64 value) {
  if (!has_round_index()) {
    clear_optional_round_index();
    set_has_round_index();
  }
  optional_round_index_.round_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementRequest.round_index)
}

// bool skipped_previous_round = 4;
inline void GetElementRequest::clear_skipped_previous_round() {
  skipped_previous_round_ = false;
}
inline bool GetElementRequest::skipped_previous_round() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementRequest.skipped_previous_round)
  return skipped_previous_round_;
}
inline void GetElementRequest::set_skipped_previous_round(bool value) {
  
  skipped_previous_round_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementRequest.skipped_previous_round)
}

// bool allow_skip = 5;
inline void GetElementRequest::clear_allow_skip() {
  allow_skip_ = false;
}
inline bool GetElementRequest::allow_skip() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementRequest.allow_skip)
  return allow_skip_;
}
inline void GetElementRequest::set_allow_skip(bool value) {
  
  allow_skip_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementRequest.allow_skip)
}

// string trainer_id = 6;
inline void GetElementRequest::clear_trainer_id() {
  trainer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetElementRequest::trainer_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementRequest.trainer_id)
  return trainer_id_.GetNoArena();
}
inline void GetElementRequest::set_trainer_id(const ::std::string& value) {
  
  trainer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementRequest.trainer_id)
}
#if LANG_CXX11
inline void GetElementRequest::set_trainer_id(::std::string&& value) {
  
  trainer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.data.GetElementRequest.trainer_id)
}
#endif
inline void GetElementRequest::set_trainer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trainer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.data.GetElementRequest.trainer_id)
}
inline void GetElementRequest::set_trainer_id(const char* value, size_t size) {
  
  trainer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.data.GetElementRequest.trainer_id)
}
inline ::std::string* GetElementRequest::mutable_trainer_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.data.GetElementRequest.trainer_id)
  return trainer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetElementRequest::release_trainer_id() {
  // @@protoc_insertion_point(field_release:tensorflow.data.GetElementRequest.trainer_id)
  
  return trainer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetElementRequest::set_allocated_trainer_id(::std::string* trainer_id) {
  if (trainer_id != NULL) {
    
  } else {
    
  }
  trainer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trainer_id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.GetElementRequest.trainer_id)
}

inline bool GetElementRequest::has_optional_consumer_index() const {
  return optional_consumer_index_case() != OPTIONAL_CONSUMER_INDEX_NOT_SET;
}
inline void GetElementRequest::clear_has_optional_consumer_index() {
  _oneof_case_[0] = OPTIONAL_CONSUMER_INDEX_NOT_SET;
}
inline bool GetElementRequest::has_optional_round_index() const {
  return optional_round_index_case() != OPTIONAL_ROUND_INDEX_NOT_SET;
}
inline void GetElementRequest::clear_has_optional_round_index() {
  _oneof_case_[1] = OPTIONAL_ROUND_INDEX_NOT_SET;
}
inline GetElementRequest::OptionalConsumerIndexCase GetElementRequest::optional_consumer_index_case() const {
  return GetElementRequest::OptionalConsumerIndexCase(_oneof_case_[0]);
}
inline GetElementRequest::OptionalRoundIndexCase GetElementRequest::optional_round_index_case() const {
  return GetElementRequest::OptionalRoundIndexCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// GetElementResponse

// .tensorflow.data.CompressedElement compressed = 3;
inline bool GetElementResponse::has_compressed() const {
  return element_case() == kCompressed;
}
inline void GetElementResponse::set_has_compressed() {
  _oneof_case_[0] = kCompressed;
}
inline const ::tensorflow::data::CompressedElement& GetElementResponse::_internal_compressed() const {
  return *element_.compressed_;
}
inline ::tensorflow::data::CompressedElement* GetElementResponse::release_compressed() {
  // @@protoc_insertion_point(field_release:tensorflow.data.GetElementResponse.compressed)
  if (has_compressed()) {
    clear_has_element();
      ::tensorflow::data::CompressedElement* temp = element_.compressed_;
    element_.compressed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::data::CompressedElement& GetElementResponse::compressed() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementResponse.compressed)
  return has_compressed()
      ? *element_.compressed_
      : *reinterpret_cast< ::tensorflow::data::CompressedElement*>(&::tensorflow::data::_CompressedElement_default_instance_);
}
inline ::tensorflow::data::CompressedElement* GetElementResponse::mutable_compressed() {
  if (!has_compressed()) {
    clear_element();
    set_has_compressed();
    element_.compressed_ = CreateMaybeMessage< ::tensorflow::data::CompressedElement >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.data.GetElementResponse.compressed)
  return element_.compressed_;
}

// .tensorflow.data.UncompressedElement uncompressed = 5;
inline bool GetElementResponse::has_uncompressed() const {
  return element_case() == kUncompressed;
}
inline void GetElementResponse::set_has_uncompressed() {
  _oneof_case_[0] = kUncompressed;
}
inline const ::tensorflow::data::UncompressedElement& GetElementResponse::_internal_uncompressed() const {
  return *element_.uncompressed_;
}
inline ::tensorflow::data::UncompressedElement* GetElementResponse::release_uncompressed() {
  // @@protoc_insertion_point(field_release:tensorflow.data.GetElementResponse.uncompressed)
  if (has_uncompressed()) {
    clear_has_element();
      ::tensorflow::data::UncompressedElement* temp = element_.uncompressed_;
    element_.uncompressed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::data::UncompressedElement& GetElementResponse::uncompressed() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementResponse.uncompressed)
  return has_uncompressed()
      ? *element_.uncompressed_
      : *reinterpret_cast< ::tensorflow::data::UncompressedElement*>(&::tensorflow::data::_UncompressedElement_default_instance_);
}
inline ::tensorflow::data::UncompressedElement* GetElementResponse::mutable_uncompressed() {
  if (!has_uncompressed()) {
    clear_element();
    set_has_uncompressed();
    element_.uncompressed_ = CreateMaybeMessage< ::tensorflow::data::UncompressedElement >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.data.GetElementResponse.uncompressed)
  return element_.uncompressed_;
}

// int64 element_index = 6;
inline void GetElementResponse::clear_element_index() {
  element_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetElementResponse::element_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementResponse.element_index)
  return element_index_;
}
inline void GetElementResponse::set_element_index(::google::protobuf::int64 value) {
  
  element_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementResponse.element_index)
}

// bool end_of_sequence = 2;
inline void GetElementResponse::clear_end_of_sequence() {
  end_of_sequence_ = false;
}
inline bool GetElementResponse::end_of_sequence() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementResponse.end_of_sequence)
  return end_of_sequence_;
}
inline void GetElementResponse::set_end_of_sequence(bool value) {
  
  end_of_sequence_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementResponse.end_of_sequence)
}

// bool skip_task = 4;
inline void GetElementResponse::clear_skip_task() {
  skip_task_ = false;
}
inline bool GetElementResponse::skip_task() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetElementResponse.skip_task)
  return skip_task_;
}
inline void GetElementResponse::set_skip_task(bool value) {
  
  skip_task_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.data.GetElementResponse.skip_task)
}

inline bool GetElementResponse::has_element() const {
  return element_case() != ELEMENT_NOT_SET;
}
inline void GetElementResponse::clear_has_element() {
  _oneof_case_[0] = ELEMENT_NOT_SET;
}
inline GetElementResponse::ElementCase GetElementResponse::element_case() const {
  return GetElementResponse::ElementCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetWorkerTasksRequest

// -------------------------------------------------------------------

// GetWorkerTasksResponse

// repeated .tensorflow.data.TaskInfo tasks = 1;
inline int GetWorkerTasksResponse::tasks_size() const {
  return tasks_.size();
}
inline ::tensorflow::data::TaskInfo* GetWorkerTasksResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.data.GetWorkerTasksResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::data::TaskInfo >*
GetWorkerTasksResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.GetWorkerTasksResponse.tasks)
  return &tasks_;
}
inline const ::tensorflow::data::TaskInfo& GetWorkerTasksResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.data.GetWorkerTasksResponse.tasks)
  return tasks_.Get(index);
}
inline ::tensorflow::data::TaskInfo* GetWorkerTasksResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:tensorflow.data.GetWorkerTasksResponse.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::data::TaskInfo >&
GetWorkerTasksResponse::tasks() const {
  // @@protoc_insertion_point(field_list:tensorflow.data.GetWorkerTasksResponse.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fdata_2fservice_2fworker_2eproto
