// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/data/service/journal.proto

#include "tensorflow/core/data/service/journal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JobKeyDef;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto
namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AcquireJobClientUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreatePendingTaskUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateTaskUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FinishTaskUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GarbageCollectJobUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProduceSplitUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegisterWorkerUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReleaseJobClientUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RemoveTaskUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskRejected;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClientHeartbeatUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RegisterDatasetUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CreateJobUpdate;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto
namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataServiceMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProcessingModeDef;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto
namespace tensorflow {
namespace data {
class UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Update>
      _instance;
  const ::tensorflow::data::RegisterDatasetUpdate* register_dataset_;
  const ::tensorflow::data::RegisterWorkerUpdate* register_worker_;
  const ::tensorflow::data::CreateJobUpdate* create_job_;
  const ::tensorflow::data::ProduceSplitUpdate* produce_split_;
  const ::tensorflow::data::AcquireJobClientUpdate* acquire_job_client_;
  const ::tensorflow::data::ReleaseJobClientUpdate* release_job_client_;
  const ::tensorflow::data::GarbageCollectJobUpdate* garbage_collect_job_;
  const ::tensorflow::data::RemoveTaskUpdate* remove_task_;
  const ::tensorflow::data::CreatePendingTaskUpdate* create_pending_task_;
  const ::tensorflow::data::ClientHeartbeatUpdate* client_heartbeat_;
  const ::tensorflow::data::CreateTaskUpdate* create_task_;
  const ::tensorflow::data::FinishTaskUpdate* finish_task_;
} _Update_default_instance_;
class RegisterDatasetUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterDatasetUpdate>
      _instance;
} _RegisterDatasetUpdate_default_instance_;
class RegisterWorkerUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterWorkerUpdate>
      _instance;
} _RegisterWorkerUpdate_default_instance_;
class CreateJobUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateJobUpdate>
      _instance;
  ::google::protobuf::int64 num_consumers_;
} _CreateJobUpdate_default_instance_;
class ProduceSplitUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProduceSplitUpdate>
      _instance;
} _ProduceSplitUpdate_default_instance_;
class AcquireJobClientUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcquireJobClientUpdate>
      _instance;
} _AcquireJobClientUpdate_default_instance_;
class ReleaseJobClientUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReleaseJobClientUpdate>
      _instance;
} _ReleaseJobClientUpdate_default_instance_;
class GarbageCollectJobUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GarbageCollectJobUpdate>
      _instance;
} _GarbageCollectJobUpdate_default_instance_;
class RemoveTaskUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveTaskUpdate>
      _instance;
} _RemoveTaskUpdate_default_instance_;
class TaskRejectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskRejected>
      _instance;
} _TaskRejected_default_instance_;
class ClientHeartbeatUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientHeartbeatUpdate>
      _instance;
} _ClientHeartbeatUpdate_default_instance_;
class CreatePendingTaskUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreatePendingTaskUpdate>
      _instance;
} _CreatePendingTaskUpdate_default_instance_;
class CreateTaskUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateTaskUpdate>
      _instance;
} _CreateTaskUpdate_default_instance_;
class FinishTaskUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishTaskUpdate>
      _instance;
} _FinishTaskUpdate_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto {
static void InitDefaultsUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_Update_default_instance_;
    new (ptr) ::tensorflow::data::Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::Update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_Update =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsUpdate}, {
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RegisterDatasetUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RegisterWorkerUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreateJobUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ProduceSplitUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_AcquireJobClientUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ReleaseJobClientUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_GarbageCollectJobUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RemoveTaskUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreatePendingTaskUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ClientHeartbeatUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreateTaskUpdate.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_FinishTaskUpdate.base,}};

static void InitDefaultsRegisterDatasetUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_RegisterDatasetUpdate_default_instance_;
    new (ptr) ::tensorflow::data::RegisterDatasetUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::RegisterDatasetUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterDatasetUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterDatasetUpdate}, {
      &protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_DataServiceMetadata.base,}};

static void InitDefaultsRegisterWorkerUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_RegisterWorkerUpdate_default_instance_;
    new (ptr) ::tensorflow::data::RegisterWorkerUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::RegisterWorkerUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterWorkerUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterWorkerUpdate}, {}};

static void InitDefaultsCreateJobUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_CreateJobUpdate_default_instance_;
    new (ptr) ::tensorflow::data::CreateJobUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::CreateJobUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateJobUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateJobUpdate}, {
      &protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_ProcessingModeDef.base,
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::scc_info_JobKeyDef.base,}};

static void InitDefaultsProduceSplitUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ProduceSplitUpdate_default_instance_;
    new (ptr) ::tensorflow::data::ProduceSplitUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ProduceSplitUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProduceSplitUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProduceSplitUpdate}, {}};

static void InitDefaultsAcquireJobClientUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_AcquireJobClientUpdate_default_instance_;
    new (ptr) ::tensorflow::data::AcquireJobClientUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::AcquireJobClientUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AcquireJobClientUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcquireJobClientUpdate}, {}};

static void InitDefaultsReleaseJobClientUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ReleaseJobClientUpdate_default_instance_;
    new (ptr) ::tensorflow::data::ReleaseJobClientUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ReleaseJobClientUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReleaseJobClientUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReleaseJobClientUpdate}, {}};

static void InitDefaultsGarbageCollectJobUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_GarbageCollectJobUpdate_default_instance_;
    new (ptr) ::tensorflow::data::GarbageCollectJobUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::GarbageCollectJobUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GarbageCollectJobUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGarbageCollectJobUpdate}, {}};

static void InitDefaultsRemoveTaskUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_RemoveTaskUpdate_default_instance_;
    new (ptr) ::tensorflow::data::RemoveTaskUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::RemoveTaskUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoveTaskUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoveTaskUpdate}, {}};

static void InitDefaultsTaskRejected() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_TaskRejected_default_instance_;
    new (ptr) ::tensorflow::data::TaskRejected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::TaskRejected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskRejected =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskRejected}, {}};

static void InitDefaultsClientHeartbeatUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ClientHeartbeatUpdate_default_instance_;
    new (ptr) ::tensorflow::data::ClientHeartbeatUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ClientHeartbeatUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientHeartbeatUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientHeartbeatUpdate}, {
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_TaskRejected.base,}};

static void InitDefaultsCreatePendingTaskUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_CreatePendingTaskUpdate_default_instance_;
    new (ptr) ::tensorflow::data::CreatePendingTaskUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::CreatePendingTaskUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreatePendingTaskUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreatePendingTaskUpdate}, {}};

static void InitDefaultsCreateTaskUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_CreateTaskUpdate_default_instance_;
    new (ptr) ::tensorflow::data::CreateTaskUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::CreateTaskUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateTaskUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateTaskUpdate}, {}};

static void InitDefaultsFinishTaskUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_FinishTaskUpdate_default_instance_;
    new (ptr) ::tensorflow::data::FinishTaskUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::FinishTaskUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishTaskUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishTaskUpdate}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Update.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterDatasetUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterWorkerUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateJobUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProduceSplitUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcquireJobClientUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReleaseJobClientUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GarbageCollectJobUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveTaskUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskRejected.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientHeartbeatUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreatePendingTaskUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateTaskUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishTaskUpdate.base);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Update, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, register_dataset_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, register_worker_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, create_job_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, produce_split_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, acquire_job_client_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, release_job_client_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, garbage_collect_job_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, remove_task_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, create_pending_task_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, client_heartbeat_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, create_task_),
  offsetof(::tensorflow::data::UpdateDefaultTypeInternal, finish_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Update, update_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterDatasetUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterDatasetUpdate, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterDatasetUpdate, fingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterDatasetUpdate, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterWorkerUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterWorkerUpdate, worker_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterWorkerUpdate, transfer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterWorkerUpdate, worker_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RegisterWorkerUpdate, worker_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, processing_mode_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, num_split_providers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, job_key_),
  offsetof(::tensorflow::data::CreateJobUpdateDefaultTypeInternal, num_consumers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, target_workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateJobUpdate, optional_num_consumers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProduceSplitUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProduceSplitUpdate, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProduceSplitUpdate, iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProduceSplitUpdate, split_provider_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProduceSplitUpdate, finished_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AcquireJobClientUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AcquireJobClientUpdate, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AcquireJobClientUpdate, job_client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ReleaseJobClientUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ReleaseJobClientUpdate, job_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ReleaseJobClientUpdate, time_micros_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GarbageCollectJobUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::GarbageCollectJobUpdate, job_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RemoveTaskUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::RemoveTaskUpdate, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskRejected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::TaskRejected, new_target_round_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ClientHeartbeatUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ClientHeartbeatUpdate, job_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ClientHeartbeatUpdate, task_accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ClientHeartbeatUpdate, task_rejected_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, worker_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, transfer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, worker_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, worker_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreatePendingTaskUpdate, starting_round_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, worker_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, transfer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, worker_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CreateTaskUpdate, worker_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::FinishTaskUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::FinishTaskUpdate, task_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::Update)},
  { 18, -1, sizeof(::tensorflow::data::RegisterDatasetUpdate)},
  { 26, -1, sizeof(::tensorflow::data::RegisterWorkerUpdate)},
  { 35, -1, sizeof(::tensorflow::data::CreateJobUpdate)},
  { 48, -1, sizeof(::tensorflow::data::ProduceSplitUpdate)},
  { 57, -1, sizeof(::tensorflow::data::AcquireJobClientUpdate)},
  { 64, -1, sizeof(::tensorflow::data::ReleaseJobClientUpdate)},
  { 71, -1, sizeof(::tensorflow::data::GarbageCollectJobUpdate)},
  { 77, -1, sizeof(::tensorflow::data::RemoveTaskUpdate)},
  { 83, -1, sizeof(::tensorflow::data::TaskRejected)},
  { 89, -1, sizeof(::tensorflow::data::ClientHeartbeatUpdate)},
  { 97, -1, sizeof(::tensorflow::data::CreatePendingTaskUpdate)},
  { 109, -1, sizeof(::tensorflow::data::CreateTaskUpdate)},
  { 120, -1, sizeof(::tensorflow::data::FinishTaskUpdate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_RegisterDatasetUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_RegisterWorkerUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_CreateJobUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ProduceSplitUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_AcquireJobClientUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ReleaseJobClientUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_GarbageCollectJobUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_RemoveTaskUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_TaskRejected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ClientHeartbeatUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_CreatePendingTaskUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_CreateTaskUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_FinishTaskUpdate_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/data/service/journal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*tensorflow/core/data/service/journal.p"
      "roto\022\017tensorflow.data\032)tensorflow/core/d"
      "ata/service/common.proto\032+tensorflow/cor"
      "e/protobuf/data_service.proto\"\253\006\n\006Update"
      "\022B\n\020register_dataset\030\001 \001(\0132&.tensorflow."
      "data.RegisterDatasetUpdateH\000\022@\n\017register"
      "_worker\030\005 \001(\0132%.tensorflow.data.Register"
      "WorkerUpdateH\000\0226\n\ncreate_job\030\002 \001(\0132 .ten"
      "sorflow.data.CreateJobUpdateH\000\022<\n\rproduc"
      "e_split\030\010 \001(\0132#.tensorflow.data.ProduceS"
      "plitUpdateH\000\022E\n\022acquire_job_client\030\006 \001(\013"
      "2\'.tensorflow.data.AcquireJobClientUpdat"
      "eH\000\022E\n\022release_job_client\030\007 \001(\0132\'.tensor"
      "flow.data.ReleaseJobClientUpdateH\000\022G\n\023ga"
      "rbage_collect_job\030\014 \001(\0132(.tensorflow.dat"
      "a.GarbageCollectJobUpdateH\000\0228\n\013remove_ta"
      "sk\030\013 \001(\0132!.tensorflow.data.RemoveTaskUpd"
      "ateH\000\022G\n\023create_pending_task\030\t \001(\0132(.ten"
      "sorflow.data.CreatePendingTaskUpdateH\000\022B"
      "\n\020client_heartbeat\030\n \001(\0132&.tensorflow.da"
      "ta.ClientHeartbeatUpdateH\000\0228\n\013create_tas"
      "k\030\003 \001(\0132!.tensorflow.data.CreateTaskUpda"
      "teH\000\0228\n\013finish_task\030\004 \001(\0132!.tensorflow.d"
      "ata.FinishTaskUpdateH\000B\r\n\013update_typeJ\004\010"
      "\r\020\016\"x\n\025RegisterDatasetUpdate\022\022\n\ndataset_"
      "id\030\001 \001(\003\022\023\n\013fingerprint\030\002 \001(\004\0226\n\010metadat"
      "a\030\003 \001(\0132$.tensorflow.data.DataServiceMet"
      "adata\"q\n\024RegisterWorkerUpdate\022\026\n\016worker_"
      "address\030\001 \001(\t\022\030\n\020transfer_address\030\002 \001(\t\022"
      "\023\n\013worker_tags\030\003 \003(\t\022\022\n\nworker_uid\030\004 \001(\003"
      "\"\275\002\n\017CreateJobUpdate\022\016\n\006job_id\030\001 \001(\003\022\022\n\n"
      "dataset_id\030\002 \001(\003\022\?\n\023processing_mode_def\030"
      "\t \001(\0132\".tensorflow.data.ProcessingModeDe"
      "f\022\033\n\023num_split_providers\030\010 \001(\003\022+\n\007job_ke"
      "y\030\004 \001(\0132\032.tensorflow.data.JobKeyDef\022\027\n\rn"
      "um_consumers\030\007 \001(\003H\000\0226\n\016target_workers\030\n"
      " \001(\0162\036.tensorflow.data.TargetWorkersB\030\n\026"
      "optional_num_consumersJ\004\010\003\020\004J\004\010\005\020\006J\004\010\006\020\007"
      "\"g\n\022ProduceSplitUpdate\022\016\n\006job_id\030\001 \001(\003\022\021"
      "\n\titeration\030\002 \001(\003\022\034\n\024split_provider_inde"
      "x\030\004 \001(\003\022\020\n\010finished\030\003 \001(\010\"\?\n\026AcquireJobC"
      "lientUpdate\022\016\n\006job_id\030\001 \001(\003\022\025\n\rjob_clien"
      "t_id\030\002 \001(\003\"D\n\026ReleaseJobClientUpdate\022\025\n\r"
      "job_client_id\030\001 \001(\003\022\023\n\013time_micros\030\002 \001(\003"
      "\")\n\027GarbageCollectJobUpdate\022\016\n\006job_id\030\001 "
      "\001(\003\"#\n\020RemoveTaskUpdate\022\017\n\007task_id\030\001 \001(\003"
      "\"(\n\014TaskRejected\022\030\n\020new_target_round\030\001 \001"
      "(\003\"{\n\025ClientHeartbeatUpdate\022\025\n\rjob_clien"
      "t_id\030\001 \001(\003\022\025\n\rtask_accepted\030\002 \001(\010\0224\n\rtas"
      "k_rejected\030\003 \001(\0132\035.tensorflow.data.TaskR"
      "ejected\"\255\001\n\027CreatePendingTaskUpdate\022\017\n\007t"
      "ask_id\030\001 \001(\003\022\016\n\006job_id\030\002 \001(\003\022\026\n\016worker_a"
      "ddress\030\003 \001(\t\022\030\n\020transfer_address\030\004 \001(\t\022\023"
      "\n\013worker_tags\030\006 \003(\t\022\022\n\nworker_uid\030\007 \001(\003\022"
      "\026\n\016starting_round\030\005 \001(\003\"\232\001\n\020CreateTaskUp"
      "date\022\017\n\007task_id\030\001 \001(\003\022\016\n\006job_id\030\002 \001(\003\022\026\n"
      "\016worker_address\030\004 \001(\t\022\030\n\020transfer_addres"
      "s\030\006 \001(\t\022\023\n\013worker_tags\030\007 \003(\t\022\022\n\nworker_u"
      "id\030\010 \001(\003J\004\010\003\020\004J\004\010\005\020\006\"#\n\020FinishTaskUpdate"
      "\022\017\n\007task_id\030\001 \001(\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2385);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/data/service/journal.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fcommon_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto
namespace tensorflow {
namespace data {

// ===================================================================

void Update::InitAsDefaultInstance() {
  ::tensorflow::data::_Update_default_instance_.register_dataset_ = const_cast< ::tensorflow::data::RegisterDatasetUpdate*>(
      ::tensorflow::data::RegisterDatasetUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.register_worker_ = const_cast< ::tensorflow::data::RegisterWorkerUpdate*>(
      ::tensorflow::data::RegisterWorkerUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.create_job_ = const_cast< ::tensorflow::data::CreateJobUpdate*>(
      ::tensorflow::data::CreateJobUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.produce_split_ = const_cast< ::tensorflow::data::ProduceSplitUpdate*>(
      ::tensorflow::data::ProduceSplitUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.acquire_job_client_ = const_cast< ::tensorflow::data::AcquireJobClientUpdate*>(
      ::tensorflow::data::AcquireJobClientUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.release_job_client_ = const_cast< ::tensorflow::data::ReleaseJobClientUpdate*>(
      ::tensorflow::data::ReleaseJobClientUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.garbage_collect_job_ = const_cast< ::tensorflow::data::GarbageCollectJobUpdate*>(
      ::tensorflow::data::GarbageCollectJobUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.remove_task_ = const_cast< ::tensorflow::data::RemoveTaskUpdate*>(
      ::tensorflow::data::RemoveTaskUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.create_pending_task_ = const_cast< ::tensorflow::data::CreatePendingTaskUpdate*>(
      ::tensorflow::data::CreatePendingTaskUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.client_heartbeat_ = const_cast< ::tensorflow::data::ClientHeartbeatUpdate*>(
      ::tensorflow::data::ClientHeartbeatUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.create_task_ = const_cast< ::tensorflow::data::CreateTaskUpdate*>(
      ::tensorflow::data::CreateTaskUpdate::internal_default_instance());
  ::tensorflow::data::_Update_default_instance_.finish_task_ = const_cast< ::tensorflow::data::FinishTaskUpdate*>(
      ::tensorflow::data::FinishTaskUpdate::internal_default_instance());
}
void Update::set_allocated_register_dataset(::tensorflow::data::RegisterDatasetUpdate* register_dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (register_dataset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      register_dataset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_dataset, submessage_arena);
    }
    set_has_register_dataset();
    update_type_.register_dataset_ = register_dataset;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.register_dataset)
}
void Update::set_allocated_register_worker(::tensorflow::data::RegisterWorkerUpdate* register_worker) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (register_worker) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      register_worker = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_worker, submessage_arena);
    }
    set_has_register_worker();
    update_type_.register_worker_ = register_worker;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.register_worker)
}
void Update::set_allocated_create_job(::tensorflow::data::CreateJobUpdate* create_job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (create_job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_job, submessage_arena);
    }
    set_has_create_job();
    update_type_.create_job_ = create_job;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.create_job)
}
void Update::set_allocated_produce_split(::tensorflow::data::ProduceSplitUpdate* produce_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (produce_split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      produce_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, produce_split, submessage_arena);
    }
    set_has_produce_split();
    update_type_.produce_split_ = produce_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.produce_split)
}
void Update::set_allocated_acquire_job_client(::tensorflow::data::AcquireJobClientUpdate* acquire_job_client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (acquire_job_client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acquire_job_client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acquire_job_client, submessage_arena);
    }
    set_has_acquire_job_client();
    update_type_.acquire_job_client_ = acquire_job_client;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.acquire_job_client)
}
void Update::set_allocated_release_job_client(::tensorflow::data::ReleaseJobClientUpdate* release_job_client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (release_job_client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      release_job_client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, release_job_client, submessage_arena);
    }
    set_has_release_job_client();
    update_type_.release_job_client_ = release_job_client;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.release_job_client)
}
void Update::set_allocated_garbage_collect_job(::tensorflow::data::GarbageCollectJobUpdate* garbage_collect_job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (garbage_collect_job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      garbage_collect_job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, garbage_collect_job, submessage_arena);
    }
    set_has_garbage_collect_job();
    update_type_.garbage_collect_job_ = garbage_collect_job;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.garbage_collect_job)
}
void Update::set_allocated_remove_task(::tensorflow::data::RemoveTaskUpdate* remove_task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (remove_task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remove_task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remove_task, submessage_arena);
    }
    set_has_remove_task();
    update_type_.remove_task_ = remove_task;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.remove_task)
}
void Update::set_allocated_create_pending_task(::tensorflow::data::CreatePendingTaskUpdate* create_pending_task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (create_pending_task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_pending_task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_pending_task, submessage_arena);
    }
    set_has_create_pending_task();
    update_type_.create_pending_task_ = create_pending_task;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.create_pending_task)
}
void Update::set_allocated_client_heartbeat(::tensorflow::data::ClientHeartbeatUpdate* client_heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (client_heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_heartbeat, submessage_arena);
    }
    set_has_client_heartbeat();
    update_type_.client_heartbeat_ = client_heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.client_heartbeat)
}
void Update::set_allocated_create_task(::tensorflow::data::CreateTaskUpdate* create_task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (create_task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_task, submessage_arena);
    }
    set_has_create_task();
    update_type_.create_task_ = create_task;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.create_task)
}
void Update::set_allocated_finish_task(::tensorflow::data::FinishTaskUpdate* finish_task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_update_type();
  if (finish_task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      finish_task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, finish_task, submessage_arena);
    }
    set_has_finish_task();
    update_type_.finish_task_ = finish_task;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.Update.finish_task)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Update::kRegisterDatasetFieldNumber;
const int Update::kRegisterWorkerFieldNumber;
const int Update::kCreateJobFieldNumber;
const int Update::kProduceSplitFieldNumber;
const int Update::kAcquireJobClientFieldNumber;
const int Update::kReleaseJobClientFieldNumber;
const int Update::kGarbageCollectJobFieldNumber;
const int Update::kRemoveTaskFieldNumber;
const int Update::kCreatePendingTaskFieldNumber;
const int Update::kClientHeartbeatFieldNumber;
const int Update::kCreateTaskFieldNumber;
const int Update::kFinishTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Update::Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_Update.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.Update)
}
Update::Update(const Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_update_type();
  switch (from.update_type_case()) {
    case kRegisterDataset: {
      mutable_register_dataset()->::tensorflow::data::RegisterDatasetUpdate::MergeFrom(from.register_dataset());
      break;
    }
    case kRegisterWorker: {
      mutable_register_worker()->::tensorflow::data::RegisterWorkerUpdate::MergeFrom(from.register_worker());
      break;
    }
    case kCreateJob: {
      mutable_create_job()->::tensorflow::data::CreateJobUpdate::MergeFrom(from.create_job());
      break;
    }
    case kProduceSplit: {
      mutable_produce_split()->::tensorflow::data::ProduceSplitUpdate::MergeFrom(from.produce_split());
      break;
    }
    case kAcquireJobClient: {
      mutable_acquire_job_client()->::tensorflow::data::AcquireJobClientUpdate::MergeFrom(from.acquire_job_client());
      break;
    }
    case kReleaseJobClient: {
      mutable_release_job_client()->::tensorflow::data::ReleaseJobClientUpdate::MergeFrom(from.release_job_client());
      break;
    }
    case kGarbageCollectJob: {
      mutable_garbage_collect_job()->::tensorflow::data::GarbageCollectJobUpdate::MergeFrom(from.garbage_collect_job());
      break;
    }
    case kRemoveTask: {
      mutable_remove_task()->::tensorflow::data::RemoveTaskUpdate::MergeFrom(from.remove_task());
      break;
    }
    case kCreatePendingTask: {
      mutable_create_pending_task()->::tensorflow::data::CreatePendingTaskUpdate::MergeFrom(from.create_pending_task());
      break;
    }
    case kClientHeartbeat: {
      mutable_client_heartbeat()->::tensorflow::data::ClientHeartbeatUpdate::MergeFrom(from.client_heartbeat());
      break;
    }
    case kCreateTask: {
      mutable_create_task()->::tensorflow::data::CreateTaskUpdate::MergeFrom(from.create_task());
      break;
    }
    case kFinishTask: {
      mutable_finish_task()->::tensorflow::data::FinishTaskUpdate::MergeFrom(from.finish_task());
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.Update)
}

void Update::SharedCtor() {
  clear_has_update_type();
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:tensorflow.data.Update)
  SharedDtor();
}

void Update::SharedDtor() {
  if (has_update_type()) {
    clear_update_type();
  }
}

void Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Update& Update::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_Update.base);
  return *internal_default_instance();
}


void Update::clear_update_type() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Update)
  switch (update_type_case()) {
    case kRegisterDataset: {
      delete update_type_.register_dataset_;
      break;
    }
    case kRegisterWorker: {
      delete update_type_.register_worker_;
      break;
    }
    case kCreateJob: {
      delete update_type_.create_job_;
      break;
    }
    case kProduceSplit: {
      delete update_type_.produce_split_;
      break;
    }
    case kAcquireJobClient: {
      delete update_type_.acquire_job_client_;
      break;
    }
    case kReleaseJobClient: {
      delete update_type_.release_job_client_;
      break;
    }
    case kGarbageCollectJob: {
      delete update_type_.garbage_collect_job_;
      break;
    }
    case kRemoveTask: {
      delete update_type_.remove_task_;
      break;
    }
    case kCreatePendingTask: {
      delete update_type_.create_pending_task_;
      break;
    }
    case kClientHeartbeat: {
      delete update_type_.client_heartbeat_;
      break;
    }
    case kCreateTask: {
      delete update_type_.create_task_;
      break;
    }
    case kFinishTask: {
      delete update_type_.finish_task_;
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_TYPE_NOT_SET;
}


void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update_type();
  _internal_metadata_.Clear();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.Update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.RegisterDatasetUpdate register_dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.CreateJobUpdate create_job = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.CreateTaskUpdate create_task = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.FinishTaskUpdate finish_task = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.RegisterWorkerUpdate register_worker = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_worker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.AcquireJobClientUpdate acquire_job_client = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acquire_job_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ReleaseJobClientUpdate release_job_client = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_release_job_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ProduceSplitUpdate produce_split = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_produce_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.CreatePendingTaskUpdate create_pending_task = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_pending_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ClientHeartbeatUpdate client_heartbeat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.RemoveTaskUpdate remove_task = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.GarbageCollectJobUpdate garbage_collect_job = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_garbage_collect_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.Update)
  return false;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.RegisterDatasetUpdate register_dataset = 1;
  if (has_register_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_register_dataset(), output);
  }

  // .tensorflow.data.CreateJobUpdate create_job = 2;
  if (has_create_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create_job(), output);
  }

  // .tensorflow.data.CreateTaskUpdate create_task = 3;
  if (has_create_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_create_task(), output);
  }

  // .tensorflow.data.FinishTaskUpdate finish_task = 4;
  if (has_finish_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_finish_task(), output);
  }

  // .tensorflow.data.RegisterWorkerUpdate register_worker = 5;
  if (has_register_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_register_worker(), output);
  }

  // .tensorflow.data.AcquireJobClientUpdate acquire_job_client = 6;
  if (has_acquire_job_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_acquire_job_client(), output);
  }

  // .tensorflow.data.ReleaseJobClientUpdate release_job_client = 7;
  if (has_release_job_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_release_job_client(), output);
  }

  // .tensorflow.data.ProduceSplitUpdate produce_split = 8;
  if (has_produce_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_produce_split(), output);
  }

  // .tensorflow.data.CreatePendingTaskUpdate create_pending_task = 9;
  if (has_create_pending_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_create_pending_task(), output);
  }

  // .tensorflow.data.ClientHeartbeatUpdate client_heartbeat = 10;
  if (has_client_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_client_heartbeat(), output);
  }

  // .tensorflow.data.RemoveTaskUpdate remove_task = 11;
  if (has_remove_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_remove_task(), output);
  }

  // .tensorflow.data.GarbageCollectJobUpdate garbage_collect_job = 12;
  if (has_garbage_collect_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_garbage_collect_job(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.Update)
}

::google::protobuf::uint8* Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.RegisterDatasetUpdate register_dataset = 1;
  if (has_register_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_register_dataset(), deterministic, target);
  }

  // .tensorflow.data.CreateJobUpdate create_job = 2;
  if (has_create_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create_job(), deterministic, target);
  }

  // .tensorflow.data.CreateTaskUpdate create_task = 3;
  if (has_create_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_create_task(), deterministic, target);
  }

  // .tensorflow.data.FinishTaskUpdate finish_task = 4;
  if (has_finish_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_finish_task(), deterministic, target);
  }

  // .tensorflow.data.RegisterWorkerUpdate register_worker = 5;
  if (has_register_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_register_worker(), deterministic, target);
  }

  // .tensorflow.data.AcquireJobClientUpdate acquire_job_client = 6;
  if (has_acquire_job_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_acquire_job_client(), deterministic, target);
  }

  // .tensorflow.data.ReleaseJobClientUpdate release_job_client = 7;
  if (has_release_job_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_release_job_client(), deterministic, target);
  }

  // .tensorflow.data.ProduceSplitUpdate produce_split = 8;
  if (has_produce_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_produce_split(), deterministic, target);
  }

  // .tensorflow.data.CreatePendingTaskUpdate create_pending_task = 9;
  if (has_create_pending_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_create_pending_task(), deterministic, target);
  }

  // .tensorflow.data.ClientHeartbeatUpdate client_heartbeat = 10;
  if (has_client_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_client_heartbeat(), deterministic, target);
  }

  // .tensorflow.data.RemoveTaskUpdate remove_task = 11;
  if (has_remove_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_remove_task(), deterministic, target);
  }

  // .tensorflow.data.GarbageCollectJobUpdate garbage_collect_job = 12;
  if (has_garbage_collect_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_garbage_collect_job(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.Update)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (update_type_case()) {
    // .tensorflow.data.RegisterDatasetUpdate register_dataset = 1;
    case kRegisterDataset: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.register_dataset_);
      break;
    }
    // .tensorflow.data.RegisterWorkerUpdate register_worker = 5;
    case kRegisterWorker: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.register_worker_);
      break;
    }
    // .tensorflow.data.CreateJobUpdate create_job = 2;
    case kCreateJob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.create_job_);
      break;
    }
    // .tensorflow.data.ProduceSplitUpdate produce_split = 8;
    case kProduceSplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.produce_split_);
      break;
    }
    // .tensorflow.data.AcquireJobClientUpdate acquire_job_client = 6;
    case kAcquireJobClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.acquire_job_client_);
      break;
    }
    // .tensorflow.data.ReleaseJobClientUpdate release_job_client = 7;
    case kReleaseJobClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.release_job_client_);
      break;
    }
    // .tensorflow.data.GarbageCollectJobUpdate garbage_collect_job = 12;
    case kGarbageCollectJob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.garbage_collect_job_);
      break;
    }
    // .tensorflow.data.RemoveTaskUpdate remove_task = 11;
    case kRemoveTask: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.remove_task_);
      break;
    }
    // .tensorflow.data.CreatePendingTaskUpdate create_pending_task = 9;
    case kCreatePendingTask: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.create_pending_task_);
      break;
    }
    // .tensorflow.data.ClientHeartbeatUpdate client_heartbeat = 10;
    case kClientHeartbeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.client_heartbeat_);
      break;
    }
    // .tensorflow.data.CreateTaskUpdate create_task = 3;
    case kCreateTask: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.create_task_);
      break;
    }
    // .tensorflow.data.FinishTaskUpdate finish_task = 4;
    case kFinishTask: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_type_.finish_task_);
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.Update)
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_type_case()) {
    case kRegisterDataset: {
      mutable_register_dataset()->::tensorflow::data::RegisterDatasetUpdate::MergeFrom(from.register_dataset());
      break;
    }
    case kRegisterWorker: {
      mutable_register_worker()->::tensorflow::data::RegisterWorkerUpdate::MergeFrom(from.register_worker());
      break;
    }
    case kCreateJob: {
      mutable_create_job()->::tensorflow::data::CreateJobUpdate::MergeFrom(from.create_job());
      break;
    }
    case kProduceSplit: {
      mutable_produce_split()->::tensorflow::data::ProduceSplitUpdate::MergeFrom(from.produce_split());
      break;
    }
    case kAcquireJobClient: {
      mutable_acquire_job_client()->::tensorflow::data::AcquireJobClientUpdate::MergeFrom(from.acquire_job_client());
      break;
    }
    case kReleaseJobClient: {
      mutable_release_job_client()->::tensorflow::data::ReleaseJobClientUpdate::MergeFrom(from.release_job_client());
      break;
    }
    case kGarbageCollectJob: {
      mutable_garbage_collect_job()->::tensorflow::data::GarbageCollectJobUpdate::MergeFrom(from.garbage_collect_job());
      break;
    }
    case kRemoveTask: {
      mutable_remove_task()->::tensorflow::data::RemoveTaskUpdate::MergeFrom(from.remove_task());
      break;
    }
    case kCreatePendingTask: {
      mutable_create_pending_task()->::tensorflow::data::CreatePendingTaskUpdate::MergeFrom(from.create_pending_task());
      break;
    }
    case kClientHeartbeat: {
      mutable_client_heartbeat()->::tensorflow::data::ClientHeartbeatUpdate::MergeFrom(from.client_heartbeat());
      break;
    }
    case kCreateTask: {
      mutable_create_task()->::tensorflow::data::CreateTaskUpdate::MergeFrom(from.create_task());
      break;
    }
    case kFinishTask: {
      mutable_finish_task()->::tensorflow::data::FinishTaskUpdate::MergeFrom(from.finish_task());
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::Swap(Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Update::InternalSwap(Update* other) {
  using std::swap;
  swap(update_type_, other->update_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterDatasetUpdate::InitAsDefaultInstance() {
  ::tensorflow::data::_RegisterDatasetUpdate_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::tensorflow::data::DataServiceMetadata*>(
      ::tensorflow::data::DataServiceMetadata::internal_default_instance());
}
void RegisterDatasetUpdate::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterDatasetUpdate::kDatasetIdFieldNumber;
const int RegisterDatasetUpdate::kFingerprintFieldNumber;
const int RegisterDatasetUpdate::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterDatasetUpdate::RegisterDatasetUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RegisterDatasetUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.RegisterDatasetUpdate)
}
RegisterDatasetUpdate::RegisterDatasetUpdate(const RegisterDatasetUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::tensorflow::data::DataServiceMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  ::memcpy(&dataset_id_, &from.dataset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fingerprint_) -
    reinterpret_cast<char*>(&dataset_id_)) + sizeof(fingerprint_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.RegisterDatasetUpdate)
}

void RegisterDatasetUpdate::SharedCtor() {
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fingerprint_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(fingerprint_));
}

RegisterDatasetUpdate::~RegisterDatasetUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.RegisterDatasetUpdate)
  SharedDtor();
}

void RegisterDatasetUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void RegisterDatasetUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterDatasetUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterDatasetUpdate& RegisterDatasetUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RegisterDatasetUpdate.base);
  return *internal_default_instance();
}


void RegisterDatasetUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.RegisterDatasetUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  ::memset(&dataset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fingerprint_) -
      reinterpret_cast<char*>(&dataset_id_)) + sizeof(fingerprint_));
  _internal_metadata_.Clear();
}

bool RegisterDatasetUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.RegisterDatasetUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 dataset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dataset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fingerprint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fingerprint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.DataServiceMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.RegisterDatasetUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.RegisterDatasetUpdate)
  return false;
#undef DO_
}

void RegisterDatasetUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.RegisterDatasetUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dataset_id = 1;
  if (this->dataset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dataset_id(), output);
  }

  // uint64 fingerprint = 2;
  if (this->fingerprint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fingerprint(), output);
  }

  // .tensorflow.data.DataServiceMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_metadata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.RegisterDatasetUpdate)
}

::google::protobuf::uint8* RegisterDatasetUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.RegisterDatasetUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dataset_id = 1;
  if (this->dataset_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dataset_id(), target);
  }

  // uint64 fingerprint = 2;
  if (this->fingerprint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fingerprint(), target);
  }

  // .tensorflow.data.DataServiceMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_metadata(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.RegisterDatasetUpdate)
  return target;
}

size_t RegisterDatasetUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.RegisterDatasetUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.DataServiceMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // int64 dataset_id = 1;
  if (this->dataset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dataset_id());
  }

  // uint64 fingerprint = 2;
  if (this->fingerprint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fingerprint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterDatasetUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.RegisterDatasetUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterDatasetUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterDatasetUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.RegisterDatasetUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.RegisterDatasetUpdate)
    MergeFrom(*source);
  }
}

void RegisterDatasetUpdate::MergeFrom(const RegisterDatasetUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.RegisterDatasetUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    mutable_metadata()->::tensorflow::data::DataServiceMetadata::MergeFrom(from.metadata());
  }
  if (from.dataset_id() != 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.fingerprint() != 0) {
    set_fingerprint(from.fingerprint());
  }
}

void RegisterDatasetUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.RegisterDatasetUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterDatasetUpdate::CopyFrom(const RegisterDatasetUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.RegisterDatasetUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDatasetUpdate::IsInitialized() const {
  return true;
}

void RegisterDatasetUpdate::Swap(RegisterDatasetUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterDatasetUpdate::InternalSwap(RegisterDatasetUpdate* other) {
  using std::swap;
  swap(metadata_, other->metadata_);
  swap(dataset_id_, other->dataset_id_);
  swap(fingerprint_, other->fingerprint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterDatasetUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterWorkerUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterWorkerUpdate::kWorkerAddressFieldNumber;
const int RegisterWorkerUpdate::kTransferAddressFieldNumber;
const int RegisterWorkerUpdate::kWorkerTagsFieldNumber;
const int RegisterWorkerUpdate::kWorkerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterWorkerUpdate::RegisterWorkerUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RegisterWorkerUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.RegisterWorkerUpdate)
}
RegisterWorkerUpdate::RegisterWorkerUpdate(const RegisterWorkerUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      worker_tags_(from.worker_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_address().size() > 0) {
    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transfer_address().size() > 0) {
    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  worker_uid_ = from.worker_uid_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.RegisterWorkerUpdate)
}

void RegisterWorkerUpdate::SharedCtor() {
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_uid_ = GOOGLE_LONGLONG(0);
}

RegisterWorkerUpdate::~RegisterWorkerUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.RegisterWorkerUpdate)
  SharedDtor();
}

void RegisterWorkerUpdate::SharedDtor() {
  worker_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterWorkerUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterWorkerUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterWorkerUpdate& RegisterWorkerUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RegisterWorkerUpdate.base);
  return *internal_default_instance();
}


void RegisterWorkerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.RegisterWorkerUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_tags_.Clear();
  worker_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_uid_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RegisterWorkerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.RegisterWorkerUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string worker_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_address().data(), static_cast<int>(this->worker_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.RegisterWorkerUpdate.worker_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transfer_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.RegisterWorkerUpdate.transfer_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string worker_tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worker_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_tags(this->worker_tags_size() - 1).data(),
            static_cast<int>(this->worker_tags(this->worker_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.RegisterWorkerUpdate.worker_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 worker_uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worker_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.RegisterWorkerUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.RegisterWorkerUpdate)
  return false;
#undef DO_
}

void RegisterWorkerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.RegisterWorkerUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_address = 1;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.RegisterWorkerUpdate.worker_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->worker_address(), output);
  }

  // string transfer_address = 2;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.RegisterWorkerUpdate.transfer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transfer_address(), output);
  }

  // repeated string worker_tags = 3;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.RegisterWorkerUpdate.worker_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->worker_tags(i), output);
  }

  // int64 worker_uid = 4;
  if (this->worker_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->worker_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.RegisterWorkerUpdate)
}

::google::protobuf::uint8* RegisterWorkerUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.RegisterWorkerUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_address = 1;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.RegisterWorkerUpdate.worker_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->worker_address(), target);
  }

  // string transfer_address = 2;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.RegisterWorkerUpdate.transfer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transfer_address(), target);
  }

  // repeated string worker_tags = 3;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.RegisterWorkerUpdate.worker_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->worker_tags(i), target);
  }

  // int64 worker_uid = 4;
  if (this->worker_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->worker_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.RegisterWorkerUpdate)
  return target;
}

size_t RegisterWorkerUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.RegisterWorkerUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string worker_tags = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->worker_tags_size());
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worker_tags(i));
  }

  // string worker_address = 1;
  if (this->worker_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_address());
  }

  // string transfer_address = 2;
  if (this->transfer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transfer_address());
  }

  // int64 worker_uid = 4;
  if (this->worker_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worker_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterWorkerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.RegisterWorkerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterWorkerUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterWorkerUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.RegisterWorkerUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.RegisterWorkerUpdate)
    MergeFrom(*source);
  }
}

void RegisterWorkerUpdate::MergeFrom(const RegisterWorkerUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.RegisterWorkerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_tags_.MergeFrom(from.worker_tags_);
  if (from.worker_address().size() > 0) {

    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.transfer_address().size() > 0) {

    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  if (from.worker_uid() != 0) {
    set_worker_uid(from.worker_uid());
  }
}

void RegisterWorkerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.RegisterWorkerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterWorkerUpdate::CopyFrom(const RegisterWorkerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.RegisterWorkerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterWorkerUpdate::IsInitialized() const {
  return true;
}

void RegisterWorkerUpdate::Swap(RegisterWorkerUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterWorkerUpdate::InternalSwap(RegisterWorkerUpdate* other) {
  using std::swap;
  worker_tags_.InternalSwap(CastToBase(&other->worker_tags_));
  worker_address_.Swap(&other->worker_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transfer_address_.Swap(&other->transfer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worker_uid_, other->worker_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterWorkerUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateJobUpdate::InitAsDefaultInstance() {
  ::tensorflow::data::_CreateJobUpdate_default_instance_._instance.get_mutable()->processing_mode_def_ = const_cast< ::tensorflow::data::ProcessingModeDef*>(
      ::tensorflow::data::ProcessingModeDef::internal_default_instance());
  ::tensorflow::data::_CreateJobUpdate_default_instance_._instance.get_mutable()->job_key_ = const_cast< ::tensorflow::data::JobKeyDef*>(
      ::tensorflow::data::JobKeyDef::internal_default_instance());
  ::tensorflow::data::_CreateJobUpdate_default_instance_.num_consumers_ = GOOGLE_LONGLONG(0);
}
void CreateJobUpdate::clear_processing_mode_def() {
  if (GetArenaNoVirtual() == NULL && processing_mode_def_ != NULL) {
    delete processing_mode_def_;
  }
  processing_mode_def_ = NULL;
}
void CreateJobUpdate::clear_job_key() {
  if (GetArenaNoVirtual() == NULL && job_key_ != NULL) {
    delete job_key_;
  }
  job_key_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateJobUpdate::kJobIdFieldNumber;
const int CreateJobUpdate::kDatasetIdFieldNumber;
const int CreateJobUpdate::kProcessingModeDefFieldNumber;
const int CreateJobUpdate::kNumSplitProvidersFieldNumber;
const int CreateJobUpdate::kJobKeyFieldNumber;
const int CreateJobUpdate::kNumConsumersFieldNumber;
const int CreateJobUpdate::kTargetWorkersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateJobUpdate::CreateJobUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreateJobUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.CreateJobUpdate)
}
CreateJobUpdate::CreateJobUpdate(const CreateJobUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job_key()) {
    job_key_ = new ::tensorflow::data::JobKeyDef(*from.job_key_);
  } else {
    job_key_ = NULL;
  }
  if (from.has_processing_mode_def()) {
    processing_mode_def_ = new ::tensorflow::data::ProcessingModeDef(*from.processing_mode_def_);
  } else {
    processing_mode_def_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_split_providers_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(num_split_providers_));
  clear_has_optional_num_consumers();
  switch (from.optional_num_consumers_case()) {
    case kNumConsumers: {
      set_num_consumers(from.num_consumers());
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CreateJobUpdate)
}

void CreateJobUpdate::SharedCtor() {
  ::memset(&job_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_split_providers_) -
      reinterpret_cast<char*>(&job_key_)) + sizeof(num_split_providers_));
  clear_has_optional_num_consumers();
}

CreateJobUpdate::~CreateJobUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CreateJobUpdate)
  SharedDtor();
}

void CreateJobUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete job_key_;
  if (this != internal_default_instance()) delete processing_mode_def_;
  if (has_optional_num_consumers()) {
    clear_optional_num_consumers();
  }
}

void CreateJobUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreateJobUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateJobUpdate& CreateJobUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreateJobUpdate.base);
  return *internal_default_instance();
}


void CreateJobUpdate::clear_optional_num_consumers() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.CreateJobUpdate)
  switch (optional_num_consumers_case()) {
    case kNumConsumers: {
      // No need to clear
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_NUM_CONSUMERS_NOT_SET;
}


void CreateJobUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CreateJobUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && job_key_ != NULL) {
    delete job_key_;
  }
  job_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && processing_mode_def_ != NULL) {
    delete processing_mode_def_;
  }
  processing_mode_def_ = NULL;
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_split_providers_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(num_split_providers_));
  clear_optional_num_consumers();
  _internal_metadata_.Clear();
}

bool CreateJobUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.CreateJobUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dataset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.JobKeyDef job_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_consumers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          clear_optional_num_consumers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_num_consumers_.num_consumers_)));
          set_has_num_consumers();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_split_providers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_split_providers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ProcessingModeDef processing_mode_def = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_mode_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.TargetWorkers target_workers = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_target_workers(static_cast< ::tensorflow::data::TargetWorkers >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.CreateJobUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.CreateJobUpdate)
  return false;
#undef DO_
}

void CreateJobUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.CreateJobUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_id(), output);
  }

  // int64 dataset_id = 2;
  if (this->dataset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dataset_id(), output);
  }

  // .tensorflow.data.JobKeyDef job_key = 4;
  if (this->has_job_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_job_key(), output);
  }

  // int64 num_consumers = 7;
  if (has_num_consumers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->num_consumers(), output);
  }

  // int64 num_split_providers = 8;
  if (this->num_split_providers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_split_providers(), output);
  }

  // .tensorflow.data.ProcessingModeDef processing_mode_def = 9;
  if (this->has_processing_mode_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_processing_mode_def(), output);
  }

  // .tensorflow.data.TargetWorkers target_workers = 10;
  if (this->target_workers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->target_workers(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.CreateJobUpdate)
}

::google::protobuf::uint8* CreateJobUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CreateJobUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_id(), target);
  }

  // int64 dataset_id = 2;
  if (this->dataset_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dataset_id(), target);
  }

  // .tensorflow.data.JobKeyDef job_key = 4;
  if (this->has_job_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_job_key(), deterministic, target);
  }

  // int64 num_consumers = 7;
  if (has_num_consumers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->num_consumers(), target);
  }

  // int64 num_split_providers = 8;
  if (this->num_split_providers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->num_split_providers(), target);
  }

  // .tensorflow.data.ProcessingModeDef processing_mode_def = 9;
  if (this->has_processing_mode_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_processing_mode_def(), deterministic, target);
  }

  // .tensorflow.data.TargetWorkers target_workers = 10;
  if (this->target_workers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->target_workers(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CreateJobUpdate)
  return target;
}

size_t CreateJobUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CreateJobUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.JobKeyDef job_key = 4;
  if (this->has_job_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_key_);
  }

  // .tensorflow.data.ProcessingModeDef processing_mode_def = 9;
  if (this->has_processing_mode_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *processing_mode_def_);
  }

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 dataset_id = 2;
  if (this->dataset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dataset_id());
  }

  // .tensorflow.data.TargetWorkers target_workers = 10;
  if (this->target_workers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_workers());
  }

  // int64 num_split_providers = 8;
  if (this->num_split_providers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_split_providers());
  }

  switch (optional_num_consumers_case()) {
    // int64 num_consumers = 7;
    case kNumConsumers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_consumers());
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateJobUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.CreateJobUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateJobUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateJobUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.CreateJobUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.CreateJobUpdate)
    MergeFrom(*source);
  }
}

void CreateJobUpdate::MergeFrom(const CreateJobUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CreateJobUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job_key()) {
    mutable_job_key()->::tensorflow::data::JobKeyDef::MergeFrom(from.job_key());
  }
  if (from.has_processing_mode_def()) {
    mutable_processing_mode_def()->::tensorflow::data::ProcessingModeDef::MergeFrom(from.processing_mode_def());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.dataset_id() != 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.target_workers() != 0) {
    set_target_workers(from.target_workers());
  }
  if (from.num_split_providers() != 0) {
    set_num_split_providers(from.num_split_providers());
  }
  switch (from.optional_num_consumers_case()) {
    case kNumConsumers: {
      set_num_consumers(from.num_consumers());
      break;
    }
    case OPTIONAL_NUM_CONSUMERS_NOT_SET: {
      break;
    }
  }
}

void CreateJobUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.CreateJobUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateJobUpdate::CopyFrom(const CreateJobUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CreateJobUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateJobUpdate::IsInitialized() const {
  return true;
}

void CreateJobUpdate::Swap(CreateJobUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateJobUpdate::InternalSwap(CreateJobUpdate* other) {
  using std::swap;
  swap(job_key_, other->job_key_);
  swap(processing_mode_def_, other->processing_mode_def_);
  swap(job_id_, other->job_id_);
  swap(dataset_id_, other->dataset_id_);
  swap(target_workers_, other->target_workers_);
  swap(num_split_providers_, other->num_split_providers_);
  swap(optional_num_consumers_, other->optional_num_consumers_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateJobUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProduceSplitUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProduceSplitUpdate::kJobIdFieldNumber;
const int ProduceSplitUpdate::kIterationFieldNumber;
const int ProduceSplitUpdate::kSplitProviderIndexFieldNumber;
const int ProduceSplitUpdate::kFinishedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProduceSplitUpdate::ProduceSplitUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ProduceSplitUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ProduceSplitUpdate)
}
ProduceSplitUpdate::ProduceSplitUpdate(const ProduceSplitUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ProduceSplitUpdate)
}

void ProduceSplitUpdate::SharedCtor() {
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(finished_));
}

ProduceSplitUpdate::~ProduceSplitUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ProduceSplitUpdate)
  SharedDtor();
}

void ProduceSplitUpdate::SharedDtor() {
}

void ProduceSplitUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProduceSplitUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProduceSplitUpdate& ProduceSplitUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ProduceSplitUpdate.base);
  return *internal_default_instance();
}


void ProduceSplitUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ProduceSplitUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

bool ProduceSplitUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ProduceSplitUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 iteration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 split_provider_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &split_provider_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ProduceSplitUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ProduceSplitUpdate)
  return false;
#undef DO_
}

void ProduceSplitUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ProduceSplitUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_id(), output);
  }

  // int64 iteration = 2;
  if (this->iteration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iteration(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // int64 split_provider_index = 4;
  if (this->split_provider_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->split_provider_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ProduceSplitUpdate)
}

::google::protobuf::uint8* ProduceSplitUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ProduceSplitUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_id(), target);
  }

  // int64 iteration = 2;
  if (this->iteration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iteration(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // int64 split_provider_index = 4;
  if (this->split_provider_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->split_provider_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ProduceSplitUpdate)
  return target;
}

size_t ProduceSplitUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ProduceSplitUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 iteration = 2;
  if (this->iteration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->iteration());
  }

  // int64 split_provider_index = 4;
  if (this->split_provider_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->split_provider_index());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProduceSplitUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ProduceSplitUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ProduceSplitUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProduceSplitUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ProduceSplitUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ProduceSplitUpdate)
    MergeFrom(*source);
  }
}

void ProduceSplitUpdate::MergeFrom(const ProduceSplitUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ProduceSplitUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.iteration() != 0) {
    set_iteration(from.iteration());
  }
  if (from.split_provider_index() != 0) {
    set_split_provider_index(from.split_provider_index());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void ProduceSplitUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ProduceSplitUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceSplitUpdate::CopyFrom(const ProduceSplitUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ProduceSplitUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceSplitUpdate::IsInitialized() const {
  return true;
}

void ProduceSplitUpdate::Swap(ProduceSplitUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProduceSplitUpdate::InternalSwap(ProduceSplitUpdate* other) {
  using std::swap;
  swap(job_id_, other->job_id_);
  swap(iteration_, other->iteration_);
  swap(split_provider_index_, other->split_provider_index_);
  swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProduceSplitUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcquireJobClientUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcquireJobClientUpdate::kJobIdFieldNumber;
const int AcquireJobClientUpdate::kJobClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcquireJobClientUpdate::AcquireJobClientUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_AcquireJobClientUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.AcquireJobClientUpdate)
}
AcquireJobClientUpdate::AcquireJobClientUpdate(const AcquireJobClientUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_client_id_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(job_client_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.AcquireJobClientUpdate)
}

void AcquireJobClientUpdate::SharedCtor() {
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_client_id_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(job_client_id_));
}

AcquireJobClientUpdate::~AcquireJobClientUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.AcquireJobClientUpdate)
  SharedDtor();
}

void AcquireJobClientUpdate::SharedDtor() {
}

void AcquireJobClientUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AcquireJobClientUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcquireJobClientUpdate& AcquireJobClientUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_AcquireJobClientUpdate.base);
  return *internal_default_instance();
}


void AcquireJobClientUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.AcquireJobClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_client_id_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(job_client_id_));
  _internal_metadata_.Clear();
}

bool AcquireJobClientUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.AcquireJobClientUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.AcquireJobClientUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.AcquireJobClientUpdate)
  return false;
#undef DO_
}

void AcquireJobClientUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.AcquireJobClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_id(), output);
  }

  // int64 job_client_id = 2;
  if (this->job_client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_client_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.AcquireJobClientUpdate)
}

::google::protobuf::uint8* AcquireJobClientUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.AcquireJobClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_id(), target);
  }

  // int64 job_client_id = 2;
  if (this->job_client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_client_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.AcquireJobClientUpdate)
  return target;
}

size_t AcquireJobClientUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.AcquireJobClientUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 job_client_id = 2;
  if (this->job_client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcquireJobClientUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.AcquireJobClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AcquireJobClientUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcquireJobClientUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.AcquireJobClientUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.AcquireJobClientUpdate)
    MergeFrom(*source);
  }
}

void AcquireJobClientUpdate::MergeFrom(const AcquireJobClientUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.AcquireJobClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.job_client_id() != 0) {
    set_job_client_id(from.job_client_id());
  }
}

void AcquireJobClientUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.AcquireJobClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquireJobClientUpdate::CopyFrom(const AcquireJobClientUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.AcquireJobClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquireJobClientUpdate::IsInitialized() const {
  return true;
}

void AcquireJobClientUpdate::Swap(AcquireJobClientUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcquireJobClientUpdate::InternalSwap(AcquireJobClientUpdate* other) {
  using std::swap;
  swap(job_id_, other->job_id_);
  swap(job_client_id_, other->job_client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AcquireJobClientUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReleaseJobClientUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseJobClientUpdate::kJobClientIdFieldNumber;
const int ReleaseJobClientUpdate::kTimeMicrosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseJobClientUpdate::ReleaseJobClientUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ReleaseJobClientUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ReleaseJobClientUpdate)
}
ReleaseJobClientUpdate::ReleaseJobClientUpdate(const ReleaseJobClientUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&job_client_id_, &from.job_client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_micros_) -
    reinterpret_cast<char*>(&job_client_id_)) + sizeof(time_micros_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ReleaseJobClientUpdate)
}

void ReleaseJobClientUpdate::SharedCtor() {
  ::memset(&job_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_micros_) -
      reinterpret_cast<char*>(&job_client_id_)) + sizeof(time_micros_));
}

ReleaseJobClientUpdate::~ReleaseJobClientUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ReleaseJobClientUpdate)
  SharedDtor();
}

void ReleaseJobClientUpdate::SharedDtor() {
}

void ReleaseJobClientUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReleaseJobClientUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReleaseJobClientUpdate& ReleaseJobClientUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ReleaseJobClientUpdate.base);
  return *internal_default_instance();
}


void ReleaseJobClientUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ReleaseJobClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&job_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_micros_) -
      reinterpret_cast<char*>(&job_client_id_)) + sizeof(time_micros_));
  _internal_metadata_.Clear();
}

bool ReleaseJobClientUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ReleaseJobClientUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_micros = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ReleaseJobClientUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ReleaseJobClientUpdate)
  return false;
#undef DO_
}

void ReleaseJobClientUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ReleaseJobClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_client_id = 1;
  if (this->job_client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_client_id(), output);
  }

  // int64 time_micros = 2;
  if (this->time_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_micros(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ReleaseJobClientUpdate)
}

::google::protobuf::uint8* ReleaseJobClientUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ReleaseJobClientUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_client_id = 1;
  if (this->job_client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_client_id(), target);
  }

  // int64 time_micros = 2;
  if (this->time_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_micros(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ReleaseJobClientUpdate)
  return target;
}

size_t ReleaseJobClientUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ReleaseJobClientUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 job_client_id = 1;
  if (this->job_client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_client_id());
  }

  // int64 time_micros = 2;
  if (this->time_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_micros());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseJobClientUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ReleaseJobClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseJobClientUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseJobClientUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ReleaseJobClientUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ReleaseJobClientUpdate)
    MergeFrom(*source);
  }
}

void ReleaseJobClientUpdate::MergeFrom(const ReleaseJobClientUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ReleaseJobClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_client_id() != 0) {
    set_job_client_id(from.job_client_id());
  }
  if (from.time_micros() != 0) {
    set_time_micros(from.time_micros());
  }
}

void ReleaseJobClientUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ReleaseJobClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseJobClientUpdate::CopyFrom(const ReleaseJobClientUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ReleaseJobClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseJobClientUpdate::IsInitialized() const {
  return true;
}

void ReleaseJobClientUpdate::Swap(ReleaseJobClientUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseJobClientUpdate::InternalSwap(ReleaseJobClientUpdate* other) {
  using std::swap;
  swap(job_client_id_, other->job_client_id_);
  swap(time_micros_, other->time_micros_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReleaseJobClientUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GarbageCollectJobUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GarbageCollectJobUpdate::kJobIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GarbageCollectJobUpdate::GarbageCollectJobUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_GarbageCollectJobUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.GarbageCollectJobUpdate)
}
GarbageCollectJobUpdate::GarbageCollectJobUpdate(const GarbageCollectJobUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_id_ = from.job_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.GarbageCollectJobUpdate)
}

void GarbageCollectJobUpdate::SharedCtor() {
  job_id_ = GOOGLE_LONGLONG(0);
}

GarbageCollectJobUpdate::~GarbageCollectJobUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.GarbageCollectJobUpdate)
  SharedDtor();
}

void GarbageCollectJobUpdate::SharedDtor() {
}

void GarbageCollectJobUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GarbageCollectJobUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GarbageCollectJobUpdate& GarbageCollectJobUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_GarbageCollectJobUpdate.base);
  return *internal_default_instance();
}


void GarbageCollectJobUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.GarbageCollectJobUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GarbageCollectJobUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.GarbageCollectJobUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.GarbageCollectJobUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.GarbageCollectJobUpdate)
  return false;
#undef DO_
}

void GarbageCollectJobUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.GarbageCollectJobUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.GarbageCollectJobUpdate)
}

::google::protobuf::uint8* GarbageCollectJobUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.GarbageCollectJobUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.GarbageCollectJobUpdate)
  return target;
}

size_t GarbageCollectJobUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.GarbageCollectJobUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GarbageCollectJobUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.GarbageCollectJobUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const GarbageCollectJobUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GarbageCollectJobUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.GarbageCollectJobUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.GarbageCollectJobUpdate)
    MergeFrom(*source);
  }
}

void GarbageCollectJobUpdate::MergeFrom(const GarbageCollectJobUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.GarbageCollectJobUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
}

void GarbageCollectJobUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.GarbageCollectJobUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarbageCollectJobUpdate::CopyFrom(const GarbageCollectJobUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.GarbageCollectJobUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectJobUpdate::IsInitialized() const {
  return true;
}

void GarbageCollectJobUpdate::Swap(GarbageCollectJobUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GarbageCollectJobUpdate::InternalSwap(GarbageCollectJobUpdate* other) {
  using std::swap;
  swap(job_id_, other->job_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GarbageCollectJobUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoveTaskUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveTaskUpdate::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveTaskUpdate::RemoveTaskUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RemoveTaskUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.RemoveTaskUpdate)
}
RemoveTaskUpdate::RemoveTaskUpdate(const RemoveTaskUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.RemoveTaskUpdate)
}

void RemoveTaskUpdate::SharedCtor() {
  task_id_ = GOOGLE_LONGLONG(0);
}

RemoveTaskUpdate::~RemoveTaskUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.RemoveTaskUpdate)
  SharedDtor();
}

void RemoveTaskUpdate::SharedDtor() {
}

void RemoveTaskUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoveTaskUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveTaskUpdate& RemoveTaskUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_RemoveTaskUpdate.base);
  return *internal_default_instance();
}


void RemoveTaskUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.RemoveTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RemoveTaskUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.RemoveTaskUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.RemoveTaskUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.RemoveTaskUpdate)
  return false;
#undef DO_
}

void RemoveTaskUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.RemoveTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.RemoveTaskUpdate)
}

::google::protobuf::uint8* RemoveTaskUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.RemoveTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.RemoveTaskUpdate)
  return target;
}

size_t RemoveTaskUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.RemoveTaskUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveTaskUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.RemoveTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveTaskUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveTaskUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.RemoveTaskUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.RemoveTaskUpdate)
    MergeFrom(*source);
  }
}

void RemoveTaskUpdate::MergeFrom(const RemoveTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.RemoveTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void RemoveTaskUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.RemoveTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveTaskUpdate::CopyFrom(const RemoveTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.RemoveTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTaskUpdate::IsInitialized() const {
  return true;
}

void RemoveTaskUpdate::Swap(RemoveTaskUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveTaskUpdate::InternalSwap(RemoveTaskUpdate* other) {
  using std::swap;
  swap(task_id_, other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoveTaskUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskRejected::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRejected::kNewTargetRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRejected::TaskRejected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_TaskRejected.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.TaskRejected)
}
TaskRejected::TaskRejected(const TaskRejected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_target_round_ = from.new_target_round_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.TaskRejected)
}

void TaskRejected::SharedCtor() {
  new_target_round_ = GOOGLE_LONGLONG(0);
}

TaskRejected::~TaskRejected() {
  // @@protoc_insertion_point(destructor:tensorflow.data.TaskRejected)
  SharedDtor();
}

void TaskRejected::SharedDtor() {
}

void TaskRejected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskRejected::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRejected& TaskRejected::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_TaskRejected.base);
  return *internal_default_instance();
}


void TaskRejected::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.TaskRejected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_target_round_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TaskRejected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.TaskRejected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 new_target_round = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_target_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.TaskRejected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.TaskRejected)
  return false;
#undef DO_
}

void TaskRejected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.TaskRejected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 new_target_round = 1;
  if (this->new_target_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->new_target_round(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.TaskRejected)
}

::google::protobuf::uint8* TaskRejected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.TaskRejected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 new_target_round = 1;
  if (this->new_target_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->new_target_round(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.TaskRejected)
  return target;
}

size_t TaskRejected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.TaskRejected)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 new_target_round = 1;
  if (this->new_target_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_target_round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskRejected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.TaskRejected)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRejected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRejected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.TaskRejected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.TaskRejected)
    MergeFrom(*source);
  }
}

void TaskRejected::MergeFrom(const TaskRejected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.TaskRejected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_target_round() != 0) {
    set_new_target_round(from.new_target_round());
  }
}

void TaskRejected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.TaskRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRejected::CopyFrom(const TaskRejected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.TaskRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRejected::IsInitialized() const {
  return true;
}

void TaskRejected::Swap(TaskRejected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRejected::InternalSwap(TaskRejected* other) {
  using std::swap;
  swap(new_target_round_, other->new_target_round_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskRejected::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientHeartbeatUpdate::InitAsDefaultInstance() {
  ::tensorflow::data::_ClientHeartbeatUpdate_default_instance_._instance.get_mutable()->task_rejected_ = const_cast< ::tensorflow::data::TaskRejected*>(
      ::tensorflow::data::TaskRejected::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientHeartbeatUpdate::kJobClientIdFieldNumber;
const int ClientHeartbeatUpdate::kTaskAcceptedFieldNumber;
const int ClientHeartbeatUpdate::kTaskRejectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientHeartbeatUpdate::ClientHeartbeatUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ClientHeartbeatUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ClientHeartbeatUpdate)
}
ClientHeartbeatUpdate::ClientHeartbeatUpdate(const ClientHeartbeatUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task_rejected()) {
    task_rejected_ = new ::tensorflow::data::TaskRejected(*from.task_rejected_);
  } else {
    task_rejected_ = NULL;
  }
  ::memcpy(&job_client_id_, &from.job_client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_accepted_) -
    reinterpret_cast<char*>(&job_client_id_)) + sizeof(task_accepted_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ClientHeartbeatUpdate)
}

void ClientHeartbeatUpdate::SharedCtor() {
  ::memset(&task_rejected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_accepted_) -
      reinterpret_cast<char*>(&task_rejected_)) + sizeof(task_accepted_));
}

ClientHeartbeatUpdate::~ClientHeartbeatUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ClientHeartbeatUpdate)
  SharedDtor();
}

void ClientHeartbeatUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete task_rejected_;
}

void ClientHeartbeatUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientHeartbeatUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientHeartbeatUpdate& ClientHeartbeatUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_ClientHeartbeatUpdate.base);
  return *internal_default_instance();
}


void ClientHeartbeatUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ClientHeartbeatUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && task_rejected_ != NULL) {
    delete task_rejected_;
  }
  task_rejected_ = NULL;
  ::memset(&job_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_accepted_) -
      reinterpret_cast<char*>(&job_client_id_)) + sizeof(task_accepted_));
  _internal_metadata_.Clear();
}

bool ClientHeartbeatUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ClientHeartbeatUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool task_accepted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &task_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.TaskRejected task_rejected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_rejected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ClientHeartbeatUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ClientHeartbeatUpdate)
  return false;
#undef DO_
}

void ClientHeartbeatUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ClientHeartbeatUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_client_id = 1;
  if (this->job_client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_client_id(), output);
  }

  // bool task_accepted = 2;
  if (this->task_accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->task_accepted(), output);
  }

  // .tensorflow.data.TaskRejected task_rejected = 3;
  if (this->has_task_rejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_task_rejected(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ClientHeartbeatUpdate)
}

::google::protobuf::uint8* ClientHeartbeatUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ClientHeartbeatUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_client_id = 1;
  if (this->job_client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_client_id(), target);
  }

  // bool task_accepted = 2;
  if (this->task_accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->task_accepted(), target);
  }

  // .tensorflow.data.TaskRejected task_rejected = 3;
  if (this->has_task_rejected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_task_rejected(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ClientHeartbeatUpdate)
  return target;
}

size_t ClientHeartbeatUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ClientHeartbeatUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.TaskRejected task_rejected = 3;
  if (this->has_task_rejected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_rejected_);
  }

  // int64 job_client_id = 1;
  if (this->job_client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_client_id());
  }

  // bool task_accepted = 2;
  if (this->task_accepted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientHeartbeatUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ClientHeartbeatUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientHeartbeatUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientHeartbeatUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ClientHeartbeatUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ClientHeartbeatUpdate)
    MergeFrom(*source);
  }
}

void ClientHeartbeatUpdate::MergeFrom(const ClientHeartbeatUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ClientHeartbeatUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_rejected()) {
    mutable_task_rejected()->::tensorflow::data::TaskRejected::MergeFrom(from.task_rejected());
  }
  if (from.job_client_id() != 0) {
    set_job_client_id(from.job_client_id());
  }
  if (from.task_accepted() != 0) {
    set_task_accepted(from.task_accepted());
  }
}

void ClientHeartbeatUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ClientHeartbeatUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeartbeatUpdate::CopyFrom(const ClientHeartbeatUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ClientHeartbeatUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeartbeatUpdate::IsInitialized() const {
  return true;
}

void ClientHeartbeatUpdate::Swap(ClientHeartbeatUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientHeartbeatUpdate::InternalSwap(ClientHeartbeatUpdate* other) {
  using std::swap;
  swap(task_rejected_, other->task_rejected_);
  swap(job_client_id_, other->job_client_id_);
  swap(task_accepted_, other->task_accepted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientHeartbeatUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreatePendingTaskUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatePendingTaskUpdate::kTaskIdFieldNumber;
const int CreatePendingTaskUpdate::kJobIdFieldNumber;
const int CreatePendingTaskUpdate::kWorkerAddressFieldNumber;
const int CreatePendingTaskUpdate::kTransferAddressFieldNumber;
const int CreatePendingTaskUpdate::kWorkerTagsFieldNumber;
const int CreatePendingTaskUpdate::kWorkerUidFieldNumber;
const int CreatePendingTaskUpdate::kStartingRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatePendingTaskUpdate::CreatePendingTaskUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreatePendingTaskUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.CreatePendingTaskUpdate)
}
CreatePendingTaskUpdate::CreatePendingTaskUpdate(const CreatePendingTaskUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      worker_tags_(from.worker_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_address().size() > 0) {
    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transfer_address().size() > 0) {
    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&worker_uid_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CreatePendingTaskUpdate)
}

void CreatePendingTaskUpdate::SharedCtor() {
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_uid_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
}

CreatePendingTaskUpdate::~CreatePendingTaskUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CreatePendingTaskUpdate)
  SharedDtor();
}

void CreatePendingTaskUpdate::SharedDtor() {
  worker_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreatePendingTaskUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreatePendingTaskUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreatePendingTaskUpdate& CreatePendingTaskUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreatePendingTaskUpdate.base);
  return *internal_default_instance();
}


void CreatePendingTaskUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CreatePendingTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_tags_.Clear();
  worker_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_uid_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
  _internal_metadata_.Clear();
}

bool CreatePendingTaskUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.CreatePendingTaskUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string worker_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_address().data(), static_cast<int>(this->worker_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.CreatePendingTaskUpdate.worker_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transfer_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.CreatePendingTaskUpdate.transfer_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 starting_round = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starting_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string worker_tags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worker_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_tags(this->worker_tags_size() - 1).data(),
            static_cast<int>(this->worker_tags(this->worker_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.CreatePendingTaskUpdate.worker_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 worker_uid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worker_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.CreatePendingTaskUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.CreatePendingTaskUpdate)
  return false;
#undef DO_
}

void CreatePendingTaskUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.CreatePendingTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // string worker_address = 3;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreatePendingTaskUpdate.worker_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->worker_address(), output);
  }

  // string transfer_address = 4;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreatePendingTaskUpdate.transfer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->transfer_address(), output);
  }

  // int64 starting_round = 5;
  if (this->starting_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starting_round(), output);
  }

  // repeated string worker_tags = 6;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreatePendingTaskUpdate.worker_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->worker_tags(i), output);
  }

  // int64 worker_uid = 7;
  if (this->worker_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->worker_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.CreatePendingTaskUpdate)
}

::google::protobuf::uint8* CreatePendingTaskUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CreatePendingTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // string worker_address = 3;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreatePendingTaskUpdate.worker_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->worker_address(), target);
  }

  // string transfer_address = 4;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreatePendingTaskUpdate.transfer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->transfer_address(), target);
  }

  // int64 starting_round = 5;
  if (this->starting_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->starting_round(), target);
  }

  // repeated string worker_tags = 6;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreatePendingTaskUpdate.worker_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->worker_tags(i), target);
  }

  // int64 worker_uid = 7;
  if (this->worker_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->worker_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CreatePendingTaskUpdate)
  return target;
}

size_t CreatePendingTaskUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CreatePendingTaskUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string worker_tags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->worker_tags_size());
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worker_tags(i));
  }

  // string worker_address = 3;
  if (this->worker_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_address());
  }

  // string transfer_address = 4;
  if (this->transfer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transfer_address());
  }

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 starting_round = 5;
  if (this->starting_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starting_round());
  }

  // int64 worker_uid = 7;
  if (this->worker_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worker_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePendingTaskUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.CreatePendingTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePendingTaskUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreatePendingTaskUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.CreatePendingTaskUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.CreatePendingTaskUpdate)
    MergeFrom(*source);
  }
}

void CreatePendingTaskUpdate::MergeFrom(const CreatePendingTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CreatePendingTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_tags_.MergeFrom(from.worker_tags_);
  if (from.worker_address().size() > 0) {

    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.transfer_address().size() > 0) {

    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.starting_round() != 0) {
    set_starting_round(from.starting_round());
  }
  if (from.worker_uid() != 0) {
    set_worker_uid(from.worker_uid());
  }
}

void CreatePendingTaskUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.CreatePendingTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePendingTaskUpdate::CopyFrom(const CreatePendingTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CreatePendingTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePendingTaskUpdate::IsInitialized() const {
  return true;
}

void CreatePendingTaskUpdate::Swap(CreatePendingTaskUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatePendingTaskUpdate::InternalSwap(CreatePendingTaskUpdate* other) {
  using std::swap;
  worker_tags_.InternalSwap(CastToBase(&other->worker_tags_));
  worker_address_.Swap(&other->worker_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transfer_address_.Swap(&other->transfer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_id_, other->task_id_);
  swap(job_id_, other->job_id_);
  swap(starting_round_, other->starting_round_);
  swap(worker_uid_, other->worker_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreatePendingTaskUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateTaskUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTaskUpdate::kTaskIdFieldNumber;
const int CreateTaskUpdate::kJobIdFieldNumber;
const int CreateTaskUpdate::kWorkerAddressFieldNumber;
const int CreateTaskUpdate::kTransferAddressFieldNumber;
const int CreateTaskUpdate::kWorkerTagsFieldNumber;
const int CreateTaskUpdate::kWorkerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTaskUpdate::CreateTaskUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreateTaskUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.CreateTaskUpdate)
}
CreateTaskUpdate::CreateTaskUpdate(const CreateTaskUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      worker_tags_(from.worker_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_address().size() > 0) {
    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transfer_address().size() > 0) {
    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&worker_uid_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CreateTaskUpdate)
}

void CreateTaskUpdate::SharedCtor() {
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_uid_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
}

CreateTaskUpdate::~CreateTaskUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CreateTaskUpdate)
  SharedDtor();
}

void CreateTaskUpdate::SharedDtor() {
  worker_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateTaskUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreateTaskUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTaskUpdate& CreateTaskUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_CreateTaskUpdate.base);
  return *internal_default_instance();
}


void CreateTaskUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CreateTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_tags_.Clear();
  worker_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_uid_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(worker_uid_));
  _internal_metadata_.Clear();
}

bool CreateTaskUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.CreateTaskUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string worker_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_address().data(), static_cast<int>(this->worker_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.CreateTaskUpdate.worker_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transfer_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.CreateTaskUpdate.transfer_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string worker_tags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worker_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_tags(this->worker_tags_size() - 1).data(),
            static_cast<int>(this->worker_tags(this->worker_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.CreateTaskUpdate.worker_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 worker_uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worker_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.CreateTaskUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.CreateTaskUpdate)
  return false;
#undef DO_
}

void CreateTaskUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.CreateTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // string worker_address = 4;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreateTaskUpdate.worker_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->worker_address(), output);
  }

  // string transfer_address = 6;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreateTaskUpdate.transfer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->transfer_address(), output);
  }

  // repeated string worker_tags = 7;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreateTaskUpdate.worker_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->worker_tags(i), output);
  }

  // int64 worker_uid = 8;
  if (this->worker_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->worker_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.CreateTaskUpdate)
}

::google::protobuf::uint8* CreateTaskUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CreateTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // string worker_address = 4;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreateTaskUpdate.worker_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->worker_address(), target);
  }

  // string transfer_address = 6;
  if (this->transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_address().data(), static_cast<int>(this->transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreateTaskUpdate.transfer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->transfer_address(), target);
  }

  // repeated string worker_tags = 7;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CreateTaskUpdate.worker_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->worker_tags(i), target);
  }

  // int64 worker_uid = 8;
  if (this->worker_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->worker_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CreateTaskUpdate)
  return target;
}

size_t CreateTaskUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CreateTaskUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string worker_tags = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->worker_tags_size());
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worker_tags(i));
  }

  // string worker_address = 4;
  if (this->worker_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_address());
  }

  // string transfer_address = 6;
  if (this->transfer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transfer_address());
  }

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 worker_uid = 8;
  if (this->worker_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worker_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTaskUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.CreateTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTaskUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTaskUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.CreateTaskUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.CreateTaskUpdate)
    MergeFrom(*source);
  }
}

void CreateTaskUpdate::MergeFrom(const CreateTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CreateTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_tags_.MergeFrom(from.worker_tags_);
  if (from.worker_address().size() > 0) {

    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.transfer_address().size() > 0) {

    transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_address_);
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.worker_uid() != 0) {
    set_worker_uid(from.worker_uid());
  }
}

void CreateTaskUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.CreateTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTaskUpdate::CopyFrom(const CreateTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CreateTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskUpdate::IsInitialized() const {
  return true;
}

void CreateTaskUpdate::Swap(CreateTaskUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTaskUpdate::InternalSwap(CreateTaskUpdate* other) {
  using std::swap;
  worker_tags_.InternalSwap(CastToBase(&other->worker_tags_));
  worker_address_.Swap(&other->worker_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transfer_address_.Swap(&other->transfer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_id_, other->task_id_);
  swap(job_id_, other->job_id_);
  swap(worker_uid_, other->worker_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateTaskUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishTaskUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishTaskUpdate::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishTaskUpdate::FinishTaskUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_FinishTaskUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.FinishTaskUpdate)
}
FinishTaskUpdate::FinishTaskUpdate(const FinishTaskUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.FinishTaskUpdate)
}

void FinishTaskUpdate::SharedCtor() {
  task_id_ = GOOGLE_LONGLONG(0);
}

FinishTaskUpdate::~FinishTaskUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.data.FinishTaskUpdate)
  SharedDtor();
}

void FinishTaskUpdate::SharedDtor() {
}

void FinishTaskUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishTaskUpdate::descriptor() {
  ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishTaskUpdate& FinishTaskUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::scc_info_FinishTaskUpdate.base);
  return *internal_default_instance();
}


void FinishTaskUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.FinishTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FinishTaskUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.FinishTaskUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.FinishTaskUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.FinishTaskUpdate)
  return false;
#undef DO_
}

void FinishTaskUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.FinishTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.FinishTaskUpdate)
}

::google::protobuf::uint8* FinishTaskUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.FinishTaskUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.FinishTaskUpdate)
  return target;
}

size_t FinishTaskUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.FinishTaskUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishTaskUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.FinishTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishTaskUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishTaskUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.FinishTaskUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.FinishTaskUpdate)
    MergeFrom(*source);
  }
}

void FinishTaskUpdate::MergeFrom(const FinishTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.FinishTaskUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void FinishTaskUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.FinishTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishTaskUpdate::CopyFrom(const FinishTaskUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.FinishTaskUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishTaskUpdate::IsInitialized() const {
  return true;
}

void FinishTaskUpdate::Swap(FinishTaskUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishTaskUpdate::InternalSwap(FinishTaskUpdate* other) {
  using std::swap;
  swap(task_id_, other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishTaskUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fdata_2fservice_2fjournal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::Update* Arena::CreateMaybeMessage< ::tensorflow::data::Update >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::Update >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::RegisterDatasetUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::RegisterDatasetUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::RegisterDatasetUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::RegisterWorkerUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::RegisterWorkerUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::RegisterWorkerUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::CreateJobUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::CreateJobUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::CreateJobUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ProduceSplitUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::ProduceSplitUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ProduceSplitUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::AcquireJobClientUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::AcquireJobClientUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::AcquireJobClientUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ReleaseJobClientUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::ReleaseJobClientUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ReleaseJobClientUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::GarbageCollectJobUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::GarbageCollectJobUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::GarbageCollectJobUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::RemoveTaskUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::RemoveTaskUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::RemoveTaskUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::TaskRejected* Arena::CreateMaybeMessage< ::tensorflow::data::TaskRejected >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::TaskRejected >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ClientHeartbeatUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::ClientHeartbeatUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ClientHeartbeatUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::CreatePendingTaskUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::CreatePendingTaskUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::CreatePendingTaskUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::CreateTaskUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::CreateTaskUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::CreateTaskUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::FinishTaskUpdate* Arena::CreateMaybeMessage< ::tensorflow::data::FinishTaskUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::FinishTaskUpdate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
