// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_filters.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto 

namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto
namespace tensorflow {
class ClusterDeviceFilters;
class ClusterDeviceFiltersDefaultTypeInternal;
extern ClusterDeviceFiltersDefaultTypeInternal _ClusterDeviceFilters_default_instance_;
class JobDeviceFilters;
class JobDeviceFiltersDefaultTypeInternal;
extern JobDeviceFiltersDefaultTypeInternal _JobDeviceFilters_default_instance_;
class JobDeviceFilters_TasksEntry_DoNotUse;
class JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal;
extern JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal _JobDeviceFilters_TasksEntry_DoNotUse_default_instance_;
class TaskDeviceFilters;
class TaskDeviceFiltersDefaultTypeInternal;
extern TaskDeviceFiltersDefaultTypeInternal _TaskDeviceFilters_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::ClusterDeviceFilters* Arena::CreateMaybeMessage<::tensorflow::ClusterDeviceFilters>(Arena*);
template<> ::tensorflow::JobDeviceFilters* Arena::CreateMaybeMessage<::tensorflow::JobDeviceFilters>(Arena*);
template<> ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse>(Arena*);
template<> ::tensorflow::TaskDeviceFilters* Arena::CreateMaybeMessage<::tensorflow::TaskDeviceFilters>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {

// ===================================================================

class TaskDeviceFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TaskDeviceFilters) */ {
 public:
  TaskDeviceFilters();
  virtual ~TaskDeviceFilters();

  TaskDeviceFilters(const TaskDeviceFilters& from);

  inline TaskDeviceFilters& operator=(const TaskDeviceFilters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskDeviceFilters(TaskDeviceFilters&& from) noexcept
    : TaskDeviceFilters() {
    *this = ::std::move(from);
  }

  inline TaskDeviceFilters& operator=(TaskDeviceFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskDeviceFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskDeviceFilters* internal_default_instance() {
    return reinterpret_cast<const TaskDeviceFilters*>(
               &_TaskDeviceFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TaskDeviceFilters* other);
  void Swap(TaskDeviceFilters* other);
  friend void swap(TaskDeviceFilters& a, TaskDeviceFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskDeviceFilters* New() const final {
    return CreateMaybeMessage<TaskDeviceFilters>(NULL);
  }

  TaskDeviceFilters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskDeviceFilters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskDeviceFilters& from);
  void MergeFrom(const TaskDeviceFilters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskDeviceFilters* other);
  protected:
  explicit TaskDeviceFilters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string device_filters = 1;
  int device_filters_size() const;
  void clear_device_filters();
  static const int kDeviceFiltersFieldNumber = 1;
  const ::std::string& device_filters(int index) const;
  ::std::string* mutable_device_filters(int index);
  void set_device_filters(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_device_filters(int index, ::std::string&& value);
  #endif
  void set_device_filters(int index, const char* value);
  void set_device_filters(int index, const char* value, size_t size);
  ::std::string* add_device_filters();
  void add_device_filters(const ::std::string& value);
  #if LANG_CXX11
  void add_device_filters(::std::string&& value);
  #endif
  void add_device_filters(const char* value);
  void add_device_filters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_filters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_filters();

  // @@protoc_insertion_point(class_scope:tensorflow.TaskDeviceFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_filters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JobDeviceFilters_TasksEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<JobDeviceFilters_TasksEntry_DoNotUse, 
    ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<JobDeviceFilters_TasksEntry_DoNotUse, 
    ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  JobDeviceFilters_TasksEntry_DoNotUse();
  JobDeviceFilters_TasksEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const JobDeviceFilters_TasksEntry_DoNotUse& other);
  static const JobDeviceFilters_TasksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JobDeviceFilters_TasksEntry_DoNotUse*>(&_JobDeviceFilters_TasksEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class JobDeviceFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.JobDeviceFilters) */ {
 public:
  JobDeviceFilters();
  virtual ~JobDeviceFilters();

  JobDeviceFilters(const JobDeviceFilters& from);

  inline JobDeviceFilters& operator=(const JobDeviceFilters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobDeviceFilters(JobDeviceFilters&& from) noexcept
    : JobDeviceFilters() {
    *this = ::std::move(from);
  }

  inline JobDeviceFilters& operator=(JobDeviceFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobDeviceFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobDeviceFilters* internal_default_instance() {
    return reinterpret_cast<const JobDeviceFilters*>(
               &_JobDeviceFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(JobDeviceFilters* other);
  void Swap(JobDeviceFilters* other);
  friend void swap(JobDeviceFilters& a, JobDeviceFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobDeviceFilters* New() const final {
    return CreateMaybeMessage<JobDeviceFilters>(NULL);
  }

  JobDeviceFilters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JobDeviceFilters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JobDeviceFilters& from);
  void MergeFrom(const JobDeviceFilters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobDeviceFilters* other);
  protected:
  explicit JobDeviceFilters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >&
      tasks() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >*
      mutable_tasks();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:tensorflow.JobDeviceFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      JobDeviceFilters_TasksEntry_DoNotUse,
      ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tasks_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterDeviceFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ClusterDeviceFilters) */ {
 public:
  ClusterDeviceFilters();
  virtual ~ClusterDeviceFilters();

  ClusterDeviceFilters(const ClusterDeviceFilters& from);

  inline ClusterDeviceFilters& operator=(const ClusterDeviceFilters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterDeviceFilters(ClusterDeviceFilters&& from) noexcept
    : ClusterDeviceFilters() {
    *this = ::std::move(from);
  }

  inline ClusterDeviceFilters& operator=(ClusterDeviceFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterDeviceFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterDeviceFilters* internal_default_instance() {
    return reinterpret_cast<const ClusterDeviceFilters*>(
               &_ClusterDeviceFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ClusterDeviceFilters* other);
  void Swap(ClusterDeviceFilters* other);
  friend void swap(ClusterDeviceFilters& a, ClusterDeviceFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterDeviceFilters* New() const final {
    return CreateMaybeMessage<ClusterDeviceFilters>(NULL);
  }

  ClusterDeviceFilters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterDeviceFilters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterDeviceFilters& from);
  void MergeFrom(const ClusterDeviceFilters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterDeviceFilters* other);
  protected:
  explicit ClusterDeviceFilters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  ::tensorflow::JobDeviceFilters* mutable_jobs(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >*
      mutable_jobs();
  const ::tensorflow::JobDeviceFilters& jobs(int index) const;
  ::tensorflow::JobDeviceFilters* add_jobs();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >&
      jobs() const;

  // @@protoc_insertion_point(class_scope:tensorflow.ClusterDeviceFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters > jobs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskDeviceFilters

// repeated string device_filters = 1;
inline int TaskDeviceFilters::device_filters_size() const {
  return device_filters_.size();
}
inline void TaskDeviceFilters::clear_device_filters() {
  device_filters_.Clear();
}
inline const ::std::string& TaskDeviceFilters::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Get(index);
}
inline ::std::string* TaskDeviceFilters::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Mutable(index);
}
inline void TaskDeviceFilters::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.TaskDeviceFilters.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TaskDeviceFilters::set_device_filters(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.TaskDeviceFilters.device_filters)
  device_filters_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TaskDeviceFilters::set_device_filters(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.TaskDeviceFilters.device_filters)
}
inline void TaskDeviceFilters::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TaskDeviceFilters.device_filters)
}
inline ::std::string* TaskDeviceFilters::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Add();
}
inline void TaskDeviceFilters::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.TaskDeviceFilters.device_filters)
}
#if LANG_CXX11
inline void TaskDeviceFilters::add_device_filters(::std::string&& value) {
  device_filters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.TaskDeviceFilters.device_filters)
}
#endif
inline void TaskDeviceFilters::add_device_filters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.TaskDeviceFilters.device_filters)
}
inline void TaskDeviceFilters::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.TaskDeviceFilters.device_filters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskDeviceFilters::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TaskDeviceFilters::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TaskDeviceFilters.device_filters)
  return &device_filters_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JobDeviceFilters

// string name = 1;
inline void JobDeviceFilters::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JobDeviceFilters::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.JobDeviceFilters.name)
  return name_.Get();
}
inline void JobDeviceFilters::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.JobDeviceFilters.name)
}
#if LANG_CXX11
inline void JobDeviceFilters::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.JobDeviceFilters.name)
}
#endif
inline void JobDeviceFilters::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.JobDeviceFilters.name)
}
inline void JobDeviceFilters::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.JobDeviceFilters.name)
}
inline ::std::string* JobDeviceFilters::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.JobDeviceFilters.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JobDeviceFilters::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.JobDeviceFilters.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void JobDeviceFilters::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.JobDeviceFilters.name)
}
inline ::std::string* JobDeviceFilters::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.JobDeviceFilters.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JobDeviceFilters::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.JobDeviceFilters.name)
}

// map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
inline int JobDeviceFilters::tasks_size() const {
  return tasks_.size();
}
inline void JobDeviceFilters::clear_tasks() {
  tasks_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >&
JobDeviceFilters::tasks() const {
  // @@protoc_insertion_point(field_map:tensorflow.JobDeviceFilters.tasks)
  return tasks_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >*
JobDeviceFilters::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.JobDeviceFilters.tasks)
  return tasks_.MutableMap();
}

// -------------------------------------------------------------------

// ClusterDeviceFilters

// repeated .tensorflow.JobDeviceFilters jobs = 1;
inline int ClusterDeviceFilters::jobs_size() const {
  return jobs_.size();
}
inline void ClusterDeviceFilters::clear_jobs() {
  jobs_.Clear();
}
inline ::tensorflow::JobDeviceFilters* ClusterDeviceFilters::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >*
ClusterDeviceFilters::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ClusterDeviceFilters.jobs)
  return &jobs_;
}
inline const ::tensorflow::JobDeviceFilters& ClusterDeviceFilters::jobs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Get(index);
}
inline ::tensorflow::JobDeviceFilters* ClusterDeviceFilters::add_jobs() {
  // @@protoc_insertion_point(field_add:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >&
ClusterDeviceFilters::jobs() const {
  // @@protoc_insertion_point(field_list:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto
