// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/service_config.proto

#include "tensorflow/core/protobuf/service_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace data {
namespace experimental {
class DispatcherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DispatcherConfig>
      _instance;
} _DispatcherConfig_default_instance_;
class WorkerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkerConfig>
      _instance;
} _WorkerConfig_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto {
static void InitDefaultsDispatcherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::experimental::_DispatcherConfig_default_instance_;
    new (ptr) ::tensorflow::data::experimental::DispatcherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::experimental::DispatcherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DispatcherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDispatcherConfig}, {}};

static void InitDefaultsWorkerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::experimental::_WorkerConfig_default_instance_;
    new (ptr) ::tensorflow::data::experimental::WorkerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::experimental::WorkerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkerConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DispatcherConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkerConfig.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, work_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, fault_tolerant_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, worker_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, deployment_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, job_gc_check_interval_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, job_gc_timeout_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, client_timeout_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, dispatcher_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, worker_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, worker_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, heartbeat_interval_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, dispatcher_timeout_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, data_transfer_protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, data_transfer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, shutdown_quiet_period_ms_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::experimental::DispatcherConfig)},
  { 14, -1, sizeof(::tensorflow::data::experimental::WorkerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::experimental::_DispatcherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::experimental::_WorkerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/protobuf/service_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-tensorflow/core/protobuf/service_confi"
      "g.proto\022\034tensorflow.data.experimental\032+t"
      "ensorflow/core/protobuf/data_service.pro"
      "to\"\215\002\n\020DispatcherConfig\022\014\n\004port\030\001 \001(\003\022\020\n"
      "\010protocol\030\002 \001(\t\022\020\n\010work_dir\030\003 \001(\t\022\033\n\023fau"
      "lt_tolerant_mode\030\004 \001(\010\022\030\n\020worker_address"
      "es\030\007 \003(\t\0228\n\017deployment_mode\030\t \001(\0162\037.tens"
      "orflow.data.DeploymentMode\022 \n\030job_gc_che"
      "ck_interval_ms\030\005 \001(\003\022\031\n\021job_gc_timeout_m"
      "s\030\006 \001(\003\022\031\n\021client_timeout_ms\030\010 \001(\003\"\226\002\n\014W"
      "orkerConfig\022\014\n\004port\030\001 \001(\003\022\020\n\010protocol\030\002 "
      "\001(\t\022\032\n\022dispatcher_address\030\003 \001(\t\022\026\n\016worke"
      "r_address\030\004 \001(\t\022\023\n\013worker_tags\030\n \003(\t\022\035\n\025"
      "heartbeat_interval_ms\030\005 \001(\003\022\035\n\025dispatche"
      "r_timeout_ms\030\006 \001(\003\022\036\n\026data_transfer_prot"
      "ocol\030\007 \001(\t\022\035\n\025data_transfer_address\030\010 \001("
      "\t\022 \n\030shutdown_quiet_period_ms\030\t \001(\003BWZUg"
      "ithub.com/tensorflow/tensorflow/tensorfl"
      "ow/go/core/protobuf/for_core_protos_go_p"
      "rotob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/service_config.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto
namespace tensorflow {
namespace data {
namespace experimental {

// ===================================================================

void DispatcherConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispatcherConfig::kPortFieldNumber;
const int DispatcherConfig::kProtocolFieldNumber;
const int DispatcherConfig::kWorkDirFieldNumber;
const int DispatcherConfig::kFaultTolerantModeFieldNumber;
const int DispatcherConfig::kWorkerAddressesFieldNumber;
const int DispatcherConfig::kDeploymentModeFieldNumber;
const int DispatcherConfig::kJobGcCheckIntervalMsFieldNumber;
const int DispatcherConfig::kJobGcTimeoutMsFieldNumber;
const int DispatcherConfig::kClientTimeoutMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispatcherConfig::DispatcherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::scc_info_DispatcherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.experimental.DispatcherConfig)
}
DispatcherConfig::DispatcherConfig(const DispatcherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      worker_addresses_(from.worker_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  work_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.work_dir().size() > 0) {
    work_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work_dir_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_timeout_ms_) -
    reinterpret_cast<char*>(&port_)) + sizeof(client_timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.DispatcherConfig)
}

void DispatcherConfig::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_timeout_ms_) -
      reinterpret_cast<char*>(&port_)) + sizeof(client_timeout_ms_));
}

DispatcherConfig::~DispatcherConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.DispatcherConfig)
  SharedDtor();
}

void DispatcherConfig::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DispatcherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DispatcherConfig::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispatcherConfig& DispatcherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::scc_info_DispatcherConfig.base);
  return *internal_default_instance();
}


void DispatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.DispatcherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_addresses_.Clear();
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_timeout_ms_) -
      reinterpret_cast<char*>(&port_)) + sizeof(client_timeout_ms_));
  _internal_metadata_.Clear();
}

bool DispatcherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.experimental.DispatcherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.DispatcherConfig.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string work_dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_work_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->work_dir().data(), static_cast<int>(this->work_dir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.DispatcherConfig.work_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fault_tolerant_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_tolerant_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_gc_check_interval_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_gc_check_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_gc_timeout_ms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_gc_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string worker_addresses = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worker_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_addresses(this->worker_addresses_size() - 1).data(),
            static_cast<int>(this->worker_addresses(this->worker_addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.DispatcherConfig.worker_addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 client_timeout_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.DeploymentMode deployment_mode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_deployment_mode(static_cast< ::tensorflow::data::DeploymentMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.experimental.DispatcherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.experimental.DispatcherConfig)
  return false;
#undef DO_
}

void DispatcherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.experimental.DispatcherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->port(), output);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // string work_dir = 3;
  if (this->work_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->work_dir().data(), static_cast<int>(this->work_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.work_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->work_dir(), output);
  }

  // bool fault_tolerant_mode = 4;
  if (this->fault_tolerant_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fault_tolerant_mode(), output);
  }

  // int64 job_gc_check_interval_ms = 5;
  if (this->job_gc_check_interval_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->job_gc_check_interval_ms(), output);
  }

  // int64 job_gc_timeout_ms = 6;
  if (this->job_gc_timeout_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->job_gc_timeout_ms(), output);
  }

  // repeated string worker_addresses = 7;
  for (int i = 0, n = this->worker_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_addresses(i).data(), static_cast<int>(this->worker_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.worker_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->worker_addresses(i), output);
  }

  // int64 client_timeout_ms = 8;
  if (this->client_timeout_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->client_timeout_ms(), output);
  }

  // .tensorflow.data.DeploymentMode deployment_mode = 9;
  if (this->deployment_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->deployment_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.experimental.DispatcherConfig)
}

::google::protobuf::uint8* DispatcherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.DispatcherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->port(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // string work_dir = 3;
  if (this->work_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->work_dir().data(), static_cast<int>(this->work_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.work_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->work_dir(), target);
  }

  // bool fault_tolerant_mode = 4;
  if (this->fault_tolerant_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fault_tolerant_mode(), target);
  }

  // int64 job_gc_check_interval_ms = 5;
  if (this->job_gc_check_interval_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->job_gc_check_interval_ms(), target);
  }

  // int64 job_gc_timeout_ms = 6;
  if (this->job_gc_timeout_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->job_gc_timeout_ms(), target);
  }

  // repeated string worker_addresses = 7;
  for (int i = 0, n = this->worker_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_addresses(i).data(), static_cast<int>(this->worker_addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.worker_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->worker_addresses(i), target);
  }

  // int64 client_timeout_ms = 8;
  if (this->client_timeout_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->client_timeout_ms(), target);
  }

  // .tensorflow.data.DeploymentMode deployment_mode = 9;
  if (this->deployment_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->deployment_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.DispatcherConfig)
  return target;
}

size_t DispatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.DispatcherConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string worker_addresses = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->worker_addresses_size());
  for (int i = 0, n = this->worker_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worker_addresses(i));
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // string work_dir = 3;
  if (this->work_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->work_dir());
  }

  // int64 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->port());
  }

  // int64 job_gc_check_interval_ms = 5;
  if (this->job_gc_check_interval_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_gc_check_interval_ms());
  }

  // int64 job_gc_timeout_ms = 6;
  if (this->job_gc_timeout_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_gc_timeout_ms());
  }

  // bool fault_tolerant_mode = 4;
  if (this->fault_tolerant_mode() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.data.DeploymentMode deployment_mode = 9;
  if (this->deployment_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->deployment_mode());
  }

  // int64 client_timeout_ms = 8;
  if (this->client_timeout_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_timeout_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispatcherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.experimental.DispatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DispatcherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispatcherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.experimental.DispatcherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.experimental.DispatcherConfig)
    MergeFrom(*source);
  }
}

void DispatcherConfig::MergeFrom(const DispatcherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.DispatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_addresses_.MergeFrom(from.worker_addresses_);
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.work_dir().size() > 0) {

    work_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work_dir_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.job_gc_check_interval_ms() != 0) {
    set_job_gc_check_interval_ms(from.job_gc_check_interval_ms());
  }
  if (from.job_gc_timeout_ms() != 0) {
    set_job_gc_timeout_ms(from.job_gc_timeout_ms());
  }
  if (from.fault_tolerant_mode() != 0) {
    set_fault_tolerant_mode(from.fault_tolerant_mode());
  }
  if (from.deployment_mode() != 0) {
    set_deployment_mode(from.deployment_mode());
  }
  if (from.client_timeout_ms() != 0) {
    set_client_timeout_ms(from.client_timeout_ms());
  }
}

void DispatcherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.experimental.DispatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatcherConfig::CopyFrom(const DispatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.DispatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatcherConfig::IsInitialized() const {
  return true;
}

void DispatcherConfig::Swap(DispatcherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispatcherConfig::InternalSwap(DispatcherConfig* other) {
  using std::swap;
  worker_addresses_.InternalSwap(CastToBase(&other->worker_addresses_));
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  work_dir_.Swap(&other->work_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(job_gc_check_interval_ms_, other->job_gc_check_interval_ms_);
  swap(job_gc_timeout_ms_, other->job_gc_timeout_ms_);
  swap(fault_tolerant_mode_, other->fault_tolerant_mode_);
  swap(deployment_mode_, other->deployment_mode_);
  swap(client_timeout_ms_, other->client_timeout_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DispatcherConfig::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerConfig::kPortFieldNumber;
const int WorkerConfig::kProtocolFieldNumber;
const int WorkerConfig::kDispatcherAddressFieldNumber;
const int WorkerConfig::kWorkerAddressFieldNumber;
const int WorkerConfig::kWorkerTagsFieldNumber;
const int WorkerConfig::kHeartbeatIntervalMsFieldNumber;
const int WorkerConfig::kDispatcherTimeoutMsFieldNumber;
const int WorkerConfig::kDataTransferProtocolFieldNumber;
const int WorkerConfig::kDataTransferAddressFieldNumber;
const int WorkerConfig::kShutdownQuietPeriodMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerConfig::WorkerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::scc_info_WorkerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.experimental.WorkerConfig)
}
WorkerConfig::WorkerConfig(const WorkerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      worker_tags_(from.worker_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  dispatcher_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dispatcher_address().size() > 0) {
    dispatcher_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dispatcher_address_);
  }
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_address().size() > 0) {
    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  data_transfer_protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_transfer_protocol().size() > 0) {
    data_transfer_protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_transfer_protocol_);
  }
  data_transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_transfer_address().size() > 0) {
    data_transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_transfer_address_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&shutdown_quiet_period_ms_) -
    reinterpret_cast<char*>(&port_)) + sizeof(shutdown_quiet_period_ms_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.WorkerConfig)
}

void WorkerConfig::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dispatcher_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_transfer_protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_transfer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_quiet_period_ms_) -
      reinterpret_cast<char*>(&port_)) + sizeof(shutdown_quiet_period_ms_));
}

WorkerConfig::~WorkerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.WorkerConfig)
  SharedDtor();
}

void WorkerConfig::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dispatcher_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_transfer_protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_transfer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WorkerConfig::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkerConfig& WorkerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::scc_info_WorkerConfig.base);
  return *internal_default_instance();
}


void WorkerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.WorkerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_tags_.Clear();
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dispatcher_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_transfer_protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_transfer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_quiet_period_ms_) -
      reinterpret_cast<char*>(&port_)) + sizeof(shutdown_quiet_period_ms_));
  _internal_metadata_.Clear();
}

bool WorkerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.experimental.WorkerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.WorkerConfig.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dispatcher_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dispatcher_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dispatcher_address().data(), static_cast<int>(this->dispatcher_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.WorkerConfig.dispatcher_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string worker_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_address().data(), static_cast<int>(this->worker_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.WorkerConfig.worker_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 heartbeat_interval_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heartbeat_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dispatcher_timeout_ms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dispatcher_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_transfer_protocol = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_transfer_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_transfer_protocol().data(), static_cast<int>(this->data_transfer_protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.WorkerConfig.data_transfer_protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_transfer_address = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_transfer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_transfer_address().data(), static_cast<int>(this->data_transfer_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.WorkerConfig.data_transfer_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shutdown_quiet_period_ms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shutdown_quiet_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string worker_tags = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worker_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_tags(this->worker_tags_size() - 1).data(),
            static_cast<int>(this->worker_tags(this->worker_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.data.experimental.WorkerConfig.worker_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.experimental.WorkerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.experimental.WorkerConfig)
  return false;
#undef DO_
}

void WorkerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.experimental.WorkerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->port(), output);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // string dispatcher_address = 3;
  if (this->dispatcher_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dispatcher_address().data(), static_cast<int>(this->dispatcher_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.dispatcher_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dispatcher_address(), output);
  }

  // string worker_address = 4;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.worker_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->worker_address(), output);
  }

  // int64 heartbeat_interval_ms = 5;
  if (this->heartbeat_interval_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->heartbeat_interval_ms(), output);
  }

  // int64 dispatcher_timeout_ms = 6;
  if (this->dispatcher_timeout_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->dispatcher_timeout_ms(), output);
  }

  // string data_transfer_protocol = 7;
  if (this->data_transfer_protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_transfer_protocol().data(), static_cast<int>(this->data_transfer_protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.data_transfer_protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data_transfer_protocol(), output);
  }

  // string data_transfer_address = 8;
  if (this->data_transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_transfer_address().data(), static_cast<int>(this->data_transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.data_transfer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->data_transfer_address(), output);
  }

  // int64 shutdown_quiet_period_ms = 9;
  if (this->shutdown_quiet_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->shutdown_quiet_period_ms(), output);
  }

  // repeated string worker_tags = 10;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.worker_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->worker_tags(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.experimental.WorkerConfig)
}

::google::protobuf::uint8* WorkerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.WorkerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->port(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // string dispatcher_address = 3;
  if (this->dispatcher_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dispatcher_address().data(), static_cast<int>(this->dispatcher_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.dispatcher_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dispatcher_address(), target);
  }

  // string worker_address = 4;
  if (this->worker_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_address().data(), static_cast<int>(this->worker_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.worker_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->worker_address(), target);
  }

  // int64 heartbeat_interval_ms = 5;
  if (this->heartbeat_interval_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->heartbeat_interval_ms(), target);
  }

  // int64 dispatcher_timeout_ms = 6;
  if (this->dispatcher_timeout_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->dispatcher_timeout_ms(), target);
  }

  // string data_transfer_protocol = 7;
  if (this->data_transfer_protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_transfer_protocol().data(), static_cast<int>(this->data_transfer_protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.data_transfer_protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data_transfer_protocol(), target);
  }

  // string data_transfer_address = 8;
  if (this->data_transfer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_transfer_address().data(), static_cast<int>(this->data_transfer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.data_transfer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->data_transfer_address(), target);
  }

  // int64 shutdown_quiet_period_ms = 9;
  if (this->shutdown_quiet_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->shutdown_quiet_period_ms(), target);
  }

  // repeated string worker_tags = 10;
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_tags(i).data(), static_cast<int>(this->worker_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.worker_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->worker_tags(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.WorkerConfig)
  return target;
}

size_t WorkerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.WorkerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string worker_tags = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->worker_tags_size());
  for (int i = 0, n = this->worker_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worker_tags(i));
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // string dispatcher_address = 3;
  if (this->dispatcher_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dispatcher_address());
  }

  // string worker_address = 4;
  if (this->worker_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_address());
  }

  // string data_transfer_protocol = 7;
  if (this->data_transfer_protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_transfer_protocol());
  }

  // string data_transfer_address = 8;
  if (this->data_transfer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_transfer_address());
  }

  // int64 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->port());
  }

  // int64 heartbeat_interval_ms = 5;
  if (this->heartbeat_interval_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->heartbeat_interval_ms());
  }

  // int64 dispatcher_timeout_ms = 6;
  if (this->dispatcher_timeout_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dispatcher_timeout_ms());
  }

  // int64 shutdown_quiet_period_ms = 9;
  if (this->shutdown_quiet_period_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shutdown_quiet_period_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.experimental.WorkerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.experimental.WorkerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.experimental.WorkerConfig)
    MergeFrom(*source);
  }
}

void WorkerConfig::MergeFrom(const WorkerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.WorkerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_tags_.MergeFrom(from.worker_tags_);
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.dispatcher_address().size() > 0) {

    dispatcher_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dispatcher_address_);
  }
  if (from.worker_address().size() > 0) {

    worker_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_address_);
  }
  if (from.data_transfer_protocol().size() > 0) {

    data_transfer_protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_transfer_protocol_);
  }
  if (from.data_transfer_address().size() > 0) {

    data_transfer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_transfer_address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.heartbeat_interval_ms() != 0) {
    set_heartbeat_interval_ms(from.heartbeat_interval_ms());
  }
  if (from.dispatcher_timeout_ms() != 0) {
    set_dispatcher_timeout_ms(from.dispatcher_timeout_ms());
  }
  if (from.shutdown_quiet_period_ms() != 0) {
    set_shutdown_quiet_period_ms(from.shutdown_quiet_period_ms());
  }
}

void WorkerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.experimental.WorkerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerConfig::CopyFrom(const WorkerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.WorkerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerConfig::IsInitialized() const {
  return true;
}

void WorkerConfig::Swap(WorkerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerConfig::InternalSwap(WorkerConfig* other) {
  using std::swap;
  worker_tags_.InternalSwap(CastToBase(&other->worker_tags_));
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dispatcher_address_.Swap(&other->dispatcher_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  worker_address_.Swap(&other->worker_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_transfer_protocol_.Swap(&other->data_transfer_protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_transfer_address_.Swap(&other->data_transfer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(heartbeat_interval_ms_, other->heartbeat_interval_ms_);
  swap(dispatcher_timeout_ms_, other->dispatcher_timeout_ms_);
  swap(shutdown_quiet_period_ms_, other->shutdown_quiet_period_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WorkerConfig::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::experimental::DispatcherConfig* Arena::CreateMaybeMessage< ::tensorflow::data::experimental::DispatcherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::experimental::DispatcherConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::experimental::WorkerConfig* Arena::CreateMaybeMessage< ::tensorflow::data::experimental::WorkerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::experimental::WorkerConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
