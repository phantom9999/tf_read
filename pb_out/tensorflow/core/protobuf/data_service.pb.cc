// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/data_service.proto

#include "tensorflow/core/protobuf/data_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace data {
class ProcessingModeDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessingModeDef>
      _instance;
} _ProcessingModeDef_default_instance_;
class DataServiceMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataServiceMetadata>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr element_spec_;
} _DataServiceMetadata_default_instance_;
class DataServiceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataServiceConfig>
      _instance;
} _DataServiceConfig_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto {
static void InitDefaultsProcessingModeDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ProcessingModeDef_default_instance_;
    new (ptr) ::tensorflow::data::ProcessingModeDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ProcessingModeDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessingModeDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessingModeDef}, {}};

static void InitDefaultsDataServiceMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_DataServiceMetadata_default_instance_;
    new (ptr) ::tensorflow::data::DataServiceMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::DataServiceMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataServiceMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataServiceMetadata}, {}};

static void InitDefaultsDataServiceConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_DataServiceConfig_default_instance_;
    new (ptr) ::tensorflow::data::DataServiceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::DataServiceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataServiceConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataServiceConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessingModeDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataServiceMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataServiceConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProcessingModeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ProcessingModeDef, sharding_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::DataServiceMetadataDefaultTypeInternal, element_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, compression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, cardinality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, optional_element_spec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DataServiceConfig, deployment_mode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::ProcessingModeDef)},
  { 6, -1, sizeof(::tensorflow::data::DataServiceMetadata)},
  { 15, -1, sizeof(::tensorflow::data::DataServiceConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ProcessingModeDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_DataServiceMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_DataServiceConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/protobuf/data_service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+tensorflow/core/protobuf/data_service."
      "proto\022\017tensorflow.data\"\267\001\n\021ProcessingMod"
      "eDef\022J\n\017sharding_policy\030\001 \001(\01621.tensorfl"
      "ow.data.ProcessingModeDef.ShardingPolicy"
      "\"V\n\016ShardingPolicy\022\007\n\003OFF\020\000\022\013\n\007DYNAMIC\020\001"
      "\022\010\n\004FILE\020\002\022\010\n\004DATA\020\003\022\020\n\014FILE_OR_DATA\020\004\022\010"
      "\n\004HINT\020\005\"\373\001\n\023DataServiceMetadata\022\026\n\014elem"
      "ent_spec\030\001 \001(\014H\000\022E\n\013compression\030\002 \001(\01620."
      "tensorflow.data.DataServiceMetadata.Comp"
      "ression\022\023\n\013cardinality\030\003 \001(\003\"W\n\013Compress"
      "ion\022\033\n\027COMPRESSION_UNSPECIFIED\020\000\022\023\n\017COMP"
      "RESSION_OFF\020\001\022\026\n\022COMPRESSION_SNAPPY\020\002B\027\n"
      "\025optional_element_spec\"M\n\021DataServiceCon"
      "fig\0228\n\017deployment_mode\030\001 \001(\0162\037.tensorflo"
      "w.data.DeploymentMode*\210\001\n\016DeploymentMode"
      "\022\037\n\033DEPLOYMENT_MODE_UNSPECIFIED\020\000\022\035\n\031DEP"
      "LOYMENT_MODE_COLOCATED\020\001\022\032\n\026DEPLOYMENT_M"
      "ODE_REMOTE\020\002\022\032\n\026DEPLOYMENT_MODE_HYBRID\020\003"
      "BWZUgithub.com/tensorflow/tensorflow/ten"
      "sorflow/go/core/protobuf/for_core_protos"
      "_go_protob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 817);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/data_service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto
namespace tensorflow {
namespace data {
const ::google::protobuf::EnumDescriptor* ProcessingModeDef_ShardingPolicy_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool ProcessingModeDef_ShardingPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::OFF;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::DYNAMIC;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::FILE;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::DATA;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::FILE_OR_DATA;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::HINT;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::ShardingPolicy_MIN;
const ProcessingModeDef_ShardingPolicy ProcessingModeDef::ShardingPolicy_MAX;
const int ProcessingModeDef::ShardingPolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataServiceMetadata_Compression_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool DataServiceMetadata_Compression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataServiceMetadata_Compression DataServiceMetadata::COMPRESSION_UNSPECIFIED;
const DataServiceMetadata_Compression DataServiceMetadata::COMPRESSION_OFF;
const DataServiceMetadata_Compression DataServiceMetadata::COMPRESSION_SNAPPY;
const DataServiceMetadata_Compression DataServiceMetadata::Compression_MIN;
const DataServiceMetadata_Compression DataServiceMetadata::Compression_MAX;
const int DataServiceMetadata::Compression_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DeploymentMode_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_enum_descriptors[2];
}
bool DeploymentMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ProcessingModeDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessingModeDef::kShardingPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessingModeDef::ProcessingModeDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_ProcessingModeDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ProcessingModeDef)
}
ProcessingModeDef::ProcessingModeDef(const ProcessingModeDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sharding_policy_ = from.sharding_policy_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ProcessingModeDef)
}

void ProcessingModeDef::SharedCtor() {
  sharding_policy_ = 0;
}

ProcessingModeDef::~ProcessingModeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ProcessingModeDef)
  SharedDtor();
}

void ProcessingModeDef::SharedDtor() {
}

void ProcessingModeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProcessingModeDef::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessingModeDef& ProcessingModeDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_ProcessingModeDef.base);
  return *internal_default_instance();
}


void ProcessingModeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ProcessingModeDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sharding_policy_ = 0;
  _internal_metadata_.Clear();
}

bool ProcessingModeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ProcessingModeDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sharding_policy(static_cast< ::tensorflow::data::ProcessingModeDef_ShardingPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ProcessingModeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ProcessingModeDef)
  return false;
#undef DO_
}

void ProcessingModeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ProcessingModeDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
  if (this->sharding_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sharding_policy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ProcessingModeDef)
}

::google::protobuf::uint8* ProcessingModeDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ProcessingModeDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
  if (this->sharding_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sharding_policy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ProcessingModeDef)
  return target;
}

size_t ProcessingModeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ProcessingModeDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
  if (this->sharding_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sharding_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessingModeDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ProcessingModeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessingModeDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessingModeDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ProcessingModeDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ProcessingModeDef)
    MergeFrom(*source);
  }
}

void ProcessingModeDef::MergeFrom(const ProcessingModeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ProcessingModeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sharding_policy() != 0) {
    set_sharding_policy(from.sharding_policy());
  }
}

void ProcessingModeDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ProcessingModeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessingModeDef::CopyFrom(const ProcessingModeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ProcessingModeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessingModeDef::IsInitialized() const {
  return true;
}

void ProcessingModeDef::Swap(ProcessingModeDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessingModeDef::InternalSwap(ProcessingModeDef* other) {
  using std::swap;
  swap(sharding_policy_, other->sharding_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProcessingModeDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataServiceMetadata::InitAsDefaultInstance() {
  ::tensorflow::data::_DataServiceMetadata_default_instance_.element_spec_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataServiceMetadata::kElementSpecFieldNumber;
const int DataServiceMetadata::kCompressionFieldNumber;
const int DataServiceMetadata::kCardinalityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataServiceMetadata::DataServiceMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_DataServiceMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.DataServiceMetadata)
}
DataServiceMetadata::DataServiceMetadata(const DataServiceMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardinality_, &from.cardinality_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_) -
    reinterpret_cast<char*>(&cardinality_)) + sizeof(compression_));
  clear_has_optional_element_spec();
  switch (from.optional_element_spec_case()) {
    case kElementSpec: {
      set_element_spec(from.element_spec());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DataServiceMetadata)
}

void DataServiceMetadata::SharedCtor() {
  ::memset(&cardinality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_) -
      reinterpret_cast<char*>(&cardinality_)) + sizeof(compression_));
  clear_has_optional_element_spec();
}

DataServiceMetadata::~DataServiceMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DataServiceMetadata)
  SharedDtor();
}

void DataServiceMetadata::SharedDtor() {
  if (has_optional_element_spec()) {
    clear_optional_element_spec();
  }
}

void DataServiceMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataServiceMetadata::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataServiceMetadata& DataServiceMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_DataServiceMetadata.base);
  return *internal_default_instance();
}


void DataServiceMetadata::clear_optional_element_spec() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.DataServiceMetadata)
  switch (optional_element_spec_case()) {
    case kElementSpec: {
      optional_element_spec_.element_spec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_ELEMENT_SPEC_NOT_SET;
}


void DataServiceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DataServiceMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cardinality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_) -
      reinterpret_cast<char*>(&cardinality_)) + sizeof(compression_));
  clear_optional_element_spec();
  _internal_metadata_.Clear();
}

bool DataServiceMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.DataServiceMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes element_spec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_element_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compression(static_cast< ::tensorflow::data::DataServiceMetadata_Compression >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cardinality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cardinality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.DataServiceMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.DataServiceMetadata)
  return false;
#undef DO_
}

void DataServiceMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.DataServiceMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes element_spec = 1;
  if (has_element_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->element_spec(), output);
  }

  // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
  if (this->compression() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->compression(), output);
  }

  // int64 cardinality = 3;
  if (this->cardinality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cardinality(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.DataServiceMetadata)
}

::google::protobuf::uint8* DataServiceMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DataServiceMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes element_spec = 1;
  if (has_element_spec()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->element_spec(), target);
  }

  // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
  if (this->compression() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->compression(), target);
  }

  // int64 cardinality = 3;
  if (this->cardinality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cardinality(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DataServiceMetadata)
  return target;
}

size_t DataServiceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DataServiceMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 cardinality = 3;
  if (this->cardinality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cardinality());
  }

  // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
  if (this->compression() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression());
  }

  switch (optional_element_spec_case()) {
    // bytes element_spec = 1;
    case kElementSpec: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->element_spec());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataServiceMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.DataServiceMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DataServiceMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataServiceMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.DataServiceMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.DataServiceMetadata)
    MergeFrom(*source);
  }
}

void DataServiceMetadata::MergeFrom(const DataServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DataServiceMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardinality() != 0) {
    set_cardinality(from.cardinality());
  }
  if (from.compression() != 0) {
    set_compression(from.compression());
  }
  switch (from.optional_element_spec_case()) {
    case kElementSpec: {
      set_element_spec(from.element_spec());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
}

void DataServiceMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.DataServiceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataServiceMetadata::CopyFrom(const DataServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DataServiceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServiceMetadata::IsInitialized() const {
  return true;
}

void DataServiceMetadata::Swap(DataServiceMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataServiceMetadata::InternalSwap(DataServiceMetadata* other) {
  using std::swap;
  swap(cardinality_, other->cardinality_);
  swap(compression_, other->compression_);
  swap(optional_element_spec_, other->optional_element_spec_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataServiceMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataServiceConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataServiceConfig::kDeploymentModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataServiceConfig::DataServiceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_DataServiceConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.DataServiceConfig)
}
DataServiceConfig::DataServiceConfig(const DataServiceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deployment_mode_ = from.deployment_mode_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DataServiceConfig)
}

void DataServiceConfig::SharedCtor() {
  deployment_mode_ = 0;
}

DataServiceConfig::~DataServiceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DataServiceConfig)
  SharedDtor();
}

void DataServiceConfig::SharedDtor() {
}

void DataServiceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataServiceConfig::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataServiceConfig& DataServiceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::scc_info_DataServiceConfig.base);
  return *internal_default_instance();
}


void DataServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DataServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deployment_mode_ = 0;
  _internal_metadata_.Clear();
}

bool DataServiceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.DataServiceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.DeploymentMode deployment_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_deployment_mode(static_cast< ::tensorflow::data::DeploymentMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.DataServiceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.DataServiceConfig)
  return false;
#undef DO_
}

void DataServiceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.DataServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.DeploymentMode deployment_mode = 1;
  if (this->deployment_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->deployment_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.DataServiceConfig)
}

::google::protobuf::uint8* DataServiceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DataServiceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.DeploymentMode deployment_mode = 1;
  if (this->deployment_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->deployment_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DataServiceConfig)
  return target;
}

size_t DataServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DataServiceConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.DeploymentMode deployment_mode = 1;
  if (this->deployment_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->deployment_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataServiceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.DataServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DataServiceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataServiceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.DataServiceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.DataServiceConfig)
    MergeFrom(*source);
  }
}

void DataServiceConfig::MergeFrom(const DataServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DataServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deployment_mode() != 0) {
    set_deployment_mode(from.deployment_mode());
  }
}

void DataServiceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.DataServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataServiceConfig::CopyFrom(const DataServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DataServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServiceConfig::IsInitialized() const {
  return true;
}

void DataServiceConfig::Swap(DataServiceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataServiceConfig::InternalSwap(DataServiceConfig* other) {
  using std::swap;
  swap(deployment_mode_, other->deployment_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataServiceConfig::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ProcessingModeDef* Arena::CreateMaybeMessage< ::tensorflow::data::ProcessingModeDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ProcessingModeDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::DataServiceMetadata* Arena::CreateMaybeMessage< ::tensorflow::data::DataServiceMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::DataServiceMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::DataServiceConfig* Arena::CreateMaybeMessage< ::tensorflow::data::DataServiceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::DataServiceConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
