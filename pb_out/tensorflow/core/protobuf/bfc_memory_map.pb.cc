// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/bfc_memory_map.proto

#include "tensorflow/core/protobuf/bfc_memory_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinSummary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MemAllocatorStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MemChunk;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SnapShot;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto
namespace tensorflow {
class MemAllocatorStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemAllocatorStats>
      _instance;
} _MemAllocatorStats_default_instance_;
class MemChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemChunk>
      _instance;
} _MemChunk_default_instance_;
class BinSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinSummary>
      _instance;
} _BinSummary_default_instance_;
class SnapShotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnapShot>
      _instance;
} _SnapShot_default_instance_;
class MemoryDumpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryDump>
      _instance;
} _MemoryDump_default_instance_;
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto {
static void InitDefaultsMemAllocatorStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemAllocatorStats_default_instance_;
    new (ptr) ::tensorflow::MemAllocatorStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemAllocatorStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MemAllocatorStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemAllocatorStats}, {}};

static void InitDefaultsMemChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemChunk_default_instance_;
    new (ptr) ::tensorflow::MemChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MemChunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemChunk}, {}};

static void InitDefaultsBinSummary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_BinSummary_default_instance_;
    new (ptr) ::tensorflow::BinSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::BinSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinSummary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinSummary}, {}};

static void InitDefaultsSnapShot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SnapShot_default_instance_;
    new (ptr) ::tensorflow::SnapShot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SnapShot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SnapShot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnapShot}, {}};

static void InitDefaultsMemoryDump() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryDump_default_instance_;
    new (ptr) ::tensorflow::MemoryDump();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryDump::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MemoryDump =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMemoryDump}, {
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_BinSummary.base,
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemChunk.base,
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_SnapShot.base,
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemAllocatorStats.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MemAllocatorStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemChunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinSummary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnapShot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryDump.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemAllocatorStats, num_allocs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemAllocatorStats, bytes_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemAllocatorStats, peak_bytes_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemAllocatorStats, largest_alloc_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemAllocatorStats, fragmentation_metric_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, requested_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, op_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, freed_at_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, action_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemChunk, step_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::BinSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::BinSummary, bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::BinSummary, total_bytes_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::BinSummary, total_bytes_in_bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::BinSummary, total_chunks_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::BinSummary, total_chunks_in_bin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::SnapShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::SnapShot, action_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::SnapShot, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemoryDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemoryDump, allocator_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemoryDump, bin_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemoryDump, chunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemoryDump, snap_shot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::MemoryDump, stats_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::MemAllocatorStats)},
  { 10, -1, sizeof(::tensorflow::MemChunk)},
  { 24, -1, sizeof(::tensorflow::BinSummary)},
  { 34, -1, sizeof(::tensorflow::SnapShot)},
  { 41, -1, sizeof(::tensorflow::MemoryDump)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_MemAllocatorStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_MemChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_BinSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_SnapShot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_MemoryDump_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/protobuf/bfc_memory_map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-tensorflow/core/protobuf/bfc_memory_ma"
      "p.proto\022\ntensorflow\"\222\001\n\021MemAllocatorStat"
      "s\022\022\n\nnum_allocs\030\001 \001(\003\022\024\n\014bytes_in_use\030\002 "
      "\001(\003\022\031\n\021peak_bytes_in_use\030\003 \001(\003\022\032\n\022larges"
      "t_alloc_size\030\004 \001(\003\022\034\n\024fragmentation_metr"
      "ic\030\005 \001(\002\"\256\001\n\010MemChunk\022\017\n\007address\030\001 \001(\004\022\014"
      "\n\004size\030\002 \001(\003\022\026\n\016requested_size\030\003 \001(\003\022\013\n\003"
      "bin\030\004 \001(\005\022\017\n\007op_name\030\005 \001(\t\022\026\n\016freed_at_c"
      "ount\030\006 \001(\004\022\024\n\014action_count\030\007 \001(\004\022\016\n\006in_u"
      "se\030\010 \001(\010\022\017\n\007step_id\030\t \001(\004\"\213\001\n\nBinSummary"
      "\022\013\n\003bin\030\001 \001(\005\022\032\n\022total_bytes_in_use\030\002 \001("
      "\003\022\032\n\022total_bytes_in_bin\030\003 \001(\003\022\033\n\023total_c"
      "hunks_in_use\030\004 \001(\003\022\033\n\023total_chunks_in_bi"
      "n\030\005 \001(\003\".\n\010SnapShot\022\024\n\014action_count\030\001 \001("
      "\004\022\014\n\004size\030\002 \001(\003\"\315\001\n\nMemoryDump\022\026\n\016alloca"
      "tor_name\030\001 \001(\t\022+\n\013bin_summary\030\002 \003(\0132\026.te"
      "nsorflow.BinSummary\022#\n\005chunk\030\003 \003(\0132\024.ten"
      "sorflow.MemChunk\022\'\n\tsnap_shot\030\004 \003(\0132\024.te"
      "nsorflow.SnapShot\022,\n\005stats\030\005 \001(\0132\035.tenso"
      "rflow.MemAllocatorStatsBWZUgithub.com/te"
      "nsorflow/tensorflow/tensorflow/go/core/p"
      "rotobuf/for_core_protos_go_protob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 880);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/bfc_memory_map.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto
namespace tensorflow {

// ===================================================================

void MemAllocatorStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemAllocatorStats::kNumAllocsFieldNumber;
const int MemAllocatorStats::kBytesInUseFieldNumber;
const int MemAllocatorStats::kPeakBytesInUseFieldNumber;
const int MemAllocatorStats::kLargestAllocSizeFieldNumber;
const int MemAllocatorStats::kFragmentationMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemAllocatorStats::MemAllocatorStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemAllocatorStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemAllocatorStats)
}
MemAllocatorStats::MemAllocatorStats(const MemAllocatorStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_allocs_, &from.num_allocs_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragmentation_metric_) -
    reinterpret_cast<char*>(&num_allocs_)) + sizeof(fragmentation_metric_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemAllocatorStats)
}

void MemAllocatorStats::SharedCtor() {
  ::memset(&num_allocs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentation_metric_) -
      reinterpret_cast<char*>(&num_allocs_)) + sizeof(fragmentation_metric_));
}

MemAllocatorStats::~MemAllocatorStats() {
  // @@protoc_insertion_point(destructor:tensorflow.MemAllocatorStats)
  SharedDtor();
}

void MemAllocatorStats::SharedDtor() {
}

void MemAllocatorStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MemAllocatorStats::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemAllocatorStats& MemAllocatorStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemAllocatorStats.base);
  return *internal_default_instance();
}


void MemAllocatorStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemAllocatorStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_allocs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentation_metric_) -
      reinterpret_cast<char*>(&num_allocs_)) + sizeof(fragmentation_metric_));
  _internal_metadata_.Clear();
}

bool MemAllocatorStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemAllocatorStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 num_allocs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_allocs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bytes_in_use = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 peak_bytes_in_use = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 largest_alloc_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largest_alloc_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fragmentation_metric = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fragmentation_metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemAllocatorStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemAllocatorStats)
  return false;
#undef DO_
}

void MemAllocatorStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemAllocatorStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_allocs(), output);
  }

  // int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes_in_use(), output);
  }

  // int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->peak_bytes_in_use(), output);
  }

  // int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->largest_alloc_size(), output);
  }

  // float fragmentation_metric = 5;
  if (this->fragmentation_metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fragmentation_metric(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemAllocatorStats)
}

::google::protobuf::uint8* MemAllocatorStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemAllocatorStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_allocs(), target);
  }

  // int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes_in_use(), target);
  }

  // int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->peak_bytes_in_use(), target);
  }

  // int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->largest_alloc_size(), target);
  }

  // float fragmentation_metric = 5;
  if (this->fragmentation_metric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fragmentation_metric(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemAllocatorStats)
  return target;
}

size_t MemAllocatorStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemAllocatorStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_allocs());
  }

  // int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes_in_use());
  }

  // int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes_in_use());
  }

  // int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largest_alloc_size());
  }

  // float fragmentation_metric = 5;
  if (this->fragmentation_metric() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemAllocatorStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemAllocatorStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MemAllocatorStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemAllocatorStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemAllocatorStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemAllocatorStats)
    MergeFrom(*source);
  }
}

void MemAllocatorStats::MergeFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemAllocatorStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_allocs() != 0) {
    set_num_allocs(from.num_allocs());
  }
  if (from.bytes_in_use() != 0) {
    set_bytes_in_use(from.bytes_in_use());
  }
  if (from.peak_bytes_in_use() != 0) {
    set_peak_bytes_in_use(from.peak_bytes_in_use());
  }
  if (from.largest_alloc_size() != 0) {
    set_largest_alloc_size(from.largest_alloc_size());
  }
  if (from.fragmentation_metric() != 0) {
    set_fragmentation_metric(from.fragmentation_metric());
  }
}

void MemAllocatorStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemAllocatorStats::CopyFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemAllocatorStats::IsInitialized() const {
  return true;
}

void MemAllocatorStats::Swap(MemAllocatorStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemAllocatorStats::InternalSwap(MemAllocatorStats* other) {
  using std::swap;
  swap(num_allocs_, other->num_allocs_);
  swap(bytes_in_use_, other->bytes_in_use_);
  swap(peak_bytes_in_use_, other->peak_bytes_in_use_);
  swap(largest_alloc_size_, other->largest_alloc_size_);
  swap(fragmentation_metric_, other->fragmentation_metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MemAllocatorStats::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemChunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemChunk::kAddressFieldNumber;
const int MemChunk::kSizeFieldNumber;
const int MemChunk::kRequestedSizeFieldNumber;
const int MemChunk::kBinFieldNumber;
const int MemChunk::kOpNameFieldNumber;
const int MemChunk::kFreedAtCountFieldNumber;
const int MemChunk::kActionCountFieldNumber;
const int MemChunk::kInUseFieldNumber;
const int MemChunk::kStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemChunk::MemChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemChunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemChunk)
}
MemChunk::MemChunk(const MemChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op_name().size() > 0) {
    op_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_id_) -
    reinterpret_cast<char*>(&address_)) + sizeof(step_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemChunk)
}

void MemChunk::SharedCtor() {
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&address_)) + sizeof(step_id_));
}

MemChunk::~MemChunk() {
  // @@protoc_insertion_point(destructor:tensorflow.MemChunk)
  SharedDtor();
}

void MemChunk::SharedDtor() {
  op_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MemChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MemChunk::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemChunk& MemChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemChunk.base);
  return *internal_default_instance();
}


void MemChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&address_)) + sizeof(step_id_));
  _internal_metadata_.Clear();
}

bool MemChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 requested_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_name().data(), static_cast<int>(this->op_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemChunk.op_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 freed_at_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freed_at_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 action_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_use = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 step_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemChunk)
  return false;
#undef DO_
}

void MemChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // int64 requested_size = 3;
  if (this->requested_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requested_size(), output);
  }

  // int32 bin = 4;
  if (this->bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bin(), output);
  }

  // string op_name = 5;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), static_cast<int>(this->op_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemChunk.op_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->op_name(), output);
  }

  // uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->freed_at_count(), output);
  }

  // uint64 action_count = 7;
  if (this->action_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->action_count(), output);
  }

  // bool in_use = 8;
  if (this->in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->in_use(), output);
  }

  // uint64 step_id = 9;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->step_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemChunk)
}

::google::protobuf::uint8* MemChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // int64 requested_size = 3;
  if (this->requested_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requested_size(), target);
  }

  // int32 bin = 4;
  if (this->bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bin(), target);
  }

  // string op_name = 5;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), static_cast<int>(this->op_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemChunk.op_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->op_name(), target);
  }

  // uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->freed_at_count(), target);
  }

  // uint64 action_count = 7;
  if (this->action_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->action_count(), target);
  }

  // bool in_use = 8;
  if (this->in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->in_use(), target);
  }

  // uint64 step_id = 9;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->step_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemChunk)
  return target;
}

size_t MemChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemChunk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string op_name = 5;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_name());
  }

  // uint64 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  // int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // int64 requested_size = 3;
  if (this->requested_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->requested_size());
  }

  // uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->freed_at_count());
  }

  // int32 bin = 4;
  if (this->bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bin());
  }

  // bool in_use = 8;
  if (this->in_use() != 0) {
    total_size += 1 + 1;
  }

  // uint64 action_count = 7;
  if (this->action_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->action_count());
  }

  // uint64 step_id = 9;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->step_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const MemChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemChunk)
    MergeFrom(*source);
  }
}

void MemChunk::MergeFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_name().size() > 0) {

    op_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.requested_size() != 0) {
    set_requested_size(from.requested_size());
  }
  if (from.freed_at_count() != 0) {
    set_freed_at_count(from.freed_at_count());
  }
  if (from.bin() != 0) {
    set_bin(from.bin());
  }
  if (from.in_use() != 0) {
    set_in_use(from.in_use());
  }
  if (from.action_count() != 0) {
    set_action_count(from.action_count());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void MemChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemChunk::CopyFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemChunk::IsInitialized() const {
  return true;
}

void MemChunk::Swap(MemChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemChunk::InternalSwap(MemChunk* other) {
  using std::swap;
  op_name_.Swap(&other->op_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
  swap(size_, other->size_);
  swap(requested_size_, other->requested_size_);
  swap(freed_at_count_, other->freed_at_count_);
  swap(bin_, other->bin_);
  swap(in_use_, other->in_use_);
  swap(action_count_, other->action_count_);
  swap(step_id_, other->step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MemChunk::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BinSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinSummary::kBinFieldNumber;
const int BinSummary::kTotalBytesInUseFieldNumber;
const int BinSummary::kTotalBytesInBinFieldNumber;
const int BinSummary::kTotalChunksInUseFieldNumber;
const int BinSummary::kTotalChunksInBinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinSummary::BinSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_BinSummary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BinSummary)
}
BinSummary::BinSummary(const BinSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_bytes_in_use_, &from.total_bytes_in_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&bin_) -
    reinterpret_cast<char*>(&total_bytes_in_use_)) + sizeof(bin_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.BinSummary)
}

void BinSummary::SharedCtor() {
  ::memset(&total_bytes_in_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_) -
      reinterpret_cast<char*>(&total_bytes_in_use_)) + sizeof(bin_));
}

BinSummary::~BinSummary() {
  // @@protoc_insertion_point(destructor:tensorflow.BinSummary)
  SharedDtor();
}

void BinSummary::SharedDtor() {
}

void BinSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BinSummary::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BinSummary& BinSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_BinSummary.base);
  return *internal_default_instance();
}


void BinSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BinSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_bytes_in_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_) -
      reinterpret_cast<char*>(&total_bytes_in_use_)) + sizeof(bin_));
  _internal_metadata_.Clear();
}

bool BinSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.BinSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 bin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_bytes_in_use = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_bytes_in_bin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_in_bin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_chunks_in_use = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_chunks_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_chunks_in_bin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_chunks_in_bin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.BinSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.BinSummary)
  return false;
#undef DO_
}

void BinSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.BinSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bin = 1;
  if (this->bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bin(), output);
  }

  // int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_bytes_in_use(), output);
  }

  // int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_bytes_in_bin(), output);
  }

  // int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_chunks_in_use(), output);
  }

  // int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_chunks_in_bin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.BinSummary)
}

::google::protobuf::uint8* BinSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BinSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bin = 1;
  if (this->bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bin(), target);
  }

  // int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_bytes_in_use(), target);
  }

  // int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_bytes_in_bin(), target);
  }

  // int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_chunks_in_use(), target);
  }

  // int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_chunks_in_bin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BinSummary)
  return target;
}

size_t BinSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BinSummary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes_in_use());
  }

  // int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes_in_bin());
  }

  // int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_chunks_in_use());
  }

  // int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_chunks_in_bin());
  }

  // int32 bin = 1;
  if (this->bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BinSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const BinSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BinSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BinSummary)
    MergeFrom(*source);
  }
}

void BinSummary::MergeFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BinSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_bytes_in_use() != 0) {
    set_total_bytes_in_use(from.total_bytes_in_use());
  }
  if (from.total_bytes_in_bin() != 0) {
    set_total_bytes_in_bin(from.total_bytes_in_bin());
  }
  if (from.total_chunks_in_use() != 0) {
    set_total_chunks_in_use(from.total_chunks_in_use());
  }
  if (from.total_chunks_in_bin() != 0) {
    set_total_chunks_in_bin(from.total_chunks_in_bin());
  }
  if (from.bin() != 0) {
    set_bin(from.bin());
  }
}

void BinSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinSummary::CopyFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinSummary::IsInitialized() const {
  return true;
}

void BinSummary::Swap(BinSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinSummary::InternalSwap(BinSummary* other) {
  using std::swap;
  swap(total_bytes_in_use_, other->total_bytes_in_use_);
  swap(total_bytes_in_bin_, other->total_bytes_in_bin_);
  swap(total_chunks_in_use_, other->total_chunks_in_use_);
  swap(total_chunks_in_bin_, other->total_chunks_in_bin_);
  swap(bin_, other->bin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BinSummary::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnapShot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapShot::kActionCountFieldNumber;
const int SnapShot::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapShot::SnapShot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_SnapShot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SnapShot)
}
SnapShot::SnapShot(const SnapShot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_count_, &from.action_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&action_count_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.SnapShot)
}

void SnapShot::SharedCtor() {
  ::memset(&action_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&action_count_)) + sizeof(size_));
}

SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:tensorflow.SnapShot)
  SharedDtor();
}

void SnapShot::SharedDtor() {
}

void SnapShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SnapShot::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapShot& SnapShot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_SnapShot.base);
  return *internal_default_instance();
}


void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SnapShot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&action_count_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool SnapShot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SnapShot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 action_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SnapShot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SnapShot)
  return false;
#undef DO_
}

void SnapShot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SnapShot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 action_count = 1;
  if (this->action_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->action_count(), output);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SnapShot)
}

::google::protobuf::uint8* SnapShot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SnapShot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 action_count = 1;
  if (this->action_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->action_count(), target);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SnapShot)
  return target;
}

size_t SnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SnapShot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 action_count = 1;
  if (this->action_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->action_count());
  }

  // int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapShot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapShot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapShot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SnapShot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SnapShot)
    MergeFrom(*source);
  }
}

void SnapShot::MergeFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_count() != 0) {
    set_action_count(from.action_count());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void SnapShot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShot::IsInitialized() const {
  return true;
}

void SnapShot::Swap(SnapShot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapShot::InternalSwap(SnapShot* other) {
  using std::swap;
  swap(action_count_, other->action_count_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SnapShot::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemoryDump::InitAsDefaultInstance() {
  ::tensorflow::_MemoryDump_default_instance_._instance.get_mutable()->stats_ = const_cast< ::tensorflow::MemAllocatorStats*>(
      ::tensorflow::MemAllocatorStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDump::kAllocatorNameFieldNumber;
const int MemoryDump::kBinSummaryFieldNumber;
const int MemoryDump::kChunkFieldNumber;
const int MemoryDump::kSnapShotFieldNumber;
const int MemoryDump::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDump::MemoryDump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemoryDump.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryDump)
}
MemoryDump::MemoryDump(const MemoryDump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bin_summary_(from.bin_summary_),
      chunk_(from.chunk_),
      snap_shot_(from.snap_shot_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name_);
  }
  if (from.has_stats()) {
    stats_ = new ::tensorflow::MemAllocatorStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryDump)
}

void MemoryDump::SharedCtor() {
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_ = NULL;
}

MemoryDump::~MemoryDump() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryDump)
  SharedDtor();
}

void MemoryDump::SharedDtor() {
  allocator_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void MemoryDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MemoryDump::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemoryDump& MemoryDump::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::scc_info_MemoryDump.base);
  return *internal_default_instance();
}


void MemoryDump::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bin_summary_.Clear();
  chunk_.Clear();
  snap_shot_.Clear();
  allocator_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  _internal_metadata_.Clear();
}

bool MemoryDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryDump)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string allocator_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryDump.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.BinSummary bin_summary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bin_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.MemChunk chunk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.SnapShot snap_shot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_snap_shot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.MemAllocatorStats stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryDump)
  return false;
#undef DO_
}

void MemoryDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryDump.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->allocator_name(), output);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bin_summary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->bin_summary(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->chunk(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snap_shot_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->snap_shot(static_cast<int>(i)),
      output);
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_stats(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryDump)
}

::google::protobuf::uint8* MemoryDump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryDump.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->allocator_name(), target);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bin_summary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->bin_summary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->chunk(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snap_shot_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->snap_shot(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_stats(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryDump)
  return target;
}

size_t MemoryDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryDump)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.BinSummary bin_summary = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bin_summary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bin_summary(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->snap_shot_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->snap_shot(static_cast<int>(i)));
    }
  }

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryDump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryDump)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryDump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryDump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryDump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryDump)
    MergeFrom(*source);
  }
}

void MemoryDump::MergeFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bin_summary_.MergeFrom(from.bin_summary_);
  chunk_.MergeFrom(from.chunk_);
  snap_shot_.MergeFrom(from.snap_shot_);
  if (from.allocator_name().size() > 0) {

    allocator_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name_);
  }
  if (from.has_stats()) {
    mutable_stats()->::tensorflow::MemAllocatorStats::MergeFrom(from.stats());
  }
}

void MemoryDump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDump::CopyFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDump::IsInitialized() const {
  return true;
}

void MemoryDump::Swap(MemoryDump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDump::InternalSwap(MemoryDump* other) {
  using std::swap;
  CastToBase(&bin_summary_)->InternalSwap(CastToBase(&other->bin_summary_));
  CastToBase(&chunk_)->InternalSwap(CastToBase(&other->chunk_));
  CastToBase(&snap_shot_)->InternalSwap(CastToBase(&other->snap_shot_));
  allocator_name_.Swap(&other->allocator_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stats_, other->stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MemoryDump::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::MemAllocatorStats* Arena::CreateMaybeMessage< ::tensorflow::MemAllocatorStats >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::MemAllocatorStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::MemChunk* Arena::CreateMaybeMessage< ::tensorflow::MemChunk >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::MemChunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::BinSummary* Arena::CreateMaybeMessage< ::tensorflow::BinSummary >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::BinSummary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::SnapShot* Arena::CreateMaybeMessage< ::tensorflow::SnapShot >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::SnapShot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::MemoryDump* Arena::CreateMaybeMessage< ::tensorflow::MemoryDump >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::MemoryDump >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
