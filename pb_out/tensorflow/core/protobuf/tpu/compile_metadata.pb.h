// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tpu/compile_metadata.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/compiler/xla/xla.pb.h"
#include "tensorflow/compiler/xla/xla_data.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
#include "tensorflow/core/protobuf/tpu/dynamic_padding.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto 

namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto
namespace tensorflow {
namespace tpu {
class TPUCompileMetadataProto;
class TPUCompileMetadataProtoDefaultTypeInternal;
extern TPUCompileMetadataProtoDefaultTypeInternal _TPUCompileMetadataProto_default_instance_;
class TPUCompileMetadataProto_Arg;
class TPUCompileMetadataProto_ArgDefaultTypeInternal;
extern TPUCompileMetadataProto_ArgDefaultTypeInternal _TPUCompileMetadataProto_Arg_default_instance_;
class TPUCompileMetadataProto_Retval;
class TPUCompileMetadataProto_RetvalDefaultTypeInternal;
extern TPUCompileMetadataProto_RetvalDefaultTypeInternal _TPUCompileMetadataProto_Retval_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::tpu::TPUCompileMetadataProto* Arena::CreateMaybeMessage<::tensorflow::tpu::TPUCompileMetadataProto>(Arena*);
template<> ::tensorflow::tpu::TPUCompileMetadataProto_Arg* Arena::CreateMaybeMessage<::tensorflow::tpu::TPUCompileMetadataProto_Arg>(Arena*);
template<> ::tensorflow::tpu::TPUCompileMetadataProto_Retval* Arena::CreateMaybeMessage<::tensorflow::tpu::TPUCompileMetadataProto_Retval>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace tpu {

enum TPUCompileMetadataProto_Arg_Kind {
  TPUCompileMetadataProto_Arg_Kind_INVALID = 0,
  TPUCompileMetadataProto_Arg_Kind_PARAMETER = 1,
  TPUCompileMetadataProto_Arg_Kind_VARIABLE = 2,
  TPUCompileMetadataProto_Arg_Kind_GUARANTEED_CONSTANT = 3,
  TPUCompileMetadataProto_Arg_Kind_TPUCompileMetadataProto_Arg_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TPUCompileMetadataProto_Arg_Kind_TPUCompileMetadataProto_Arg_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TPUCompileMetadataProto_Arg_Kind_IsValid(int value);
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg_Kind_Kind_MIN = TPUCompileMetadataProto_Arg_Kind_INVALID;
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg_Kind_Kind_MAX = TPUCompileMetadataProto_Arg_Kind_GUARANTEED_CONSTANT;
const int TPUCompileMetadataProto_Arg_Kind_Kind_ARRAYSIZE = TPUCompileMetadataProto_Arg_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* TPUCompileMetadataProto_Arg_Kind_descriptor();
inline const ::std::string& TPUCompileMetadataProto_Arg_Kind_Name(TPUCompileMetadataProto_Arg_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    TPUCompileMetadataProto_Arg_Kind_descriptor(), value);
}
inline bool TPUCompileMetadataProto_Arg_Kind_Parse(
    const ::std::string& name, TPUCompileMetadataProto_Arg_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TPUCompileMetadataProto_Arg_Kind>(
    TPUCompileMetadataProto_Arg_Kind_descriptor(), name, value);
}
enum TPUCompileMetadataProto_Arg_EnableXlaSharding {
  TPUCompileMetadataProto_Arg_EnableXlaSharding_DISALLOWED = 0,
  TPUCompileMetadataProto_Arg_EnableXlaSharding_TENTATIVE = 1,
  TPUCompileMetadataProto_Arg_EnableXlaSharding_ALLOWED = 2,
  TPUCompileMetadataProto_Arg_EnableXlaSharding_TPUCompileMetadataProto_Arg_EnableXlaSharding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TPUCompileMetadataProto_Arg_EnableXlaSharding_TPUCompileMetadataProto_Arg_EnableXlaSharding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TPUCompileMetadataProto_Arg_EnableXlaSharding_IsValid(int value);
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_MIN = TPUCompileMetadataProto_Arg_EnableXlaSharding_DISALLOWED;
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_MAX = TPUCompileMetadataProto_Arg_EnableXlaSharding_ALLOWED;
const int TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_ARRAYSIZE = TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_MAX + 1;

const ::google::protobuf::EnumDescriptor* TPUCompileMetadataProto_Arg_EnableXlaSharding_descriptor();
inline const ::std::string& TPUCompileMetadataProto_Arg_EnableXlaSharding_Name(TPUCompileMetadataProto_Arg_EnableXlaSharding value) {
  return ::google::protobuf::internal::NameOfEnum(
    TPUCompileMetadataProto_Arg_EnableXlaSharding_descriptor(), value);
}
inline bool TPUCompileMetadataProto_Arg_EnableXlaSharding_Parse(
    const ::std::string& name, TPUCompileMetadataProto_Arg_EnableXlaSharding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TPUCompileMetadataProto_Arg_EnableXlaSharding>(
    TPUCompileMetadataProto_Arg_EnableXlaSharding_descriptor(), name, value);
}
// ===================================================================

class TPUCompileMetadataProto_Arg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.TPUCompileMetadataProto.Arg) */ {
 public:
  TPUCompileMetadataProto_Arg();
  virtual ~TPUCompileMetadataProto_Arg();

  TPUCompileMetadataProto_Arg(const TPUCompileMetadataProto_Arg& from);

  inline TPUCompileMetadataProto_Arg& operator=(const TPUCompileMetadataProto_Arg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUCompileMetadataProto_Arg(TPUCompileMetadataProto_Arg&& from) noexcept
    : TPUCompileMetadataProto_Arg() {
    *this = ::std::move(from);
  }

  inline TPUCompileMetadataProto_Arg& operator=(TPUCompileMetadataProto_Arg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUCompileMetadataProto_Arg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUCompileMetadataProto_Arg* internal_default_instance() {
    return reinterpret_cast<const TPUCompileMetadataProto_Arg*>(
               &_TPUCompileMetadataProto_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TPUCompileMetadataProto_Arg* other);
  void Swap(TPUCompileMetadataProto_Arg* other);
  friend void swap(TPUCompileMetadataProto_Arg& a, TPUCompileMetadataProto_Arg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUCompileMetadataProto_Arg* New() const final {
    return CreateMaybeMessage<TPUCompileMetadataProto_Arg>(NULL);
  }

  TPUCompileMetadataProto_Arg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUCompileMetadataProto_Arg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUCompileMetadataProto_Arg& from);
  void MergeFrom(const TPUCompileMetadataProto_Arg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUCompileMetadataProto_Arg* other);
  protected:
  explicit TPUCompileMetadataProto_Arg(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TPUCompileMetadataProto_Arg_Kind Kind;
  static const Kind INVALID =
    TPUCompileMetadataProto_Arg_Kind_INVALID;
  static const Kind PARAMETER =
    TPUCompileMetadataProto_Arg_Kind_PARAMETER;
  static const Kind VARIABLE =
    TPUCompileMetadataProto_Arg_Kind_VARIABLE;
  static const Kind GUARANTEED_CONSTANT =
    TPUCompileMetadataProto_Arg_Kind_GUARANTEED_CONSTANT;
  static inline bool Kind_IsValid(int value) {
    return TPUCompileMetadataProto_Arg_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    TPUCompileMetadataProto_Arg_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    TPUCompileMetadataProto_Arg_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    TPUCompileMetadataProto_Arg_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return TPUCompileMetadataProto_Arg_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return TPUCompileMetadataProto_Arg_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return TPUCompileMetadataProto_Arg_Kind_Parse(name, value);
  }

  typedef TPUCompileMetadataProto_Arg_EnableXlaSharding EnableXlaSharding;
  static const EnableXlaSharding DISALLOWED =
    TPUCompileMetadataProto_Arg_EnableXlaSharding_DISALLOWED;
  static const EnableXlaSharding TENTATIVE =
    TPUCompileMetadataProto_Arg_EnableXlaSharding_TENTATIVE;
  static const EnableXlaSharding ALLOWED =
    TPUCompileMetadataProto_Arg_EnableXlaSharding_ALLOWED;
  static inline bool EnableXlaSharding_IsValid(int value) {
    return TPUCompileMetadataProto_Arg_EnableXlaSharding_IsValid(value);
  }
  static const EnableXlaSharding EnableXlaSharding_MIN =
    TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_MIN;
  static const EnableXlaSharding EnableXlaSharding_MAX =
    TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_MAX;
  static const int EnableXlaSharding_ARRAYSIZE =
    TPUCompileMetadataProto_Arg_EnableXlaSharding_EnableXlaSharding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnableXlaSharding_descriptor() {
    return TPUCompileMetadataProto_Arg_EnableXlaSharding_descriptor();
  }
  static inline const ::std::string& EnableXlaSharding_Name(EnableXlaSharding value) {
    return TPUCompileMetadataProto_Arg_EnableXlaSharding_Name(value);
  }
  static inline bool EnableXlaSharding_Parse(const ::std::string& name,
      EnableXlaSharding* value) {
    return TPUCompileMetadataProto_Arg_EnableXlaSharding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .tensorflow.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  public:
  const ::tensorflow::TensorShapeProto& shape() const;
  ::tensorflow::TensorShapeProto* release_shape();
  ::tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* shape);
  void unsafe_arena_set_allocated_shape(
      ::tensorflow::TensorShapeProto* shape);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_shape();

  // .xla.OpSharding sharding = 4;
  bool has_sharding() const;
  void clear_sharding();
  static const int kShardingFieldNumber = 4;
  private:
  const ::xla::OpSharding& _internal_sharding() const;
  public:
  const ::xla::OpSharding& sharding() const;
  ::xla::OpSharding* release_sharding();
  ::xla::OpSharding* mutable_sharding();
  void set_allocated_sharding(::xla::OpSharding* sharding);
  void unsafe_arena_set_allocated_sharding(
      ::xla::OpSharding* sharding);
  ::xla::OpSharding* unsafe_arena_release_sharding();

  // .tensorflow.DataType dtype = 1;
  void clear_dtype();
  static const int kDtypeFieldNumber = 1;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind kind = 3;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind kind() const;
  void set_kind(::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind value);

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding enable_xla_sharding = 6;
  void clear_enable_xla_sharding();
  static const int kEnableXlaShardingFieldNumber = 6;
  ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding enable_xla_sharding() const;
  void set_enable_xla_sharding(::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding value);

  // int32 retval_index_for_sharding = 8;
  void clear_retval_index_for_sharding();
  static const int kRetvalIndexForShardingFieldNumber = 8;
  ::google::protobuf::int32 retval_index_for_sharding() const;
  void set_retval_index_for_sharding(::google::protobuf::int32 value);

  // bool is_same_data_across_replicas = 5;
  void clear_is_same_data_across_replicas();
  static const int kIsSameDataAcrossReplicasFieldNumber = 5;
  bool is_same_data_across_replicas() const;
  void set_is_same_data_across_replicas(bool value);

  // bool fast_mem = 7;
  void clear_fast_mem();
  static const int kFastMemFieldNumber = 7;
  bool fast_mem() const;
  void set_fast_mem(bool value);

  // bool unrestricted_layout = 9;
  void clear_unrestricted_layout();
  static const int kUnrestrictedLayoutFieldNumber = 9;
  bool unrestricted_layout() const;
  void set_unrestricted_layout(bool value);

  // bool requires_xla_broadcast = 11;
  void clear_requires_xla_broadcast();
  static const int kRequiresXlaBroadcastFieldNumber = 11;
  bool requires_xla_broadcast() const;
  void set_requires_xla_broadcast(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TPUCompileMetadataProto.Arg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tensorflow::TensorShapeProto* shape_;
  ::xla::OpSharding* sharding_;
  int dtype_;
  int kind_;
  int enable_xla_sharding_;
  ::google::protobuf::int32 retval_index_for_sharding_;
  bool is_same_data_across_replicas_;
  bool fast_mem_;
  bool unrestricted_layout_;
  bool requires_xla_broadcast_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TPUCompileMetadataProto_Retval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.TPUCompileMetadataProto.Retval) */ {
 public:
  TPUCompileMetadataProto_Retval();
  virtual ~TPUCompileMetadataProto_Retval();

  TPUCompileMetadataProto_Retval(const TPUCompileMetadataProto_Retval& from);

  inline TPUCompileMetadataProto_Retval& operator=(const TPUCompileMetadataProto_Retval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUCompileMetadataProto_Retval(TPUCompileMetadataProto_Retval&& from) noexcept
    : TPUCompileMetadataProto_Retval() {
    *this = ::std::move(from);
  }

  inline TPUCompileMetadataProto_Retval& operator=(TPUCompileMetadataProto_Retval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUCompileMetadataProto_Retval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUCompileMetadataProto_Retval* internal_default_instance() {
    return reinterpret_cast<const TPUCompileMetadataProto_Retval*>(
               &_TPUCompileMetadataProto_Retval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(TPUCompileMetadataProto_Retval* other);
  void Swap(TPUCompileMetadataProto_Retval* other);
  friend void swap(TPUCompileMetadataProto_Retval& a, TPUCompileMetadataProto_Retval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUCompileMetadataProto_Retval* New() const final {
    return CreateMaybeMessage<TPUCompileMetadataProto_Retval>(NULL);
  }

  TPUCompileMetadataProto_Retval* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUCompileMetadataProto_Retval>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUCompileMetadataProto_Retval& from);
  void MergeFrom(const TPUCompileMetadataProto_Retval& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUCompileMetadataProto_Retval* other);
  protected:
  explicit TPUCompileMetadataProto_Retval(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xla.OpSharding sharding = 1;
  bool has_sharding() const;
  void clear_sharding();
  static const int kShardingFieldNumber = 1;
  private:
  const ::xla::OpSharding& _internal_sharding() const;
  public:
  const ::xla::OpSharding& sharding() const;
  ::xla::OpSharding* release_sharding();
  ::xla::OpSharding* mutable_sharding();
  void set_allocated_sharding(::xla::OpSharding* sharding);
  void unsafe_arena_set_allocated_sharding(
      ::xla::OpSharding* sharding);
  ::xla::OpSharding* unsafe_arena_release_sharding();

  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TPUCompileMetadataProto.Retval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::OpSharding* sharding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TPUCompileMetadataProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.TPUCompileMetadataProto) */ {
 public:
  TPUCompileMetadataProto();
  virtual ~TPUCompileMetadataProto();

  TPUCompileMetadataProto(const TPUCompileMetadataProto& from);

  inline TPUCompileMetadataProto& operator=(const TPUCompileMetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUCompileMetadataProto(TPUCompileMetadataProto&& from) noexcept
    : TPUCompileMetadataProto() {
    *this = ::std::move(from);
  }

  inline TPUCompileMetadataProto& operator=(TPUCompileMetadataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUCompileMetadataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUCompileMetadataProto* internal_default_instance() {
    return reinterpret_cast<const TPUCompileMetadataProto*>(
               &_TPUCompileMetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(TPUCompileMetadataProto* other);
  void Swap(TPUCompileMetadataProto* other);
  friend void swap(TPUCompileMetadataProto& a, TPUCompileMetadataProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUCompileMetadataProto* New() const final {
    return CreateMaybeMessage<TPUCompileMetadataProto>(NULL);
  }

  TPUCompileMetadataProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUCompileMetadataProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUCompileMetadataProto& from);
  void MergeFrom(const TPUCompileMetadataProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUCompileMetadataProto* other);
  protected:
  explicit TPUCompileMetadataProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TPUCompileMetadataProto_Arg Arg;
  typedef TPUCompileMetadataProto_Retval Retval;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Arg args = 1;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 1;
  ::tensorflow::tpu::TPUCompileMetadataProto_Arg* mutable_args(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Arg >*
      mutable_args();
  const ::tensorflow::tpu::TPUCompileMetadataProto_Arg& args(int index) const;
  ::tensorflow::tpu::TPUCompileMetadataProto_Arg* add_args();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Arg >&
      args() const;

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Retval retvals = 2;
  int retvals_size() const;
  void clear_retvals();
  static const int kRetvalsFieldNumber = 2;
  ::tensorflow::tpu::TPUCompileMetadataProto_Retval* mutable_retvals(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Retval >*
      mutable_retvals();
  const ::tensorflow::tpu::TPUCompileMetadataProto_Retval& retvals(int index) const;
  ::tensorflow::tpu::TPUCompileMetadataProto_Retval* add_retvals();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Retval >&
      retvals() const;

  // repeated .tensorflow.tpu.PaddingMap padding_maps = 11;
  int padding_maps_size() const;
  void clear_padding_maps();
  static const int kPaddingMapsFieldNumber = 11;
  ::tensorflow::tpu::PaddingMap* mutable_padding_maps(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::PaddingMap >*
      mutable_padding_maps();
  const ::tensorflow::tpu::PaddingMap& padding_maps(int index) const;
  ::tensorflow::tpu::PaddingMap* add_padding_maps();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::PaddingMap >&
      padding_maps() const;

  // string session_handle = 9;
  void clear_session_handle();
  static const int kSessionHandleFieldNumber = 9;
  const ::std::string& session_handle() const;
  void set_session_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_session_handle(::std::string&& value);
  #endif
  void set_session_handle(const char* value);
  void set_session_handle(const char* value, size_t size);
  ::std::string* mutable_session_handle();
  ::std::string* release_session_handle();
  void set_allocated_session_handle(::std::string* session_handle);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_session_handle();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_handle(
      ::std::string* session_handle);

  // string guaranteed_const_fingerprint = 10;
  void clear_guaranteed_const_fingerprint();
  static const int kGuaranteedConstFingerprintFieldNumber = 10;
  const ::std::string& guaranteed_const_fingerprint() const;
  void set_guaranteed_const_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_guaranteed_const_fingerprint(::std::string&& value);
  #endif
  void set_guaranteed_const_fingerprint(const char* value);
  void set_guaranteed_const_fingerprint(const char* value, size_t size);
  ::std::string* mutable_guaranteed_const_fingerprint();
  ::std::string* release_guaranteed_const_fingerprint();
  void set_allocated_guaranteed_const_fingerprint(::std::string* guaranteed_const_fingerprint);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_guaranteed_const_fingerprint();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guaranteed_const_fingerprint(
      ::std::string* guaranteed_const_fingerprint);

  // .xla.DeviceAssignmentProto device_assignment = 8;
  bool has_device_assignment() const;
  void clear_device_assignment();
  static const int kDeviceAssignmentFieldNumber = 8;
  private:
  const ::xla::DeviceAssignmentProto& _internal_device_assignment() const;
  public:
  const ::xla::DeviceAssignmentProto& device_assignment() const;
  ::xla::DeviceAssignmentProto* release_device_assignment();
  ::xla::DeviceAssignmentProto* mutable_device_assignment();
  void set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment);
  void unsafe_arena_set_allocated_device_assignment(
      ::xla::DeviceAssignmentProto* device_assignment);
  ::xla::DeviceAssignmentProto* unsafe_arena_release_device_assignment();

  // int32 num_replicas = 3;
  void clear_num_replicas();
  static const int kNumReplicasFieldNumber = 3;
  ::google::protobuf::int32 num_replicas() const;
  void set_num_replicas(::google::protobuf::int32 value);

  // int32 num_cores_per_replica = 4;
  void clear_num_cores_per_replica();
  static const int kNumCoresPerReplicaFieldNumber = 4;
  ::google::protobuf::int32 num_cores_per_replica() const;
  void set_num_cores_per_replica(::google::protobuf::int32 value);

  // uint64 function_library_fingerprint = 6;
  void clear_function_library_fingerprint();
  static const int kFunctionLibraryFingerprintFieldNumber = 6;
  ::google::protobuf::uint64 function_library_fingerprint() const;
  void set_function_library_fingerprint(::google::protobuf::uint64 value);

  // int64 xla_fusion_autotuner_thresh = 13;
  void clear_xla_fusion_autotuner_thresh();
  static const int kXlaFusionAutotunerThreshFieldNumber = 13;
  ::google::protobuf::int64 xla_fusion_autotuner_thresh() const;
  void set_xla_fusion_autotuner_thresh(::google::protobuf::int64 value);

  // .xla.DebugOptions.StepMarkerLocation step_marker_location = 12;
  void clear_step_marker_location();
  static const int kStepMarkerLocationFieldNumber = 12;
  ::xla::DebugOptions_StepMarkerLocation step_marker_location() const;
  void set_step_marker_location(::xla::DebugOptions_StepMarkerLocation value);

  // bool enable_automatic_model_parallelism = 14;
  void clear_enable_automatic_model_parallelism();
  static const int kEnableAutomaticModelParallelismFieldNumber = 14;
  bool enable_automatic_model_parallelism() const;
  void set_enable_automatic_model_parallelism(bool value);

  // bool use_spmd_for_xla_partitioning = 15;
  void clear_use_spmd_for_xla_partitioning();
  static const int kUseSpmdForXlaPartitioningFieldNumber = 15;
  bool use_spmd_for_xla_partitioning() const;
  void set_use_spmd_for_xla_partitioning(bool value);

  // bool use_auto_spmd_for_xla_partitioning = 18;
  void clear_use_auto_spmd_for_xla_partitioning();
  static const int kUseAutoSpmdForXlaPartitioningFieldNumber = 18;
  bool use_auto_spmd_for_xla_partitioning() const;
  void set_use_auto_spmd_for_xla_partitioning(bool value);

  // uint64 mlir_fingerprint = 17;
  void clear_mlir_fingerprint();
  static const int kMlirFingerprintFieldNumber = 17;
  ::google::protobuf::uint64 mlir_fingerprint() const;
  void set_mlir_fingerprint(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TPUCompileMetadataProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Arg > args_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Retval > retvals_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::PaddingMap > padding_maps_;
  ::google::protobuf::internal::ArenaStringPtr session_handle_;
  ::google::protobuf::internal::ArenaStringPtr guaranteed_const_fingerprint_;
  ::xla::DeviceAssignmentProto* device_assignment_;
  ::google::protobuf::int32 num_replicas_;
  ::google::protobuf::int32 num_cores_per_replica_;
  ::google::protobuf::uint64 function_library_fingerprint_;
  ::google::protobuf::int64 xla_fusion_autotuner_thresh_;
  int step_marker_location_;
  bool enable_automatic_model_parallelism_;
  bool use_spmd_for_xla_partitioning_;
  bool use_auto_spmd_for_xla_partitioning_;
  ::google::protobuf::uint64 mlir_fingerprint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPUCompileMetadataProto_Arg

// .tensorflow.DataType dtype = 1;
inline void TPUCompileMetadataProto_Arg::clear_dtype() {
  dtype_ = 0;
}
inline ::tensorflow::DataType TPUCompileMetadataProto_Arg::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void TPUCompileMetadataProto_Arg::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.dtype)
}

// .tensorflow.TensorShapeProto shape = 2;
inline bool TPUCompileMetadataProto_Arg::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline const ::tensorflow::TensorShapeProto& TPUCompileMetadataProto_Arg::_internal_shape() const {
  return *shape_;
}
inline const ::tensorflow::TensorShapeProto& TPUCompileMetadataProto_Arg::shape() const {
  const ::tensorflow::TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorShapeProto*>(
      &::tensorflow::_TensorShapeProto_default_instance_);
}
inline ::tensorflow::TensorShapeProto* TPUCompileMetadataProto_Arg::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.Arg.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  shape_ = NULL;
  return temp;
}
inline ::tensorflow::TensorShapeProto* TPUCompileMetadataProto_Arg::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.Arg.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::tensorflow::TensorShapeProto* TPUCompileMetadataProto_Arg::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.Arg.shape)
  return shape_;
}
inline void TPUCompileMetadataProto_Arg::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shape)->GetArena();
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Arg.shape)
}

// .tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind kind = 3;
inline void TPUCompileMetadataProto_Arg::clear_kind() {
  kind_ = 0;
}
inline ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::kind() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.kind)
  return static_cast< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind >(kind_);
}
inline void TPUCompileMetadataProto_Arg::set_kind(::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.kind)
}

// .xla.OpSharding sharding = 4;
inline bool TPUCompileMetadataProto_Arg::has_sharding() const {
  return this != internal_default_instance() && sharding_ != NULL;
}
inline const ::xla::OpSharding& TPUCompileMetadataProto_Arg::_internal_sharding() const {
  return *sharding_;
}
inline const ::xla::OpSharding& TPUCompileMetadataProto_Arg::sharding() const {
  const ::xla::OpSharding* p = sharding_;
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::OpSharding*>(
      &::xla::_OpSharding_default_instance_);
}
inline ::xla::OpSharding* TPUCompileMetadataProto_Arg::release_sharding() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding)
  
  ::xla::OpSharding* temp = sharding_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  sharding_ = NULL;
  return temp;
}
inline ::xla::OpSharding* TPUCompileMetadataProto_Arg::unsafe_arena_release_sharding() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding)
  
  ::xla::OpSharding* temp = sharding_;
  sharding_ = NULL;
  return temp;
}
inline ::xla::OpSharding* TPUCompileMetadataProto_Arg::mutable_sharding() {
  
  if (sharding_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::OpSharding>(GetArenaNoVirtual());
    sharding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding)
  return sharding_;
}
inline void TPUCompileMetadataProto_Arg::set_allocated_sharding(::xla::OpSharding* sharding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sharding_);
  }
  if (sharding) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sharding)->GetArena();
    if (message_arena != submessage_arena) {
      sharding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sharding, submessage_arena);
    }
    
  } else {
    
  }
  sharding_ = sharding;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding)
}

// bool is_same_data_across_replicas = 5;
inline void TPUCompileMetadataProto_Arg::clear_is_same_data_across_replicas() {
  is_same_data_across_replicas_ = false;
}
inline bool TPUCompileMetadataProto_Arg::is_same_data_across_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.is_same_data_across_replicas)
  return is_same_data_across_replicas_;
}
inline void TPUCompileMetadataProto_Arg::set_is_same_data_across_replicas(bool value) {
  
  is_same_data_across_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.is_same_data_across_replicas)
}

// .tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding enable_xla_sharding = 6;
inline void TPUCompileMetadataProto_Arg::clear_enable_xla_sharding() {
  enable_xla_sharding_ = 0;
}
inline ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg::enable_xla_sharding() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.enable_xla_sharding)
  return static_cast< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding >(enable_xla_sharding_);
}
inline void TPUCompileMetadataProto_Arg::set_enable_xla_sharding(::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding value) {
  
  enable_xla_sharding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.enable_xla_sharding)
}

// int32 retval_index_for_sharding = 8;
inline void TPUCompileMetadataProto_Arg::clear_retval_index_for_sharding() {
  retval_index_for_sharding_ = 0;
}
inline ::google::protobuf::int32 TPUCompileMetadataProto_Arg::retval_index_for_sharding() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.retval_index_for_sharding)
  return retval_index_for_sharding_;
}
inline void TPUCompileMetadataProto_Arg::set_retval_index_for_sharding(::google::protobuf::int32 value) {
  
  retval_index_for_sharding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.retval_index_for_sharding)
}

// bool fast_mem = 7;
inline void TPUCompileMetadataProto_Arg::clear_fast_mem() {
  fast_mem_ = false;
}
inline bool TPUCompileMetadataProto_Arg::fast_mem() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.fast_mem)
  return fast_mem_;
}
inline void TPUCompileMetadataProto_Arg::set_fast_mem(bool value) {
  
  fast_mem_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.fast_mem)
}

// bool unrestricted_layout = 9;
inline void TPUCompileMetadataProto_Arg::clear_unrestricted_layout() {
  unrestricted_layout_ = false;
}
inline bool TPUCompileMetadataProto_Arg::unrestricted_layout() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.unrestricted_layout)
  return unrestricted_layout_;
}
inline void TPUCompileMetadataProto_Arg::set_unrestricted_layout(bool value) {
  
  unrestricted_layout_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.unrestricted_layout)
}

// string name = 10;
inline void TPUCompileMetadataProto_Arg::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TPUCompileMetadataProto_Arg::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
  return name_.Get();
}
inline void TPUCompileMetadataProto_Arg::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
}
#if LANG_CXX11
inline void TPUCompileMetadataProto_Arg::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
}
#endif
inline void TPUCompileMetadataProto_Arg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
}
inline void TPUCompileMetadataProto_Arg::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
}
inline ::std::string* TPUCompileMetadataProto_Arg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TPUCompileMetadataProto_Arg::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TPUCompileMetadataProto_Arg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
}
inline ::std::string* TPUCompileMetadataProto_Arg::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TPUCompileMetadataProto_Arg::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Arg.name)
}

// bool requires_xla_broadcast = 11;
inline void TPUCompileMetadataProto_Arg::clear_requires_xla_broadcast() {
  requires_xla_broadcast_ = false;
}
inline bool TPUCompileMetadataProto_Arg::requires_xla_broadcast() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Arg.requires_xla_broadcast)
  return requires_xla_broadcast_;
}
inline void TPUCompileMetadataProto_Arg::set_requires_xla_broadcast(bool value) {
  
  requires_xla_broadcast_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.Arg.requires_xla_broadcast)
}

// -------------------------------------------------------------------

// TPUCompileMetadataProto_Retval

// .xla.OpSharding sharding = 1;
inline bool TPUCompileMetadataProto_Retval::has_sharding() const {
  return this != internal_default_instance() && sharding_ != NULL;
}
inline const ::xla::OpSharding& TPUCompileMetadataProto_Retval::_internal_sharding() const {
  return *sharding_;
}
inline const ::xla::OpSharding& TPUCompileMetadataProto_Retval::sharding() const {
  const ::xla::OpSharding* p = sharding_;
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::OpSharding*>(
      &::xla::_OpSharding_default_instance_);
}
inline ::xla::OpSharding* TPUCompileMetadataProto_Retval::release_sharding() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding)
  
  ::xla::OpSharding* temp = sharding_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  sharding_ = NULL;
  return temp;
}
inline ::xla::OpSharding* TPUCompileMetadataProto_Retval::unsafe_arena_release_sharding() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding)
  
  ::xla::OpSharding* temp = sharding_;
  sharding_ = NULL;
  return temp;
}
inline ::xla::OpSharding* TPUCompileMetadataProto_Retval::mutable_sharding() {
  
  if (sharding_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::OpSharding>(GetArenaNoVirtual());
    sharding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding)
  return sharding_;
}
inline void TPUCompileMetadataProto_Retval::set_allocated_sharding(::xla::OpSharding* sharding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sharding_);
  }
  if (sharding) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sharding)->GetArena();
    if (message_arena != submessage_arena) {
      sharding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sharding, submessage_arena);
    }
    
  } else {
    
  }
  sharding_ = sharding;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding)
}

// -------------------------------------------------------------------

// TPUCompileMetadataProto

// repeated .tensorflow.tpu.TPUCompileMetadataProto.Arg args = 1;
inline int TPUCompileMetadataProto::args_size() const {
  return args_.size();
}
inline void TPUCompileMetadataProto::clear_args() {
  args_.Clear();
}
inline ::tensorflow::tpu::TPUCompileMetadataProto_Arg* TPUCompileMetadataProto::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.args)
  return args_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Arg >*
TPUCompileMetadataProto::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TPUCompileMetadataProto.args)
  return &args_;
}
inline const ::tensorflow::tpu::TPUCompileMetadataProto_Arg& TPUCompileMetadataProto::args(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.args)
  return args_.Get(index);
}
inline ::tensorflow::tpu::TPUCompileMetadataProto_Arg* TPUCompileMetadataProto::add_args() {
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TPUCompileMetadataProto.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Arg >&
TPUCompileMetadataProto::args() const {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TPUCompileMetadataProto.args)
  return args_;
}

// repeated .tensorflow.tpu.TPUCompileMetadataProto.Retval retvals = 2;
inline int TPUCompileMetadataProto::retvals_size() const {
  return retvals_.size();
}
inline void TPUCompileMetadataProto::clear_retvals() {
  retvals_.Clear();
}
inline ::tensorflow::tpu::TPUCompileMetadataProto_Retval* TPUCompileMetadataProto::mutable_retvals(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.retvals)
  return retvals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Retval >*
TPUCompileMetadataProto::mutable_retvals() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TPUCompileMetadataProto.retvals)
  return &retvals_;
}
inline const ::tensorflow::tpu::TPUCompileMetadataProto_Retval& TPUCompileMetadataProto::retvals(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.retvals)
  return retvals_.Get(index);
}
inline ::tensorflow::tpu::TPUCompileMetadataProto_Retval* TPUCompileMetadataProto::add_retvals() {
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TPUCompileMetadataProto.retvals)
  return retvals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::TPUCompileMetadataProto_Retval >&
TPUCompileMetadataProto::retvals() const {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TPUCompileMetadataProto.retvals)
  return retvals_;
}

// int32 num_replicas = 3;
inline void TPUCompileMetadataProto::clear_num_replicas() {
  num_replicas_ = 0;
}
inline ::google::protobuf::int32 TPUCompileMetadataProto::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.num_replicas)
  return num_replicas_;
}
inline void TPUCompileMetadataProto::set_num_replicas(::google::protobuf::int32 value) {
  
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.num_replicas)
}

// int32 num_cores_per_replica = 4;
inline void TPUCompileMetadataProto::clear_num_cores_per_replica() {
  num_cores_per_replica_ = 0;
}
inline ::google::protobuf::int32 TPUCompileMetadataProto::num_cores_per_replica() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.num_cores_per_replica)
  return num_cores_per_replica_;
}
inline void TPUCompileMetadataProto::set_num_cores_per_replica(::google::protobuf::int32 value) {
  
  num_cores_per_replica_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.num_cores_per_replica)
}

// .xla.DeviceAssignmentProto device_assignment = 8;
inline bool TPUCompileMetadataProto::has_device_assignment() const {
  return this != internal_default_instance() && device_assignment_ != NULL;
}
inline const ::xla::DeviceAssignmentProto& TPUCompileMetadataProto::_internal_device_assignment() const {
  return *device_assignment_;
}
inline const ::xla::DeviceAssignmentProto& TPUCompileMetadataProto::device_assignment() const {
  const ::xla::DeviceAssignmentProto* p = device_assignment_;
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.device_assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::DeviceAssignmentProto*>(
      &::xla::_DeviceAssignmentProto_default_instance_);
}
inline ::xla::DeviceAssignmentProto* TPUCompileMetadataProto::release_device_assignment() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.device_assignment)
  
  ::xla::DeviceAssignmentProto* temp = device_assignment_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  device_assignment_ = NULL;
  return temp;
}
inline ::xla::DeviceAssignmentProto* TPUCompileMetadataProto::unsafe_arena_release_device_assignment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.device_assignment)
  
  ::xla::DeviceAssignmentProto* temp = device_assignment_;
  device_assignment_ = NULL;
  return temp;
}
inline ::xla::DeviceAssignmentProto* TPUCompileMetadataProto::mutable_device_assignment() {
  
  if (device_assignment_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::DeviceAssignmentProto>(GetArenaNoVirtual());
    device_assignment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.device_assignment)
  return device_assignment_;
}
inline void TPUCompileMetadataProto::set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(device_assignment_);
  }
  if (device_assignment) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(device_assignment)->GetArena();
    if (message_arena != submessage_arena) {
      device_assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_assignment, submessage_arena);
    }
    
  } else {
    
  }
  device_assignment_ = device_assignment;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.device_assignment)
}

// uint64 function_library_fingerprint = 6;
inline void TPUCompileMetadataProto::clear_function_library_fingerprint() {
  function_library_fingerprint_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TPUCompileMetadataProto::function_library_fingerprint() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.function_library_fingerprint)
  return function_library_fingerprint_;
}
inline void TPUCompileMetadataProto::set_function_library_fingerprint(::google::protobuf::uint64 value) {
  
  function_library_fingerprint_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.function_library_fingerprint)
}

// string session_handle = 9;
inline void TPUCompileMetadataProto::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TPUCompileMetadataProto::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
  return session_handle_.Get();
}
inline void TPUCompileMetadataProto::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
}
#if LANG_CXX11
inline void TPUCompileMetadataProto::set_session_handle(::std::string&& value) {
  
  session_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
}
#endif
inline void TPUCompileMetadataProto::set_session_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
}
inline void TPUCompileMetadataProto::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
}
inline ::std::string* TPUCompileMetadataProto::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TPUCompileMetadataProto::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TPUCompileMetadataProto::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
}
inline ::std::string* TPUCompileMetadataProto::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TPUCompileMetadataProto::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.session_handle)
}

// string guaranteed_const_fingerprint = 10;
inline void TPUCompileMetadataProto::clear_guaranteed_const_fingerprint() {
  guaranteed_const_fingerprint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TPUCompileMetadataProto::guaranteed_const_fingerprint() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
  return guaranteed_const_fingerprint_.Get();
}
inline void TPUCompileMetadataProto::set_guaranteed_const_fingerprint(const ::std::string& value) {
  
  guaranteed_const_fingerprint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
}
#if LANG_CXX11
inline void TPUCompileMetadataProto::set_guaranteed_const_fingerprint(::std::string&& value) {
  
  guaranteed_const_fingerprint_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
}
#endif
inline void TPUCompileMetadataProto::set_guaranteed_const_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guaranteed_const_fingerprint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
}
inline void TPUCompileMetadataProto::set_guaranteed_const_fingerprint(const char* value,
    size_t size) {
  
  guaranteed_const_fingerprint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
}
inline ::std::string* TPUCompileMetadataProto::mutable_guaranteed_const_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
  return guaranteed_const_fingerprint_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TPUCompileMetadataProto::release_guaranteed_const_fingerprint() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
  
  return guaranteed_const_fingerprint_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TPUCompileMetadataProto::set_allocated_guaranteed_const_fingerprint(::std::string* guaranteed_const_fingerprint) {
  if (guaranteed_const_fingerprint != NULL) {
    
  } else {
    
  }
  guaranteed_const_fingerprint_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guaranteed_const_fingerprint,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
}
inline ::std::string* TPUCompileMetadataProto::unsafe_arena_release_guaranteed_const_fingerprint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return guaranteed_const_fingerprint_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TPUCompileMetadataProto::unsafe_arena_set_allocated_guaranteed_const_fingerprint(
    ::std::string* guaranteed_const_fingerprint) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guaranteed_const_fingerprint != NULL) {
    
  } else {
    
  }
  guaranteed_const_fingerprint_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guaranteed_const_fingerprint, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint)
}

// repeated .tensorflow.tpu.PaddingMap padding_maps = 11;
inline int TPUCompileMetadataProto::padding_maps_size() const {
  return padding_maps_.size();
}
inline ::tensorflow::tpu::PaddingMap* TPUCompileMetadataProto::mutable_padding_maps(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TPUCompileMetadataProto.padding_maps)
  return padding_maps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::PaddingMap >*
TPUCompileMetadataProto::mutable_padding_maps() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TPUCompileMetadataProto.padding_maps)
  return &padding_maps_;
}
inline const ::tensorflow::tpu::PaddingMap& TPUCompileMetadataProto::padding_maps(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.padding_maps)
  return padding_maps_.Get(index);
}
inline ::tensorflow::tpu::PaddingMap* TPUCompileMetadataProto::add_padding_maps() {
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TPUCompileMetadataProto.padding_maps)
  return padding_maps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::tpu::PaddingMap >&
TPUCompileMetadataProto::padding_maps() const {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TPUCompileMetadataProto.padding_maps)
  return padding_maps_;
}

// .xla.DebugOptions.StepMarkerLocation step_marker_location = 12;
inline void TPUCompileMetadataProto::clear_step_marker_location() {
  step_marker_location_ = 0;
}
inline ::xla::DebugOptions_StepMarkerLocation TPUCompileMetadataProto::step_marker_location() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.step_marker_location)
  return static_cast< ::xla::DebugOptions_StepMarkerLocation >(step_marker_location_);
}
inline void TPUCompileMetadataProto::set_step_marker_location(::xla::DebugOptions_StepMarkerLocation value) {
  
  step_marker_location_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.step_marker_location)
}

// int64 xla_fusion_autotuner_thresh = 13;
inline void TPUCompileMetadataProto::clear_xla_fusion_autotuner_thresh() {
  xla_fusion_autotuner_thresh_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TPUCompileMetadataProto::xla_fusion_autotuner_thresh() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.xla_fusion_autotuner_thresh)
  return xla_fusion_autotuner_thresh_;
}
inline void TPUCompileMetadataProto::set_xla_fusion_autotuner_thresh(::google::protobuf::int64 value) {
  
  xla_fusion_autotuner_thresh_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.xla_fusion_autotuner_thresh)
}

// bool enable_automatic_model_parallelism = 14;
inline void TPUCompileMetadataProto::clear_enable_automatic_model_parallelism() {
  enable_automatic_model_parallelism_ = false;
}
inline bool TPUCompileMetadataProto::enable_automatic_model_parallelism() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.enable_automatic_model_parallelism)
  return enable_automatic_model_parallelism_;
}
inline void TPUCompileMetadataProto::set_enable_automatic_model_parallelism(bool value) {
  
  enable_automatic_model_parallelism_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.enable_automatic_model_parallelism)
}

// bool use_spmd_for_xla_partitioning = 15;
inline void TPUCompileMetadataProto::clear_use_spmd_for_xla_partitioning() {
  use_spmd_for_xla_partitioning_ = false;
}
inline bool TPUCompileMetadataProto::use_spmd_for_xla_partitioning() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.use_spmd_for_xla_partitioning)
  return use_spmd_for_xla_partitioning_;
}
inline void TPUCompileMetadataProto::set_use_spmd_for_xla_partitioning(bool value) {
  
  use_spmd_for_xla_partitioning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.use_spmd_for_xla_partitioning)
}

// bool use_auto_spmd_for_xla_partitioning = 18;
inline void TPUCompileMetadataProto::clear_use_auto_spmd_for_xla_partitioning() {
  use_auto_spmd_for_xla_partitioning_ = false;
}
inline bool TPUCompileMetadataProto::use_auto_spmd_for_xla_partitioning() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.use_auto_spmd_for_xla_partitioning)
  return use_auto_spmd_for_xla_partitioning_;
}
inline void TPUCompileMetadataProto::set_use_auto_spmd_for_xla_partitioning(bool value) {
  
  use_auto_spmd_for_xla_partitioning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.use_auto_spmd_for_xla_partitioning)
}

// uint64 mlir_fingerprint = 17;
inline void TPUCompileMetadataProto::clear_mlir_fingerprint() {
  mlir_fingerprint_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TPUCompileMetadataProto::mlir_fingerprint() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUCompileMetadataProto.mlir_fingerprint)
  return mlir_fingerprint_;
}
inline void TPUCompileMetadataProto::set_mlir_fingerprint(::google::protobuf::uint64 value) {
  
  mlir_fingerprint_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUCompileMetadataProto.mlir_fingerprint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpu
}  // namespace tensorflow

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind>() {
  return ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding>() {
  return ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto
