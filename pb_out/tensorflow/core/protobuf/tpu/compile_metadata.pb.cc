// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tpu/compile_metadata.proto

#include "tensorflow/core/protobuf/tpu/compile_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeviceAssignmentProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_OpSharding;
}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto
namespace protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorShapeProto;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto
namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TPUCompileMetadataProto_Retval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TPUCompileMetadataProto_Arg;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto
namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fdynamic_5fpadding_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fdynamic_5fpadding_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PaddingMap;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fdynamic_5fpadding_2eproto
namespace tensorflow {
namespace tpu {
class TPUCompileMetadataProto_ArgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TPUCompileMetadataProto_Arg>
      _instance;
} _TPUCompileMetadataProto_Arg_default_instance_;
class TPUCompileMetadataProto_RetvalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TPUCompileMetadataProto_Retval>
      _instance;
} _TPUCompileMetadataProto_Retval_default_instance_;
class TPUCompileMetadataProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TPUCompileMetadataProto>
      _instance;
} _TPUCompileMetadataProto_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto {
static void InitDefaultsTPUCompileMetadataProto_Arg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tpu::_TPUCompileMetadataProto_Arg_default_instance_;
    new (ptr) ::tensorflow::tpu::TPUCompileMetadataProto_Arg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tpu::TPUCompileMetadataProto_Arg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TPUCompileMetadataProto_Arg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTPUCompileMetadataProto_Arg}, {
      &protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::scc_info_TensorShapeProto.base,
      &protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::scc_info_OpSharding.base,}};

static void InitDefaultsTPUCompileMetadataProto_Retval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tpu::_TPUCompileMetadataProto_Retval_default_instance_;
    new (ptr) ::tensorflow::tpu::TPUCompileMetadataProto_Retval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tpu::TPUCompileMetadataProto_Retval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TPUCompileMetadataProto_Retval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTPUCompileMetadataProto_Retval}, {
      &protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::scc_info_OpSharding.base,}};

static void InitDefaultsTPUCompileMetadataProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tpu::_TPUCompileMetadataProto_default_instance_;
    new (ptr) ::tensorflow::tpu::TPUCompileMetadataProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tpu::TPUCompileMetadataProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TPUCompileMetadataProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTPUCompileMetadataProto}, {
      &protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Arg.base,
      &protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Retval.base,
      &protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::scc_info_DeviceAssignmentProto.base,
      &protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fdynamic_5fpadding_2eproto::scc_info_PaddingMap.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TPUCompileMetadataProto_Arg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TPUCompileMetadataProto_Retval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TPUCompileMetadataProto.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, dtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, sharding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, is_same_data_across_replicas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, enable_xla_sharding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, retval_index_for_sharding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, fast_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, unrestricted_layout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Arg, requires_xla_broadcast_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Retval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto_Retval, sharding_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, retvals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, num_replicas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, num_cores_per_replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, device_assignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, function_library_fingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, guaranteed_const_fingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, padding_maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, step_marker_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, xla_fusion_autotuner_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, enable_automatic_model_parallelism_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, use_spmd_for_xla_partitioning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, use_auto_spmd_for_xla_partitioning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::tpu::TPUCompileMetadataProto, mlir_fingerprint_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::tpu::TPUCompileMetadataProto_Arg)},
  { 16, -1, sizeof(::tensorflow::tpu::TPUCompileMetadataProto_Retval)},
  { 22, -1, sizeof(::tensorflow::tpu::TPUCompileMetadataProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::tpu::_TPUCompileMetadataProto_Arg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::tpu::_TPUCompileMetadataProto_Retval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::tpu::_TPUCompileMetadataProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/protobuf/tpu/compile_metadata.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3tensorflow/core/protobuf/tpu/compile_m"
      "etadata.proto\022\016tensorflow.tpu\032!tensorflo"
      "w/compiler/xla/xla.proto\032&tensorflow/com"
      "piler/xla/xla_data.proto\032,tensorflow/cor"
      "e/framework/tensor_shape.proto\032%tensorfl"
      "ow/core/framework/types.proto\0322tensorflo"
      "w/core/protobuf/tpu/dynamic_padding.prot"
      "o\"\243\n\n\027TPUCompileMetadataProto\0229\n\004args\030\001 "
      "\003(\0132+.tensorflow.tpu.TPUCompileMetadataP"
      "roto.Arg\022\?\n\007retvals\030\002 \003(\0132..tensorflow.t"
      "pu.TPUCompileMetadataProto.Retval\022\024\n\014num"
      "_replicas\030\003 \001(\005\022\035\n\025num_cores_per_replica"
      "\030\004 \001(\005\0225\n\021device_assignment\030\010 \001(\0132\032.xla."
      "DeviceAssignmentProto\022$\n\034function_librar"
      "y_fingerprint\030\006 \001(\004\022\026\n\016session_handle\030\t "
      "\001(\t\022$\n\034guaranteed_const_fingerprint\030\n \001("
      "\t\0220\n\014padding_maps\030\013 \003(\0132\032.tensorflow.tpu"
      ".PaddingMap\022B\n\024step_marker_location\030\014 \001("
      "\0162$.xla.DebugOptions.StepMarkerLocation\022"
      "#\n\033xla_fusion_autotuner_thresh\030\r \001(\003\022*\n\""
      "enable_automatic_model_parallelism\030\016 \001(\010"
      "\022%\n\035use_spmd_for_xla_partitioning\030\017 \001(\010\022"
      "*\n\"use_auto_spmd_for_xla_partitioning\030\022 "
      "\001(\010\022\030\n\020mlir_fingerprint\030\021 \001(\004\032\310\004\n\003Arg\022#\n"
      "\005dtype\030\001 \001(\0162\024.tensorflow.DataType\022+\n\005sh"
      "ape\030\002 \001(\0132\034.tensorflow.TensorShapeProto\022"
      ">\n\004kind\030\003 \001(\01620.tensorflow.tpu.TPUCompil"
      "eMetadataProto.Arg.Kind\022!\n\010sharding\030\004 \001("
      "\0132\017.xla.OpSharding\022$\n\034is_same_data_acros"
      "s_replicas\030\005 \001(\010\022Z\n\023enable_xla_sharding\030"
      "\006 \001(\0162=.tensorflow.tpu.TPUCompileMetadat"
      "aProto.Arg.EnableXlaSharding\022!\n\031retval_i"
      "ndex_for_sharding\030\010 \001(\005\022\020\n\010fast_mem\030\007 \001("
      "\010\022\033\n\023unrestricted_layout\030\t \001(\010\022\014\n\004name\030\n"
      " \001(\t\022\036\n\026requires_xla_broadcast\030\013 \001(\010\"I\n\004"
      "Kind\022\013\n\007INVALID\020\000\022\r\n\tPARAMETER\020\001\022\014\n\010VARI"
      "ABLE\020\002\022\027\n\023GUARANTEED_CONSTANT\020\003\"\?\n\021Enabl"
      "eXlaSharding\022\016\n\nDISALLOWED\020\000\022\r\n\tTENTATIV"
      "E\020\001\022\013\n\007ALLOWED\020\002\032+\n\006Retval\022!\n\010sharding\030\001"
      " \001(\0132\017.xla.OpShardingJ\004\010\005\020\006J\004\010\007\020\010J\004\010\020\020\021B"
      "\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/tpu/compile_metadata.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcompiler_2fxla_2fxla_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcompiler_2fxla_2fxla_5fdata_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
  ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fdynamic_5fpadding_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto
namespace tensorflow {
namespace tpu {
const ::google::protobuf::EnumDescriptor* TPUCompileMetadataProto_Arg_Kind_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_enum_descriptors[0];
}
bool TPUCompileMetadataProto_Arg_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::INVALID;
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::PARAMETER;
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::VARIABLE;
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::GUARANTEED_CONSTANT;
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::Kind_MIN;
const TPUCompileMetadataProto_Arg_Kind TPUCompileMetadataProto_Arg::Kind_MAX;
const int TPUCompileMetadataProto_Arg::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TPUCompileMetadataProto_Arg_EnableXlaSharding_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_enum_descriptors[1];
}
bool TPUCompileMetadataProto_Arg_EnableXlaSharding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg::DISALLOWED;
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg::TENTATIVE;
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg::ALLOWED;
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg::EnableXlaSharding_MIN;
const TPUCompileMetadataProto_Arg_EnableXlaSharding TPUCompileMetadataProto_Arg::EnableXlaSharding_MAX;
const int TPUCompileMetadataProto_Arg::EnableXlaSharding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TPUCompileMetadataProto_Arg::InitAsDefaultInstance() {
  ::tensorflow::tpu::_TPUCompileMetadataProto_Arg_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  ::tensorflow::tpu::_TPUCompileMetadataProto_Arg_default_instance_._instance.get_mutable()->sharding_ = const_cast< ::xla::OpSharding*>(
      ::xla::OpSharding::internal_default_instance());
}
void TPUCompileMetadataProto_Arg::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Arg.shape)
}
void TPUCompileMetadataProto_Arg::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
void TPUCompileMetadataProto_Arg::unsafe_arena_set_allocated_sharding(
    ::xla::OpSharding* sharding) {
  if (GetArenaNoVirtual() == NULL) {
    delete sharding_;
  }
  sharding_ = sharding;
  if (sharding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding)
}
void TPUCompileMetadataProto_Arg::clear_sharding() {
  if (GetArenaNoVirtual() == NULL && sharding_ != NULL) {
    delete sharding_;
  }
  sharding_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPUCompileMetadataProto_Arg::kDtypeFieldNumber;
const int TPUCompileMetadataProto_Arg::kShapeFieldNumber;
const int TPUCompileMetadataProto_Arg::kKindFieldNumber;
const int TPUCompileMetadataProto_Arg::kShardingFieldNumber;
const int TPUCompileMetadataProto_Arg::kIsSameDataAcrossReplicasFieldNumber;
const int TPUCompileMetadataProto_Arg::kEnableXlaShardingFieldNumber;
const int TPUCompileMetadataProto_Arg::kRetvalIndexForShardingFieldNumber;
const int TPUCompileMetadataProto_Arg::kFastMemFieldNumber;
const int TPUCompileMetadataProto_Arg::kUnrestrictedLayoutFieldNumber;
const int TPUCompileMetadataProto_Arg::kNameFieldNumber;
const int TPUCompileMetadataProto_Arg::kRequiresXlaBroadcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPUCompileMetadataProto_Arg::TPUCompileMetadataProto_Arg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Arg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tpu.TPUCompileMetadataProto.Arg)
}
TPUCompileMetadataProto_Arg::TPUCompileMetadataProto_Arg(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Arg.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUCompileMetadataProto.Arg)
}
TPUCompileMetadataProto_Arg::TPUCompileMetadataProto_Arg(const TPUCompileMetadataProto_Arg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = NULL;
  }
  if (from.has_sharding()) {
    sharding_ = new ::xla::OpSharding(*from.sharding_);
  } else {
    sharding_ = NULL;
  }
  ::memcpy(&dtype_, &from.dtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&requires_xla_broadcast_) -
    reinterpret_cast<char*>(&dtype_)) + sizeof(requires_xla_broadcast_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUCompileMetadataProto.Arg)
}

void TPUCompileMetadataProto_Arg::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_xla_broadcast_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(requires_xla_broadcast_));
}

TPUCompileMetadataProto_Arg::~TPUCompileMetadataProto_Arg() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  SharedDtor();
}

void TPUCompileMetadataProto_Arg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete sharding_;
}

void TPUCompileMetadataProto_Arg::ArenaDtor(void* object) {
  TPUCompileMetadataProto_Arg* _this = reinterpret_cast< TPUCompileMetadataProto_Arg* >(object);
  (void)_this;
}
void TPUCompileMetadataProto_Arg::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TPUCompileMetadataProto_Arg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TPUCompileMetadataProto_Arg::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TPUCompileMetadataProto_Arg& TPUCompileMetadataProto_Arg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Arg.base);
  return *internal_default_instance();
}


void TPUCompileMetadataProto_Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && sharding_ != NULL) {
    delete sharding_;
  }
  sharding_ = NULL;
  ::memset(&dtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_xla_broadcast_) -
      reinterpret_cast<char*>(&dtype_)) + sizeof(requires_xla_broadcast_));
  _internal_metadata_.Clear();
}

bool TPUCompileMetadataProto_Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.DataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.OpSharding sharding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sharding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_same_data_across_replicas = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_same_data_across_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding enable_xla_sharding = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enable_xla_sharding(static_cast< ::tensorflow::tpu::TPUCompileMetadataProto_Arg_EnableXlaSharding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fast_mem = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fast_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retval_index_for_sharding = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retval_index_for_sharding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unrestricted_layout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unrestricted_layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tpu.TPUCompileMetadataProto.Arg.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool requires_xla_broadcast = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_xla_broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  return false;
#undef DO_
}

void TPUCompileMetadataProto_Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_shape(), output);
  }

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind kind = 3;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  // .xla.OpSharding sharding = 4;
  if (this->has_sharding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sharding(), output);
  }

  // bool is_same_data_across_replicas = 5;
  if (this->is_same_data_across_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_same_data_across_replicas(), output);
  }

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding enable_xla_sharding = 6;
  if (this->enable_xla_sharding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->enable_xla_sharding(), output);
  }

  // bool fast_mem = 7;
  if (this->fast_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fast_mem(), output);
  }

  // int32 retval_index_for_sharding = 8;
  if (this->retval_index_for_sharding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retval_index_for_sharding(), output);
  }

  // bool unrestricted_layout = 9;
  if (this->unrestricted_layout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->unrestricted_layout(), output);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUCompileMetadataProto.Arg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // bool requires_xla_broadcast = 11;
  if (this->requires_xla_broadcast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->requires_xla_broadcast(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tpu.TPUCompileMetadataProto.Arg)
}

::google::protobuf::uint8* TPUCompileMetadataProto_Arg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_shape(), deterministic, target);
  }

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind kind = 3;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  // .xla.OpSharding sharding = 4;
  if (this->has_sharding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sharding(), deterministic, target);
  }

  // bool is_same_data_across_replicas = 5;
  if (this->is_same_data_across_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_same_data_across_replicas(), target);
  }

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding enable_xla_sharding = 6;
  if (this->enable_xla_sharding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->enable_xla_sharding(), target);
  }

  // bool fast_mem = 7;
  if (this->fast_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fast_mem(), target);
  }

  // int32 retval_index_for_sharding = 8;
  if (this->retval_index_for_sharding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retval_index_for_sharding(), target);
  }

  // bool unrestricted_layout = 9;
  if (this->unrestricted_layout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->unrestricted_layout(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUCompileMetadataProto.Arg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // bool requires_xla_broadcast = 11;
  if (this->requires_xla_broadcast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->requires_xla_broadcast(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  return target;
}

size_t TPUCompileMetadataProto_Arg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .xla.OpSharding sharding = 4;
  if (this->has_sharding()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sharding_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // .tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding enable_xla_sharding = 6;
  if (this->enable_xla_sharding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enable_xla_sharding());
  }

  // int32 retval_index_for_sharding = 8;
  if (this->retval_index_for_sharding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retval_index_for_sharding());
  }

  // bool is_same_data_across_replicas = 5;
  if (this->is_same_data_across_replicas() != 0) {
    total_size += 1 + 1;
  }

  // bool fast_mem = 7;
  if (this->fast_mem() != 0) {
    total_size += 1 + 1;
  }

  // bool unrestricted_layout = 9;
  if (this->unrestricted_layout() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_xla_broadcast = 11;
  if (this->requires_xla_broadcast() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPUCompileMetadataProto_Arg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  GOOGLE_DCHECK_NE(&from, this);
  const TPUCompileMetadataProto_Arg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPUCompileMetadataProto_Arg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tpu.TPUCompileMetadataProto.Arg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tpu.TPUCompileMetadataProto.Arg)
    MergeFrom(*source);
  }
}

void TPUCompileMetadataProto_Arg::MergeFrom(const TPUCompileMetadataProto_Arg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.has_sharding()) {
    mutable_sharding()->::xla::OpSharding::MergeFrom(from.sharding());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.enable_xla_sharding() != 0) {
    set_enable_xla_sharding(from.enable_xla_sharding());
  }
  if (from.retval_index_for_sharding() != 0) {
    set_retval_index_for_sharding(from.retval_index_for_sharding());
  }
  if (from.is_same_data_across_replicas() != 0) {
    set_is_same_data_across_replicas(from.is_same_data_across_replicas());
  }
  if (from.fast_mem() != 0) {
    set_fast_mem(from.fast_mem());
  }
  if (from.unrestricted_layout() != 0) {
    set_unrestricted_layout(from.unrestricted_layout());
  }
  if (from.requires_xla_broadcast() != 0) {
    set_requires_xla_broadcast(from.requires_xla_broadcast());
  }
}

void TPUCompileMetadataProto_Arg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPUCompileMetadataProto_Arg::CopyFrom(const TPUCompileMetadataProto_Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUCompileMetadataProto.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUCompileMetadataProto_Arg::IsInitialized() const {
  return true;
}

void TPUCompileMetadataProto_Arg::Swap(TPUCompileMetadataProto_Arg* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TPUCompileMetadataProto_Arg* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TPUCompileMetadataProto_Arg::UnsafeArenaSwap(TPUCompileMetadataProto_Arg* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TPUCompileMetadataProto_Arg::InternalSwap(TPUCompileMetadataProto_Arg* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(sharding_, other->sharding_);
  swap(dtype_, other->dtype_);
  swap(kind_, other->kind_);
  swap(enable_xla_sharding_, other->enable_xla_sharding_);
  swap(retval_index_for_sharding_, other->retval_index_for_sharding_);
  swap(is_same_data_across_replicas_, other->is_same_data_across_replicas_);
  swap(fast_mem_, other->fast_mem_);
  swap(unrestricted_layout_, other->unrestricted_layout_);
  swap(requires_xla_broadcast_, other->requires_xla_broadcast_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TPUCompileMetadataProto_Arg::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TPUCompileMetadataProto_Retval::InitAsDefaultInstance() {
  ::tensorflow::tpu::_TPUCompileMetadataProto_Retval_default_instance_._instance.get_mutable()->sharding_ = const_cast< ::xla::OpSharding*>(
      ::xla::OpSharding::internal_default_instance());
}
void TPUCompileMetadataProto_Retval::unsafe_arena_set_allocated_sharding(
    ::xla::OpSharding* sharding) {
  if (GetArenaNoVirtual() == NULL) {
    delete sharding_;
  }
  sharding_ = sharding;
  if (sharding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding)
}
void TPUCompileMetadataProto_Retval::clear_sharding() {
  if (GetArenaNoVirtual() == NULL && sharding_ != NULL) {
    delete sharding_;
  }
  sharding_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPUCompileMetadataProto_Retval::kShardingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPUCompileMetadataProto_Retval::TPUCompileMetadataProto_Retval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Retval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tpu.TPUCompileMetadataProto.Retval)
}
TPUCompileMetadataProto_Retval::TPUCompileMetadataProto_Retval(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Retval.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUCompileMetadataProto.Retval)
}
TPUCompileMetadataProto_Retval::TPUCompileMetadataProto_Retval(const TPUCompileMetadataProto_Retval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sharding()) {
    sharding_ = new ::xla::OpSharding(*from.sharding_);
  } else {
    sharding_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUCompileMetadataProto.Retval)
}

void TPUCompileMetadataProto_Retval::SharedCtor() {
  sharding_ = NULL;
}

TPUCompileMetadataProto_Retval::~TPUCompileMetadataProto_Retval() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  SharedDtor();
}

void TPUCompileMetadataProto_Retval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete sharding_;
}

void TPUCompileMetadataProto_Retval::ArenaDtor(void* object) {
  TPUCompileMetadataProto_Retval* _this = reinterpret_cast< TPUCompileMetadataProto_Retval* >(object);
  (void)_this;
}
void TPUCompileMetadataProto_Retval::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TPUCompileMetadataProto_Retval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TPUCompileMetadataProto_Retval::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TPUCompileMetadataProto_Retval& TPUCompileMetadataProto_Retval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto_Retval.base);
  return *internal_default_instance();
}


void TPUCompileMetadataProto_Retval::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sharding_ != NULL) {
    delete sharding_;
  }
  sharding_ = NULL;
  _internal_metadata_.Clear();
}

bool TPUCompileMetadataProto_Retval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xla.OpSharding sharding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sharding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  return false;
#undef DO_
}

void TPUCompileMetadataProto_Retval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.OpSharding sharding = 1;
  if (this->has_sharding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sharding(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tpu.TPUCompileMetadataProto.Retval)
}

::google::protobuf::uint8* TPUCompileMetadataProto_Retval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xla.OpSharding sharding = 1;
  if (this->has_sharding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sharding(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  return target;
}

size_t TPUCompileMetadataProto_Retval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xla.OpSharding sharding = 1;
  if (this->has_sharding()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sharding_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPUCompileMetadataProto_Retval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  GOOGLE_DCHECK_NE(&from, this);
  const TPUCompileMetadataProto_Retval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPUCompileMetadataProto_Retval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tpu.TPUCompileMetadataProto.Retval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tpu.TPUCompileMetadataProto.Retval)
    MergeFrom(*source);
  }
}

void TPUCompileMetadataProto_Retval::MergeFrom(const TPUCompileMetadataProto_Retval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sharding()) {
    mutable_sharding()->::xla::OpSharding::MergeFrom(from.sharding());
  }
}

void TPUCompileMetadataProto_Retval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPUCompileMetadataProto_Retval::CopyFrom(const TPUCompileMetadataProto_Retval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUCompileMetadataProto.Retval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUCompileMetadataProto_Retval::IsInitialized() const {
  return true;
}

void TPUCompileMetadataProto_Retval::Swap(TPUCompileMetadataProto_Retval* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TPUCompileMetadataProto_Retval* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TPUCompileMetadataProto_Retval::UnsafeArenaSwap(TPUCompileMetadataProto_Retval* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TPUCompileMetadataProto_Retval::InternalSwap(TPUCompileMetadataProto_Retval* other) {
  using std::swap;
  swap(sharding_, other->sharding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TPUCompileMetadataProto_Retval::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TPUCompileMetadataProto::InitAsDefaultInstance() {
  ::tensorflow::tpu::_TPUCompileMetadataProto_default_instance_._instance.get_mutable()->device_assignment_ = const_cast< ::xla::DeviceAssignmentProto*>(
      ::xla::DeviceAssignmentProto::internal_default_instance());
}
void TPUCompileMetadataProto::unsafe_arena_set_allocated_device_assignment(
    ::xla::DeviceAssignmentProto* device_assignment) {
  if (GetArenaNoVirtual() == NULL) {
    delete device_assignment_;
  }
  device_assignment_ = device_assignment;
  if (device_assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TPUCompileMetadataProto.device_assignment)
}
void TPUCompileMetadataProto::clear_device_assignment() {
  if (GetArenaNoVirtual() == NULL && device_assignment_ != NULL) {
    delete device_assignment_;
  }
  device_assignment_ = NULL;
}
void TPUCompileMetadataProto::clear_padding_maps() {
  padding_maps_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPUCompileMetadataProto::kArgsFieldNumber;
const int TPUCompileMetadataProto::kRetvalsFieldNumber;
const int TPUCompileMetadataProto::kNumReplicasFieldNumber;
const int TPUCompileMetadataProto::kNumCoresPerReplicaFieldNumber;
const int TPUCompileMetadataProto::kDeviceAssignmentFieldNumber;
const int TPUCompileMetadataProto::kFunctionLibraryFingerprintFieldNumber;
const int TPUCompileMetadataProto::kSessionHandleFieldNumber;
const int TPUCompileMetadataProto::kGuaranteedConstFingerprintFieldNumber;
const int TPUCompileMetadataProto::kPaddingMapsFieldNumber;
const int TPUCompileMetadataProto::kStepMarkerLocationFieldNumber;
const int TPUCompileMetadataProto::kXlaFusionAutotunerThreshFieldNumber;
const int TPUCompileMetadataProto::kEnableAutomaticModelParallelismFieldNumber;
const int TPUCompileMetadataProto::kUseSpmdForXlaPartitioningFieldNumber;
const int TPUCompileMetadataProto::kUseAutoSpmdForXlaPartitioningFieldNumber;
const int TPUCompileMetadataProto::kMlirFingerprintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPUCompileMetadataProto::TPUCompileMetadataProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tpu.TPUCompileMetadataProto)
}
TPUCompileMetadataProto::TPUCompileMetadataProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  args_(arena),
  retvals_(arena),
  padding_maps_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUCompileMetadataProto)
}
TPUCompileMetadataProto::TPUCompileMetadataProto(const TPUCompileMetadataProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      args_(from.args_),
      retvals_(from.retvals_),
      padding_maps_(from.padding_maps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  guaranteed_const_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guaranteed_const_fingerprint().size() > 0) {
    guaranteed_const_fingerprint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guaranteed_const_fingerprint(),
      GetArenaNoVirtual());
  }
  if (from.has_device_assignment()) {
    device_assignment_ = new ::xla::DeviceAssignmentProto(*from.device_assignment_);
  } else {
    device_assignment_ = NULL;
  }
  ::memcpy(&num_replicas_, &from.num_replicas_,
    static_cast<size_t>(reinterpret_cast<char*>(&mlir_fingerprint_) -
    reinterpret_cast<char*>(&num_replicas_)) + sizeof(mlir_fingerprint_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUCompileMetadataProto)
}

void TPUCompileMetadataProto::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guaranteed_const_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_assignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mlir_fingerprint_) -
      reinterpret_cast<char*>(&device_assignment_)) + sizeof(mlir_fingerprint_));
}

TPUCompileMetadataProto::~TPUCompileMetadataProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUCompileMetadataProto)
  SharedDtor();
}

void TPUCompileMetadataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  session_handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guaranteed_const_fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_assignment_;
}

void TPUCompileMetadataProto::ArenaDtor(void* object) {
  TPUCompileMetadataProto* _this = reinterpret_cast< TPUCompileMetadataProto* >(object);
  (void)_this;
}
void TPUCompileMetadataProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TPUCompileMetadataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TPUCompileMetadataProto::descriptor() {
  ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TPUCompileMetadataProto& TPUCompileMetadataProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::scc_info_TPUCompileMetadataProto.base);
  return *internal_default_instance();
}


void TPUCompileMetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUCompileMetadataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  retvals_.Clear();
  padding_maps_.Clear();
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  guaranteed_const_fingerprint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && device_assignment_ != NULL) {
    delete device_assignment_;
  }
  device_assignment_ = NULL;
  ::memset(&num_replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mlir_fingerprint_) -
      reinterpret_cast<char*>(&num_replicas_)) + sizeof(mlir_fingerprint_));
  _internal_metadata_.Clear();
}

bool TPUCompileMetadataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tpu.TPUCompileMetadataProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tpu.TPUCompileMetadataProto.Arg args = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.tpu.TPUCompileMetadataProto.Retval retvals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_retvals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_replicas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_cores_per_replica = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cores_per_replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 function_library_fingerprint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_library_fingerprint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DeviceAssignmentProto device_assignment = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tpu.TPUCompileMetadataProto.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guaranteed_const_fingerprint = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guaranteed_const_fingerprint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guaranteed_const_fingerprint().data(), static_cast<int>(this->guaranteed_const_fingerprint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.tpu.PaddingMap padding_maps = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_padding_maps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xla.DebugOptions.StepMarkerLocation step_marker_location = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_step_marker_location(static_cast< ::xla::DebugOptions_StepMarkerLocation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 xla_fusion_autotuner_thresh = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &xla_fusion_autotuner_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_automatic_model_parallelism = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_automatic_model_parallelism_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_spmd_for_xla_partitioning = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_spmd_for_xla_partitioning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 mlir_fingerprint = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mlir_fingerprint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_auto_spmd_for_xla_partitioning = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_spmd_for_xla_partitioning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tpu.TPUCompileMetadataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tpu.TPUCompileMetadataProto)
  return false;
#undef DO_
}

void TPUCompileMetadataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tpu.TPUCompileMetadataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Arg args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->args(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Retval retvals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->retvals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->retvals(static_cast<int>(i)),
      output);
  }

  // int32 num_replicas = 3;
  if (this->num_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_replicas(), output);
  }

  // int32 num_cores_per_replica = 4;
  if (this->num_cores_per_replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_cores_per_replica(), output);
  }

  // uint64 function_library_fingerprint = 6;
  if (this->function_library_fingerprint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->function_library_fingerprint(), output);
  }

  // .xla.DeviceAssignmentProto device_assignment = 8;
  if (this->has_device_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_device_assignment(), output);
  }

  // string session_handle = 9;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUCompileMetadataProto.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->session_handle(), output);
  }

  // string guaranteed_const_fingerprint = 10;
  if (this->guaranteed_const_fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guaranteed_const_fingerprint().data(), static_cast<int>(this->guaranteed_const_fingerprint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guaranteed_const_fingerprint(), output);
  }

  // repeated .tensorflow.tpu.PaddingMap padding_maps = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->padding_maps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->padding_maps(static_cast<int>(i)),
      output);
  }

  // .xla.DebugOptions.StepMarkerLocation step_marker_location = 12;
  if (this->step_marker_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->step_marker_location(), output);
  }

  // int64 xla_fusion_autotuner_thresh = 13;
  if (this->xla_fusion_autotuner_thresh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->xla_fusion_autotuner_thresh(), output);
  }

  // bool enable_automatic_model_parallelism = 14;
  if (this->enable_automatic_model_parallelism() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_automatic_model_parallelism(), output);
  }

  // bool use_spmd_for_xla_partitioning = 15;
  if (this->use_spmd_for_xla_partitioning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->use_spmd_for_xla_partitioning(), output);
  }

  // uint64 mlir_fingerprint = 17;
  if (this->mlir_fingerprint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->mlir_fingerprint(), output);
  }

  // bool use_auto_spmd_for_xla_partitioning = 18;
  if (this->use_auto_spmd_for_xla_partitioning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->use_auto_spmd_for_xla_partitioning(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tpu.TPUCompileMetadataProto)
}

::google::protobuf::uint8* TPUCompileMetadataProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUCompileMetadataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Arg args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->args(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Retval retvals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->retvals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->retvals(static_cast<int>(i)), deterministic, target);
  }

  // int32 num_replicas = 3;
  if (this->num_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_replicas(), target);
  }

  // int32 num_cores_per_replica = 4;
  if (this->num_cores_per_replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_cores_per_replica(), target);
  }

  // uint64 function_library_fingerprint = 6;
  if (this->function_library_fingerprint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->function_library_fingerprint(), target);
  }

  // .xla.DeviceAssignmentProto device_assignment = 8;
  if (this->has_device_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_device_assignment(), deterministic, target);
  }

  // string session_handle = 9;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUCompileMetadataProto.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->session_handle(), target);
  }

  // string guaranteed_const_fingerprint = 10;
  if (this->guaranteed_const_fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guaranteed_const_fingerprint().data(), static_cast<int>(this->guaranteed_const_fingerprint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUCompileMetadataProto.guaranteed_const_fingerprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guaranteed_const_fingerprint(), target);
  }

  // repeated .tensorflow.tpu.PaddingMap padding_maps = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->padding_maps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->padding_maps(static_cast<int>(i)), deterministic, target);
  }

  // .xla.DebugOptions.StepMarkerLocation step_marker_location = 12;
  if (this->step_marker_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->step_marker_location(), target);
  }

  // int64 xla_fusion_autotuner_thresh = 13;
  if (this->xla_fusion_autotuner_thresh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->xla_fusion_autotuner_thresh(), target);
  }

  // bool enable_automatic_model_parallelism = 14;
  if (this->enable_automatic_model_parallelism() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_automatic_model_parallelism(), target);
  }

  // bool use_spmd_for_xla_partitioning = 15;
  if (this->use_spmd_for_xla_partitioning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->use_spmd_for_xla_partitioning(), target);
  }

  // uint64 mlir_fingerprint = 17;
  if (this->mlir_fingerprint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->mlir_fingerprint(), target);
  }

  // bool use_auto_spmd_for_xla_partitioning = 18;
  if (this->use_auto_spmd_for_xla_partitioning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->use_auto_spmd_for_xla_partitioning(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUCompileMetadataProto)
  return target;
}

size_t TPUCompileMetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUCompileMetadataProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Arg args = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.tpu.TPUCompileMetadataProto.Retval retvals = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->retvals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->retvals(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.tpu.PaddingMap padding_maps = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->padding_maps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->padding_maps(static_cast<int>(i)));
    }
  }

  // string session_handle = 9;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // string guaranteed_const_fingerprint = 10;
  if (this->guaranteed_const_fingerprint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guaranteed_const_fingerprint());
  }

  // .xla.DeviceAssignmentProto device_assignment = 8;
  if (this->has_device_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *device_assignment_);
  }

  // int32 num_replicas = 3;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_replicas());
  }

  // int32 num_cores_per_replica = 4;
  if (this->num_cores_per_replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_cores_per_replica());
  }

  // uint64 function_library_fingerprint = 6;
  if (this->function_library_fingerprint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->function_library_fingerprint());
  }

  // int64 xla_fusion_autotuner_thresh = 13;
  if (this->xla_fusion_autotuner_thresh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->xla_fusion_autotuner_thresh());
  }

  // .xla.DebugOptions.StepMarkerLocation step_marker_location = 12;
  if (this->step_marker_location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->step_marker_location());
  }

  // bool enable_automatic_model_parallelism = 14;
  if (this->enable_automatic_model_parallelism() != 0) {
    total_size += 1 + 1;
  }

  // bool use_spmd_for_xla_partitioning = 15;
  if (this->use_spmd_for_xla_partitioning() != 0) {
    total_size += 1 + 1;
  }

  // bool use_auto_spmd_for_xla_partitioning = 18;
  if (this->use_auto_spmd_for_xla_partitioning() != 0) {
    total_size += 2 + 1;
  }

  // uint64 mlir_fingerprint = 17;
  if (this->mlir_fingerprint() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mlir_fingerprint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPUCompileMetadataProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tpu.TPUCompileMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TPUCompileMetadataProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPUCompileMetadataProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tpu.TPUCompileMetadataProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tpu.TPUCompileMetadataProto)
    MergeFrom(*source);
  }
}

void TPUCompileMetadataProto::MergeFrom(const TPUCompileMetadataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUCompileMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  retvals_.MergeFrom(from.retvals_);
  padding_maps_.MergeFrom(from.padding_maps_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.guaranteed_const_fingerprint().size() > 0) {
    set_guaranteed_const_fingerprint(from.guaranteed_const_fingerprint());
  }
  if (from.has_device_assignment()) {
    mutable_device_assignment()->::xla::DeviceAssignmentProto::MergeFrom(from.device_assignment());
  }
  if (from.num_replicas() != 0) {
    set_num_replicas(from.num_replicas());
  }
  if (from.num_cores_per_replica() != 0) {
    set_num_cores_per_replica(from.num_cores_per_replica());
  }
  if (from.function_library_fingerprint() != 0) {
    set_function_library_fingerprint(from.function_library_fingerprint());
  }
  if (from.xla_fusion_autotuner_thresh() != 0) {
    set_xla_fusion_autotuner_thresh(from.xla_fusion_autotuner_thresh());
  }
  if (from.step_marker_location() != 0) {
    set_step_marker_location(from.step_marker_location());
  }
  if (from.enable_automatic_model_parallelism() != 0) {
    set_enable_automatic_model_parallelism(from.enable_automatic_model_parallelism());
  }
  if (from.use_spmd_for_xla_partitioning() != 0) {
    set_use_spmd_for_xla_partitioning(from.use_spmd_for_xla_partitioning());
  }
  if (from.use_auto_spmd_for_xla_partitioning() != 0) {
    set_use_auto_spmd_for_xla_partitioning(from.use_auto_spmd_for_xla_partitioning());
  }
  if (from.mlir_fingerprint() != 0) {
    set_mlir_fingerprint(from.mlir_fingerprint());
  }
}

void TPUCompileMetadataProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tpu.TPUCompileMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPUCompileMetadataProto::CopyFrom(const TPUCompileMetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUCompileMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUCompileMetadataProto::IsInitialized() const {
  return true;
}

void TPUCompileMetadataProto::Swap(TPUCompileMetadataProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TPUCompileMetadataProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TPUCompileMetadataProto::UnsafeArenaSwap(TPUCompileMetadataProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TPUCompileMetadataProto::InternalSwap(TPUCompileMetadataProto* other) {
  using std::swap;
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
  CastToBase(&retvals_)->InternalSwap(CastToBase(&other->retvals_));
  CastToBase(&padding_maps_)->InternalSwap(CastToBase(&other->padding_maps_));
  session_handle_.Swap(&other->session_handle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guaranteed_const_fingerprint_.Swap(&other->guaranteed_const_fingerprint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_assignment_, other->device_assignment_);
  swap(num_replicas_, other->num_replicas_);
  swap(num_cores_per_replica_, other->num_cores_per_replica_);
  swap(function_library_fingerprint_, other->function_library_fingerprint_);
  swap(xla_fusion_autotuner_thresh_, other->xla_fusion_autotuner_thresh_);
  swap(step_marker_location_, other->step_marker_location_);
  swap(enable_automatic_model_parallelism_, other->enable_automatic_model_parallelism_);
  swap(use_spmd_for_xla_partitioning_, other->use_spmd_for_xla_partitioning_);
  swap(use_auto_spmd_for_xla_partitioning_, other->use_auto_spmd_for_xla_partitioning_);
  swap(mlir_fingerprint_, other->mlir_fingerprint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TPUCompileMetadataProto::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompile_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tpu
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::tpu::TPUCompileMetadataProto_Arg* Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUCompileMetadataProto_Arg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUCompileMetadataProto_Arg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::tpu::TPUCompileMetadataProto_Retval* Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUCompileMetadataProto_Retval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUCompileMetadataProto_Retval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::tpu::TPUCompileMetadataProto* Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUCompileMetadataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUCompileMetadataProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
