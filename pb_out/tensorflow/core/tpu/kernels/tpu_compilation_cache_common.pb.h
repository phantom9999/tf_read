// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/tpu/kernels/tpu_compilation_cache_common.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto 

namespace protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto
namespace tensorflow {
namespace tpu {
class GetTpuProgramRequest;
class GetTpuProgramRequestDefaultTypeInternal;
extern GetTpuProgramRequestDefaultTypeInternal _GetTpuProgramRequest_default_instance_;
class TpuCompilationUidAndIndex;
class TpuCompilationUidAndIndexDefaultTypeInternal;
extern TpuCompilationUidAndIndexDefaultTypeInternal _TpuCompilationUidAndIndex_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::tpu::GetTpuProgramRequest* Arena::CreateMaybeMessage<::tensorflow::tpu::GetTpuProgramRequest>(Arena*);
template<> ::tensorflow::tpu::TpuCompilationUidAndIndex* Arena::CreateMaybeMessage<::tensorflow::tpu::TpuCompilationUidAndIndex>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace tpu {

enum CompilationCacheFetchTarget {
  INVALID = 0,
  MAIN = 1,
  SHARDING = 2,
  UNSHARDING = 3,
  CompilationCacheFetchTarget_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CompilationCacheFetchTarget_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CompilationCacheFetchTarget_IsValid(int value);
const CompilationCacheFetchTarget CompilationCacheFetchTarget_MIN = INVALID;
const CompilationCacheFetchTarget CompilationCacheFetchTarget_MAX = UNSHARDING;
const int CompilationCacheFetchTarget_ARRAYSIZE = CompilationCacheFetchTarget_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompilationCacheFetchTarget_descriptor();
inline const ::std::string& CompilationCacheFetchTarget_Name(CompilationCacheFetchTarget value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompilationCacheFetchTarget_descriptor(), value);
}
inline bool CompilationCacheFetchTarget_Parse(
    const ::std::string& name, CompilationCacheFetchTarget* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompilationCacheFetchTarget>(
    CompilationCacheFetchTarget_descriptor(), name, value);
}
// ===================================================================

class TpuCompilationUidAndIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.TpuCompilationUidAndIndex) */ {
 public:
  TpuCompilationUidAndIndex();
  virtual ~TpuCompilationUidAndIndex();

  TpuCompilationUidAndIndex(const TpuCompilationUidAndIndex& from);

  inline TpuCompilationUidAndIndex& operator=(const TpuCompilationUidAndIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpuCompilationUidAndIndex(TpuCompilationUidAndIndex&& from) noexcept
    : TpuCompilationUidAndIndex() {
    *this = ::std::move(from);
  }

  inline TpuCompilationUidAndIndex& operator=(TpuCompilationUidAndIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpuCompilationUidAndIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpuCompilationUidAndIndex* internal_default_instance() {
    return reinterpret_cast<const TpuCompilationUidAndIndex*>(
               &_TpuCompilationUidAndIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TpuCompilationUidAndIndex* other);
  friend void swap(TpuCompilationUidAndIndex& a, TpuCompilationUidAndIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpuCompilationUidAndIndex* New() const final {
    return CreateMaybeMessage<TpuCompilationUidAndIndex>(NULL);
  }

  TpuCompilationUidAndIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TpuCompilationUidAndIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TpuCompilationUidAndIndex& from);
  void MergeFrom(const TpuCompilationUidAndIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpuCompilationUidAndIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // int32 proto_index = 2;
  void clear_proto_index();
  static const int kProtoIndexFieldNumber = 2;
  ::google::protobuf::int32 proto_index() const;
  void set_proto_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TpuCompilationUidAndIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 proto_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTpuProgramRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.GetTpuProgramRequest) */ {
 public:
  GetTpuProgramRequest();
  virtual ~GetTpuProgramRequest();

  GetTpuProgramRequest(const GetTpuProgramRequest& from);

  inline GetTpuProgramRequest& operator=(const GetTpuProgramRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTpuProgramRequest(GetTpuProgramRequest&& from) noexcept
    : GetTpuProgramRequest() {
    *this = ::std::move(from);
  }

  inline GetTpuProgramRequest& operator=(GetTpuProgramRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTpuProgramRequest& default_instance();

  enum KeyOneofCase {
    kKey = 1,
    kUidAndIndex = 2,
    KEY_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTpuProgramRequest* internal_default_instance() {
    return reinterpret_cast<const GetTpuProgramRequest*>(
               &_GetTpuProgramRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetTpuProgramRequest* other);
  friend void swap(GetTpuProgramRequest& a, GetTpuProgramRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTpuProgramRequest* New() const final {
    return CreateMaybeMessage<GetTpuProgramRequest>(NULL);
  }

  GetTpuProgramRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTpuProgramRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTpuProgramRequest& from);
  void MergeFrom(const GetTpuProgramRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTpuProgramRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.tpu.CompilationCacheFetchTarget fetch_target = 3;
  void clear_fetch_target();
  static const int kFetchTargetFieldNumber = 3;
  ::tensorflow::tpu::CompilationCacheFetchTarget fetch_target() const;
  void set_fetch_target(::tensorflow::tpu::CompilationCacheFetchTarget value);

  // string key = 1;
  private:
  bool has_key() const;
  public:
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .tensorflow.tpu.TpuCompilationUidAndIndex uid_and_index = 2;
  bool has_uid_and_index() const;
  void clear_uid_and_index();
  static const int kUidAndIndexFieldNumber = 2;
  private:
  const ::tensorflow::tpu::TpuCompilationUidAndIndex& _internal_uid_and_index() const;
  public:
  const ::tensorflow::tpu::TpuCompilationUidAndIndex& uid_and_index() const;
  ::tensorflow::tpu::TpuCompilationUidAndIndex* release_uid_and_index();
  ::tensorflow::tpu::TpuCompilationUidAndIndex* mutable_uid_and_index();
  void set_allocated_uid_and_index(::tensorflow::tpu::TpuCompilationUidAndIndex* uid_and_index);

  void clear_key_oneof();
  KeyOneofCase key_oneof_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.tpu.GetTpuProgramRequest)
 private:
  void set_has_key();
  void set_has_uid_and_index();

  inline bool has_key_oneof() const;
  inline void clear_has_key_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int fetch_target_;
  union KeyOneofUnion {
    KeyOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::tensorflow::tpu::TpuCompilationUidAndIndex* uid_and_index_;
  } key_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TpuCompilationUidAndIndex

// int64 uid = 1;
inline void TpuCompilationUidAndIndex::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TpuCompilationUidAndIndex::uid() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationUidAndIndex.uid)
  return uid_;
}
inline void TpuCompilationUidAndIndex::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationUidAndIndex.uid)
}

// int32 proto_index = 2;
inline void TpuCompilationUidAndIndex::clear_proto_index() {
  proto_index_ = 0;
}
inline ::google::protobuf::int32 TpuCompilationUidAndIndex::proto_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationUidAndIndex.proto_index)
  return proto_index_;
}
inline void TpuCompilationUidAndIndex::set_proto_index(::google::protobuf::int32 value) {
  
  proto_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationUidAndIndex.proto_index)
}

// -------------------------------------------------------------------

// GetTpuProgramRequest

// string key = 1;
inline bool GetTpuProgramRequest::has_key() const {
  return key_oneof_case() == kKey;
}
inline void GetTpuProgramRequest::set_has_key() {
  _oneof_case_[0] = kKey;
}
inline void GetTpuProgramRequest::clear_key() {
  if (has_key()) {
    key_oneof_.key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_key_oneof();
  }
}
inline const ::std::string& GetTpuProgramRequest::key() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.GetTpuProgramRequest.key)
  if (has_key()) {
    return key_oneof_.key_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetTpuProgramRequest::set_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tpu.GetTpuProgramRequest.key)
  if (!has_key()) {
    clear_key_oneof();
    set_has_key();
    key_oneof_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_oneof_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.GetTpuProgramRequest.key)
}
#if LANG_CXX11
inline void GetTpuProgramRequest::set_key(::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tpu.GetTpuProgramRequest.key)
  if (!has_key()) {
    clear_key_oneof();
    set_has_key();
    key_oneof_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_oneof_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tpu.GetTpuProgramRequest.key)
}
#endif
inline void GetTpuProgramRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_key()) {
    clear_key_oneof();
    set_has_key();
    key_oneof_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_oneof_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tpu.GetTpuProgramRequest.key)
}
inline void GetTpuProgramRequest::set_key(const char* value, size_t size) {
  if (!has_key()) {
    clear_key_oneof();
    set_has_key();
    key_oneof_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_oneof_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tpu.GetTpuProgramRequest.key)
}
inline ::std::string* GetTpuProgramRequest::mutable_key() {
  if (!has_key()) {
    clear_key_oneof();
    set_has_key();
    key_oneof_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.GetTpuProgramRequest.key)
  return key_oneof_.key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTpuProgramRequest::release_key() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.GetTpuProgramRequest.key)
  if (has_key()) {
    clear_has_key_oneof();
    return key_oneof_.key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GetTpuProgramRequest::set_allocated_key(::std::string* key) {
  if (!has_key()) {
    key_oneof_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_key_oneof();
  if (key != NULL) {
    set_has_key();
    key_oneof_.key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.GetTpuProgramRequest.key)
}

// .tensorflow.tpu.TpuCompilationUidAndIndex uid_and_index = 2;
inline bool GetTpuProgramRequest::has_uid_and_index() const {
  return key_oneof_case() == kUidAndIndex;
}
inline void GetTpuProgramRequest::set_has_uid_and_index() {
  _oneof_case_[0] = kUidAndIndex;
}
inline void GetTpuProgramRequest::clear_uid_and_index() {
  if (has_uid_and_index()) {
    delete key_oneof_.uid_and_index_;
    clear_has_key_oneof();
  }
}
inline const ::tensorflow::tpu::TpuCompilationUidAndIndex& GetTpuProgramRequest::_internal_uid_and_index() const {
  return *key_oneof_.uid_and_index_;
}
inline ::tensorflow::tpu::TpuCompilationUidAndIndex* GetTpuProgramRequest::release_uid_and_index() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  if (has_uid_and_index()) {
    clear_has_key_oneof();
      ::tensorflow::tpu::TpuCompilationUidAndIndex* temp = key_oneof_.uid_and_index_;
    key_oneof_.uid_and_index_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::tpu::TpuCompilationUidAndIndex& GetTpuProgramRequest::uid_and_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  return has_uid_and_index()
      ? *key_oneof_.uid_and_index_
      : *reinterpret_cast< ::tensorflow::tpu::TpuCompilationUidAndIndex*>(&::tensorflow::tpu::_TpuCompilationUidAndIndex_default_instance_);
}
inline ::tensorflow::tpu::TpuCompilationUidAndIndex* GetTpuProgramRequest::mutable_uid_and_index() {
  if (!has_uid_and_index()) {
    clear_key_oneof();
    set_has_uid_and_index();
    key_oneof_.uid_and_index_ = CreateMaybeMessage< ::tensorflow::tpu::TpuCompilationUidAndIndex >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  return key_oneof_.uid_and_index_;
}

// .tensorflow.tpu.CompilationCacheFetchTarget fetch_target = 3;
inline void GetTpuProgramRequest::clear_fetch_target() {
  fetch_target_ = 0;
}
inline ::tensorflow::tpu::CompilationCacheFetchTarget GetTpuProgramRequest::fetch_target() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.GetTpuProgramRequest.fetch_target)
  return static_cast< ::tensorflow::tpu::CompilationCacheFetchTarget >(fetch_target_);
}
inline void GetTpuProgramRequest::set_fetch_target(::tensorflow::tpu::CompilationCacheFetchTarget value) {
  
  fetch_target_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.GetTpuProgramRequest.fetch_target)
}

inline bool GetTpuProgramRequest::has_key_oneof() const {
  return key_oneof_case() != KEY_ONEOF_NOT_SET;
}
inline void GetTpuProgramRequest::clear_has_key_oneof() {
  _oneof_case_[0] = KEY_ONEOF_NOT_SET;
}
inline GetTpuProgramRequest::KeyOneofCase GetTpuProgramRequest::key_oneof_case() const {
  return GetTpuProgramRequest::KeyOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpu
}  // namespace tensorflow

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::tpu::CompilationCacheFetchTarget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::tpu::CompilationCacheFetchTarget>() {
  return ::tensorflow::tpu::CompilationCacheFetchTarget_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto
