// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/tpu/kernels/tpu_executable_info.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/compiler/xla/service/hlo.pb.h"
#include "tensorflow/compiler/xla/xla_data.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto 

namespace protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto
namespace tensorflow {
class TPUExecutableInfoProto;
class TPUExecutableInfoProtoDefaultTypeInternal;
extern TPUExecutableInfoProtoDefaultTypeInternal _TPUExecutableInfoProto_default_instance_;
class TPUExecutableInfoProto_ShapeIndex;
class TPUExecutableInfoProto_ShapeIndexDefaultTypeInternal;
extern TPUExecutableInfoProto_ShapeIndexDefaultTypeInternal _TPUExecutableInfoProto_ShapeIndex_default_instance_;
class TPUExecutableInfoProto_UpdateIndexPair;
class TPUExecutableInfoProto_UpdateIndexPairDefaultTypeInternal;
extern TPUExecutableInfoProto_UpdateIndexPairDefaultTypeInternal _TPUExecutableInfoProto_UpdateIndexPair_default_instance_;
class TPUHostTransferInfoProto;
class TPUHostTransferInfoProtoDefaultTypeInternal;
extern TPUHostTransferInfoProtoDefaultTypeInternal _TPUHostTransferInfoProto_default_instance_;
class TPUHostTransferProto;
class TPUHostTransferProtoDefaultTypeInternal;
extern TPUHostTransferProtoDefaultTypeInternal _TPUHostTransferProto_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::TPUExecutableInfoProto* Arena::CreateMaybeMessage<::tensorflow::TPUExecutableInfoProto>(Arena*);
template<> ::tensorflow::TPUExecutableInfoProto_ShapeIndex* Arena::CreateMaybeMessage<::tensorflow::TPUExecutableInfoProto_ShapeIndex>(Arena*);
template<> ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* Arena::CreateMaybeMessage<::tensorflow::TPUExecutableInfoProto_UpdateIndexPair>(Arena*);
template<> ::tensorflow::TPUHostTransferInfoProto* Arena::CreateMaybeMessage<::tensorflow::TPUHostTransferInfoProto>(Arena*);
template<> ::tensorflow::TPUHostTransferProto* Arena::CreateMaybeMessage<::tensorflow::TPUHostTransferProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {

enum TPUHostTransferProto_TransferDirection {
  TPUHostTransferProto_TransferDirection_NONE = 0,
  TPUHostTransferProto_TransferDirection_DEVICE_TO_HOST = 1,
  TPUHostTransferProto_TransferDirection_HOST_TO_DEVICE = 2,
  TPUHostTransferProto_TransferDirection_TPUHostTransferProto_TransferDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TPUHostTransferProto_TransferDirection_TPUHostTransferProto_TransferDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TPUHostTransferProto_TransferDirection_IsValid(int value);
const TPUHostTransferProto_TransferDirection TPUHostTransferProto_TransferDirection_TransferDirection_MIN = TPUHostTransferProto_TransferDirection_NONE;
const TPUHostTransferProto_TransferDirection TPUHostTransferProto_TransferDirection_TransferDirection_MAX = TPUHostTransferProto_TransferDirection_HOST_TO_DEVICE;
const int TPUHostTransferProto_TransferDirection_TransferDirection_ARRAYSIZE = TPUHostTransferProto_TransferDirection_TransferDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* TPUHostTransferProto_TransferDirection_descriptor();
inline const ::std::string& TPUHostTransferProto_TransferDirection_Name(TPUHostTransferProto_TransferDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    TPUHostTransferProto_TransferDirection_descriptor(), value);
}
inline bool TPUHostTransferProto_TransferDirection_Parse(
    const ::std::string& name, TPUHostTransferProto_TransferDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TPUHostTransferProto_TransferDirection>(
    TPUHostTransferProto_TransferDirection_descriptor(), name, value);
}
// ===================================================================

class TPUExecutableInfoProto_UpdateIndexPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUExecutableInfoProto.UpdateIndexPair) */ {
 public:
  TPUExecutableInfoProto_UpdateIndexPair();
  virtual ~TPUExecutableInfoProto_UpdateIndexPair();

  TPUExecutableInfoProto_UpdateIndexPair(const TPUExecutableInfoProto_UpdateIndexPair& from);

  inline TPUExecutableInfoProto_UpdateIndexPair& operator=(const TPUExecutableInfoProto_UpdateIndexPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUExecutableInfoProto_UpdateIndexPair(TPUExecutableInfoProto_UpdateIndexPair&& from) noexcept
    : TPUExecutableInfoProto_UpdateIndexPair() {
    *this = ::std::move(from);
  }

  inline TPUExecutableInfoProto_UpdateIndexPair& operator=(TPUExecutableInfoProto_UpdateIndexPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUExecutableInfoProto_UpdateIndexPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUExecutableInfoProto_UpdateIndexPair* internal_default_instance() {
    return reinterpret_cast<const TPUExecutableInfoProto_UpdateIndexPair*>(
               &_TPUExecutableInfoProto_UpdateIndexPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TPUExecutableInfoProto_UpdateIndexPair* other);
  friend void swap(TPUExecutableInfoProto_UpdateIndexPair& a, TPUExecutableInfoProto_UpdateIndexPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUExecutableInfoProto_UpdateIndexPair* New() const final {
    return CreateMaybeMessage<TPUExecutableInfoProto_UpdateIndexPair>(NULL);
  }

  TPUExecutableInfoProto_UpdateIndexPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUExecutableInfoProto_UpdateIndexPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUExecutableInfoProto_UpdateIndexPair& from);
  void MergeFrom(const TPUExecutableInfoProto_UpdateIndexPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUExecutableInfoProto_UpdateIndexPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // bool updated = 2;
  void clear_updated();
  static const int kUpdatedFieldNumber = 2;
  bool updated() const;
  void set_updated(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.TPUExecutableInfoProto.UpdateIndexPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 index_;
  bool updated_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TPUExecutableInfoProto_ShapeIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUExecutableInfoProto.ShapeIndex) */ {
 public:
  TPUExecutableInfoProto_ShapeIndex();
  virtual ~TPUExecutableInfoProto_ShapeIndex();

  TPUExecutableInfoProto_ShapeIndex(const TPUExecutableInfoProto_ShapeIndex& from);

  inline TPUExecutableInfoProto_ShapeIndex& operator=(const TPUExecutableInfoProto_ShapeIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUExecutableInfoProto_ShapeIndex(TPUExecutableInfoProto_ShapeIndex&& from) noexcept
    : TPUExecutableInfoProto_ShapeIndex() {
    *this = ::std::move(from);
  }

  inline TPUExecutableInfoProto_ShapeIndex& operator=(TPUExecutableInfoProto_ShapeIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUExecutableInfoProto_ShapeIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUExecutableInfoProto_ShapeIndex* internal_default_instance() {
    return reinterpret_cast<const TPUExecutableInfoProto_ShapeIndex*>(
               &_TPUExecutableInfoProto_ShapeIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TPUExecutableInfoProto_ShapeIndex* other);
  friend void swap(TPUExecutableInfoProto_ShapeIndex& a, TPUExecutableInfoProto_ShapeIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUExecutableInfoProto_ShapeIndex* New() const final {
    return CreateMaybeMessage<TPUExecutableInfoProto_ShapeIndex>(NULL);
  }

  TPUExecutableInfoProto_ShapeIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUExecutableInfoProto_ShapeIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUExecutableInfoProto_ShapeIndex& from);
  void MergeFrom(const TPUExecutableInfoProto_ShapeIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUExecutableInfoProto_ShapeIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index(int index) const;
  void set_index(int index, ::google::protobuf::int32 value);
  void add_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:tensorflow.TPUExecutableInfoProto.ShapeIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  mutable int _index_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TPUExecutableInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUExecutableInfoProto) */ {
 public:
  TPUExecutableInfoProto();
  virtual ~TPUExecutableInfoProto();

  TPUExecutableInfoProto(const TPUExecutableInfoProto& from);

  inline TPUExecutableInfoProto& operator=(const TPUExecutableInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUExecutableInfoProto(TPUExecutableInfoProto&& from) noexcept
    : TPUExecutableInfoProto() {
    *this = ::std::move(from);
  }

  inline TPUExecutableInfoProto& operator=(TPUExecutableInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUExecutableInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUExecutableInfoProto* internal_default_instance() {
    return reinterpret_cast<const TPUExecutableInfoProto*>(
               &_TPUExecutableInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TPUExecutableInfoProto* other);
  friend void swap(TPUExecutableInfoProto& a, TPUExecutableInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUExecutableInfoProto* New() const final {
    return CreateMaybeMessage<TPUExecutableInfoProto>(NULL);
  }

  TPUExecutableInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUExecutableInfoProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUExecutableInfoProto& from);
  void MergeFrom(const TPUExecutableInfoProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUExecutableInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TPUExecutableInfoProto_UpdateIndexPair UpdateIndexPair;
  typedef TPUExecutableInfoProto_ShapeIndex ShapeIndex;

  // accessors -------------------------------------------------------

  // repeated .xla.ShapeProto input_shapes = 2;
  int input_shapes_size() const;
  void clear_input_shapes();
  static const int kInputShapesFieldNumber = 2;
  ::xla::ShapeProto* mutable_input_shapes(int index);
  ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >*
      mutable_input_shapes();
  const ::xla::ShapeProto& input_shapes(int index) const;
  ::xla::ShapeProto* add_input_shapes();
  const ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >&
      input_shapes() const;

  // repeated .tensorflow.TensorShapeProto output_tensor_shapes = 8;
  int output_tensor_shapes_size() const;
  void clear_output_tensor_shapes();
  static const int kOutputTensorShapesFieldNumber = 8;
  ::tensorflow::TensorShapeProto* mutable_output_tensor_shapes(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_output_tensor_shapes();
  const ::tensorflow::TensorShapeProto& output_tensor_shapes(int index) const;
  ::tensorflow::TensorShapeProto* add_output_tensor_shapes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      output_tensor_shapes() const;

  // repeated .tensorflow.TPUExecutableInfoProto.UpdateIndexPair variable_indices = 10;
  int variable_indices_size() const;
  void clear_variable_indices();
  static const int kVariableIndicesFieldNumber = 10;
  ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* mutable_variable_indices(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >*
      mutable_variable_indices();
  const ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair& variable_indices(int index) const;
  ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* add_variable_indices();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >&
      variable_indices() const;

  // repeated .tensorflow.TPUExecutableInfoProto.ShapeIndex dynamic_output_indices = 11;
  int dynamic_output_indices_size() const;
  void clear_dynamic_output_indices();
  static const int kDynamicOutputIndicesFieldNumber = 11;
  ::tensorflow::TPUExecutableInfoProto_ShapeIndex* mutable_dynamic_output_indices(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >*
      mutable_dynamic_output_indices();
  const ::tensorflow::TPUExecutableInfoProto_ShapeIndex& dynamic_output_indices(int index) const;
  ::tensorflow::TPUExecutableInfoProto_ShapeIndex* add_dynamic_output_indices();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >&
      dynamic_output_indices() const;

  // .xla.ShapeProto output_shape = 3;
  bool has_output_shape() const;
  void clear_output_shape();
  static const int kOutputShapeFieldNumber = 3;
  private:
  const ::xla::ShapeProto& _internal_output_shape() const;
  public:
  const ::xla::ShapeProto& output_shape() const;
  ::xla::ShapeProto* release_output_shape();
  ::xla::ShapeProto* mutable_output_shape();
  void set_allocated_output_shape(::xla::ShapeProto* output_shape);

  // .xla.HloSnapshot session_module = 5;
  bool has_session_module() const;
  void clear_session_module();
  static const int kSessionModuleFieldNumber = 5;
  private:
  const ::xla::HloSnapshot& _internal_session_module() const;
  public:
  const ::xla::HloSnapshot& session_module() const;
  ::xla::HloSnapshot* release_session_module();
  ::xla::HloSnapshot* mutable_session_module();
  void set_allocated_session_module(::xla::HloSnapshot* session_module);

  // .xla.DeviceAssignmentProto device_assignment = 6;
  bool has_device_assignment() const;
  void clear_device_assignment();
  static const int kDeviceAssignmentFieldNumber = 6;
  private:
  const ::xla::DeviceAssignmentProto& _internal_device_assignment() const;
  public:
  const ::xla::DeviceAssignmentProto& device_assignment() const;
  ::xla::DeviceAssignmentProto* release_device_assignment();
  ::xla::DeviceAssignmentProto* mutable_device_assignment();
  void set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment);

  // @@protoc_insertion_point(class_scope:tensorflow.TPUExecutableInfoProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto > input_shapes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > output_tensor_shapes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair > variable_indices_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex > dynamic_output_indices_;
  ::xla::ShapeProto* output_shape_;
  ::xla::HloSnapshot* session_module_;
  ::xla::DeviceAssignmentProto* device_assignment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TPUHostTransferProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUHostTransferProto) */ {
 public:
  TPUHostTransferProto();
  virtual ~TPUHostTransferProto();

  TPUHostTransferProto(const TPUHostTransferProto& from);

  inline TPUHostTransferProto& operator=(const TPUHostTransferProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUHostTransferProto(TPUHostTransferProto&& from) noexcept
    : TPUHostTransferProto() {
    *this = ::std::move(from);
  }

  inline TPUHostTransferProto& operator=(TPUHostTransferProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUHostTransferProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUHostTransferProto* internal_default_instance() {
    return reinterpret_cast<const TPUHostTransferProto*>(
               &_TPUHostTransferProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TPUHostTransferProto* other);
  friend void swap(TPUHostTransferProto& a, TPUHostTransferProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUHostTransferProto* New() const final {
    return CreateMaybeMessage<TPUHostTransferProto>(NULL);
  }

  TPUHostTransferProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUHostTransferProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUHostTransferProto& from);
  void MergeFrom(const TPUHostTransferProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUHostTransferProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TPUHostTransferProto_TransferDirection TransferDirection;
  static const TransferDirection NONE =
    TPUHostTransferProto_TransferDirection_NONE;
  static const TransferDirection DEVICE_TO_HOST =
    TPUHostTransferProto_TransferDirection_DEVICE_TO_HOST;
  static const TransferDirection HOST_TO_DEVICE =
    TPUHostTransferProto_TransferDirection_HOST_TO_DEVICE;
  static inline bool TransferDirection_IsValid(int value) {
    return TPUHostTransferProto_TransferDirection_IsValid(value);
  }
  static const TransferDirection TransferDirection_MIN =
    TPUHostTransferProto_TransferDirection_TransferDirection_MIN;
  static const TransferDirection TransferDirection_MAX =
    TPUHostTransferProto_TransferDirection_TransferDirection_MAX;
  static const int TransferDirection_ARRAYSIZE =
    TPUHostTransferProto_TransferDirection_TransferDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransferDirection_descriptor() {
    return TPUHostTransferProto_TransferDirection_descriptor();
  }
  static inline const ::std::string& TransferDirection_Name(TransferDirection value) {
    return TPUHostTransferProto_TransferDirection_Name(value);
  }
  static inline bool TransferDirection_Parse(const ::std::string& name,
      TransferDirection* value) {
    return TPUHostTransferProto_TransferDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string host_handler_name = 9;
  void clear_host_handler_name();
  static const int kHostHandlerNameFieldNumber = 9;
  const ::std::string& host_handler_name() const;
  void set_host_handler_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_handler_name(::std::string&& value);
  #endif
  void set_host_handler_name(const char* value);
  void set_host_handler_name(const char* value, size_t size);
  ::std::string* mutable_host_handler_name();
  ::std::string* release_host_handler_name();
  void set_allocated_host_handler_name(::std::string* host_handler_name);

  // .xla.ShapeProto shape = 5;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 5;
  private:
  const ::xla::ShapeProto& _internal_shape() const;
  public:
  const ::xla::ShapeProto& shape() const;
  ::xla::ShapeProto* release_shape();
  ::xla::ShapeProto* mutable_shape();
  void set_allocated_shape(::xla::ShapeProto* shape);

  // int64 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int64 channel() const;
  void set_channel(::google::protobuf::int64 value);

  // .tensorflow.TPUHostTransferProto.TransferDirection direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::tensorflow::TPUHostTransferProto_TransferDirection direction() const;
  void set_direction(::tensorflow::TPUHostTransferProto_TransferDirection value);

  // .xla.PrimitiveType original_type = 7;
  void clear_original_type();
  static const int kOriginalTypeFieldNumber = 7;
  ::xla::PrimitiveType original_type() const;
  void set_original_type(::xla::PrimitiveType value);

  // int64 buffer_offset = 6;
  void clear_buffer_offset();
  static const int kBufferOffsetFieldNumber = 6;
  ::google::protobuf::int64 buffer_offset() const;
  void set_buffer_offset(::google::protobuf::int64 value);

  // bool is_lower_bits = 8;
  void clear_is_lower_bits();
  static const int kIsLowerBitsFieldNumber = 8;
  bool is_lower_bits() const;
  void set_is_lower_bits(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.TPUHostTransferProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr host_handler_name_;
  ::xla::ShapeProto* shape_;
  ::google::protobuf::int64 channel_;
  int direction_;
  int original_type_;
  ::google::protobuf::int64 buffer_offset_;
  bool is_lower_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TPUHostTransferInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUHostTransferInfoProto) */ {
 public:
  TPUHostTransferInfoProto();
  virtual ~TPUHostTransferInfoProto();

  TPUHostTransferInfoProto(const TPUHostTransferInfoProto& from);

  inline TPUHostTransferInfoProto& operator=(const TPUHostTransferInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TPUHostTransferInfoProto(TPUHostTransferInfoProto&& from) noexcept
    : TPUHostTransferInfoProto() {
    *this = ::std::move(from);
  }

  inline TPUHostTransferInfoProto& operator=(TPUHostTransferInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TPUHostTransferInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPUHostTransferInfoProto* internal_default_instance() {
    return reinterpret_cast<const TPUHostTransferInfoProto*>(
               &_TPUHostTransferInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TPUHostTransferInfoProto* other);
  friend void swap(TPUHostTransferInfoProto& a, TPUHostTransferInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPUHostTransferInfoProto* New() const final {
    return CreateMaybeMessage<TPUHostTransferInfoProto>(NULL);
  }

  TPUHostTransferInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TPUHostTransferInfoProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TPUHostTransferInfoProto& from);
  void MergeFrom(const TPUHostTransferInfoProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUHostTransferInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TPUHostTransferProto host_transfers = 1;
  int host_transfers_size() const;
  void clear_host_transfers();
  static const int kHostTransfersFieldNumber = 1;
  ::tensorflow::TPUHostTransferProto* mutable_host_transfers(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUHostTransferProto >*
      mutable_host_transfers();
  const ::tensorflow::TPUHostTransferProto& host_transfers(int index) const;
  ::tensorflow::TPUHostTransferProto* add_host_transfers();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUHostTransferProto >&
      host_transfers() const;

  // @@protoc_insertion_point(class_scope:tensorflow.TPUHostTransferInfoProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUHostTransferProto > host_transfers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPUExecutableInfoProto_UpdateIndexPair

// int32 index = 1;
inline void TPUExecutableInfoProto_UpdateIndexPair::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 TPUExecutableInfoProto_UpdateIndexPair::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.index)
  return index_;
}
inline void TPUExecutableInfoProto_UpdateIndexPair::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.index)
}

// bool updated = 2;
inline void TPUExecutableInfoProto_UpdateIndexPair::clear_updated() {
  updated_ = false;
}
inline bool TPUExecutableInfoProto_UpdateIndexPair::updated() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.updated)
  return updated_;
}
inline void TPUExecutableInfoProto_UpdateIndexPair::set_updated(bool value) {
  
  updated_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.updated)
}

// -------------------------------------------------------------------

// TPUExecutableInfoProto_ShapeIndex

// repeated int32 index = 1;
inline int TPUExecutableInfoProto_ShapeIndex::index_size() const {
  return index_.size();
}
inline void TPUExecutableInfoProto_ShapeIndex::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 TPUExecutableInfoProto_ShapeIndex::index(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
  return index_.Get(index);
}
inline void TPUExecutableInfoProto_ShapeIndex::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
}
inline void TPUExecutableInfoProto_ShapeIndex::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TPUExecutableInfoProto_ShapeIndex::index() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TPUExecutableInfoProto_ShapeIndex::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
  return &index_;
}

// -------------------------------------------------------------------

// TPUExecutableInfoProto

// repeated .xla.ShapeProto input_shapes = 2;
inline int TPUExecutableInfoProto::input_shapes_size() const {
  return input_shapes_.size();
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::mutable_input_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.input_shapes)
  return input_shapes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >*
TPUExecutableInfoProto::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.input_shapes)
  return &input_shapes_;
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::input_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.input_shapes)
  return input_shapes_.Get(index);
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::add_input_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.input_shapes)
  return input_shapes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xla::ShapeProto >&
TPUExecutableInfoProto::input_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.input_shapes)
  return input_shapes_;
}

// .xla.ShapeProto output_shape = 3;
inline bool TPUExecutableInfoProto::has_output_shape() const {
  return this != internal_default_instance() && output_shape_ != NULL;
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::_internal_output_shape() const {
  return *output_shape_;
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::output_shape() const {
  const ::xla::ShapeProto* p = output_shape_;
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.output_shape)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::ShapeProto*>(
      &::xla::_ShapeProto_default_instance_);
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::release_output_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUExecutableInfoProto.output_shape)
  
  ::xla::ShapeProto* temp = output_shape_;
  output_shape_ = NULL;
  return temp;
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::mutable_output_shape() {
  
  if (output_shape_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaNoVirtual());
    output_shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.output_shape)
  return output_shape_;
}
inline void TPUExecutableInfoProto::set_allocated_output_shape(::xla::ShapeProto* output_shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_shape_);
  }
  if (output_shape) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(output_shape)->GetArena();
    if (message_arena != submessage_arena) {
      output_shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_shape, submessage_arena);
    }
    
  } else {
    
  }
  output_shape_ = output_shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUExecutableInfoProto.output_shape)
}

// repeated .tensorflow.TPUExecutableInfoProto.ShapeIndex dynamic_output_indices = 11;
inline int TPUExecutableInfoProto::dynamic_output_indices_size() const {
  return dynamic_output_indices_.size();
}
inline void TPUExecutableInfoProto::clear_dynamic_output_indices() {
  dynamic_output_indices_.Clear();
}
inline ::tensorflow::TPUExecutableInfoProto_ShapeIndex* TPUExecutableInfoProto::mutable_dynamic_output_indices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return dynamic_output_indices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >*
TPUExecutableInfoProto::mutable_dynamic_output_indices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return &dynamic_output_indices_;
}
inline const ::tensorflow::TPUExecutableInfoProto_ShapeIndex& TPUExecutableInfoProto::dynamic_output_indices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return dynamic_output_indices_.Get(index);
}
inline ::tensorflow::TPUExecutableInfoProto_ShapeIndex* TPUExecutableInfoProto::add_dynamic_output_indices() {
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return dynamic_output_indices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >&
TPUExecutableInfoProto::dynamic_output_indices() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return dynamic_output_indices_;
}

// repeated .tensorflow.TPUExecutableInfoProto.UpdateIndexPair variable_indices = 10;
inline int TPUExecutableInfoProto::variable_indices_size() const {
  return variable_indices_.size();
}
inline void TPUExecutableInfoProto::clear_variable_indices() {
  variable_indices_.Clear();
}
inline ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* TPUExecutableInfoProto::mutable_variable_indices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.variable_indices)
  return variable_indices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >*
TPUExecutableInfoProto::mutable_variable_indices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.variable_indices)
  return &variable_indices_;
}
inline const ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair& TPUExecutableInfoProto::variable_indices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.variable_indices)
  return variable_indices_.Get(index);
}
inline ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* TPUExecutableInfoProto::add_variable_indices() {
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.variable_indices)
  return variable_indices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >&
TPUExecutableInfoProto::variable_indices() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.variable_indices)
  return variable_indices_;
}

// repeated .tensorflow.TensorShapeProto output_tensor_shapes = 8;
inline int TPUExecutableInfoProto::output_tensor_shapes_size() const {
  return output_tensor_shapes_.size();
}
inline ::tensorflow::TensorShapeProto* TPUExecutableInfoProto::mutable_output_tensor_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return output_tensor_shapes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
TPUExecutableInfoProto::mutable_output_tensor_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return &output_tensor_shapes_;
}
inline const ::tensorflow::TensorShapeProto& TPUExecutableInfoProto::output_tensor_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return output_tensor_shapes_.Get(index);
}
inline ::tensorflow::TensorShapeProto* TPUExecutableInfoProto::add_output_tensor_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return output_tensor_shapes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
TPUExecutableInfoProto::output_tensor_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return output_tensor_shapes_;
}

// .xla.HloSnapshot session_module = 5;
inline bool TPUExecutableInfoProto::has_session_module() const {
  return this != internal_default_instance() && session_module_ != NULL;
}
inline const ::xla::HloSnapshot& TPUExecutableInfoProto::_internal_session_module() const {
  return *session_module_;
}
inline const ::xla::HloSnapshot& TPUExecutableInfoProto::session_module() const {
  const ::xla::HloSnapshot* p = session_module_;
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.session_module)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::HloSnapshot*>(
      &::xla::_HloSnapshot_default_instance_);
}
inline ::xla::HloSnapshot* TPUExecutableInfoProto::release_session_module() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUExecutableInfoProto.session_module)
  
  ::xla::HloSnapshot* temp = session_module_;
  session_module_ = NULL;
  return temp;
}
inline ::xla::HloSnapshot* TPUExecutableInfoProto::mutable_session_module() {
  
  if (session_module_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::HloSnapshot>(GetArenaNoVirtual());
    session_module_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.session_module)
  return session_module_;
}
inline void TPUExecutableInfoProto::set_allocated_session_module(::xla::HloSnapshot* session_module) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(session_module_);
  }
  if (session_module) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(session_module)->GetArena();
    if (message_arena != submessage_arena) {
      session_module = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session_module, submessage_arena);
    }
    
  } else {
    
  }
  session_module_ = session_module;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUExecutableInfoProto.session_module)
}

// .xla.DeviceAssignmentProto device_assignment = 6;
inline bool TPUExecutableInfoProto::has_device_assignment() const {
  return this != internal_default_instance() && device_assignment_ != NULL;
}
inline const ::xla::DeviceAssignmentProto& TPUExecutableInfoProto::_internal_device_assignment() const {
  return *device_assignment_;
}
inline const ::xla::DeviceAssignmentProto& TPUExecutableInfoProto::device_assignment() const {
  const ::xla::DeviceAssignmentProto* p = device_assignment_;
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.device_assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::DeviceAssignmentProto*>(
      &::xla::_DeviceAssignmentProto_default_instance_);
}
inline ::xla::DeviceAssignmentProto* TPUExecutableInfoProto::release_device_assignment() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUExecutableInfoProto.device_assignment)
  
  ::xla::DeviceAssignmentProto* temp = device_assignment_;
  device_assignment_ = NULL;
  return temp;
}
inline ::xla::DeviceAssignmentProto* TPUExecutableInfoProto::mutable_device_assignment() {
  
  if (device_assignment_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::DeviceAssignmentProto>(GetArenaNoVirtual());
    device_assignment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.device_assignment)
  return device_assignment_;
}
inline void TPUExecutableInfoProto::set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(device_assignment_);
  }
  if (device_assignment) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(device_assignment)->GetArena();
    if (message_arena != submessage_arena) {
      device_assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_assignment, submessage_arena);
    }
    
  } else {
    
  }
  device_assignment_ = device_assignment;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUExecutableInfoProto.device_assignment)
}

// -------------------------------------------------------------------

// TPUHostTransferProto

// int64 channel = 1;
inline void TPUHostTransferProto::clear_channel() {
  channel_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TPUHostTransferProto::channel() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.channel)
  return channel_;
}
inline void TPUHostTransferProto::set_channel(::google::protobuf::int64 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.channel)
}

// .tensorflow.TPUHostTransferProto.TransferDirection direction = 2;
inline void TPUHostTransferProto::clear_direction() {
  direction_ = 0;
}
inline ::tensorflow::TPUHostTransferProto_TransferDirection TPUHostTransferProto::direction() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.direction)
  return static_cast< ::tensorflow::TPUHostTransferProto_TransferDirection >(direction_);
}
inline void TPUHostTransferProto::set_direction(::tensorflow::TPUHostTransferProto_TransferDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.direction)
}

// string key = 3;
inline void TPUHostTransferProto::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPUHostTransferProto::key() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.key)
  return key_.GetNoArena();
}
inline void TPUHostTransferProto::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.key)
}
#if LANG_CXX11
inline void TPUHostTransferProto::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.TPUHostTransferProto.key)
}
#endif
inline void TPUHostTransferProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.TPUHostTransferProto.key)
}
inline void TPUHostTransferProto::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TPUHostTransferProto.key)
}
inline ::std::string* TPUHostTransferProto::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUHostTransferProto.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPUHostTransferProto::release_key() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUHostTransferProto.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPUHostTransferProto::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUHostTransferProto.key)
}

// .xla.ShapeProto shape = 5;
inline bool TPUHostTransferProto::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline const ::xla::ShapeProto& TPUHostTransferProto::_internal_shape() const {
  return *shape_;
}
inline const ::xla::ShapeProto& TPUHostTransferProto::shape() const {
  const ::xla::ShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::xla::ShapeProto*>(
      &::xla::_ShapeProto_default_instance_);
}
inline ::xla::ShapeProto* TPUHostTransferProto::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUHostTransferProto.shape)
  
  ::xla::ShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::xla::ShapeProto* TPUHostTransferProto::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUHostTransferProto.shape)
  return shape_;
}
inline void TPUHostTransferProto::set_allocated_shape(::xla::ShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shape_);
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shape)->GetArena();
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUHostTransferProto.shape)
}

// int64 buffer_offset = 6;
inline void TPUHostTransferProto::clear_buffer_offset() {
  buffer_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TPUHostTransferProto::buffer_offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.buffer_offset)
  return buffer_offset_;
}
inline void TPUHostTransferProto::set_buffer_offset(::google::protobuf::int64 value) {
  
  buffer_offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.buffer_offset)
}

// .xla.PrimitiveType original_type = 7;
inline void TPUHostTransferProto::clear_original_type() {
  original_type_ = 0;
}
inline ::xla::PrimitiveType TPUHostTransferProto::original_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.original_type)
  return static_cast< ::xla::PrimitiveType >(original_type_);
}
inline void TPUHostTransferProto::set_original_type(::xla::PrimitiveType value) {
  
  original_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.original_type)
}

// bool is_lower_bits = 8;
inline void TPUHostTransferProto::clear_is_lower_bits() {
  is_lower_bits_ = false;
}
inline bool TPUHostTransferProto::is_lower_bits() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.is_lower_bits)
  return is_lower_bits_;
}
inline void TPUHostTransferProto::set_is_lower_bits(bool value) {
  
  is_lower_bits_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.is_lower_bits)
}

// string host_handler_name = 9;
inline void TPUHostTransferProto::clear_host_handler_name() {
  host_handler_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPUHostTransferProto::host_handler_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferProto.host_handler_name)
  return host_handler_name_.GetNoArena();
}
inline void TPUHostTransferProto::set_host_handler_name(const ::std::string& value) {
  
  host_handler_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferProto.host_handler_name)
}
#if LANG_CXX11
inline void TPUHostTransferProto::set_host_handler_name(::std::string&& value) {
  
  host_handler_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.TPUHostTransferProto.host_handler_name)
}
#endif
inline void TPUHostTransferProto::set_host_handler_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_handler_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.TPUHostTransferProto.host_handler_name)
}
inline void TPUHostTransferProto::set_host_handler_name(const char* value, size_t size) {
  
  host_handler_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TPUHostTransferProto.host_handler_name)
}
inline ::std::string* TPUHostTransferProto::mutable_host_handler_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUHostTransferProto.host_handler_name)
  return host_handler_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPUHostTransferProto::release_host_handler_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUHostTransferProto.host_handler_name)
  
  return host_handler_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPUHostTransferProto::set_allocated_host_handler_name(::std::string* host_handler_name) {
  if (host_handler_name != NULL) {
    
  } else {
    
  }
  host_handler_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_handler_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUHostTransferProto.host_handler_name)
}

// -------------------------------------------------------------------

// TPUHostTransferInfoProto

// repeated .tensorflow.TPUHostTransferProto host_transfers = 1;
inline int TPUHostTransferInfoProto::host_transfers_size() const {
  return host_transfers_.size();
}
inline void TPUHostTransferInfoProto::clear_host_transfers() {
  host_transfers_.Clear();
}
inline ::tensorflow::TPUHostTransferProto* TPUHostTransferInfoProto::mutable_host_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUHostTransferInfoProto.host_transfers)
  return host_transfers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUHostTransferProto >*
TPUHostTransferInfoProto::mutable_host_transfers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUHostTransferInfoProto.host_transfers)
  return &host_transfers_;
}
inline const ::tensorflow::TPUHostTransferProto& TPUHostTransferInfoProto::host_transfers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferInfoProto.host_transfers)
  return host_transfers_.Get(index);
}
inline ::tensorflow::TPUHostTransferProto* TPUHostTransferInfoProto::add_host_transfers() {
  // @@protoc_insertion_point(field_add:tensorflow.TPUHostTransferInfoProto.host_transfers)
  return host_transfers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TPUHostTransferProto >&
TPUHostTransferInfoProto::host_transfers() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUHostTransferInfoProto.host_transfers)
  return host_transfers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::TPUHostTransferProto_TransferDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::TPUHostTransferProto_TransferDirection>() {
  return ::tensorflow::TPUHostTransferProto_TransferDirection_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto
