// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/dataset_options.proto

#include "tensorflow/core/framework/dataset_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AutotuneOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DistributeOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptimizationOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ThreadingOptions;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto
namespace tensorflow {
namespace data {
class AutotuneOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutotuneOptions>
      _instance;
  bool enabled_;
  ::google::protobuf::int32 cpu_budget_;
  ::google::protobuf::int64 ram_budget_;
  int autotune_algorithm_;
} _AutotuneOptions_default_instance_;
class CardinalityOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CardinalityOptions>
      _instance;
} _CardinalityOptions_default_instance_;
class DistributeOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributeOptions>
      _instance;
  ::google::protobuf::int32 num_devices_;
} _DistributeOptions_default_instance_;
class OptimizationOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptimizationOptions>
      _instance;
  bool apply_default_optimizations_;
  bool filter_fusion_;
  bool map_and_batch_fusion_;
  bool map_and_filter_fusion_;
  bool map_fusion_;
  bool map_parallelization_;
  bool noop_elimination_;
  bool parallel_batch_;
  bool shuffle_and_repeat_fusion_;
  bool filter_parallelization_;
} _OptimizationOptions_default_instance_;
class ThreadingOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ThreadingOptions>
      _instance;
  ::google::protobuf::int32 max_intra_op_parallelism_;
  ::google::protobuf::int32 private_threadpool_size_;
} _ThreadingOptions_default_instance_;
class OptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Options>
      _instance;
  bool deterministic_;
  bool slack_;
  int external_state_policy_;
} _Options_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto {
static void InitDefaultsAutotuneOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_AutotuneOptions_default_instance_;
    new (ptr) ::tensorflow::data::AutotuneOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::AutotuneOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AutotuneOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAutotuneOptions}, {}};

static void InitDefaultsCardinalityOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_CardinalityOptions_default_instance_;
    new (ptr) ::tensorflow::data::CardinalityOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::CardinalityOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CardinalityOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCardinalityOptions}, {}};

static void InitDefaultsDistributeOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_DistributeOptions_default_instance_;
    new (ptr) ::tensorflow::data::DistributeOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::DistributeOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DistributeOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistributeOptions}, {}};

static void InitDefaultsOptimizationOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_OptimizationOptions_default_instance_;
    new (ptr) ::tensorflow::data::OptimizationOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::OptimizationOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptimizationOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptimizationOptions}, {}};

static void InitDefaultsThreadingOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_ThreadingOptions_default_instance_;
    new (ptr) ::tensorflow::data::ThreadingOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::ThreadingOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ThreadingOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsThreadingOptions}, {}};

static void InitDefaultsOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::data::_Options_default_instance_;
    new (ptr) ::tensorflow::data::Options();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::data::Options::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Options =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsOptions}, {
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_AutotuneOptions.base,
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_DistributeOptions.base,
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_OptimizationOptions.base,
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_ThreadingOptions.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AutotuneOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CardinalityOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistributeOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptimizationOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ThreadingOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Options.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::AutotuneOptionsDefaultTypeInternal, enabled_),
  offsetof(::tensorflow::data::AutotuneOptionsDefaultTypeInternal, cpu_budget_),
  offsetof(::tensorflow::data::AutotuneOptionsDefaultTypeInternal, ram_budget_),
  offsetof(::tensorflow::data::AutotuneOptionsDefaultTypeInternal, autotune_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_cpu_budget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_ram_budget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_autotune_algorithm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CardinalityOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::CardinalityOptions, compute_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DistributeOptions, auto_shard_policy_),
  offsetof(::tensorflow::data::DistributeOptionsDefaultTypeInternal, num_devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::DistributeOptions, optional_num_devices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, apply_default_optimizations_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, filter_fusion_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, map_and_batch_fusion_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, map_and_filter_fusion_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, map_fusion_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, map_parallelization_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, noop_elimination_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, parallel_batch_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, shuffle_and_repeat_fusion_),
  offsetof(::tensorflow::data::OptimizationOptionsDefaultTypeInternal, filter_parallelization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_apply_default_optimizations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_filter_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_and_batch_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_and_filter_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_parallelization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_noop_elimination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_parallel_batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_shuffle_and_repeat_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_filter_parallelization_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::ThreadingOptionsDefaultTypeInternal, max_intra_op_parallelism_),
  offsetof(::tensorflow::data::ThreadingOptionsDefaultTypeInternal, private_threadpool_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, optional_max_intra_op_parallelism_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, optional_private_threadpool_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::data::OptionsDefaultTypeInternal, deterministic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, autotune_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, distribute_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, optimization_options_),
  offsetof(::tensorflow::data::OptionsDefaultTypeInternal, slack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, threading_options_),
  offsetof(::tensorflow::data::OptionsDefaultTypeInternal, external_state_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, optional_deterministic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, optional_slack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::data::Options, optional_external_state_policy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::data::AutotuneOptions)},
  { 13, -1, sizeof(::tensorflow::data::CardinalityOptions)},
  { 19, -1, sizeof(::tensorflow::data::DistributeOptions)},
  { 27, -1, sizeof(::tensorflow::data::OptimizationOptions)},
  { 52, -1, sizeof(::tensorflow::data::ThreadingOptions)},
  { 61, -1, sizeof(::tensorflow::data::Options)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_AutotuneOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_CardinalityOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_DistributeOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_OptimizationOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_ThreadingOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::data::_Options_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/core/framework/dataset_options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/tensorflow/core/framework/dataset_opti"
      "ons.proto\022\017tensorflow.data\032%tensorflow/c"
      "ore/framework/model.proto\"\371\001\n\017AutotuneOp"
      "tions\022\021\n\007enabled\030\001 \001(\010H\000\022\024\n\ncpu_budget\030\002"
      " \001(\005H\001\022\024\n\nram_budget\030\003 \001(\003H\002\022F\n\022autotune"
      "_algorithm\030\004 \001(\0162(.tensorflow.data.model"
      ".AutotuneAlgorithmH\003B\022\n\020optional_enabled"
      "B\025\n\023optional_cpu_budgetB\025\n\023optional_ram_"
      "budgetB\035\n\033optional_autotune_algorithm\"\321\001"
      "\n\022CardinalityOptions\022G\n\rcompute_level\030\001 "
      "\001(\01620.tensorflow.data.CardinalityOptions"
      ".ComputeLevel\"r\n\014ComputeLevel\022#\n\037CARDINA"
      "LITY_COMPUTE_UNSPECIFIED\020\000\022\033\n\027CARDINALIT"
      "Y_COMPUTE_LOW\020\001\022 \n\034CARDINALITY_COMPUTE_M"
      "ODERATE\020\002\"\177\n\021DistributeOptions\022;\n\021auto_s"
      "hard_policy\030\001 \001(\0162 .tensorflow.data.Auto"
      "ShardPolicy\022\025\n\013num_devices\030\002 \001(\005H\000B\026\n\024op"
      "tional_num_devices\"\265\005\n\023OptimizationOptio"
      "ns\022%\n\033apply_default_optimizations\030\001 \001(\010H"
      "\000\022\027\n\rfilter_fusion\030\006 \001(\010H\001\022\036\n\024map_and_ba"
      "tch_fusion\030\t \001(\010H\002\022\037\n\025map_and_filter_fus"
      "ion\030\n \001(\010H\003\022\024\n\nmap_fusion\030\013 \001(\010H\004\022\035\n\023map"
      "_parallelization\030\014 \001(\010H\005\022\032\n\020noop_elimina"
      "tion\030\016 \001(\010H\006\022\030\n\016parallel_batch\030\017 \001(\010H\007\022#"
      "\n\031shuffle_and_repeat_fusion\030\021 \001(\010H\010\022 \n\026f"
      "ilter_parallelization\030\022 \001(\010H\tB&\n$optiona"
      "l_apply_default_optimizationsB\030\n\026optiona"
      "l_filter_fusionB\037\n\035optional_map_and_batc"
      "h_fusionB \n\036optional_map_and_filter_fusi"
      "onB\025\n\023optional_map_fusionB\036\n\034optional_ma"
      "p_parallelizationB\033\n\031optional_noop_elimi"
      "nationB\031\n\027optional_parallel_batchB$\n\"opt"
      "ional_shuffle_and_repeat_fusionB!\n\037optio"
      "nal_filter_parallelizationJ\004\010\002\020\003J\004\010\003\020\004J\004"
      "\010\004\020\005J\004\010\005\020\006J\004\010\007\020\010J\004\010\010\020\tJ\004\010\r\020\016J\004\010\020\020\021\"\242\001\n\020T"
      "hreadingOptions\022\"\n\030max_intra_op_parallel"
      "ism\030\001 \001(\005H\000\022!\n\027private_threadpool_size\030\002"
      " \001(\005H\001B#\n!optional_max_intra_op_parallel"
      "ismB\"\n optional_private_threadpool_size\""
      "\306\003\n\007Options\022\027\n\rdeterministic\030\001 \001(\010H\000\022:\n\020"
      "autotune_options\030\007 \001(\0132 .tensorflow.data"
      ".AutotuneOptions\022>\n\022distribute_options\030\002"
      " \001(\0132\".tensorflow.data.DistributeOptions"
      "\022B\n\024optimization_options\030\003 \001(\0132$.tensorf"
      "low.data.OptimizationOptions\022\017\n\005slack\030\004 "
      "\001(\010H\001\022<\n\021threading_options\030\005 \001(\0132!.tenso"
      "rflow.data.ThreadingOptions\022E\n\025external_"
      "state_policy\030\006 \001(\0162$.tensorflow.data.Ext"
      "ernalStatePolicyH\002B\030\n\026optional_determini"
      "sticB\020\n\016optional_slackB \n\036optional_exter"
      "nal_state_policy*K\n\017AutoShardPolicy\022\010\n\004A"
      "UTO\020\000\022\010\n\004FILE\020\001\022\010\n\004DATA\020\002\022\010\n\004HINT\020\003\022\020\n\003O"
      "FF\020\377\377\377\377\377\377\377\377\377\001*J\n\023ExternalStatePolicy\022\017\n\013"
      "POLICY_WARN\020\000\022\021\n\rPOLICY_IGNORE\020\001\022\017\n\013POLI"
      "CY_FAIL\020\002BXZVgithub.com/tensorflow/tenso"
      "rflow/tensorflow/go/core/framework/datas"
      "et_options_go_protob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/dataset_options.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fframework_2fmodel_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto
namespace tensorflow {
namespace data {
const ::google::protobuf::EnumDescriptor* CardinalityOptions_ComputeLevel_descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_enum_descriptors[0];
}
bool CardinalityOptions_ComputeLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_UNSPECIFIED;
const CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_LOW;
const CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_MODERATE;
const CardinalityOptions_ComputeLevel CardinalityOptions::ComputeLevel_MIN;
const CardinalityOptions_ComputeLevel CardinalityOptions::ComputeLevel_MAX;
const int CardinalityOptions::ComputeLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AutoShardPolicy_descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_enum_descriptors[1];
}
bool AutoShardPolicy_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExternalStatePolicy_descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_enum_descriptors[2];
}
bool ExternalStatePolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AutotuneOptions::InitAsDefaultInstance() {
  ::tensorflow::data::_AutotuneOptions_default_instance_.enabled_ = false;
  ::tensorflow::data::_AutotuneOptions_default_instance_.cpu_budget_ = 0;
  ::tensorflow::data::_AutotuneOptions_default_instance_.ram_budget_ = GOOGLE_LONGLONG(0);
  ::tensorflow::data::_AutotuneOptions_default_instance_.autotune_algorithm_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutotuneOptions::kEnabledFieldNumber;
const int AutotuneOptions::kCpuBudgetFieldNumber;
const int AutotuneOptions::kRamBudgetFieldNumber;
const int AutotuneOptions::kAutotuneAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutotuneOptions::AutotuneOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_AutotuneOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.AutotuneOptions)
}
AutotuneOptions::AutotuneOptions(const AutotuneOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_optional_enabled();
  switch (from.optional_enabled_case()) {
    case kEnabled: {
      set_enabled(from.enabled());
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  clear_has_optional_cpu_budget();
  switch (from.optional_cpu_budget_case()) {
    case kCpuBudget: {
      set_cpu_budget(from.cpu_budget());
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  clear_has_optional_ram_budget();
  switch (from.optional_ram_budget_case()) {
    case kRamBudget: {
      set_ram_budget(from.ram_budget());
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  clear_has_optional_autotune_algorithm();
  switch (from.optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      set_autotune_algorithm(from.autotune_algorithm());
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.AutotuneOptions)
}

void AutotuneOptions::SharedCtor() {
  clear_has_optional_enabled();
  clear_has_optional_cpu_budget();
  clear_has_optional_ram_budget();
  clear_has_optional_autotune_algorithm();
}

AutotuneOptions::~AutotuneOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.AutotuneOptions)
  SharedDtor();
}

void AutotuneOptions::SharedDtor() {
  if (has_optional_enabled()) {
    clear_optional_enabled();
  }
  if (has_optional_cpu_budget()) {
    clear_optional_cpu_budget();
  }
  if (has_optional_ram_budget()) {
    clear_optional_ram_budget();
  }
  if (has_optional_autotune_algorithm()) {
    clear_optional_autotune_algorithm();
  }
}

void AutotuneOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AutotuneOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutotuneOptions& AutotuneOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_AutotuneOptions.base);
  return *internal_default_instance();
}


void AutotuneOptions::clear_optional_enabled() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_enabled_case()) {
    case kEnabled: {
      // No need to clear
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}

void AutotuneOptions::clear_optional_cpu_budget() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_cpu_budget_case()) {
    case kCpuBudget: {
      // No need to clear
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_CPU_BUDGET_NOT_SET;
}

void AutotuneOptions::clear_optional_ram_budget() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_ram_budget_case()) {
    case kRamBudget: {
      // No need to clear
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_RAM_BUDGET_NOT_SET;
}

void AutotuneOptions::clear_optional_autotune_algorithm() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      // No need to clear
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET;
}


void AutotuneOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_enabled();
  clear_optional_cpu_budget();
  clear_optional_ram_budget();
  clear_optional_autotune_algorithm();
  _internal_metadata_.Clear();
}

bool AutotuneOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.AutotuneOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_optional_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_enabled_.enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpu_budget = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_optional_cpu_budget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_cpu_budget_.cpu_budget_)));
          set_has_cpu_budget();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ram_budget = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_optional_ram_budget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_ram_budget_.ram_budget_)));
          set_has_ram_budget();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_autotune_algorithm(static_cast< ::tensorflow::data::model::AutotuneAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.AutotuneOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.AutotuneOptions)
  return false;
#undef DO_
}

void AutotuneOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // int32 cpu_budget = 2;
  if (has_cpu_budget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpu_budget(), output);
  }

  // int64 ram_budget = 3;
  if (has_ram_budget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ram_budget(), output);
  }

  // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
  if (has_autotune_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->autotune_algorithm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.AutotuneOptions)
}

::google::protobuf::uint8* AutotuneOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // int32 cpu_budget = 2;
  if (has_cpu_budget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cpu_budget(), target);
  }

  // int64 ram_budget = 3;
  if (has_ram_budget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ram_budget(), target);
  }

  // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
  if (has_autotune_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->autotune_algorithm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.AutotuneOptions)
  return target;
}

size_t AutotuneOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.AutotuneOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (optional_enabled_case()) {
    // bool enabled = 1;
    case kEnabled: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  switch (optional_cpu_budget_case()) {
    // int32 cpu_budget = 2;
    case kCpuBudget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu_budget());
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (optional_ram_budget_case()) {
    // int64 ram_budget = 3;
    case kRamBudget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ram_budget());
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (optional_autotune_algorithm_case()) {
    // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
    case kAutotuneAlgorithm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->autotune_algorithm());
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutotuneOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.AutotuneOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AutotuneOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutotuneOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.AutotuneOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.AutotuneOptions)
    MergeFrom(*source);
  }
}

void AutotuneOptions::MergeFrom(const AutotuneOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.AutotuneOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_enabled_case()) {
    case kEnabled: {
      set_enabled(from.enabled());
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  switch (from.optional_cpu_budget_case()) {
    case kCpuBudget: {
      set_cpu_budget(from.cpu_budget());
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (from.optional_ram_budget_case()) {
    case kRamBudget: {
      set_ram_budget(from.ram_budget());
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (from.optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      set_autotune_algorithm(from.autotune_algorithm());
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
}

void AutotuneOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.AutotuneOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneOptions::CopyFrom(const AutotuneOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.AutotuneOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneOptions::IsInitialized() const {
  return true;
}

void AutotuneOptions::Swap(AutotuneOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutotuneOptions::InternalSwap(AutotuneOptions* other) {
  using std::swap;
  swap(optional_enabled_, other->optional_enabled_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_cpu_budget_, other->optional_cpu_budget_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(optional_ram_budget_, other->optional_ram_budget_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(optional_autotune_algorithm_, other->optional_autotune_algorithm_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AutotuneOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CardinalityOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardinalityOptions::kComputeLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardinalityOptions::CardinalityOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_CardinalityOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.CardinalityOptions)
}
CardinalityOptions::CardinalityOptions(const CardinalityOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compute_level_ = from.compute_level_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CardinalityOptions)
}

void CardinalityOptions::SharedCtor() {
  compute_level_ = 0;
}

CardinalityOptions::~CardinalityOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CardinalityOptions)
  SharedDtor();
}

void CardinalityOptions::SharedDtor() {
}

void CardinalityOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CardinalityOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardinalityOptions& CardinalityOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_CardinalityOptions.base);
  return *internal_default_instance();
}


void CardinalityOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CardinalityOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compute_level_ = 0;
  _internal_metadata_.Clear();
}

bool CardinalityOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.CardinalityOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compute_level(static_cast< ::tensorflow::data::CardinalityOptions_ComputeLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.CardinalityOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.CardinalityOptions)
  return false;
#undef DO_
}

void CardinalityOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.CardinalityOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
  if (this->compute_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->compute_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.CardinalityOptions)
}

::google::protobuf::uint8* CardinalityOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CardinalityOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
  if (this->compute_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->compute_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CardinalityOptions)
  return target;
}

size_t CardinalityOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CardinalityOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
  if (this->compute_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compute_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardinalityOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.CardinalityOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CardinalityOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardinalityOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.CardinalityOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.CardinalityOptions)
    MergeFrom(*source);
  }
}

void CardinalityOptions::MergeFrom(const CardinalityOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CardinalityOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compute_level() != 0) {
    set_compute_level(from.compute_level());
  }
}

void CardinalityOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.CardinalityOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardinalityOptions::CopyFrom(const CardinalityOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CardinalityOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardinalityOptions::IsInitialized() const {
  return true;
}

void CardinalityOptions::Swap(CardinalityOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardinalityOptions::InternalSwap(CardinalityOptions* other) {
  using std::swap;
  swap(compute_level_, other->compute_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CardinalityOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DistributeOptions::InitAsDefaultInstance() {
  ::tensorflow::data::_DistributeOptions_default_instance_.num_devices_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributeOptions::kAutoShardPolicyFieldNumber;
const int DistributeOptions::kNumDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributeOptions::DistributeOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_DistributeOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.DistributeOptions)
}
DistributeOptions::DistributeOptions(const DistributeOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auto_shard_policy_ = from.auto_shard_policy_;
  clear_has_optional_num_devices();
  switch (from.optional_num_devices_case()) {
    case kNumDevices: {
      set_num_devices(from.num_devices());
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DistributeOptions)
}

void DistributeOptions::SharedCtor() {
  auto_shard_policy_ = 0;
  clear_has_optional_num_devices();
}

DistributeOptions::~DistributeOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DistributeOptions)
  SharedDtor();
}

void DistributeOptions::SharedDtor() {
  if (has_optional_num_devices()) {
    clear_optional_num_devices();
  }
}

void DistributeOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DistributeOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistributeOptions& DistributeOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_DistributeOptions.base);
  return *internal_default_instance();
}


void DistributeOptions::clear_optional_num_devices() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.DistributeOptions)
  switch (optional_num_devices_case()) {
    case kNumDevices: {
      // No need to clear
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_NUM_DEVICES_NOT_SET;
}


void DistributeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DistributeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_shard_policy_ = 0;
  clear_optional_num_devices();
  _internal_metadata_.Clear();
}

bool DistributeOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.DistributeOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_shard_policy(static_cast< ::tensorflow::data::AutoShardPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_devices = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_optional_num_devices();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_num_devices_.num_devices_)));
          set_has_num_devices();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.DistributeOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.DistributeOptions)
  return false;
#undef DO_
}

void DistributeOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.DistributeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
  if (this->auto_shard_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->auto_shard_policy(), output);
  }

  // int32 num_devices = 2;
  if (has_num_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_devices(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.DistributeOptions)
}

::google::protobuf::uint8* DistributeOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DistributeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
  if (this->auto_shard_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->auto_shard_policy(), target);
  }

  // int32 num_devices = 2;
  if (has_num_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_devices(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DistributeOptions)
  return target;
}

size_t DistributeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DistributeOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
  if (this->auto_shard_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_shard_policy());
  }

  switch (optional_num_devices_case()) {
    // int32 num_devices = 2;
    case kNumDevices: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_devices());
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributeOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.DistributeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributeOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistributeOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.DistributeOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.DistributeOptions)
    MergeFrom(*source);
  }
}

void DistributeOptions::MergeFrom(const DistributeOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DistributeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_shard_policy() != 0) {
    set_auto_shard_policy(from.auto_shard_policy());
  }
  switch (from.optional_num_devices_case()) {
    case kNumDevices: {
      set_num_devices(from.num_devices());
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
}

void DistributeOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.DistributeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributeOptions::CopyFrom(const DistributeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DistributeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributeOptions::IsInitialized() const {
  return true;
}

void DistributeOptions::Swap(DistributeOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributeOptions::InternalSwap(DistributeOptions* other) {
  using std::swap;
  swap(auto_shard_policy_, other->auto_shard_policy_);
  swap(optional_num_devices_, other->optional_num_devices_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DistributeOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptimizationOptions::InitAsDefaultInstance() {
  ::tensorflow::data::_OptimizationOptions_default_instance_.apply_default_optimizations_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.filter_fusion_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.map_and_batch_fusion_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.map_and_filter_fusion_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.map_fusion_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.map_parallelization_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.noop_elimination_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.parallel_batch_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.shuffle_and_repeat_fusion_ = false;
  ::tensorflow::data::_OptimizationOptions_default_instance_.filter_parallelization_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptimizationOptions::kApplyDefaultOptimizationsFieldNumber;
const int OptimizationOptions::kFilterFusionFieldNumber;
const int OptimizationOptions::kMapAndBatchFusionFieldNumber;
const int OptimizationOptions::kMapAndFilterFusionFieldNumber;
const int OptimizationOptions::kMapFusionFieldNumber;
const int OptimizationOptions::kMapParallelizationFieldNumber;
const int OptimizationOptions::kNoopEliminationFieldNumber;
const int OptimizationOptions::kParallelBatchFieldNumber;
const int OptimizationOptions::kShuffleAndRepeatFusionFieldNumber;
const int OptimizationOptions::kFilterParallelizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptimizationOptions::OptimizationOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_OptimizationOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.OptimizationOptions)
}
OptimizationOptions::OptimizationOptions(const OptimizationOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_optional_apply_default_optimizations();
  switch (from.optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      set_apply_default_optimizations(from.apply_default_optimizations());
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  clear_has_optional_filter_fusion();
  switch (from.optional_filter_fusion_case()) {
    case kFilterFusion: {
      set_filter_fusion(from.filter_fusion());
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_and_batch_fusion();
  switch (from.optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      set_map_and_batch_fusion(from.map_and_batch_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_and_filter_fusion();
  switch (from.optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      set_map_and_filter_fusion(from.map_and_filter_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_fusion();
  switch (from.optional_map_fusion_case()) {
    case kMapFusion: {
      set_map_fusion(from.map_fusion());
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_parallelization();
  switch (from.optional_map_parallelization_case()) {
    case kMapParallelization: {
      set_map_parallelization(from.map_parallelization());
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_noop_elimination();
  switch (from.optional_noop_elimination_case()) {
    case kNoopElimination: {
      set_noop_elimination(from.noop_elimination());
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_parallel_batch();
  switch (from.optional_parallel_batch_case()) {
    case kParallelBatch: {
      set_parallel_batch(from.parallel_batch());
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  clear_has_optional_shuffle_and_repeat_fusion();
  switch (from.optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      set_shuffle_and_repeat_fusion(from.shuffle_and_repeat_fusion());
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_filter_parallelization();
  switch (from.optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      set_filter_parallelization(from.filter_parallelization());
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.OptimizationOptions)
}

void OptimizationOptions::SharedCtor() {
  clear_has_optional_apply_default_optimizations();
  clear_has_optional_filter_fusion();
  clear_has_optional_map_and_batch_fusion();
  clear_has_optional_map_and_filter_fusion();
  clear_has_optional_map_fusion();
  clear_has_optional_map_parallelization();
  clear_has_optional_noop_elimination();
  clear_has_optional_parallel_batch();
  clear_has_optional_shuffle_and_repeat_fusion();
  clear_has_optional_filter_parallelization();
}

OptimizationOptions::~OptimizationOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.OptimizationOptions)
  SharedDtor();
}

void OptimizationOptions::SharedDtor() {
  if (has_optional_apply_default_optimizations()) {
    clear_optional_apply_default_optimizations();
  }
  if (has_optional_filter_fusion()) {
    clear_optional_filter_fusion();
  }
  if (has_optional_map_and_batch_fusion()) {
    clear_optional_map_and_batch_fusion();
  }
  if (has_optional_map_and_filter_fusion()) {
    clear_optional_map_and_filter_fusion();
  }
  if (has_optional_map_fusion()) {
    clear_optional_map_fusion();
  }
  if (has_optional_map_parallelization()) {
    clear_optional_map_parallelization();
  }
  if (has_optional_noop_elimination()) {
    clear_optional_noop_elimination();
  }
  if (has_optional_parallel_batch()) {
    clear_optional_parallel_batch();
  }
  if (has_optional_shuffle_and_repeat_fusion()) {
    clear_optional_shuffle_and_repeat_fusion();
  }
  if (has_optional_filter_parallelization()) {
    clear_optional_filter_parallelization();
  }
}

void OptimizationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptimizationOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptimizationOptions& OptimizationOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_OptimizationOptions.base);
  return *internal_default_instance();
}


void OptimizationOptions::clear_optional_apply_default_optimizations() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      // No need to clear
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET;
}

void OptimizationOptions::clear_optional_filter_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_filter_fusion_case()) {
    case kFilterFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_FILTER_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_and_batch_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_and_filter_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_fusion_case()) {
    case kMapFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = OPTIONAL_MAP_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_parallelization() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_parallelization_case()) {
    case kMapParallelization: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = OPTIONAL_MAP_PARALLELIZATION_NOT_SET;
}

void OptimizationOptions::clear_optional_noop_elimination() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_noop_elimination_case()) {
    case kNoopElimination: {
      // No need to clear
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = OPTIONAL_NOOP_ELIMINATION_NOT_SET;
}

void OptimizationOptions::clear_optional_parallel_batch() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_parallel_batch_case()) {
    case kParallelBatch: {
      // No need to clear
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = OPTIONAL_PARALLEL_BATCH_NOT_SET;
}

void OptimizationOptions::clear_optional_shuffle_and_repeat_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_filter_parallelization() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      // No need to clear
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = OPTIONAL_FILTER_PARALLELIZATION_NOT_SET;
}


void OptimizationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_apply_default_optimizations();
  clear_optional_filter_fusion();
  clear_optional_map_and_batch_fusion();
  clear_optional_map_and_filter_fusion();
  clear_optional_map_fusion();
  clear_optional_map_parallelization();
  clear_optional_noop_elimination();
  clear_optional_parallel_batch();
  clear_optional_shuffle_and_repeat_fusion();
  clear_optional_filter_parallelization();
  _internal_metadata_.Clear();
}

bool OptimizationOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.OptimizationOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool apply_default_optimizations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_optional_apply_default_optimizations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_apply_default_optimizations_.apply_default_optimizations_)));
          set_has_apply_default_optimizations();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool filter_fusion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_optional_filter_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_filter_fusion_.filter_fusion_)));
          set_has_filter_fusion();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool map_and_batch_fusion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          clear_optional_map_and_batch_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_map_and_batch_fusion_.map_and_batch_fusion_)));
          set_has_map_and_batch_fusion();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool map_and_filter_fusion = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          clear_optional_map_and_filter_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_map_and_filter_fusion_.map_and_filter_fusion_)));
          set_has_map_and_filter_fusion();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool map_fusion = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          clear_optional_map_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_map_fusion_.map_fusion_)));
          set_has_map_fusion();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool map_parallelization = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          clear_optional_map_parallelization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_map_parallelization_.map_parallelization_)));
          set_has_map_parallelization();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool noop_elimination = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          clear_optional_noop_elimination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_noop_elimination_.noop_elimination_)));
          set_has_noop_elimination();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool parallel_batch = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          clear_optional_parallel_batch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_parallel_batch_.parallel_batch_)));
          set_has_parallel_batch();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shuffle_and_repeat_fusion = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          clear_optional_shuffle_and_repeat_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_shuffle_and_repeat_fusion_.shuffle_and_repeat_fusion_)));
          set_has_shuffle_and_repeat_fusion();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool filter_parallelization = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          clear_optional_filter_parallelization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_filter_parallelization_.filter_parallelization_)));
          set_has_filter_parallelization();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.OptimizationOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.OptimizationOptions)
  return false;
#undef DO_
}

void OptimizationOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool apply_default_optimizations = 1;
  if (has_apply_default_optimizations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->apply_default_optimizations(), output);
  }

  // bool filter_fusion = 6;
  if (has_filter_fusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_fusion(), output);
  }

  // bool map_and_batch_fusion = 9;
  if (has_map_and_batch_fusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->map_and_batch_fusion(), output);
  }

  // bool map_and_filter_fusion = 10;
  if (has_map_and_filter_fusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->map_and_filter_fusion(), output);
  }

  // bool map_fusion = 11;
  if (has_map_fusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->map_fusion(), output);
  }

  // bool map_parallelization = 12;
  if (has_map_parallelization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->map_parallelization(), output);
  }

  // bool noop_elimination = 14;
  if (has_noop_elimination()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->noop_elimination(), output);
  }

  // bool parallel_batch = 15;
  if (has_parallel_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->parallel_batch(), output);
  }

  // bool shuffle_and_repeat_fusion = 17;
  if (has_shuffle_and_repeat_fusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->shuffle_and_repeat_fusion(), output);
  }

  // bool filter_parallelization = 18;
  if (has_filter_parallelization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->filter_parallelization(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.OptimizationOptions)
}

::google::protobuf::uint8* OptimizationOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool apply_default_optimizations = 1;
  if (has_apply_default_optimizations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->apply_default_optimizations(), target);
  }

  // bool filter_fusion = 6;
  if (has_filter_fusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_fusion(), target);
  }

  // bool map_and_batch_fusion = 9;
  if (has_map_and_batch_fusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->map_and_batch_fusion(), target);
  }

  // bool map_and_filter_fusion = 10;
  if (has_map_and_filter_fusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->map_and_filter_fusion(), target);
  }

  // bool map_fusion = 11;
  if (has_map_fusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->map_fusion(), target);
  }

  // bool map_parallelization = 12;
  if (has_map_parallelization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->map_parallelization(), target);
  }

  // bool noop_elimination = 14;
  if (has_noop_elimination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->noop_elimination(), target);
  }

  // bool parallel_batch = 15;
  if (has_parallel_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->parallel_batch(), target);
  }

  // bool shuffle_and_repeat_fusion = 17;
  if (has_shuffle_and_repeat_fusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->shuffle_and_repeat_fusion(), target);
  }

  // bool filter_parallelization = 18;
  if (has_filter_parallelization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->filter_parallelization(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.OptimizationOptions)
  return target;
}

size_t OptimizationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.OptimizationOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (optional_apply_default_optimizations_case()) {
    // bool apply_default_optimizations = 1;
    case kApplyDefaultOptimizations: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  switch (optional_filter_fusion_case()) {
    // bool filter_fusion = 6;
    case kFilterFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_and_batch_fusion_case()) {
    // bool map_and_batch_fusion = 9;
    case kMapAndBatchFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_and_filter_fusion_case()) {
    // bool map_and_filter_fusion = 10;
    case kMapAndFilterFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_fusion_case()) {
    // bool map_fusion = 11;
    case kMapFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_parallelization_case()) {
    // bool map_parallelization = 12;
    case kMapParallelization: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  switch (optional_noop_elimination_case()) {
    // bool noop_elimination = 14;
    case kNoopElimination: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  switch (optional_parallel_batch_case()) {
    // bool parallel_batch = 15;
    case kParallelBatch: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  switch (optional_shuffle_and_repeat_fusion_case()) {
    // bool shuffle_and_repeat_fusion = 17;
    case kShuffleAndRepeatFusion: {
      total_size += 2 + 1;
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_filter_parallelization_case()) {
    // bool filter_parallelization = 18;
    case kFilterParallelization: {
      total_size += 2 + 1;
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptimizationOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.OptimizationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OptimizationOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptimizationOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.OptimizationOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.OptimizationOptions)
    MergeFrom(*source);
  }
}

void OptimizationOptions::MergeFrom(const OptimizationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.OptimizationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      set_apply_default_optimizations(from.apply_default_optimizations());
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  switch (from.optional_filter_fusion_case()) {
    case kFilterFusion: {
      set_filter_fusion(from.filter_fusion());
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      set_map_and_batch_fusion(from.map_and_batch_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      set_map_and_filter_fusion(from.map_and_filter_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_fusion_case()) {
    case kMapFusion: {
      set_map_fusion(from.map_fusion());
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_parallelization_case()) {
    case kMapParallelization: {
      set_map_parallelization(from.map_parallelization());
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_noop_elimination_case()) {
    case kNoopElimination: {
      set_noop_elimination(from.noop_elimination());
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_parallel_batch_case()) {
    case kParallelBatch: {
      set_parallel_batch(from.parallel_batch());
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  switch (from.optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      set_shuffle_and_repeat_fusion(from.shuffle_and_repeat_fusion());
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      set_filter_parallelization(from.filter_parallelization());
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
}

void OptimizationOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.OptimizationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationOptions::CopyFrom(const OptimizationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.OptimizationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationOptions::IsInitialized() const {
  return true;
}

void OptimizationOptions::Swap(OptimizationOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptimizationOptions::InternalSwap(OptimizationOptions* other) {
  using std::swap;
  swap(optional_apply_default_optimizations_, other->optional_apply_default_optimizations_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_filter_fusion_, other->optional_filter_fusion_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(optional_map_and_batch_fusion_, other->optional_map_and_batch_fusion_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(optional_map_and_filter_fusion_, other->optional_map_and_filter_fusion_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(optional_map_fusion_, other->optional_map_fusion_);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(optional_map_parallelization_, other->optional_map_parallelization_);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
  swap(optional_noop_elimination_, other->optional_noop_elimination_);
  swap(_oneof_case_[6], other->_oneof_case_[6]);
  swap(optional_parallel_batch_, other->optional_parallel_batch_);
  swap(_oneof_case_[7], other->_oneof_case_[7]);
  swap(optional_shuffle_and_repeat_fusion_, other->optional_shuffle_and_repeat_fusion_);
  swap(_oneof_case_[8], other->_oneof_case_[8]);
  swap(optional_filter_parallelization_, other->optional_filter_parallelization_);
  swap(_oneof_case_[9], other->_oneof_case_[9]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptimizationOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ThreadingOptions::InitAsDefaultInstance() {
  ::tensorflow::data::_ThreadingOptions_default_instance_.max_intra_op_parallelism_ = 0;
  ::tensorflow::data::_ThreadingOptions_default_instance_.private_threadpool_size_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThreadingOptions::kMaxIntraOpParallelismFieldNumber;
const int ThreadingOptions::kPrivateThreadpoolSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThreadingOptions::ThreadingOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_ThreadingOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.ThreadingOptions)
}
ThreadingOptions::ThreadingOptions(const ThreadingOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_optional_max_intra_op_parallelism();
  switch (from.optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      set_max_intra_op_parallelism(from.max_intra_op_parallelism());
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  clear_has_optional_private_threadpool_size();
  switch (from.optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      set_private_threadpool_size(from.private_threadpool_size());
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ThreadingOptions)
}

void ThreadingOptions::SharedCtor() {
  clear_has_optional_max_intra_op_parallelism();
  clear_has_optional_private_threadpool_size();
}

ThreadingOptions::~ThreadingOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ThreadingOptions)
  SharedDtor();
}

void ThreadingOptions::SharedDtor() {
  if (has_optional_max_intra_op_parallelism()) {
    clear_optional_max_intra_op_parallelism();
  }
  if (has_optional_private_threadpool_size()) {
    clear_optional_private_threadpool_size();
  }
}

void ThreadingOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ThreadingOptions::descriptor() {
  ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThreadingOptions& ThreadingOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_ThreadingOptions.base);
  return *internal_default_instance();
}


void ThreadingOptions::clear_optional_max_intra_op_parallelism() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ThreadingOptions)
  switch (optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET;
}

void ThreadingOptions::clear_optional_private_threadpool_size() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ThreadingOptions)
  switch (optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      // No need to clear
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET;
}


void ThreadingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ThreadingOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_max_intra_op_parallelism();
  clear_optional_private_threadpool_size();
  _internal_metadata_.Clear();
}

bool ThreadingOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.ThreadingOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_intra_op_parallelism = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_optional_max_intra_op_parallelism();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_max_intra_op_parallelism_.max_intra_op_parallelism_)));
          set_has_max_intra_op_parallelism();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 private_threadpool_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_optional_private_threadpool_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_private_threadpool_size_.private_threadpool_size_)));
          set_has_private_threadpool_size();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.ThreadingOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.ThreadingOptions)
  return false;
#undef DO_
}

void ThreadingOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.ThreadingOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_intra_op_parallelism = 1;
  if (has_max_intra_op_parallelism()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_intra_op_parallelism(), output);
  }

  // int32 private_threadpool_size = 2;
  if (has_private_threadpool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->private_threadpool_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.ThreadingOptions)
}

::google::protobuf::uint8* ThreadingOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ThreadingOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_intra_op_parallelism = 1;
  if (has_max_intra_op_parallelism()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_intra_op_parallelism(), target);
  }

  // int32 private_threadpool_size = 2;
  if (has_private_threadpool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->private_threadpool_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ThreadingOptions)
  return target;
}

size_t ThreadingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ThreadingOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (optional_max_intra_op_parallelism_case()) {
    // int32 max_intra_op_parallelism = 1;
    case kMaxIntraOpParallelism: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_intra_op_parallelism());
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  switch (optional_private_threadpool_size_case()) {
    // int32 private_threadpool_size = 2;
    case kPrivateThreadpoolSize: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->private_threadpool_size());
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadingOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.ThreadingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreadingOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThreadingOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.ThreadingOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.ThreadingOptions)
    MergeFrom(*source);
  }
}

void ThreadingOptions::MergeFrom(const ThreadingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ThreadingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      set_max_intra_op_parallelism(from.max_intra_op_parallelism());
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  switch (from.optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      set_private_threadpool_size(from.private_threadpool_size());
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
}

void ThreadingOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.ThreadingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadingOptions::CopyFrom(const ThreadingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ThreadingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadingOptions::IsInitialized() const {
  return true;
}

void ThreadingOptions::Swap(ThreadingOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThreadingOptions::InternalSwap(ThreadingOptions* other) {
  using std::swap;
  swap(optional_max_intra_op_parallelism_, other->optional_max_intra_op_parallelism_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_private_threadpool_size_, other->optional_private_threadpool_size_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ThreadingOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Options::InitAsDefaultInstance() {
  ::tensorflow::data::_Options_default_instance_.deterministic_ = false;
  ::tensorflow::data::_Options_default_instance_._instance.get_mutable()->autotune_options_ = const_cast< ::tensorflow::data::AutotuneOptions*>(
      ::tensorflow::data::AutotuneOptions::internal_default_instance());
  ::tensorflow::data::_Options_default_instance_._instance.get_mutable()->distribute_options_ = const_cast< ::tensorflow::data::DistributeOptions*>(
      ::tensorflow::data::DistributeOptions::internal_default_instance());
  ::tensorflow::data::_Options_default_instance_._instance.get_mutable()->optimization_options_ = const_cast< ::tensorflow::data::OptimizationOptions*>(
      ::tensorflow::data::OptimizationOptions::internal_default_instance());
  ::tensorflow::data::_Options_default_instance_.slack_ = false;
  ::tensorflow::data::_Options_default_instance_._instance.get_mutable()->threading_options_ = const_cast< ::tensorflow::data::ThreadingOptions*>(
      ::tensorflow::data::ThreadingOptions::internal_default_instance());
  ::tensorflow::data::_Options_default_instance_.external_state_policy_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options::kDeterministicFieldNumber;
const int Options::kAutotuneOptionsFieldNumber;
const int Options::kDistributeOptionsFieldNumber;
const int Options::kOptimizationOptionsFieldNumber;
const int Options::kSlackFieldNumber;
const int Options::kThreadingOptionsFieldNumber;
const int Options::kExternalStatePolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options::Options()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_Options.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.data.Options)
}
Options::Options(const Options& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_distribute_options()) {
    distribute_options_ = new ::tensorflow::data::DistributeOptions(*from.distribute_options_);
  } else {
    distribute_options_ = NULL;
  }
  if (from.has_optimization_options()) {
    optimization_options_ = new ::tensorflow::data::OptimizationOptions(*from.optimization_options_);
  } else {
    optimization_options_ = NULL;
  }
  if (from.has_threading_options()) {
    threading_options_ = new ::tensorflow::data::ThreadingOptions(*from.threading_options_);
  } else {
    threading_options_ = NULL;
  }
  if (from.has_autotune_options()) {
    autotune_options_ = new ::tensorflow::data::AutotuneOptions(*from.autotune_options_);
  } else {
    autotune_options_ = NULL;
  }
  clear_has_optional_deterministic();
  switch (from.optional_deterministic_case()) {
    case kDeterministic: {
      set_deterministic(from.deterministic());
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  clear_has_optional_slack();
  switch (from.optional_slack_case()) {
    case kSlack: {
      set_slack(from.slack());
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  clear_has_optional_external_state_policy();
  switch (from.optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      set_external_state_policy(from.external_state_policy());
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.Options)
}

void Options::SharedCtor() {
  ::memset(&distribute_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autotune_options_) -
      reinterpret_cast<char*>(&distribute_options_)) + sizeof(autotune_options_));
  clear_has_optional_deterministic();
  clear_has_optional_slack();
  clear_has_optional_external_state_policy();
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:tensorflow.data.Options)
  SharedDtor();
}

void Options::SharedDtor() {
  if (this != internal_default_instance()) delete distribute_options_;
  if (this != internal_default_instance()) delete optimization_options_;
  if (this != internal_default_instance()) delete threading_options_;
  if (this != internal_default_instance()) delete autotune_options_;
  if (has_optional_deterministic()) {
    clear_optional_deterministic();
  }
  if (has_optional_slack()) {
    clear_optional_slack();
  }
  if (has_optional_external_state_policy()) {
    clear_optional_external_state_policy();
  }
}

void Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Options::descriptor() {
  ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Options& Options::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::scc_info_Options.base);
  return *internal_default_instance();
}


void Options::clear_optional_deterministic() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  switch (optional_deterministic_case()) {
    case kDeterministic: {
      // No need to clear
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_DETERMINISTIC_NOT_SET;
}

void Options::clear_optional_slack() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  switch (optional_slack_case()) {
    case kSlack: {
      // No need to clear
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_SLACK_NOT_SET;
}

void Options::clear_optional_external_state_policy() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  switch (optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      // No need to clear
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET;
}


void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && distribute_options_ != NULL) {
    delete distribute_options_;
  }
  distribute_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && optimization_options_ != NULL) {
    delete optimization_options_;
  }
  optimization_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && threading_options_ != NULL) {
    delete threading_options_;
  }
  threading_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && autotune_options_ != NULL) {
    delete autotune_options_;
  }
  autotune_options_ = NULL;
  clear_optional_deterministic();
  clear_optional_slack();
  clear_optional_external_state_policy();
  _internal_metadata_.Clear();
}

bool Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.data.Options)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool deterministic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_optional_deterministic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_deterministic_.deterministic_)));
          set_has_deterministic();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.DistributeOptions distribute_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distribute_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.OptimizationOptions optimization_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optimization_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool slack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_optional_slack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_slack_.slack_)));
          set_has_slack();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ThreadingOptions threading_options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threading_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_external_state_policy(static_cast< ::tensorflow::data::ExternalStatePolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.data.AutotuneOptions autotune_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_autotune_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.data.Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.data.Options)
  return false;
#undef DO_
}

void Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.data.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deterministic = 1;
  if (has_deterministic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->deterministic(), output);
  }

  // .tensorflow.data.DistributeOptions distribute_options = 2;
  if (this->has_distribute_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_distribute_options(), output);
  }

  // .tensorflow.data.OptimizationOptions optimization_options = 3;
  if (this->has_optimization_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_optimization_options(), output);
  }

  // bool slack = 4;
  if (has_slack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->slack(), output);
  }

  // .tensorflow.data.ThreadingOptions threading_options = 5;
  if (this->has_threading_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_threading_options(), output);
  }

  // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
  if (has_external_state_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->external_state_policy(), output);
  }

  // .tensorflow.data.AutotuneOptions autotune_options = 7;
  if (this->has_autotune_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_autotune_options(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.data.Options)
}

::google::protobuf::uint8* Options::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deterministic = 1;
  if (has_deterministic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->deterministic(), target);
  }

  // .tensorflow.data.DistributeOptions distribute_options = 2;
  if (this->has_distribute_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_distribute_options(), deterministic, target);
  }

  // .tensorflow.data.OptimizationOptions optimization_options = 3;
  if (this->has_optimization_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_optimization_options(), deterministic, target);
  }

  // bool slack = 4;
  if (has_slack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->slack(), target);
  }

  // .tensorflow.data.ThreadingOptions threading_options = 5;
  if (this->has_threading_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_threading_options(), deterministic, target);
  }

  // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
  if (has_external_state_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->external_state_policy(), target);
  }

  // .tensorflow.data.AutotuneOptions autotune_options = 7;
  if (this->has_autotune_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_autotune_options(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.Options)
  return target;
}

size_t Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.Options)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.data.DistributeOptions distribute_options = 2;
  if (this->has_distribute_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distribute_options_);
  }

  // .tensorflow.data.OptimizationOptions optimization_options = 3;
  if (this->has_optimization_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optimization_options_);
  }

  // .tensorflow.data.ThreadingOptions threading_options = 5;
  if (this->has_threading_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *threading_options_);
  }

  // .tensorflow.data.AutotuneOptions autotune_options = 7;
  if (this->has_autotune_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *autotune_options_);
  }

  switch (optional_deterministic_case()) {
    // bool deterministic = 1;
    case kDeterministic: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  switch (optional_slack_case()) {
    // bool slack = 4;
    case kSlack: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  switch (optional_external_state_policy_case()) {
    // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
    case kExternalStatePolicy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->external_state_policy());
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Options::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.data.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const Options* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Options>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.data.Options)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.data.Options)
    MergeFrom(*source);
  }
}

void Options::MergeFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_distribute_options()) {
    mutable_distribute_options()->::tensorflow::data::DistributeOptions::MergeFrom(from.distribute_options());
  }
  if (from.has_optimization_options()) {
    mutable_optimization_options()->::tensorflow::data::OptimizationOptions::MergeFrom(from.optimization_options());
  }
  if (from.has_threading_options()) {
    mutable_threading_options()->::tensorflow::data::ThreadingOptions::MergeFrom(from.threading_options());
  }
  if (from.has_autotune_options()) {
    mutable_autotune_options()->::tensorflow::data::AutotuneOptions::MergeFrom(from.autotune_options());
  }
  switch (from.optional_deterministic_case()) {
    case kDeterministic: {
      set_deterministic(from.deterministic());
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  switch (from.optional_slack_case()) {
    case kSlack: {
      set_slack(from.slack());
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  switch (from.optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      set_external_state_policy(from.external_state_policy());
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
}

void Options::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.data.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {
  return true;
}

void Options::Swap(Options* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options::InternalSwap(Options* other) {
  using std::swap;
  swap(distribute_options_, other->distribute_options_);
  swap(optimization_options_, other->optimization_options_);
  swap(threading_options_, other->threading_options_);
  swap(autotune_options_, other->autotune_options_);
  swap(optional_deterministic_, other->optional_deterministic_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_slack_, other->optional_slack_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(optional_external_state_policy_, other->optional_external_state_policy_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Options::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::AutotuneOptions* Arena::CreateMaybeMessage< ::tensorflow::data::AutotuneOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::AutotuneOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::CardinalityOptions* Arena::CreateMaybeMessage< ::tensorflow::data::CardinalityOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::CardinalityOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::DistributeOptions* Arena::CreateMaybeMessage< ::tensorflow::data::DistributeOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::DistributeOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::OptimizationOptions* Arena::CreateMaybeMessage< ::tensorflow::data::OptimizationOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::OptimizationOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::ThreadingOptions* Arena::CreateMaybeMessage< ::tensorflow::data::ThreadingOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::ThreadingOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::data::Options* Arena::CreateMaybeMessage< ::tensorflow::data::Options >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::data::Options >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
