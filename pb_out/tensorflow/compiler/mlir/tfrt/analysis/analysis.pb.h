// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/mlir/tfrt/analysis/analysis.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto 

namespace protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto
namespace mlir {
namespace tfrt {
class CompatibilityAnalysisProto;
class CompatibilityAnalysisProtoDefaultTypeInternal;
extern CompatibilityAnalysisProtoDefaultTypeInternal _CompatibilityAnalysisProto_default_instance_;
class CompatibilityAnalysisProto_OpInfo;
class CompatibilityAnalysisProto_OpInfoDefaultTypeInternal;
extern CompatibilityAnalysisProto_OpInfoDefaultTypeInternal _CompatibilityAnalysisProto_OpInfo_default_instance_;
class CompatibilityAnalysisProto_OpsEntry_DoNotUse;
class CompatibilityAnalysisProto_OpsEntry_DoNotUseDefaultTypeInternal;
extern CompatibilityAnalysisProto_OpsEntry_DoNotUseDefaultTypeInternal _CompatibilityAnalysisProto_OpsEntry_DoNotUse_default_instance_;
class CompatibilityAnalysisReportProto;
class CompatibilityAnalysisReportProtoDefaultTypeInternal;
extern CompatibilityAnalysisReportProtoDefaultTypeInternal _CompatibilityAnalysisReportProto_default_instance_;
}  // namespace tfrt
}  // namespace mlir
namespace google {
namespace protobuf {
template<> ::mlir::tfrt::CompatibilityAnalysisProto* Arena::CreateMaybeMessage<::mlir::tfrt::CompatibilityAnalysisProto>(Arena*);
template<> ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo* Arena::CreateMaybeMessage<::mlir::tfrt::CompatibilityAnalysisProto_OpInfo>(Arena*);
template<> ::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse* Arena::CreateMaybeMessage<::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse>(Arena*);
template<> ::mlir::tfrt::CompatibilityAnalysisReportProto* Arena::CreateMaybeMessage<::mlir::tfrt::CompatibilityAnalysisReportProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mlir {
namespace tfrt {

// ===================================================================

class CompatibilityAnalysisReportProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.tfrt.CompatibilityAnalysisReportProto) */ {
 public:
  CompatibilityAnalysisReportProto();
  virtual ~CompatibilityAnalysisReportProto();

  CompatibilityAnalysisReportProto(const CompatibilityAnalysisReportProto& from);

  inline CompatibilityAnalysisReportProto& operator=(const CompatibilityAnalysisReportProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompatibilityAnalysisReportProto(CompatibilityAnalysisReportProto&& from) noexcept
    : CompatibilityAnalysisReportProto() {
    *this = ::std::move(from);
  }

  inline CompatibilityAnalysisReportProto& operator=(CompatibilityAnalysisReportProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompatibilityAnalysisReportProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompatibilityAnalysisReportProto* internal_default_instance() {
    return reinterpret_cast<const CompatibilityAnalysisReportProto*>(
               &_CompatibilityAnalysisReportProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CompatibilityAnalysisReportProto* other);
  friend void swap(CompatibilityAnalysisReportProto& a, CompatibilityAnalysisReportProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompatibilityAnalysisReportProto* New() const final {
    return CreateMaybeMessage<CompatibilityAnalysisReportProto>(NULL);
  }

  CompatibilityAnalysisReportProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompatibilityAnalysisReportProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompatibilityAnalysisReportProto& from);
  void MergeFrom(const CompatibilityAnalysisReportProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompatibilityAnalysisReportProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string method_name = 6;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 6;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bool unknown_dialect = 1;
  void clear_unknown_dialect();
  static const int kUnknownDialectFieldNumber = 1;
  bool unknown_dialect() const;
  void set_unknown_dialect(bool value);

  // bool ref_variable = 2;
  void clear_ref_variable();
  static const int kRefVariableFieldNumber = 2;
  bool ref_variable() const;
  void set_ref_variable(bool value);

  // bool incompatible_variable = 3;
  void clear_incompatible_variable();
  static const int kIncompatibleVariableFieldNumber = 3;
  bool incompatible_variable() const;
  void set_incompatible_variable(bool value);

  // bool incompatible_attribute = 4;
  void clear_incompatible_attribute();
  static const int kIncompatibleAttributeFieldNumber = 4;
  bool incompatible_attribute() const;
  void set_incompatible_attribute(bool value);

  // bool control_flow_v1 = 5;
  void clear_control_flow_v1();
  static const int kControlFlowV1FieldNumber = 5;
  bool control_flow_v1() const;
  void set_control_flow_v1(bool value);

  // @@protoc_insertion_point(class_scope:mlir.tfrt.CompatibilityAnalysisReportProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  bool unknown_dialect_;
  bool ref_variable_;
  bool incompatible_variable_;
  bool incompatible_attribute_;
  bool control_flow_v1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompatibilityAnalysisProto_OpInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.tfrt.CompatibilityAnalysisProto.OpInfo) */ {
 public:
  CompatibilityAnalysisProto_OpInfo();
  virtual ~CompatibilityAnalysisProto_OpInfo();

  CompatibilityAnalysisProto_OpInfo(const CompatibilityAnalysisProto_OpInfo& from);

  inline CompatibilityAnalysisProto_OpInfo& operator=(const CompatibilityAnalysisProto_OpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompatibilityAnalysisProto_OpInfo(CompatibilityAnalysisProto_OpInfo&& from) noexcept
    : CompatibilityAnalysisProto_OpInfo() {
    *this = ::std::move(from);
  }

  inline CompatibilityAnalysisProto_OpInfo& operator=(CompatibilityAnalysisProto_OpInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompatibilityAnalysisProto_OpInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompatibilityAnalysisProto_OpInfo* internal_default_instance() {
    return reinterpret_cast<const CompatibilityAnalysisProto_OpInfo*>(
               &_CompatibilityAnalysisProto_OpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CompatibilityAnalysisProto_OpInfo* other);
  friend void swap(CompatibilityAnalysisProto_OpInfo& a, CompatibilityAnalysisProto_OpInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompatibilityAnalysisProto_OpInfo* New() const final {
    return CreateMaybeMessage<CompatibilityAnalysisProto_OpInfo>(NULL);
  }

  CompatibilityAnalysisProto_OpInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompatibilityAnalysisProto_OpInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompatibilityAnalysisProto_OpInfo& from);
  void MergeFrom(const CompatibilityAnalysisProto_OpInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompatibilityAnalysisProto_OpInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mlir.tfrt.CompatibilityAnalysisReportProto report = 2;
  bool has_report() const;
  void clear_report();
  static const int kReportFieldNumber = 2;
  private:
  const ::mlir::tfrt::CompatibilityAnalysisReportProto& _internal_report() const;
  public:
  const ::mlir::tfrt::CompatibilityAnalysisReportProto& report() const;
  ::mlir::tfrt::CompatibilityAnalysisReportProto* release_report();
  ::mlir::tfrt::CompatibilityAnalysisReportProto* mutable_report();
  void set_allocated_report(::mlir::tfrt::CompatibilityAnalysisReportProto* report);

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mlir::tfrt::CompatibilityAnalysisReportProto* report_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompatibilityAnalysisProto_OpsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CompatibilityAnalysisProto_OpsEntry_DoNotUse, 
    ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CompatibilityAnalysisProto_OpsEntry_DoNotUse, 
    ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CompatibilityAnalysisProto_OpsEntry_DoNotUse();
  CompatibilityAnalysisProto_OpsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CompatibilityAnalysisProto_OpsEntry_DoNotUse& other);
  static const CompatibilityAnalysisProto_OpsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CompatibilityAnalysisProto_OpsEntry_DoNotUse*>(&_CompatibilityAnalysisProto_OpsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CompatibilityAnalysisProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.tfrt.CompatibilityAnalysisProto) */ {
 public:
  CompatibilityAnalysisProto();
  virtual ~CompatibilityAnalysisProto();

  CompatibilityAnalysisProto(const CompatibilityAnalysisProto& from);

  inline CompatibilityAnalysisProto& operator=(const CompatibilityAnalysisProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompatibilityAnalysisProto(CompatibilityAnalysisProto&& from) noexcept
    : CompatibilityAnalysisProto() {
    *this = ::std::move(from);
  }

  inline CompatibilityAnalysisProto& operator=(CompatibilityAnalysisProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompatibilityAnalysisProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompatibilityAnalysisProto* internal_default_instance() {
    return reinterpret_cast<const CompatibilityAnalysisProto*>(
               &_CompatibilityAnalysisProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CompatibilityAnalysisProto* other);
  friend void swap(CompatibilityAnalysisProto& a, CompatibilityAnalysisProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompatibilityAnalysisProto* New() const final {
    return CreateMaybeMessage<CompatibilityAnalysisProto>(NULL);
  }

  CompatibilityAnalysisProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompatibilityAnalysisProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompatibilityAnalysisProto& from);
  void MergeFrom(const CompatibilityAnalysisProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompatibilityAnalysisProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CompatibilityAnalysisProto_OpInfo OpInfo;

  // accessors -------------------------------------------------------

  // map<string, .mlir.tfrt.CompatibilityAnalysisProto.OpInfo> ops = 2;
  int ops_size() const;
  void clear_ops();
  static const int kOpsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >&
      ops() const;
  ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >*
      mutable_ops();

  // .mlir.tfrt.CompatibilityAnalysisReportProto summary = 1;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  private:
  const ::mlir::tfrt::CompatibilityAnalysisReportProto& _internal_summary() const;
  public:
  const ::mlir::tfrt::CompatibilityAnalysisReportProto& summary() const;
  ::mlir::tfrt::CompatibilityAnalysisReportProto* release_summary();
  ::mlir::tfrt::CompatibilityAnalysisReportProto* mutable_summary();
  void set_allocated_summary(::mlir::tfrt::CompatibilityAnalysisReportProto* summary);

  // @@protoc_insertion_point(class_scope:mlir.tfrt.CompatibilityAnalysisProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CompatibilityAnalysisProto_OpsEntry_DoNotUse,
      ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ops_;
  ::mlir::tfrt::CompatibilityAnalysisReportProto* summary_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompatibilityAnalysisReportProto

// bool unknown_dialect = 1;
inline void CompatibilityAnalysisReportProto::clear_unknown_dialect() {
  unknown_dialect_ = false;
}
inline bool CompatibilityAnalysisReportProto::unknown_dialect() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisReportProto.unknown_dialect)
  return unknown_dialect_;
}
inline void CompatibilityAnalysisReportProto::set_unknown_dialect(bool value) {
  
  unknown_dialect_ = value;
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisReportProto.unknown_dialect)
}

// bool ref_variable = 2;
inline void CompatibilityAnalysisReportProto::clear_ref_variable() {
  ref_variable_ = false;
}
inline bool CompatibilityAnalysisReportProto::ref_variable() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisReportProto.ref_variable)
  return ref_variable_;
}
inline void CompatibilityAnalysisReportProto::set_ref_variable(bool value) {
  
  ref_variable_ = value;
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisReportProto.ref_variable)
}

// bool incompatible_variable = 3;
inline void CompatibilityAnalysisReportProto::clear_incompatible_variable() {
  incompatible_variable_ = false;
}
inline bool CompatibilityAnalysisReportProto::incompatible_variable() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisReportProto.incompatible_variable)
  return incompatible_variable_;
}
inline void CompatibilityAnalysisReportProto::set_incompatible_variable(bool value) {
  
  incompatible_variable_ = value;
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisReportProto.incompatible_variable)
}

// bool incompatible_attribute = 4;
inline void CompatibilityAnalysisReportProto::clear_incompatible_attribute() {
  incompatible_attribute_ = false;
}
inline bool CompatibilityAnalysisReportProto::incompatible_attribute() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisReportProto.incompatible_attribute)
  return incompatible_attribute_;
}
inline void CompatibilityAnalysisReportProto::set_incompatible_attribute(bool value) {
  
  incompatible_attribute_ = value;
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisReportProto.incompatible_attribute)
}

// bool control_flow_v1 = 5;
inline void CompatibilityAnalysisReportProto::clear_control_flow_v1() {
  control_flow_v1_ = false;
}
inline bool CompatibilityAnalysisReportProto::control_flow_v1() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisReportProto.control_flow_v1)
  return control_flow_v1_;
}
inline void CompatibilityAnalysisReportProto::set_control_flow_v1(bool value) {
  
  control_flow_v1_ = value;
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisReportProto.control_flow_v1)
}

// string method_name = 6;
inline void CompatibilityAnalysisReportProto::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompatibilityAnalysisReportProto::method_name() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
  return method_name_.GetNoArena();
}
inline void CompatibilityAnalysisReportProto::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
}
#if LANG_CXX11
inline void CompatibilityAnalysisReportProto::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
}
#endif
inline void CompatibilityAnalysisReportProto::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
}
inline void CompatibilityAnalysisReportProto::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
}
inline ::std::string* CompatibilityAnalysisReportProto::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompatibilityAnalysisReportProto::release_method_name() {
  // @@protoc_insertion_point(field_release:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompatibilityAnalysisReportProto::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:mlir.tfrt.CompatibilityAnalysisReportProto.method_name)
}

// -------------------------------------------------------------------

// CompatibilityAnalysisProto_OpInfo

// int32 count = 1;
inline void CompatibilityAnalysisProto_OpInfo::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 CompatibilityAnalysisProto_OpInfo::count() const {
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisProto.OpInfo.count)
  return count_;
}
inline void CompatibilityAnalysisProto_OpInfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:mlir.tfrt.CompatibilityAnalysisProto.OpInfo.count)
}

// .mlir.tfrt.CompatibilityAnalysisReportProto report = 2;
inline bool CompatibilityAnalysisProto_OpInfo::has_report() const {
  return this != internal_default_instance() && report_ != NULL;
}
inline void CompatibilityAnalysisProto_OpInfo::clear_report() {
  if (GetArenaNoVirtual() == NULL && report_ != NULL) {
    delete report_;
  }
  report_ = NULL;
}
inline const ::mlir::tfrt::CompatibilityAnalysisReportProto& CompatibilityAnalysisProto_OpInfo::_internal_report() const {
  return *report_;
}
inline const ::mlir::tfrt::CompatibilityAnalysisReportProto& CompatibilityAnalysisProto_OpInfo::report() const {
  const ::mlir::tfrt::CompatibilityAnalysisReportProto* p = report_;
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisProto.OpInfo.report)
  return p != NULL ? *p : *reinterpret_cast<const ::mlir::tfrt::CompatibilityAnalysisReportProto*>(
      &::mlir::tfrt::_CompatibilityAnalysisReportProto_default_instance_);
}
inline ::mlir::tfrt::CompatibilityAnalysisReportProto* CompatibilityAnalysisProto_OpInfo::release_report() {
  // @@protoc_insertion_point(field_release:mlir.tfrt.CompatibilityAnalysisProto.OpInfo.report)
  
  ::mlir::tfrt::CompatibilityAnalysisReportProto* temp = report_;
  report_ = NULL;
  return temp;
}
inline ::mlir::tfrt::CompatibilityAnalysisReportProto* CompatibilityAnalysisProto_OpInfo::mutable_report() {
  
  if (report_ == NULL) {
    auto* p = CreateMaybeMessage<::mlir::tfrt::CompatibilityAnalysisReportProto>(GetArenaNoVirtual());
    report_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mlir.tfrt.CompatibilityAnalysisProto.OpInfo.report)
  return report_;
}
inline void CompatibilityAnalysisProto_OpInfo::set_allocated_report(::mlir::tfrt::CompatibilityAnalysisReportProto* report) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete report_;
  }
  if (report) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      report = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    
  } else {
    
  }
  report_ = report;
  // @@protoc_insertion_point(field_set_allocated:mlir.tfrt.CompatibilityAnalysisProto.OpInfo.report)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CompatibilityAnalysisProto

// .mlir.tfrt.CompatibilityAnalysisReportProto summary = 1;
inline bool CompatibilityAnalysisProto::has_summary() const {
  return this != internal_default_instance() && summary_ != NULL;
}
inline void CompatibilityAnalysisProto::clear_summary() {
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) {
    delete summary_;
  }
  summary_ = NULL;
}
inline const ::mlir::tfrt::CompatibilityAnalysisReportProto& CompatibilityAnalysisProto::_internal_summary() const {
  return *summary_;
}
inline const ::mlir::tfrt::CompatibilityAnalysisReportProto& CompatibilityAnalysisProto::summary() const {
  const ::mlir::tfrt::CompatibilityAnalysisReportProto* p = summary_;
  // @@protoc_insertion_point(field_get:mlir.tfrt.CompatibilityAnalysisProto.summary)
  return p != NULL ? *p : *reinterpret_cast<const ::mlir::tfrt::CompatibilityAnalysisReportProto*>(
      &::mlir::tfrt::_CompatibilityAnalysisReportProto_default_instance_);
}
inline ::mlir::tfrt::CompatibilityAnalysisReportProto* CompatibilityAnalysisProto::release_summary() {
  // @@protoc_insertion_point(field_release:mlir.tfrt.CompatibilityAnalysisProto.summary)
  
  ::mlir::tfrt::CompatibilityAnalysisReportProto* temp = summary_;
  summary_ = NULL;
  return temp;
}
inline ::mlir::tfrt::CompatibilityAnalysisReportProto* CompatibilityAnalysisProto::mutable_summary() {
  
  if (summary_ == NULL) {
    auto* p = CreateMaybeMessage<::mlir::tfrt::CompatibilityAnalysisReportProto>(GetArenaNoVirtual());
    summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mlir.tfrt.CompatibilityAnalysisProto.summary)
  return summary_;
}
inline void CompatibilityAnalysisProto::set_allocated_summary(::mlir::tfrt::CompatibilityAnalysisReportProto* summary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete summary_;
  }
  if (summary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      summary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    
  } else {
    
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:mlir.tfrt.CompatibilityAnalysisProto.summary)
}

// map<string, .mlir.tfrt.CompatibilityAnalysisProto.OpInfo> ops = 2;
inline int CompatibilityAnalysisProto::ops_size() const {
  return ops_.size();
}
inline void CompatibilityAnalysisProto::clear_ops() {
  ops_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >&
CompatibilityAnalysisProto::ops() const {
  // @@protoc_insertion_point(field_map:mlir.tfrt.CompatibilityAnalysisProto.ops)
  return ops_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >*
CompatibilityAnalysisProto::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_map:mlir.tfrt.CompatibilityAnalysisProto.ops)
  return ops_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tfrt
}  // namespace mlir

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto
