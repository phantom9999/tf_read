// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/mlir/tfrt/analysis/analysis.proto

#include "tensorflow/compiler/mlir/tfrt/analysis/analysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CompatibilityAnalysisReportProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CompatibilityAnalysisProto_OpInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CompatibilityAnalysisProto_OpsEntry_DoNotUse;
}  // namespace protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto
namespace mlir {
namespace tfrt {
class CompatibilityAnalysisReportProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompatibilityAnalysisReportProto>
      _instance;
} _CompatibilityAnalysisReportProto_default_instance_;
class CompatibilityAnalysisProto_OpInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompatibilityAnalysisProto_OpInfo>
      _instance;
} _CompatibilityAnalysisProto_OpInfo_default_instance_;
class CompatibilityAnalysisProto_OpsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompatibilityAnalysisProto_OpsEntry_DoNotUse>
      _instance;
} _CompatibilityAnalysisProto_OpsEntry_DoNotUse_default_instance_;
class CompatibilityAnalysisProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompatibilityAnalysisProto>
      _instance;
} _CompatibilityAnalysisProto_default_instance_;
}  // namespace tfrt
}  // namespace mlir
namespace protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto {
static void InitDefaultsCompatibilityAnalysisReportProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mlir::tfrt::_CompatibilityAnalysisReportProto_default_instance_;
    new (ptr) ::mlir::tfrt::CompatibilityAnalysisReportProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mlir::tfrt::CompatibilityAnalysisReportProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CompatibilityAnalysisReportProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompatibilityAnalysisReportProto}, {}};

static void InitDefaultsCompatibilityAnalysisProto_OpInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mlir::tfrt::_CompatibilityAnalysisProto_OpInfo_default_instance_;
    new (ptr) ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CompatibilityAnalysisProto_OpInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCompatibilityAnalysisProto_OpInfo}, {
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisReportProto.base,}};

static void InitDefaultsCompatibilityAnalysisProto_OpsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mlir::tfrt::_CompatibilityAnalysisProto_OpsEntry_DoNotUse_default_instance_;
    new (ptr) ::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse();
  }
  ::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CompatibilityAnalysisProto_OpsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCompatibilityAnalysisProto_OpsEntry_DoNotUse}, {
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisProto_OpInfo.base,}};

static void InitDefaultsCompatibilityAnalysisProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mlir::tfrt::_CompatibilityAnalysisProto_default_instance_;
    new (ptr) ::mlir::tfrt::CompatibilityAnalysisProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mlir::tfrt::CompatibilityAnalysisProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CompatibilityAnalysisProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCompatibilityAnalysisProto}, {
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisReportProto.base,
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisProto_OpsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CompatibilityAnalysisReportProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompatibilityAnalysisProto_OpInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompatibilityAnalysisProto_OpsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompatibilityAnalysisProto.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, unknown_dialect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, ref_variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, incompatible_variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, incompatible_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, control_flow_v1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisReportProto, method_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpInfo, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpInfo, report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto, summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mlir::tfrt::CompatibilityAnalysisProto, ops_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mlir::tfrt::CompatibilityAnalysisReportProto)},
  { 11, -1, sizeof(::mlir::tfrt::CompatibilityAnalysisProto_OpInfo)},
  { 18, 25, sizeof(::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse)},
  { 27, -1, sizeof(::mlir::tfrt::CompatibilityAnalysisProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mlir::tfrt::_CompatibilityAnalysisReportProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mlir::tfrt::_CompatibilityAnalysisProto_OpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mlir::tfrt::_CompatibilityAnalysisProto_OpsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mlir::tfrt::_CompatibilityAnalysisProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/compiler/mlir/tfrt/analysis/analysis.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5tensorflow/compiler/mlir/tfrt/analysis"
      "/analysis.proto\022\tmlir.tfrt\"\276\001\n Compatibi"
      "lityAnalysisReportProto\022\027\n\017unknown_diale"
      "ct\030\001 \001(\010\022\024\n\014ref_variable\030\002 \001(\010\022\035\n\025incomp"
      "atible_variable\030\003 \001(\010\022\036\n\026incompatible_at"
      "tribute\030\004 \001(\010\022\027\n\017control_flow_v1\030\005 \001(\010\022\023"
      "\n\013method_name\030\006 \001(\t\"\307\002\n\032CompatibilityAna"
      "lysisProto\022<\n\007summary\030\001 \001(\0132+.mlir.tfrt."
      "CompatibilityAnalysisReportProto\022;\n\003ops\030"
      "\002 \003(\0132..mlir.tfrt.CompatibilityAnalysisP"
      "roto.OpsEntry\032T\n\006OpInfo\022\r\n\005count\030\001 \001(\005\022;"
      "\n\006report\030\002 \001(\0132+.mlir.tfrt.Compatibility"
      "AnalysisReportProto\032X\n\010OpsEntry\022\013\n\003key\030\001"
      " \001(\t\022;\n\005value\030\002 \001(\0132,.mlir.tfrt.Compatib"
      "ilityAnalysisProto.OpInfo:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/compiler/mlir/tfrt/analysis/analysis.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto
namespace mlir {
namespace tfrt {

// ===================================================================

void CompatibilityAnalysisReportProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompatibilityAnalysisReportProto::kUnknownDialectFieldNumber;
const int CompatibilityAnalysisReportProto::kRefVariableFieldNumber;
const int CompatibilityAnalysisReportProto::kIncompatibleVariableFieldNumber;
const int CompatibilityAnalysisReportProto::kIncompatibleAttributeFieldNumber;
const int CompatibilityAnalysisReportProto::kControlFlowV1FieldNumber;
const int CompatibilityAnalysisReportProto::kMethodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompatibilityAnalysisReportProto::CompatibilityAnalysisReportProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisReportProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mlir.tfrt.CompatibilityAnalysisReportProto)
}
CompatibilityAnalysisReportProto::CompatibilityAnalysisReportProto(const CompatibilityAnalysisReportProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  ::memcpy(&unknown_dialect_, &from.unknown_dialect_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_flow_v1_) -
    reinterpret_cast<char*>(&unknown_dialect_)) + sizeof(control_flow_v1_));
  // @@protoc_insertion_point(copy_constructor:mlir.tfrt.CompatibilityAnalysisReportProto)
}

void CompatibilityAnalysisReportProto::SharedCtor() {
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unknown_dialect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_flow_v1_) -
      reinterpret_cast<char*>(&unknown_dialect_)) + sizeof(control_flow_v1_));
}

CompatibilityAnalysisReportProto::~CompatibilityAnalysisReportProto() {
  // @@protoc_insertion_point(destructor:mlir.tfrt.CompatibilityAnalysisReportProto)
  SharedDtor();
}

void CompatibilityAnalysisReportProto::SharedDtor() {
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompatibilityAnalysisReportProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CompatibilityAnalysisReportProto::descriptor() {
  ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompatibilityAnalysisReportProto& CompatibilityAnalysisReportProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisReportProto.base);
  return *internal_default_instance();
}


void CompatibilityAnalysisReportProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unknown_dialect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_flow_v1_) -
      reinterpret_cast<char*>(&unknown_dialect_)) + sizeof(control_flow_v1_));
  _internal_metadata_.Clear();
}

bool CompatibilityAnalysisReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool unknown_dialect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unknown_dialect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ref_variable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ref_variable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool incompatible_variable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incompatible_variable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool incompatible_attribute = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incompatible_attribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool control_flow_v1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &control_flow_v1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mlir.tfrt.CompatibilityAnalysisReportProto.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mlir.tfrt.CompatibilityAnalysisReportProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mlir.tfrt.CompatibilityAnalysisReportProto)
  return false;
#undef DO_
}

void CompatibilityAnalysisReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool unknown_dialect = 1;
  if (this->unknown_dialect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->unknown_dialect(), output);
  }

  // bool ref_variable = 2;
  if (this->ref_variable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ref_variable(), output);
  }

  // bool incompatible_variable = 3;
  if (this->incompatible_variable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->incompatible_variable(), output);
  }

  // bool incompatible_attribute = 4;
  if (this->incompatible_attribute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->incompatible_attribute(), output);
  }

  // bool control_flow_v1 = 5;
  if (this->control_flow_v1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->control_flow_v1(), output);
  }

  // string method_name = 6;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mlir.tfrt.CompatibilityAnalysisReportProto.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->method_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mlir.tfrt.CompatibilityAnalysisReportProto)
}

::google::protobuf::uint8* CompatibilityAnalysisReportProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool unknown_dialect = 1;
  if (this->unknown_dialect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->unknown_dialect(), target);
  }

  // bool ref_variable = 2;
  if (this->ref_variable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ref_variable(), target);
  }

  // bool incompatible_variable = 3;
  if (this->incompatible_variable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->incompatible_variable(), target);
  }

  // bool incompatible_attribute = 4;
  if (this->incompatible_attribute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->incompatible_attribute(), target);
  }

  // bool control_flow_v1 = 5;
  if (this->control_flow_v1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->control_flow_v1(), target);
  }

  // string method_name = 6;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mlir.tfrt.CompatibilityAnalysisReportProto.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->method_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mlir.tfrt.CompatibilityAnalysisReportProto)
  return target;
}

size_t CompatibilityAnalysisReportProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string method_name = 6;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // bool unknown_dialect = 1;
  if (this->unknown_dialect() != 0) {
    total_size += 1 + 1;
  }

  // bool ref_variable = 2;
  if (this->ref_variable() != 0) {
    total_size += 1 + 1;
  }

  // bool incompatible_variable = 3;
  if (this->incompatible_variable() != 0) {
    total_size += 1 + 1;
  }

  // bool incompatible_attribute = 4;
  if (this->incompatible_attribute() != 0) {
    total_size += 1 + 1;
  }

  // bool control_flow_v1 = 5;
  if (this->control_flow_v1() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompatibilityAnalysisReportProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CompatibilityAnalysisReportProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompatibilityAnalysisReportProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mlir.tfrt.CompatibilityAnalysisReportProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mlir.tfrt.CompatibilityAnalysisReportProto)
    MergeFrom(*source);
  }
}

void CompatibilityAnalysisReportProto::MergeFrom(const CompatibilityAnalysisReportProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.unknown_dialect() != 0) {
    set_unknown_dialect(from.unknown_dialect());
  }
  if (from.ref_variable() != 0) {
    set_ref_variable(from.ref_variable());
  }
  if (from.incompatible_variable() != 0) {
    set_incompatible_variable(from.incompatible_variable());
  }
  if (from.incompatible_attribute() != 0) {
    set_incompatible_attribute(from.incompatible_attribute());
  }
  if (from.control_flow_v1() != 0) {
    set_control_flow_v1(from.control_flow_v1());
  }
}

void CompatibilityAnalysisReportProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompatibilityAnalysisReportProto::CopyFrom(const CompatibilityAnalysisReportProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mlir.tfrt.CompatibilityAnalysisReportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompatibilityAnalysisReportProto::IsInitialized() const {
  return true;
}

void CompatibilityAnalysisReportProto::Swap(CompatibilityAnalysisReportProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompatibilityAnalysisReportProto::InternalSwap(CompatibilityAnalysisReportProto* other) {
  using std::swap;
  method_name_.Swap(&other->method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unknown_dialect_, other->unknown_dialect_);
  swap(ref_variable_, other->ref_variable_);
  swap(incompatible_variable_, other->incompatible_variable_);
  swap(incompatible_attribute_, other->incompatible_attribute_);
  swap(control_flow_v1_, other->control_flow_v1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompatibilityAnalysisReportProto::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CompatibilityAnalysisProto_OpInfo::InitAsDefaultInstance() {
  ::mlir::tfrt::_CompatibilityAnalysisProto_OpInfo_default_instance_._instance.get_mutable()->report_ = const_cast< ::mlir::tfrt::CompatibilityAnalysisReportProto*>(
      ::mlir::tfrt::CompatibilityAnalysisReportProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompatibilityAnalysisProto_OpInfo::kCountFieldNumber;
const int CompatibilityAnalysisProto_OpInfo::kReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompatibilityAnalysisProto_OpInfo::CompatibilityAnalysisProto_OpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisProto_OpInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
}
CompatibilityAnalysisProto_OpInfo::CompatibilityAnalysisProto_OpInfo(const CompatibilityAnalysisProto_OpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_report()) {
    report_ = new ::mlir::tfrt::CompatibilityAnalysisReportProto(*from.report_);
  } else {
    report_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
}

void CompatibilityAnalysisProto_OpInfo::SharedCtor() {
  ::memset(&report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&report_)) + sizeof(count_));
}

CompatibilityAnalysisProto_OpInfo::~CompatibilityAnalysisProto_OpInfo() {
  // @@protoc_insertion_point(destructor:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  SharedDtor();
}

void CompatibilityAnalysisProto_OpInfo::SharedDtor() {
  if (this != internal_default_instance()) delete report_;
}

void CompatibilityAnalysisProto_OpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CompatibilityAnalysisProto_OpInfo::descriptor() {
  ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompatibilityAnalysisProto_OpInfo& CompatibilityAnalysisProto_OpInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisProto_OpInfo.base);
  return *internal_default_instance();
}


void CompatibilityAnalysisProto_OpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && report_ != NULL) {
    delete report_;
  }
  report_ = NULL;
  count_ = 0;
  _internal_metadata_.Clear();
}

bool CompatibilityAnalysisProto_OpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mlir.tfrt.CompatibilityAnalysisReportProto report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  return false;
#undef DO_
}

void CompatibilityAnalysisProto_OpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // .mlir.tfrt.CompatibilityAnalysisReportProto report = 2;
  if (this->has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_report(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
}

::google::protobuf::uint8* CompatibilityAnalysisProto_OpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // .mlir.tfrt.CompatibilityAnalysisReportProto report = 2;
  if (this->has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_report(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  return target;
}

size_t CompatibilityAnalysisProto_OpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mlir.tfrt.CompatibilityAnalysisReportProto report = 2;
  if (this->has_report()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *report_);
  }

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompatibilityAnalysisProto_OpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CompatibilityAnalysisProto_OpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompatibilityAnalysisProto_OpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
    MergeFrom(*source);
  }
}

void CompatibilityAnalysisProto_OpInfo::MergeFrom(const CompatibilityAnalysisProto_OpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_report()) {
    mutable_report()->::mlir::tfrt::CompatibilityAnalysisReportProto::MergeFrom(from.report());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void CompatibilityAnalysisProto_OpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompatibilityAnalysisProto_OpInfo::CopyFrom(const CompatibilityAnalysisProto_OpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mlir.tfrt.CompatibilityAnalysisProto.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompatibilityAnalysisProto_OpInfo::IsInitialized() const {
  return true;
}

void CompatibilityAnalysisProto_OpInfo::Swap(CompatibilityAnalysisProto_OpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompatibilityAnalysisProto_OpInfo::InternalSwap(CompatibilityAnalysisProto_OpInfo* other) {
  using std::swap;
  swap(report_, other->report_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompatibilityAnalysisProto_OpInfo::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CompatibilityAnalysisProto_OpsEntry_DoNotUse::CompatibilityAnalysisProto_OpsEntry_DoNotUse() {}
CompatibilityAnalysisProto_OpsEntry_DoNotUse::CompatibilityAnalysisProto_OpsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CompatibilityAnalysisProto_OpsEntry_DoNotUse::MergeFrom(const CompatibilityAnalysisProto_OpsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CompatibilityAnalysisProto_OpsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[2];
}
void CompatibilityAnalysisProto_OpsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CompatibilityAnalysisProto::InitAsDefaultInstance() {
  ::mlir::tfrt::_CompatibilityAnalysisProto_default_instance_._instance.get_mutable()->summary_ = const_cast< ::mlir::tfrt::CompatibilityAnalysisReportProto*>(
      ::mlir::tfrt::CompatibilityAnalysisReportProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompatibilityAnalysisProto::kSummaryFieldNumber;
const int CompatibilityAnalysisProto::kOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompatibilityAnalysisProto::CompatibilityAnalysisProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mlir.tfrt.CompatibilityAnalysisProto)
}
CompatibilityAnalysisProto::CompatibilityAnalysisProto(const CompatibilityAnalysisProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ops_.MergeFrom(from.ops_);
  if (from.has_summary()) {
    summary_ = new ::mlir::tfrt::CompatibilityAnalysisReportProto(*from.summary_);
  } else {
    summary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mlir.tfrt.CompatibilityAnalysisProto)
}

void CompatibilityAnalysisProto::SharedCtor() {
  summary_ = NULL;
}

CompatibilityAnalysisProto::~CompatibilityAnalysisProto() {
  // @@protoc_insertion_point(destructor:mlir.tfrt.CompatibilityAnalysisProto)
  SharedDtor();
}

void CompatibilityAnalysisProto::SharedDtor() {
  if (this != internal_default_instance()) delete summary_;
}

void CompatibilityAnalysisProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CompatibilityAnalysisProto::descriptor() {
  ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompatibilityAnalysisProto& CompatibilityAnalysisProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::scc_info_CompatibilityAnalysisProto.base);
  return *internal_default_instance();
}


void CompatibilityAnalysisProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mlir.tfrt.CompatibilityAnalysisProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) {
    delete summary_;
  }
  summary_ = NULL;
  _internal_metadata_.Clear();
}

bool CompatibilityAnalysisProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mlir.tfrt.CompatibilityAnalysisProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mlir.tfrt.CompatibilityAnalysisReportProto summary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .mlir.tfrt.CompatibilityAnalysisProto.OpInfo> ops = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          CompatibilityAnalysisProto_OpsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CompatibilityAnalysisProto_OpsEntry_DoNotUse,
              ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo > > parser(&ops_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mlir.tfrt.CompatibilityAnalysisProto.OpsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mlir.tfrt.CompatibilityAnalysisProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mlir.tfrt.CompatibilityAnalysisProto)
  return false;
#undef DO_
}

void CompatibilityAnalysisProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mlir.tfrt.CompatibilityAnalysisProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mlir.tfrt.CompatibilityAnalysisReportProto summary = 1;
  if (this->has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_summary(), output);
  }

  // map<string, .mlir.tfrt.CompatibilityAnalysisProto.OpInfo> ops = 2;
  if (!this->ops().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mlir.tfrt.CompatibilityAnalysisProto.OpsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ops().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ops().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_iterator
          it = this->ops().begin();
          it != this->ops().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CompatibilityAnalysisProto_OpsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ops_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CompatibilityAnalysisProto_OpsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_iterator
          it = this->ops().begin();
          it != this->ops().end(); ++it) {
        entry.reset(ops_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mlir.tfrt.CompatibilityAnalysisProto)
}

::google::protobuf::uint8* CompatibilityAnalysisProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mlir.tfrt.CompatibilityAnalysisProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mlir.tfrt.CompatibilityAnalysisReportProto summary = 1;
  if (this->has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_summary(), deterministic, target);
  }

  // map<string, .mlir.tfrt.CompatibilityAnalysisProto.OpInfo> ops = 2;
  if (!this->ops().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mlir.tfrt.CompatibilityAnalysisProto.OpsEntry.key");
      }
    };

    if (deterministic &&
        this->ops().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ops().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_iterator
          it = this->ops().begin();
          it != this->ops().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CompatibilityAnalysisProto_OpsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ops_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CompatibilityAnalysisProto_OpsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_iterator
          it = this->ops().begin();
          it != this->ops().end(); ++it) {
        entry.reset(ops_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mlir.tfrt.CompatibilityAnalysisProto)
  return target;
}

size_t CompatibilityAnalysisProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mlir.tfrt.CompatibilityAnalysisProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .mlir.tfrt.CompatibilityAnalysisProto.OpInfo> ops = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ops_size());
  {
    ::std::unique_ptr<CompatibilityAnalysisProto_OpsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >::const_iterator
        it = this->ops().begin();
        it != this->ops().end(); ++it) {
      entry.reset(ops_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .mlir.tfrt.CompatibilityAnalysisReportProto summary = 1;
  if (this->has_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompatibilityAnalysisProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mlir.tfrt.CompatibilityAnalysisProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CompatibilityAnalysisProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompatibilityAnalysisProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mlir.tfrt.CompatibilityAnalysisProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mlir.tfrt.CompatibilityAnalysisProto)
    MergeFrom(*source);
  }
}

void CompatibilityAnalysisProto::MergeFrom(const CompatibilityAnalysisProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mlir.tfrt.CompatibilityAnalysisProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  if (from.has_summary()) {
    mutable_summary()->::mlir::tfrt::CompatibilityAnalysisReportProto::MergeFrom(from.summary());
  }
}

void CompatibilityAnalysisProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mlir.tfrt.CompatibilityAnalysisProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompatibilityAnalysisProto::CopyFrom(const CompatibilityAnalysisProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mlir.tfrt.CompatibilityAnalysisProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompatibilityAnalysisProto::IsInitialized() const {
  return true;
}

void CompatibilityAnalysisProto::Swap(CompatibilityAnalysisProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompatibilityAnalysisProto::InternalSwap(CompatibilityAnalysisProto* other) {
  using std::swap;
  ops_.Swap(&other->ops_);
  swap(summary_, other->summary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompatibilityAnalysisProto::GetMetadata() const {
  protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fcompiler_2fmlir_2ftfrt_2fanalysis_2fanalysis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tfrt
}  // namespace mlir
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mlir::tfrt::CompatibilityAnalysisReportProto* Arena::CreateMaybeMessage< ::mlir::tfrt::CompatibilityAnalysisReportProto >(Arena* arena) {
  return Arena::CreateInternal< ::mlir::tfrt::CompatibilityAnalysisReportProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo* Arena::CreateMaybeMessage< ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mlir::tfrt::CompatibilityAnalysisProto_OpInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse* Arena::CreateMaybeMessage< ::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::mlir::tfrt::CompatibilityAnalysisProto_OpsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mlir::tfrt::CompatibilityAnalysisProto* Arena::CreateMaybeMessage< ::mlir::tfrt::CompatibilityAnalysisProto >(Arena* arena) {
  return Arena::CreateInternal< ::mlir::tfrt::CompatibilityAnalysisProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
