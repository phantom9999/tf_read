// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/mlir/lite/quantization/quantization_info.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto 

namespace protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto
namespace mlir {
namespace quant {
class QuantizationInfo;
class QuantizationInfoDefaultTypeInternal;
extern QuantizationInfoDefaultTypeInternal _QuantizationInfo_default_instance_;
class QuantizationInfo_AffineParams;
class QuantizationInfo_AffineParamsDefaultTypeInternal;
extern QuantizationInfo_AffineParamsDefaultTypeInternal _QuantizationInfo_AffineParams_default_instance_;
class QuantizationInfo_Metadata;
class QuantizationInfo_MetadataDefaultTypeInternal;
extern QuantizationInfo_MetadataDefaultTypeInternal _QuantizationInfo_Metadata_default_instance_;
class QuantizationInfo_MinMax;
class QuantizationInfo_MinMaxDefaultTypeInternal;
extern QuantizationInfo_MinMaxDefaultTypeInternal _QuantizationInfo_MinMax_default_instance_;
class QuantizationInfo_PerAxisParams;
class QuantizationInfo_PerAxisParamsDefaultTypeInternal;
extern QuantizationInfo_PerAxisParamsDefaultTypeInternal _QuantizationInfo_PerAxisParams_default_instance_;
class QuantizationInfo_QuantParams;
class QuantizationInfo_QuantParamsDefaultTypeInternal;
extern QuantizationInfo_QuantParamsDefaultTypeInternal _QuantizationInfo_QuantParams_default_instance_;
}  // namespace quant
}  // namespace mlir
namespace google {
namespace protobuf {
template<> ::mlir::quant::QuantizationInfo* Arena::CreateMaybeMessage<::mlir::quant::QuantizationInfo>(Arena*);
template<> ::mlir::quant::QuantizationInfo_AffineParams* Arena::CreateMaybeMessage<::mlir::quant::QuantizationInfo_AffineParams>(Arena*);
template<> ::mlir::quant::QuantizationInfo_Metadata* Arena::CreateMaybeMessage<::mlir::quant::QuantizationInfo_Metadata>(Arena*);
template<> ::mlir::quant::QuantizationInfo_MinMax* Arena::CreateMaybeMessage<::mlir::quant::QuantizationInfo_MinMax>(Arena*);
template<> ::mlir::quant::QuantizationInfo_PerAxisParams* Arena::CreateMaybeMessage<::mlir::quant::QuantizationInfo_PerAxisParams>(Arena*);
template<> ::mlir::quant::QuantizationInfo_QuantParams* Arena::CreateMaybeMessage<::mlir::quant::QuantizationInfo_QuantParams>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mlir {
namespace quant {

// ===================================================================

class QuantizationInfo_MinMax : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.quant.QuantizationInfo.MinMax) */ {
 public:
  QuantizationInfo_MinMax();
  virtual ~QuantizationInfo_MinMax();

  QuantizationInfo_MinMax(const QuantizationInfo_MinMax& from);

  inline QuantizationInfo_MinMax& operator=(const QuantizationInfo_MinMax& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationInfo_MinMax(QuantizationInfo_MinMax&& from) noexcept
    : QuantizationInfo_MinMax() {
    *this = ::std::move(from);
  }

  inline QuantizationInfo_MinMax& operator=(QuantizationInfo_MinMax&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationInfo_MinMax& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationInfo_MinMax* internal_default_instance() {
    return reinterpret_cast<const QuantizationInfo_MinMax*>(
               &_QuantizationInfo_MinMax_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(QuantizationInfo_MinMax* other);
  void Swap(QuantizationInfo_MinMax* other);
  friend void swap(QuantizationInfo_MinMax& a, QuantizationInfo_MinMax& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationInfo_MinMax* New() const final {
    return CreateMaybeMessage<QuantizationInfo_MinMax>(NULL);
  }

  QuantizationInfo_MinMax* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationInfo_MinMax>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationInfo_MinMax& from);
  void MergeFrom(const QuantizationInfo_MinMax& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationInfo_MinMax* other);
  protected:
  explicit QuantizationInfo_MinMax(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // float max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // @@protoc_insertion_point(class_scope:mlir.quant.QuantizationInfo.MinMax)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float min_;
  float max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationInfo_AffineParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.quant.QuantizationInfo.AffineParams) */ {
 public:
  QuantizationInfo_AffineParams();
  virtual ~QuantizationInfo_AffineParams();

  QuantizationInfo_AffineParams(const QuantizationInfo_AffineParams& from);

  inline QuantizationInfo_AffineParams& operator=(const QuantizationInfo_AffineParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationInfo_AffineParams(QuantizationInfo_AffineParams&& from) noexcept
    : QuantizationInfo_AffineParams() {
    *this = ::std::move(from);
  }

  inline QuantizationInfo_AffineParams& operator=(QuantizationInfo_AffineParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationInfo_AffineParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationInfo_AffineParams* internal_default_instance() {
    return reinterpret_cast<const QuantizationInfo_AffineParams*>(
               &_QuantizationInfo_AffineParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(QuantizationInfo_AffineParams* other);
  void Swap(QuantizationInfo_AffineParams* other);
  friend void swap(QuantizationInfo_AffineParams& a, QuantizationInfo_AffineParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationInfo_AffineParams* New() const final {
    return CreateMaybeMessage<QuantizationInfo_AffineParams>(NULL);
  }

  QuantizationInfo_AffineParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationInfo_AffineParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationInfo_AffineParams& from);
  void MergeFrom(const QuantizationInfo_AffineParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationInfo_AffineParams* other);
  protected:
  explicit QuantizationInfo_AffineParams(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float scale = 1;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // int32 zero_point = 2;
  void clear_zero_point();
  static const int kZeroPointFieldNumber = 2;
  ::google::protobuf::int32 zero_point() const;
  void set_zero_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mlir.quant.QuantizationInfo.AffineParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float scale_;
  ::google::protobuf::int32 zero_point_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationInfo_PerAxisParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.quant.QuantizationInfo.PerAxisParams) */ {
 public:
  QuantizationInfo_PerAxisParams();
  virtual ~QuantizationInfo_PerAxisParams();

  QuantizationInfo_PerAxisParams(const QuantizationInfo_PerAxisParams& from);

  inline QuantizationInfo_PerAxisParams& operator=(const QuantizationInfo_PerAxisParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationInfo_PerAxisParams(QuantizationInfo_PerAxisParams&& from) noexcept
    : QuantizationInfo_PerAxisParams() {
    *this = ::std::move(from);
  }

  inline QuantizationInfo_PerAxisParams& operator=(QuantizationInfo_PerAxisParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationInfo_PerAxisParams& default_instance();

  enum ParamsOneofCase {
    kMinMax = 1,
    kAffineParams = 2,
    PARAMS_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationInfo_PerAxisParams* internal_default_instance() {
    return reinterpret_cast<const QuantizationInfo_PerAxisParams*>(
               &_QuantizationInfo_PerAxisParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(QuantizationInfo_PerAxisParams* other);
  void Swap(QuantizationInfo_PerAxisParams* other);
  friend void swap(QuantizationInfo_PerAxisParams& a, QuantizationInfo_PerAxisParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationInfo_PerAxisParams* New() const final {
    return CreateMaybeMessage<QuantizationInfo_PerAxisParams>(NULL);
  }

  QuantizationInfo_PerAxisParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationInfo_PerAxisParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationInfo_PerAxisParams& from);
  void MergeFrom(const QuantizationInfo_PerAxisParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationInfo_PerAxisParams* other);
  protected:
  explicit QuantizationInfo_PerAxisParams(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mlir.quant.QuantizationInfo.MinMax min_max = 1;
  bool has_min_max() const;
  void clear_min_max();
  static const int kMinMaxFieldNumber = 1;
  private:
  const ::mlir::quant::QuantizationInfo_MinMax& _internal_min_max() const;
  public:
  const ::mlir::quant::QuantizationInfo_MinMax& min_max() const;
  ::mlir::quant::QuantizationInfo_MinMax* release_min_max();
  ::mlir::quant::QuantizationInfo_MinMax* mutable_min_max();
  void set_allocated_min_max(::mlir::quant::QuantizationInfo_MinMax* min_max);
  void unsafe_arena_set_allocated_min_max(
      ::mlir::quant::QuantizationInfo_MinMax* min_max);
  ::mlir::quant::QuantizationInfo_MinMax* unsafe_arena_release_min_max();

  // .mlir.quant.QuantizationInfo.AffineParams affine_params = 2;
  bool has_affine_params() const;
  void clear_affine_params();
  static const int kAffineParamsFieldNumber = 2;
  private:
  const ::mlir::quant::QuantizationInfo_AffineParams& _internal_affine_params() const;
  public:
  const ::mlir::quant::QuantizationInfo_AffineParams& affine_params() const;
  ::mlir::quant::QuantizationInfo_AffineParams* release_affine_params();
  ::mlir::quant::QuantizationInfo_AffineParams* mutable_affine_params();
  void set_allocated_affine_params(::mlir::quant::QuantizationInfo_AffineParams* affine_params);
  void unsafe_arena_set_allocated_affine_params(
      ::mlir::quant::QuantizationInfo_AffineParams* affine_params);
  ::mlir::quant::QuantizationInfo_AffineParams* unsafe_arena_release_affine_params();

  void clear_params_oneof();
  ParamsOneofCase params_oneof_case() const;
  // @@protoc_insertion_point(class_scope:mlir.quant.QuantizationInfo.PerAxisParams)
 private:
  void set_has_min_max();
  void set_has_affine_params();

  inline bool has_params_oneof() const;
  inline void clear_has_params_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ParamsOneofUnion {
    ParamsOneofUnion() {}
    ::mlir::quant::QuantizationInfo_MinMax* min_max_;
    ::mlir::quant::QuantizationInfo_AffineParams* affine_params_;
  } params_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationInfo_Metadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.quant.QuantizationInfo.Metadata) */ {
 public:
  QuantizationInfo_Metadata();
  virtual ~QuantizationInfo_Metadata();

  QuantizationInfo_Metadata(const QuantizationInfo_Metadata& from);

  inline QuantizationInfo_Metadata& operator=(const QuantizationInfo_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationInfo_Metadata(QuantizationInfo_Metadata&& from) noexcept
    : QuantizationInfo_Metadata() {
    *this = ::std::move(from);
  }

  inline QuantizationInfo_Metadata& operator=(QuantizationInfo_Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationInfo_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationInfo_Metadata* internal_default_instance() {
    return reinterpret_cast<const QuantizationInfo_Metadata*>(
               &_QuantizationInfo_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(QuantizationInfo_Metadata* other);
  void Swap(QuantizationInfo_Metadata* other);
  friend void swap(QuantizationInfo_Metadata& a, QuantizationInfo_Metadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationInfo_Metadata* New() const final {
    return CreateMaybeMessage<QuantizationInfo_Metadata>(NULL);
  }

  QuantizationInfo_Metadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationInfo_Metadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationInfo_Metadata& from);
  void MergeFrom(const QuantizationInfo_Metadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationInfo_Metadata* other);
  protected:
  explicit QuantizationInfo_Metadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 num_bits = 1;
  void clear_num_bits();
  static const int kNumBitsFieldNumber = 1;
  ::google::protobuf::int32 num_bits() const;
  void set_num_bits(::google::protobuf::int32 value);

  // int32 quantize_axis = 2;
  void clear_quantize_axis();
  static const int kQuantizeAxisFieldNumber = 2;
  ::google::protobuf::int32 quantize_axis() const;
  void set_quantize_axis(::google::protobuf::int32 value);

  // int32 range_min = 3;
  void clear_range_min();
  static const int kRangeMinFieldNumber = 3;
  ::google::protobuf::int32 range_min() const;
  void set_range_min(::google::protobuf::int32 value);

  // int32 range_max = 4;
  void clear_range_max();
  static const int kRangeMaxFieldNumber = 4;
  ::google::protobuf::int32 range_max() const;
  void set_range_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mlir.quant.QuantizationInfo.Metadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int32 num_bits_;
  ::google::protobuf::int32 quantize_axis_;
  ::google::protobuf::int32 range_min_;
  ::google::protobuf::int32 range_max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationInfo_QuantParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.quant.QuantizationInfo.QuantParams) */ {
 public:
  QuantizationInfo_QuantParams();
  virtual ~QuantizationInfo_QuantParams();

  QuantizationInfo_QuantParams(const QuantizationInfo_QuantParams& from);

  inline QuantizationInfo_QuantParams& operator=(const QuantizationInfo_QuantParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationInfo_QuantParams(QuantizationInfo_QuantParams&& from) noexcept
    : QuantizationInfo_QuantParams() {
    *this = ::std::move(from);
  }

  inline QuantizationInfo_QuantParams& operator=(QuantizationInfo_QuantParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationInfo_QuantParams& default_instance();

  enum NameOneofCase {
    kName = 1,
    kNameRegex = 2,
    NAME_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationInfo_QuantParams* internal_default_instance() {
    return reinterpret_cast<const QuantizationInfo_QuantParams*>(
               &_QuantizationInfo_QuantParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(QuantizationInfo_QuantParams* other);
  void Swap(QuantizationInfo_QuantParams* other);
  friend void swap(QuantizationInfo_QuantParams& a, QuantizationInfo_QuantParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationInfo_QuantParams* New() const final {
    return CreateMaybeMessage<QuantizationInfo_QuantParams>(NULL);
  }

  QuantizationInfo_QuantParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationInfo_QuantParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationInfo_QuantParams& from);
  void MergeFrom(const QuantizationInfo_QuantParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationInfo_QuantParams* other);
  protected:
  explicit QuantizationInfo_QuantParams(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mlir.quant.QuantizationInfo.PerAxisParams params = 3;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  ::mlir::quant::QuantizationInfo_PerAxisParams* mutable_params(int index);
  ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_PerAxisParams >*
      mutable_params();
  const ::mlir::quant::QuantizationInfo_PerAxisParams& params(int index) const;
  ::mlir::quant::QuantizationInfo_PerAxisParams* add_params();
  const ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_PerAxisParams >&
      params() const;

  // .mlir.quant.QuantizationInfo.Metadata meta = 5;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 5;
  private:
  const ::mlir::quant::QuantizationInfo_Metadata& _internal_meta() const;
  public:
  const ::mlir::quant::QuantizationInfo_Metadata& meta() const;
  ::mlir::quant::QuantizationInfo_Metadata* release_meta();
  ::mlir::quant::QuantizationInfo_Metadata* mutable_meta();
  void set_allocated_meta(::mlir::quant::QuantizationInfo_Metadata* meta);
  void unsafe_arena_set_allocated_meta(
      ::mlir::quant::QuantizationInfo_Metadata* meta);
  ::mlir::quant::QuantizationInfo_Metadata* unsafe_arena_release_meta();

  // string name = 1;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string name_regex = 2;
  private:
  bool has_name_regex() const;
  public:
  void clear_name_regex();
  static const int kNameRegexFieldNumber = 2;
  const ::std::string& name_regex() const;
  void set_name_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_name_regex(::std::string&& value);
  #endif
  void set_name_regex(const char* value);
  void set_name_regex(const char* value, size_t size);
  ::std::string* mutable_name_regex();
  ::std::string* release_name_regex();
  void set_allocated_name_regex(::std::string* name_regex);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name_regex();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_regex(
      ::std::string* name_regex);

  void clear_name_oneof();
  NameOneofCase name_oneof_case() const;
  // @@protoc_insertion_point(class_scope:mlir.quant.QuantizationInfo.QuantParams)
 private:
  void set_has_name();
  void set_has_name_regex();

  inline bool has_name_oneof() const;
  inline void clear_has_name_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_PerAxisParams > params_;
  ::mlir::quant::QuantizationInfo_Metadata* meta_;
  union NameOneofUnion {
    NameOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr name_regex_;
  } name_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mlir.quant.QuantizationInfo) */ {
 public:
  QuantizationInfo();
  virtual ~QuantizationInfo();

  QuantizationInfo(const QuantizationInfo& from);

  inline QuantizationInfo& operator=(const QuantizationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantizationInfo(QuantizationInfo&& from) noexcept
    : QuantizationInfo() {
    *this = ::std::move(from);
  }

  inline QuantizationInfo& operator=(QuantizationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationInfo* internal_default_instance() {
    return reinterpret_cast<const QuantizationInfo*>(
               &_QuantizationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(QuantizationInfo* other);
  void Swap(QuantizationInfo* other);
  friend void swap(QuantizationInfo& a, QuantizationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantizationInfo* New() const final {
    return CreateMaybeMessage<QuantizationInfo>(NULL);
  }

  QuantizationInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantizationInfo& from);
  void MergeFrom(const QuantizationInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationInfo* other);
  protected:
  explicit QuantizationInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuantizationInfo_MinMax MinMax;
  typedef QuantizationInfo_AffineParams AffineParams;
  typedef QuantizationInfo_PerAxisParams PerAxisParams;
  typedef QuantizationInfo_Metadata Metadata;
  typedef QuantizationInfo_QuantParams QuantParams;

  // accessors -------------------------------------------------------

  // repeated .mlir.quant.QuantizationInfo.QuantParams entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::mlir::quant::QuantizationInfo_QuantParams* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_QuantParams >*
      mutable_entries();
  const ::mlir::quant::QuantizationInfo_QuantParams& entries(int index) const;
  ::mlir::quant::QuantizationInfo_QuantParams* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_QuantParams >&
      entries() const;

  // @@protoc_insertion_point(class_scope:mlir.quant.QuantizationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_QuantParams > entries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuantizationInfo_MinMax

// float min = 1;
inline void QuantizationInfo_MinMax::clear_min() {
  min_ = 0;
}
inline float QuantizationInfo_MinMax::min() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.MinMax.min)
  return min_;
}
inline void QuantizationInfo_MinMax::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.MinMax.min)
}

// float max = 2;
inline void QuantizationInfo_MinMax::clear_max() {
  max_ = 0;
}
inline float QuantizationInfo_MinMax::max() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.MinMax.max)
  return max_;
}
inline void QuantizationInfo_MinMax::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.MinMax.max)
}

// -------------------------------------------------------------------

// QuantizationInfo_AffineParams

// float scale = 1;
inline void QuantizationInfo_AffineParams::clear_scale() {
  scale_ = 0;
}
inline float QuantizationInfo_AffineParams::scale() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.AffineParams.scale)
  return scale_;
}
inline void QuantizationInfo_AffineParams::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.AffineParams.scale)
}

// int32 zero_point = 2;
inline void QuantizationInfo_AffineParams::clear_zero_point() {
  zero_point_ = 0;
}
inline ::google::protobuf::int32 QuantizationInfo_AffineParams::zero_point() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.AffineParams.zero_point)
  return zero_point_;
}
inline void QuantizationInfo_AffineParams::set_zero_point(::google::protobuf::int32 value) {
  
  zero_point_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.AffineParams.zero_point)
}

// -------------------------------------------------------------------

// QuantizationInfo_PerAxisParams

// .mlir.quant.QuantizationInfo.MinMax min_max = 1;
inline bool QuantizationInfo_PerAxisParams::has_min_max() const {
  return params_oneof_case() == kMinMax;
}
inline void QuantizationInfo_PerAxisParams::set_has_min_max() {
  _oneof_case_[0] = kMinMax;
}
inline void QuantizationInfo_PerAxisParams::clear_min_max() {
  if (has_min_max()) {
    if (GetArenaNoVirtual() == NULL) {
      delete params_oneof_.min_max_;
    }
    clear_has_params_oneof();
  }
}
inline const ::mlir::quant::QuantizationInfo_MinMax& QuantizationInfo_PerAxisParams::_internal_min_max() const {
  return *params_oneof_.min_max_;
}
inline ::mlir::quant::QuantizationInfo_MinMax* QuantizationInfo_PerAxisParams::release_min_max() {
  // @@protoc_insertion_point(field_release:mlir.quant.QuantizationInfo.PerAxisParams.min_max)
  if (has_min_max()) {
    clear_has_params_oneof();
      ::mlir::quant::QuantizationInfo_MinMax* temp = params_oneof_.min_max_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    params_oneof_.min_max_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mlir::quant::QuantizationInfo_MinMax& QuantizationInfo_PerAxisParams::min_max() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.PerAxisParams.min_max)
  return has_min_max()
      ? *params_oneof_.min_max_
      : *reinterpret_cast< ::mlir::quant::QuantizationInfo_MinMax*>(&::mlir::quant::_QuantizationInfo_MinMax_default_instance_);
}
inline ::mlir::quant::QuantizationInfo_MinMax* QuantizationInfo_PerAxisParams::unsafe_arena_release_min_max() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.quant.QuantizationInfo.PerAxisParams.min_max)
  if (has_min_max()) {
    clear_has_params_oneof();
    ::mlir::quant::QuantizationInfo_MinMax* temp = params_oneof_.min_max_;
    params_oneof_.min_max_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QuantizationInfo_PerAxisParams::unsafe_arena_set_allocated_min_max(::mlir::quant::QuantizationInfo_MinMax* min_max) {
  clear_params_oneof();
  if (min_max) {
    set_has_min_max();
    params_oneof_.min_max_ = min_max;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mlir.quant.QuantizationInfo.PerAxisParams.min_max)
}
inline ::mlir::quant::QuantizationInfo_MinMax* QuantizationInfo_PerAxisParams::mutable_min_max() {
  if (!has_min_max()) {
    clear_params_oneof();
    set_has_min_max();
    params_oneof_.min_max_ = CreateMaybeMessage< ::mlir::quant::QuantizationInfo_MinMax >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.PerAxisParams.min_max)
  return params_oneof_.min_max_;
}

// .mlir.quant.QuantizationInfo.AffineParams affine_params = 2;
inline bool QuantizationInfo_PerAxisParams::has_affine_params() const {
  return params_oneof_case() == kAffineParams;
}
inline void QuantizationInfo_PerAxisParams::set_has_affine_params() {
  _oneof_case_[0] = kAffineParams;
}
inline void QuantizationInfo_PerAxisParams::clear_affine_params() {
  if (has_affine_params()) {
    if (GetArenaNoVirtual() == NULL) {
      delete params_oneof_.affine_params_;
    }
    clear_has_params_oneof();
  }
}
inline const ::mlir::quant::QuantizationInfo_AffineParams& QuantizationInfo_PerAxisParams::_internal_affine_params() const {
  return *params_oneof_.affine_params_;
}
inline ::mlir::quant::QuantizationInfo_AffineParams* QuantizationInfo_PerAxisParams::release_affine_params() {
  // @@protoc_insertion_point(field_release:mlir.quant.QuantizationInfo.PerAxisParams.affine_params)
  if (has_affine_params()) {
    clear_has_params_oneof();
      ::mlir::quant::QuantizationInfo_AffineParams* temp = params_oneof_.affine_params_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    params_oneof_.affine_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::mlir::quant::QuantizationInfo_AffineParams& QuantizationInfo_PerAxisParams::affine_params() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.PerAxisParams.affine_params)
  return has_affine_params()
      ? *params_oneof_.affine_params_
      : *reinterpret_cast< ::mlir::quant::QuantizationInfo_AffineParams*>(&::mlir::quant::_QuantizationInfo_AffineParams_default_instance_);
}
inline ::mlir::quant::QuantizationInfo_AffineParams* QuantizationInfo_PerAxisParams::unsafe_arena_release_affine_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.quant.QuantizationInfo.PerAxisParams.affine_params)
  if (has_affine_params()) {
    clear_has_params_oneof();
    ::mlir::quant::QuantizationInfo_AffineParams* temp = params_oneof_.affine_params_;
    params_oneof_.affine_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QuantizationInfo_PerAxisParams::unsafe_arena_set_allocated_affine_params(::mlir::quant::QuantizationInfo_AffineParams* affine_params) {
  clear_params_oneof();
  if (affine_params) {
    set_has_affine_params();
    params_oneof_.affine_params_ = affine_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mlir.quant.QuantizationInfo.PerAxisParams.affine_params)
}
inline ::mlir::quant::QuantizationInfo_AffineParams* QuantizationInfo_PerAxisParams::mutable_affine_params() {
  if (!has_affine_params()) {
    clear_params_oneof();
    set_has_affine_params();
    params_oneof_.affine_params_ = CreateMaybeMessage< ::mlir::quant::QuantizationInfo_AffineParams >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.PerAxisParams.affine_params)
  return params_oneof_.affine_params_;
}

inline bool QuantizationInfo_PerAxisParams::has_params_oneof() const {
  return params_oneof_case() != PARAMS_ONEOF_NOT_SET;
}
inline void QuantizationInfo_PerAxisParams::clear_has_params_oneof() {
  _oneof_case_[0] = PARAMS_ONEOF_NOT_SET;
}
inline QuantizationInfo_PerAxisParams::ParamsOneofCase QuantizationInfo_PerAxisParams::params_oneof_case() const {
  return QuantizationInfo_PerAxisParams::ParamsOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuantizationInfo_Metadata

// int32 num_bits = 1;
inline void QuantizationInfo_Metadata::clear_num_bits() {
  num_bits_ = 0;
}
inline ::google::protobuf::int32 QuantizationInfo_Metadata::num_bits() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.Metadata.num_bits)
  return num_bits_;
}
inline void QuantizationInfo_Metadata::set_num_bits(::google::protobuf::int32 value) {
  
  num_bits_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.Metadata.num_bits)
}

// int32 quantize_axis = 2;
inline void QuantizationInfo_Metadata::clear_quantize_axis() {
  quantize_axis_ = 0;
}
inline ::google::protobuf::int32 QuantizationInfo_Metadata::quantize_axis() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.Metadata.quantize_axis)
  return quantize_axis_;
}
inline void QuantizationInfo_Metadata::set_quantize_axis(::google::protobuf::int32 value) {
  
  quantize_axis_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.Metadata.quantize_axis)
}

// int32 range_min = 3;
inline void QuantizationInfo_Metadata::clear_range_min() {
  range_min_ = 0;
}
inline ::google::protobuf::int32 QuantizationInfo_Metadata::range_min() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.Metadata.range_min)
  return range_min_;
}
inline void QuantizationInfo_Metadata::set_range_min(::google::protobuf::int32 value) {
  
  range_min_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.Metadata.range_min)
}

// int32 range_max = 4;
inline void QuantizationInfo_Metadata::clear_range_max() {
  range_max_ = 0;
}
inline ::google::protobuf::int32 QuantizationInfo_Metadata::range_max() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.Metadata.range_max)
  return range_max_;
}
inline void QuantizationInfo_Metadata::set_range_max(::google::protobuf::int32 value) {
  
  range_max_ = value;
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.Metadata.range_max)
}

// -------------------------------------------------------------------

// QuantizationInfo_QuantParams

// string name = 1;
inline bool QuantizationInfo_QuantParams::has_name() const {
  return name_oneof_case() == kName;
}
inline void QuantizationInfo_QuantParams::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void QuantizationInfo_QuantParams::clear_name() {
  if (has_name()) {
    name_oneof_.name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_name_oneof();
  }
}
inline const ::std::string& QuantizationInfo_QuantParams::name() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.QuantParams.name)
  if (has_name()) {
    return name_oneof_.name_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void QuantizationInfo_QuantParams::set_name(const ::std::string& value) {
  if (!has_name()) {
    clear_name_oneof();
    set_has_name();
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.QuantParams.name)
}
#if LANG_CXX11
inline void QuantizationInfo_QuantParams::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.QuantParams.name)
  if (!has_name()) {
    clear_name_oneof();
    set_has_name();
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:mlir.quant.QuantizationInfo.QuantParams.name)
}
#endif
inline void QuantizationInfo_QuantParams::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name()) {
    clear_name_oneof();
    set_has_name();
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:mlir.quant.QuantizationInfo.QuantParams.name)
}
inline void QuantizationInfo_QuantParams::set_name(const char* value,
                             size_t size) {
  if (!has_name()) {
    clear_name_oneof();
    set_has_name();
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:mlir.quant.QuantizationInfo.QuantParams.name)
}
inline ::std::string* QuantizationInfo_QuantParams::mutable_name() {
  if (!has_name()) {
    clear_name_oneof();
    set_has_name();
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return name_oneof_.name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.QuantParams.name)
}
inline ::std::string* QuantizationInfo_QuantParams::release_name() {
  // @@protoc_insertion_point(field_release:mlir.quant.QuantizationInfo.QuantParams.name)
  if (has_name()) {
    clear_has_name_oneof();
    return name_oneof_.name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void QuantizationInfo_QuantParams::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_name_oneof();
  if (name != NULL) {
    set_has_name();
    name_oneof_.name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:mlir.quant.QuantizationInfo.QuantParams.name)
}
inline ::std::string* QuantizationInfo_QuantParams::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.quant.QuantizationInfo.QuantParams.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_name()) {
    clear_has_name_oneof();
    return name_oneof_.name_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void QuantizationInfo_QuantParams::unsafe_arena_set_allocated_name(::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_name()) {
    name_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_name_oneof();
  if (name) {
    set_has_name();
    name_oneof_.name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mlir.quant.QuantizationInfo.QuantParams.name)
}

// string name_regex = 2;
inline bool QuantizationInfo_QuantParams::has_name_regex() const {
  return name_oneof_case() == kNameRegex;
}
inline void QuantizationInfo_QuantParams::set_has_name_regex() {
  _oneof_case_[0] = kNameRegex;
}
inline void QuantizationInfo_QuantParams::clear_name_regex() {
  if (has_name_regex()) {
    name_oneof_.name_regex_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_name_oneof();
  }
}
inline const ::std::string& QuantizationInfo_QuantParams::name_regex() const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.QuantParams.name_regex)
  if (has_name_regex()) {
    return name_oneof_.name_regex_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void QuantizationInfo_QuantParams::set_name_regex(const ::std::string& value) {
  if (!has_name_regex()) {
    clear_name_oneof();
    set_has_name_regex();
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}
#if LANG_CXX11
inline void QuantizationInfo_QuantParams::set_name_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:mlir.quant.QuantizationInfo.QuantParams.name_regex)
  if (!has_name_regex()) {
    clear_name_oneof();
    set_has_name_regex();
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_regex_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}
#endif
inline void QuantizationInfo_QuantParams::set_name_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name_regex()) {
    clear_name_oneof();
    set_has_name_regex();
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}
inline void QuantizationInfo_QuantParams::set_name_regex(const char* value,
                             size_t size) {
  if (!has_name_regex()) {
    clear_name_oneof();
    set_has_name_regex();
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  name_oneof_.name_regex_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}
inline ::std::string* QuantizationInfo_QuantParams::mutable_name_regex() {
  if (!has_name_regex()) {
    clear_name_oneof();
    set_has_name_regex();
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return name_oneof_.name_regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}
inline ::std::string* QuantizationInfo_QuantParams::release_name_regex() {
  // @@protoc_insertion_point(field_release:mlir.quant.QuantizationInfo.QuantParams.name_regex)
  if (has_name_regex()) {
    clear_has_name_oneof();
    return name_oneof_.name_regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void QuantizationInfo_QuantParams::set_allocated_name_regex(::std::string* name_regex) {
  if (!has_name_regex()) {
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_name_oneof();
  if (name_regex != NULL) {
    set_has_name_regex();
    name_oneof_.name_regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_regex,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}
inline ::std::string* QuantizationInfo_QuantParams::unsafe_arena_release_name_regex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.quant.QuantizationInfo.QuantParams.name_regex)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_name_regex()) {
    clear_has_name_oneof();
    return name_oneof_.name_regex_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void QuantizationInfo_QuantParams::unsafe_arena_set_allocated_name_regex(::std::string* name_regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_name_regex()) {
    name_oneof_.name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_name_oneof();
  if (name_regex) {
    set_has_name_regex();
    name_oneof_.name_regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_regex, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mlir.quant.QuantizationInfo.QuantParams.name_regex)
}

// repeated .mlir.quant.QuantizationInfo.PerAxisParams params = 3;
inline int QuantizationInfo_QuantParams::params_size() const {
  return params_.size();
}
inline void QuantizationInfo_QuantParams::clear_params() {
  params_.Clear();
}
inline ::mlir::quant::QuantizationInfo_PerAxisParams* QuantizationInfo_QuantParams::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.QuantParams.params)
  return params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_PerAxisParams >*
QuantizationInfo_QuantParams::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:mlir.quant.QuantizationInfo.QuantParams.params)
  return &params_;
}
inline const ::mlir::quant::QuantizationInfo_PerAxisParams& QuantizationInfo_QuantParams::params(int index) const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.QuantParams.params)
  return params_.Get(index);
}
inline ::mlir::quant::QuantizationInfo_PerAxisParams* QuantizationInfo_QuantParams::add_params() {
  // @@protoc_insertion_point(field_add:mlir.quant.QuantizationInfo.QuantParams.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_PerAxisParams >&
QuantizationInfo_QuantParams::params() const {
  // @@protoc_insertion_point(field_list:mlir.quant.QuantizationInfo.QuantParams.params)
  return params_;
}

// .mlir.quant.QuantizationInfo.Metadata meta = 5;
inline bool QuantizationInfo_QuantParams::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void QuantizationInfo_QuantParams::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
inline const ::mlir::quant::QuantizationInfo_Metadata& QuantizationInfo_QuantParams::_internal_meta() const {
  return *meta_;
}
inline const ::mlir::quant::QuantizationInfo_Metadata& QuantizationInfo_QuantParams::meta() const {
  const ::mlir::quant::QuantizationInfo_Metadata* p = meta_;
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.QuantParams.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::mlir::quant::QuantizationInfo_Metadata*>(
      &::mlir::quant::_QuantizationInfo_Metadata_default_instance_);
}
inline ::mlir::quant::QuantizationInfo_Metadata* QuantizationInfo_QuantParams::release_meta() {
  // @@protoc_insertion_point(field_release:mlir.quant.QuantizationInfo.QuantParams.meta)
  
  ::mlir::quant::QuantizationInfo_Metadata* temp = meta_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  meta_ = NULL;
  return temp;
}
inline ::mlir::quant::QuantizationInfo_Metadata* QuantizationInfo_QuantParams::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mlir.quant.QuantizationInfo.QuantParams.meta)
  
  ::mlir::quant::QuantizationInfo_Metadata* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::mlir::quant::QuantizationInfo_Metadata* QuantizationInfo_QuantParams::mutable_meta() {
  
  if (meta_ == NULL) {
    auto* p = CreateMaybeMessage<::mlir::quant::QuantizationInfo_Metadata>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.QuantParams.meta)
  return meta_;
}
inline void QuantizationInfo_QuantParams::set_allocated_meta(::mlir::quant::QuantizationInfo_Metadata* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_;
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:mlir.quant.QuantizationInfo.QuantParams.meta)
}

inline bool QuantizationInfo_QuantParams::has_name_oneof() const {
  return name_oneof_case() != NAME_ONEOF_NOT_SET;
}
inline void QuantizationInfo_QuantParams::clear_has_name_oneof() {
  _oneof_case_[0] = NAME_ONEOF_NOT_SET;
}
inline QuantizationInfo_QuantParams::NameOneofCase QuantizationInfo_QuantParams::name_oneof_case() const {
  return QuantizationInfo_QuantParams::NameOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuantizationInfo

// repeated .mlir.quant.QuantizationInfo.QuantParams entries = 1;
inline int QuantizationInfo::entries_size() const {
  return entries_.size();
}
inline void QuantizationInfo::clear_entries() {
  entries_.Clear();
}
inline ::mlir::quant::QuantizationInfo_QuantParams* QuantizationInfo::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mlir.quant.QuantizationInfo.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_QuantParams >*
QuantizationInfo::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mlir.quant.QuantizationInfo.entries)
  return &entries_;
}
inline const ::mlir::quant::QuantizationInfo_QuantParams& QuantizationInfo::entries(int index) const {
  // @@protoc_insertion_point(field_get:mlir.quant.QuantizationInfo.entries)
  return entries_.Get(index);
}
inline ::mlir::quant::QuantizationInfo_QuantParams* QuantizationInfo::add_entries() {
  // @@protoc_insertion_point(field_add:mlir.quant.QuantizationInfo.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mlir::quant::QuantizationInfo_QuantParams >&
QuantizationInfo::entries() const {
  // @@protoc_insertion_point(field_list:mlir.quant.QuantizationInfo.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quant
}  // namespace mlir

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2flite_2fquantization_2fquantization_5finfo_2eproto
