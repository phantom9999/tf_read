// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/python/tpu_driver/tpu_driver.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto 

namespace protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto
namespace tpu_driver {
class ChipCoordinate;
class ChipCoordinateDefaultTypeInternal;
extern ChipCoordinateDefaultTypeInternal _ChipCoordinate_default_instance_;
class CpuInfo;
class CpuInfoDefaultTypeInternal;
extern CpuInfoDefaultTypeInternal _CpuInfo_default_instance_;
class SystemInfo;
class SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
class TpuChipInfo;
class TpuChipInfoDefaultTypeInternal;
extern TpuChipInfoDefaultTypeInternal _TpuChipInfo_default_instance_;
class TpuCoreInfo;
class TpuCoreInfoDefaultTypeInternal;
extern TpuCoreInfoDefaultTypeInternal _TpuCoreInfo_default_instance_;
class TpuDriverConfig;
class TpuDriverConfigDefaultTypeInternal;
extern TpuDriverConfigDefaultTypeInternal _TpuDriverConfig_default_instance_;
class TpuDriverConfig_GrpcConfig;
class TpuDriverConfig_GrpcConfigDefaultTypeInternal;
extern TpuDriverConfig_GrpcConfigDefaultTypeInternal _TpuDriverConfig_GrpcConfig_default_instance_;
}  // namespace tpu_driver
namespace google {
namespace protobuf {
template<> ::tpu_driver::ChipCoordinate* Arena::CreateMaybeMessage<::tpu_driver::ChipCoordinate>(Arena*);
template<> ::tpu_driver::CpuInfo* Arena::CreateMaybeMessage<::tpu_driver::CpuInfo>(Arena*);
template<> ::tpu_driver::SystemInfo* Arena::CreateMaybeMessage<::tpu_driver::SystemInfo>(Arena*);
template<> ::tpu_driver::TpuChipInfo* Arena::CreateMaybeMessage<::tpu_driver::TpuChipInfo>(Arena*);
template<> ::tpu_driver::TpuCoreInfo* Arena::CreateMaybeMessage<::tpu_driver::TpuCoreInfo>(Arena*);
template<> ::tpu_driver::TpuDriverConfig* Arena::CreateMaybeMessage<::tpu_driver::TpuDriverConfig>(Arena*);
template<> ::tpu_driver::TpuDriverConfig_GrpcConfig* Arena::CreateMaybeMessage<::tpu_driver::TpuDriverConfig_GrpcConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tpu_driver {

enum MemoryRegion {
  HBM = 1
};
bool MemoryRegion_IsValid(int value);
const MemoryRegion MemoryRegion_MIN = HBM;
const MemoryRegion MemoryRegion_MAX = HBM;
const int MemoryRegion_ARRAYSIZE = MemoryRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* MemoryRegion_descriptor();
inline const ::std::string& MemoryRegion_Name(MemoryRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    MemoryRegion_descriptor(), value);
}
inline bool MemoryRegion_Parse(
    const ::std::string& name, MemoryRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemoryRegion>(
    MemoryRegion_descriptor(), name, value);
}
// ===================================================================

class ChipCoordinate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.ChipCoordinate) */ {
 public:
  ChipCoordinate();
  virtual ~ChipCoordinate();

  ChipCoordinate(const ChipCoordinate& from);

  inline ChipCoordinate& operator=(const ChipCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChipCoordinate(ChipCoordinate&& from) noexcept
    : ChipCoordinate() {
    *this = ::std::move(from);
  }

  inline ChipCoordinate& operator=(ChipCoordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChipCoordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChipCoordinate* internal_default_instance() {
    return reinterpret_cast<const ChipCoordinate*>(
               &_ChipCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChipCoordinate* other);
  friend void swap(ChipCoordinate& a, ChipCoordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChipCoordinate* New() const final {
    return CreateMaybeMessage<ChipCoordinate>(NULL);
  }

  ChipCoordinate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChipCoordinate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChipCoordinate& from);
  void MergeFrom(const ChipCoordinate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChipCoordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tpu_driver.ChipCoordinate)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TpuCoreInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.TpuCoreInfo) */ {
 public:
  TpuCoreInfo();
  virtual ~TpuCoreInfo();

  TpuCoreInfo(const TpuCoreInfo& from);

  inline TpuCoreInfo& operator=(const TpuCoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpuCoreInfo(TpuCoreInfo&& from) noexcept
    : TpuCoreInfo() {
    *this = ::std::move(from);
  }

  inline TpuCoreInfo& operator=(TpuCoreInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TpuCoreInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpuCoreInfo* internal_default_instance() {
    return reinterpret_cast<const TpuCoreInfo*>(
               &_TpuCoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TpuCoreInfo* other);
  friend void swap(TpuCoreInfo& a, TpuCoreInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpuCoreInfo* New() const final {
    return CreateMaybeMessage<TpuCoreInfo>(NULL);
  }

  TpuCoreInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TpuCoreInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TpuCoreInfo& from);
  void MergeFrom(const TpuCoreInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpuCoreInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 core_on_chip_index = 2;
  bool has_core_on_chip_index() const;
  void clear_core_on_chip_index();
  static const int kCoreOnChipIndexFieldNumber = 2;
  ::google::protobuf::int32 core_on_chip_index() const;
  void set_core_on_chip_index(::google::protobuf::int32 value);

  // optional int32 core_on_host_index = 3;
  bool has_core_on_host_index() const;
  void clear_core_on_host_index();
  static const int kCoreOnHostIndexFieldNumber = 3;
  ::google::protobuf::int32 core_on_host_index() const;
  void set_core_on_host_index(::google::protobuf::int32 value);

  // optional int64 hbm_bytes_available = 100;
  bool has_hbm_bytes_available() const;
  void clear_hbm_bytes_available();
  static const int kHbmBytesAvailableFieldNumber = 100;
  ::google::protobuf::int64 hbm_bytes_available() const;
  void set_hbm_bytes_available(::google::protobuf::int64 value);

  // optional int64 hbm_bytes_allocatable = 101;
  bool has_hbm_bytes_allocatable() const;
  void clear_hbm_bytes_allocatable();
  static const int kHbmBytesAllocatableFieldNumber = 101;
  ::google::protobuf::int64 hbm_bytes_allocatable() const;
  void set_hbm_bytes_allocatable(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tpu_driver.TpuCoreInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_core_on_chip_index();
  void clear_has_core_on_chip_index();
  void set_has_core_on_host_index();
  void clear_has_core_on_host_index();
  void set_has_hbm_bytes_available();
  void clear_has_hbm_bytes_available();
  void set_has_hbm_bytes_allocatable();
  void clear_has_hbm_bytes_allocatable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 core_on_chip_index_;
  ::google::protobuf::int32 core_on_host_index_;
  ::google::protobuf::int64 hbm_bytes_available_;
  ::google::protobuf::int64 hbm_bytes_allocatable_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TpuChipInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.TpuChipInfo) */ {
 public:
  TpuChipInfo();
  virtual ~TpuChipInfo();

  TpuChipInfo(const TpuChipInfo& from);

  inline TpuChipInfo& operator=(const TpuChipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpuChipInfo(TpuChipInfo&& from) noexcept
    : TpuChipInfo() {
    *this = ::std::move(from);
  }

  inline TpuChipInfo& operator=(TpuChipInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TpuChipInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpuChipInfo* internal_default_instance() {
    return reinterpret_cast<const TpuChipInfo*>(
               &_TpuChipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TpuChipInfo* other);
  friend void swap(TpuChipInfo& a, TpuChipInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpuChipInfo* New() const final {
    return CreateMaybeMessage<TpuChipInfo>(NULL);
  }

  TpuChipInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TpuChipInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TpuChipInfo& from);
  void MergeFrom(const TpuChipInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpuChipInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tpu_driver.TpuCoreInfo core = 1;
  int core_size() const;
  void clear_core();
  static const int kCoreFieldNumber = 1;
  ::tpu_driver::TpuCoreInfo* mutable_core(int index);
  ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >*
      mutable_core();
  const ::tpu_driver::TpuCoreInfo& core(int index) const;
  ::tpu_driver::TpuCoreInfo* add_core();
  const ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >&
      core() const;

  // optional .tpu_driver.ChipCoordinate chip_coord = 3;
  bool has_chip_coord() const;
  void clear_chip_coord();
  static const int kChipCoordFieldNumber = 3;
  private:
  const ::tpu_driver::ChipCoordinate& _internal_chip_coord() const;
  public:
  const ::tpu_driver::ChipCoordinate& chip_coord() const;
  ::tpu_driver::ChipCoordinate* release_chip_coord();
  ::tpu_driver::ChipCoordinate* mutable_chip_coord();
  void set_allocated_chip_coord(::tpu_driver::ChipCoordinate* chip_coord);

  // optional int32 host_id = 2;
  bool has_host_id() const;
  void clear_host_id();
  static const int kHostIdFieldNumber = 2;
  ::google::protobuf::int32 host_id() const;
  void set_host_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tpu_driver.TpuChipInfo)
 private:
  void set_has_host_id();
  void clear_has_host_id();
  void set_has_chip_coord();
  void clear_has_chip_coord();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo > core_;
  ::tpu_driver::ChipCoordinate* chip_coord_;
  ::google::protobuf::int32 host_id_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CpuInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.CpuInfo) */ {
 public:
  CpuInfo();
  virtual ~CpuInfo();

  CpuInfo(const CpuInfo& from);

  inline CpuInfo& operator=(const CpuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CpuInfo(CpuInfo&& from) noexcept
    : CpuInfo() {
    *this = ::std::move(from);
  }

  inline CpuInfo& operator=(CpuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuInfo* internal_default_instance() {
    return reinterpret_cast<const CpuInfo*>(
               &_CpuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CpuInfo* other);
  friend void swap(CpuInfo& a, CpuInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CpuInfo* New() const final {
    return CreateMaybeMessage<CpuInfo>(NULL);
  }

  CpuInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CpuInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CpuInfo& from);
  void MergeFrom(const CpuInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num_cpu_cores = 1;
  bool has_num_cpu_cores() const;
  void clear_num_cpu_cores();
  static const int kNumCpuCoresFieldNumber = 1;
  ::google::protobuf::int32 num_cpu_cores() const;
  void set_num_cpu_cores(::google::protobuf::int32 value);

  // required float cpu_load_average_1min = 2;
  bool has_cpu_load_average_1min() const;
  void clear_cpu_load_average_1min();
  static const int kCpuLoadAverage1MinFieldNumber = 2;
  float cpu_load_average_1min() const;
  void set_cpu_load_average_1min(float value);

  // required int64 ram_bytes_total = 100;
  bool has_ram_bytes_total() const;
  void clear_ram_bytes_total();
  static const int kRamBytesTotalFieldNumber = 100;
  ::google::protobuf::int64 ram_bytes_total() const;
  void set_ram_bytes_total(::google::protobuf::int64 value);

  // required int64 ram_bytes_available = 101;
  bool has_ram_bytes_available() const;
  void clear_ram_bytes_available();
  static const int kRamBytesAvailableFieldNumber = 101;
  ::google::protobuf::int64 ram_bytes_available() const;
  void set_ram_bytes_available(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tpu_driver.CpuInfo)
 private:
  void set_has_num_cpu_cores();
  void clear_has_num_cpu_cores();
  void set_has_cpu_load_average_1min();
  void clear_has_cpu_load_average_1min();
  void set_has_ram_bytes_total();
  void clear_has_ram_bytes_total();
  void set_has_ram_bytes_available();
  void clear_has_ram_bytes_available();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 num_cpu_cores_;
  float cpu_load_average_1min_;
  ::google::protobuf::int64 ram_bytes_total_;
  ::google::protobuf::int64 ram_bytes_available_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.SystemInfo) */ {
 public:
  SystemInfo();
  virtual ~SystemInfo();

  SystemInfo(const SystemInfo& from);

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SystemInfo* other);
  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return CreateMaybeMessage<SystemInfo>(NULL);
  }

  SystemInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tpu_driver.TpuChipInfo tpu_chip = 1;
  int tpu_chip_size() const;
  void clear_tpu_chip();
  static const int kTpuChipFieldNumber = 1;
  ::tpu_driver::TpuChipInfo* mutable_tpu_chip(int index);
  ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuChipInfo >*
      mutable_tpu_chip();
  const ::tpu_driver::TpuChipInfo& tpu_chip(int index) const;
  ::tpu_driver::TpuChipInfo* add_tpu_chip();
  const ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuChipInfo >&
      tpu_chip() const;

  // repeated .tpu_driver.TpuCoreInfo local_core = 3;
  int local_core_size() const;
  void clear_local_core();
  static const int kLocalCoreFieldNumber = 3;
  ::tpu_driver::TpuCoreInfo* mutable_local_core(int index);
  ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >*
      mutable_local_core();
  const ::tpu_driver::TpuCoreInfo& local_core(int index) const;
  ::tpu_driver::TpuCoreInfo* add_local_core();
  const ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >&
      local_core() const;

  // required .tpu_driver.CpuInfo cpu = 2;
  bool has_cpu() const;
  void clear_cpu();
  static const int kCpuFieldNumber = 2;
  private:
  const ::tpu_driver::CpuInfo& _internal_cpu() const;
  public:
  const ::tpu_driver::CpuInfo& cpu() const;
  ::tpu_driver::CpuInfo* release_cpu();
  ::tpu_driver::CpuInfo* mutable_cpu();
  void set_allocated_cpu(::tpu_driver::CpuInfo* cpu);

  // optional int32 host_id = 4;
  bool has_host_id() const;
  void clear_host_id();
  static const int kHostIdFieldNumber = 4;
  ::google::protobuf::int32 host_id() const;
  void set_host_id(::google::protobuf::int32 value);

  // optional int32 host_count = 5;
  bool has_host_count() const;
  void clear_host_count();
  static const int kHostCountFieldNumber = 5;
  ::google::protobuf::int32 host_count() const;
  void set_host_count(::google::protobuf::int32 value);

  // optional int32 chip_count = 6;
  bool has_chip_count() const;
  void clear_chip_count();
  static const int kChipCountFieldNumber = 6;
  ::google::protobuf::int32 chip_count() const;
  void set_chip_count(::google::protobuf::int32 value);

  // optional int32 core_count = 7;
  bool has_core_count() const;
  void clear_core_count();
  static const int kCoreCountFieldNumber = 7;
  ::google::protobuf::int32 core_count() const;
  void set_core_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tpu_driver.SystemInfo)
 private:
  void set_has_cpu();
  void clear_has_cpu();
  void set_has_host_id();
  void clear_has_host_id();
  void set_has_host_count();
  void clear_has_host_count();
  void set_has_chip_count();
  void clear_has_chip_count();
  void set_has_core_count();
  void clear_has_core_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuChipInfo > tpu_chip_;
  ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo > local_core_;
  ::tpu_driver::CpuInfo* cpu_;
  ::google::protobuf::int32 host_id_;
  ::google::protobuf::int32 host_count_;
  ::google::protobuf::int32 chip_count_;
  ::google::protobuf::int32 core_count_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TpuDriverConfig_GrpcConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.TpuDriverConfig.GrpcConfig) */ {
 public:
  TpuDriverConfig_GrpcConfig();
  virtual ~TpuDriverConfig_GrpcConfig();

  TpuDriverConfig_GrpcConfig(const TpuDriverConfig_GrpcConfig& from);

  inline TpuDriverConfig_GrpcConfig& operator=(const TpuDriverConfig_GrpcConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpuDriverConfig_GrpcConfig(TpuDriverConfig_GrpcConfig&& from) noexcept
    : TpuDriverConfig_GrpcConfig() {
    *this = ::std::move(from);
  }

  inline TpuDriverConfig_GrpcConfig& operator=(TpuDriverConfig_GrpcConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TpuDriverConfig_GrpcConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpuDriverConfig_GrpcConfig* internal_default_instance() {
    return reinterpret_cast<const TpuDriverConfig_GrpcConfig*>(
               &_TpuDriverConfig_GrpcConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TpuDriverConfig_GrpcConfig* other);
  friend void swap(TpuDriverConfig_GrpcConfig& a, TpuDriverConfig_GrpcConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpuDriverConfig_GrpcConfig* New() const final {
    return CreateMaybeMessage<TpuDriverConfig_GrpcConfig>(NULL);
  }

  TpuDriverConfig_GrpcConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TpuDriverConfig_GrpcConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TpuDriverConfig_GrpcConfig& from);
  void MergeFrom(const TpuDriverConfig_GrpcConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpuDriverConfig_GrpcConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 connection_timeout_secs = 1 [default = 30];
  bool has_connection_timeout_secs() const;
  void clear_connection_timeout_secs();
  static const int kConnectionTimeoutSecsFieldNumber = 1;
  ::google::protobuf::int64 connection_timeout_secs() const;
  void set_connection_timeout_secs(::google::protobuf::int64 value);

  // optional int64 keepalive_timeout_secs = 2 [default = 30];
  bool has_keepalive_timeout_secs() const;
  void clear_keepalive_timeout_secs();
  static const int kKeepaliveTimeoutSecsFieldNumber = 2;
  ::google::protobuf::int64 keepalive_timeout_secs() const;
  void set_keepalive_timeout_secs(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tpu_driver.TpuDriverConfig.GrpcConfig)
 private:
  void set_has_connection_timeout_secs();
  void clear_has_connection_timeout_secs();
  void set_has_keepalive_timeout_secs();
  void clear_has_keepalive_timeout_secs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 connection_timeout_secs_;
  ::google::protobuf::int64 keepalive_timeout_secs_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TpuDriverConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tpu_driver.TpuDriverConfig) */ {
 public:
  TpuDriverConfig();
  virtual ~TpuDriverConfig();

  TpuDriverConfig(const TpuDriverConfig& from);

  inline TpuDriverConfig& operator=(const TpuDriverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpuDriverConfig(TpuDriverConfig&& from) noexcept
    : TpuDriverConfig() {
    *this = ::std::move(from);
  }

  inline TpuDriverConfig& operator=(TpuDriverConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TpuDriverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TpuDriverConfig* internal_default_instance() {
    return reinterpret_cast<const TpuDriverConfig*>(
               &_TpuDriverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TpuDriverConfig* other);
  friend void swap(TpuDriverConfig& a, TpuDriverConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpuDriverConfig* New() const final {
    return CreateMaybeMessage<TpuDriverConfig>(NULL);
  }

  TpuDriverConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TpuDriverConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TpuDriverConfig& from);
  void MergeFrom(const TpuDriverConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpuDriverConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TpuDriverConfig_GrpcConfig GrpcConfig;

  // accessors -------------------------------------------------------

  // optional string worker = 1;
  bool has_worker() const;
  void clear_worker();
  static const int kWorkerFieldNumber = 1;
  const ::std::string& worker() const;
  void set_worker(const ::std::string& value);
  #if LANG_CXX11
  void set_worker(::std::string&& value);
  #endif
  void set_worker(const char* value);
  void set_worker(const char* value, size_t size);
  ::std::string* mutable_worker();
  ::std::string* release_worker();
  void set_allocated_worker(::std::string* worker);

  // optional .tpu_driver.TpuDriverConfig.GrpcConfig grpc = 2;
  bool has_grpc() const;
  void clear_grpc();
  static const int kGrpcFieldNumber = 2;
  private:
  const ::tpu_driver::TpuDriverConfig_GrpcConfig& _internal_grpc() const;
  public:
  const ::tpu_driver::TpuDriverConfig_GrpcConfig& grpc() const;
  ::tpu_driver::TpuDriverConfig_GrpcConfig* release_grpc();
  ::tpu_driver::TpuDriverConfig_GrpcConfig* mutable_grpc();
  void set_allocated_grpc(::tpu_driver::TpuDriverConfig_GrpcConfig* grpc);

  // @@protoc_insertion_point(class_scope:tpu_driver.TpuDriverConfig)
 private:
  void set_has_worker();
  void clear_has_worker();
  void set_has_grpc();
  void clear_has_grpc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr worker_;
  ::tpu_driver::TpuDriverConfig_GrpcConfig* grpc_;
  friend struct ::protobuf_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChipCoordinate

// required int32 x = 1;
inline bool ChipCoordinate::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChipCoordinate::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChipCoordinate::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChipCoordinate::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ChipCoordinate::x() const {
  // @@protoc_insertion_point(field_get:tpu_driver.ChipCoordinate.x)
  return x_;
}
inline void ChipCoordinate::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.ChipCoordinate.x)
}

// required int32 y = 2;
inline bool ChipCoordinate::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChipCoordinate::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChipCoordinate::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChipCoordinate::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ChipCoordinate::y() const {
  // @@protoc_insertion_point(field_get:tpu_driver.ChipCoordinate.y)
  return y_;
}
inline void ChipCoordinate::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.ChipCoordinate.y)
}

// required int32 z = 3;
inline bool ChipCoordinate::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChipCoordinate::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChipCoordinate::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChipCoordinate::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 ChipCoordinate::z() const {
  // @@protoc_insertion_point(field_get:tpu_driver.ChipCoordinate.z)
  return z_;
}
inline void ChipCoordinate::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.ChipCoordinate.z)
}

// -------------------------------------------------------------------

// TpuCoreInfo

// required int32 id = 1;
inline bool TpuCoreInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpuCoreInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpuCoreInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpuCoreInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TpuCoreInfo::id() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuCoreInfo.id)
  return id_;
}
inline void TpuCoreInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuCoreInfo.id)
}

// optional int32 core_on_chip_index = 2;
inline bool TpuCoreInfo::has_core_on_chip_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpuCoreInfo::set_has_core_on_chip_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpuCoreInfo::clear_has_core_on_chip_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpuCoreInfo::clear_core_on_chip_index() {
  core_on_chip_index_ = 0;
  clear_has_core_on_chip_index();
}
inline ::google::protobuf::int32 TpuCoreInfo::core_on_chip_index() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuCoreInfo.core_on_chip_index)
  return core_on_chip_index_;
}
inline void TpuCoreInfo::set_core_on_chip_index(::google::protobuf::int32 value) {
  set_has_core_on_chip_index();
  core_on_chip_index_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuCoreInfo.core_on_chip_index)
}

// optional int32 core_on_host_index = 3;
inline bool TpuCoreInfo::has_core_on_host_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TpuCoreInfo::set_has_core_on_host_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TpuCoreInfo::clear_has_core_on_host_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TpuCoreInfo::clear_core_on_host_index() {
  core_on_host_index_ = 0;
  clear_has_core_on_host_index();
}
inline ::google::protobuf::int32 TpuCoreInfo::core_on_host_index() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuCoreInfo.core_on_host_index)
  return core_on_host_index_;
}
inline void TpuCoreInfo::set_core_on_host_index(::google::protobuf::int32 value) {
  set_has_core_on_host_index();
  core_on_host_index_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuCoreInfo.core_on_host_index)
}

// optional int64 hbm_bytes_available = 100;
inline bool TpuCoreInfo::has_hbm_bytes_available() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TpuCoreInfo::set_has_hbm_bytes_available() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TpuCoreInfo::clear_has_hbm_bytes_available() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TpuCoreInfo::clear_hbm_bytes_available() {
  hbm_bytes_available_ = GOOGLE_LONGLONG(0);
  clear_has_hbm_bytes_available();
}
inline ::google::protobuf::int64 TpuCoreInfo::hbm_bytes_available() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuCoreInfo.hbm_bytes_available)
  return hbm_bytes_available_;
}
inline void TpuCoreInfo::set_hbm_bytes_available(::google::protobuf::int64 value) {
  set_has_hbm_bytes_available();
  hbm_bytes_available_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuCoreInfo.hbm_bytes_available)
}

// optional int64 hbm_bytes_allocatable = 101;
inline bool TpuCoreInfo::has_hbm_bytes_allocatable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TpuCoreInfo::set_has_hbm_bytes_allocatable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TpuCoreInfo::clear_has_hbm_bytes_allocatable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TpuCoreInfo::clear_hbm_bytes_allocatable() {
  hbm_bytes_allocatable_ = GOOGLE_LONGLONG(0);
  clear_has_hbm_bytes_allocatable();
}
inline ::google::protobuf::int64 TpuCoreInfo::hbm_bytes_allocatable() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuCoreInfo.hbm_bytes_allocatable)
  return hbm_bytes_allocatable_;
}
inline void TpuCoreInfo::set_hbm_bytes_allocatable(::google::protobuf::int64 value) {
  set_has_hbm_bytes_allocatable();
  hbm_bytes_allocatable_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuCoreInfo.hbm_bytes_allocatable)
}

// -------------------------------------------------------------------

// TpuChipInfo

// repeated .tpu_driver.TpuCoreInfo core = 1;
inline int TpuChipInfo::core_size() const {
  return core_.size();
}
inline void TpuChipInfo::clear_core() {
  core_.Clear();
}
inline ::tpu_driver::TpuCoreInfo* TpuChipInfo::mutable_core(int index) {
  // @@protoc_insertion_point(field_mutable:tpu_driver.TpuChipInfo.core)
  return core_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >*
TpuChipInfo::mutable_core() {
  // @@protoc_insertion_point(field_mutable_list:tpu_driver.TpuChipInfo.core)
  return &core_;
}
inline const ::tpu_driver::TpuCoreInfo& TpuChipInfo::core(int index) const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuChipInfo.core)
  return core_.Get(index);
}
inline ::tpu_driver::TpuCoreInfo* TpuChipInfo::add_core() {
  // @@protoc_insertion_point(field_add:tpu_driver.TpuChipInfo.core)
  return core_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >&
TpuChipInfo::core() const {
  // @@protoc_insertion_point(field_list:tpu_driver.TpuChipInfo.core)
  return core_;
}

// optional int32 host_id = 2;
inline bool TpuChipInfo::has_host_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpuChipInfo::set_has_host_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpuChipInfo::clear_has_host_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpuChipInfo::clear_host_id() {
  host_id_ = 0;
  clear_has_host_id();
}
inline ::google::protobuf::int32 TpuChipInfo::host_id() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuChipInfo.host_id)
  return host_id_;
}
inline void TpuChipInfo::set_host_id(::google::protobuf::int32 value) {
  set_has_host_id();
  host_id_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuChipInfo.host_id)
}

// optional .tpu_driver.ChipCoordinate chip_coord = 3;
inline bool TpuChipInfo::has_chip_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpuChipInfo::set_has_chip_coord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpuChipInfo::clear_has_chip_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpuChipInfo::clear_chip_coord() {
  if (chip_coord_ != NULL) chip_coord_->Clear();
  clear_has_chip_coord();
}
inline const ::tpu_driver::ChipCoordinate& TpuChipInfo::_internal_chip_coord() const {
  return *chip_coord_;
}
inline const ::tpu_driver::ChipCoordinate& TpuChipInfo::chip_coord() const {
  const ::tpu_driver::ChipCoordinate* p = chip_coord_;
  // @@protoc_insertion_point(field_get:tpu_driver.TpuChipInfo.chip_coord)
  return p != NULL ? *p : *reinterpret_cast<const ::tpu_driver::ChipCoordinate*>(
      &::tpu_driver::_ChipCoordinate_default_instance_);
}
inline ::tpu_driver::ChipCoordinate* TpuChipInfo::release_chip_coord() {
  // @@protoc_insertion_point(field_release:tpu_driver.TpuChipInfo.chip_coord)
  clear_has_chip_coord();
  ::tpu_driver::ChipCoordinate* temp = chip_coord_;
  chip_coord_ = NULL;
  return temp;
}
inline ::tpu_driver::ChipCoordinate* TpuChipInfo::mutable_chip_coord() {
  set_has_chip_coord();
  if (chip_coord_ == NULL) {
    auto* p = CreateMaybeMessage<::tpu_driver::ChipCoordinate>(GetArenaNoVirtual());
    chip_coord_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tpu_driver.TpuChipInfo.chip_coord)
  return chip_coord_;
}
inline void TpuChipInfo::set_allocated_chip_coord(::tpu_driver::ChipCoordinate* chip_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chip_coord_;
  }
  if (chip_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chip_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chip_coord, submessage_arena);
    }
    set_has_chip_coord();
  } else {
    clear_has_chip_coord();
  }
  chip_coord_ = chip_coord;
  // @@protoc_insertion_point(field_set_allocated:tpu_driver.TpuChipInfo.chip_coord)
}

// -------------------------------------------------------------------

// CpuInfo

// required int32 num_cpu_cores = 1;
inline bool CpuInfo::has_num_cpu_cores() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuInfo::set_has_num_cpu_cores() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CpuInfo::clear_has_num_cpu_cores() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CpuInfo::clear_num_cpu_cores() {
  num_cpu_cores_ = 0;
  clear_has_num_cpu_cores();
}
inline ::google::protobuf::int32 CpuInfo::num_cpu_cores() const {
  // @@protoc_insertion_point(field_get:tpu_driver.CpuInfo.num_cpu_cores)
  return num_cpu_cores_;
}
inline void CpuInfo::set_num_cpu_cores(::google::protobuf::int32 value) {
  set_has_num_cpu_cores();
  num_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.CpuInfo.num_cpu_cores)
}

// required float cpu_load_average_1min = 2;
inline bool CpuInfo::has_cpu_load_average_1min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuInfo::set_has_cpu_load_average_1min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CpuInfo::clear_has_cpu_load_average_1min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CpuInfo::clear_cpu_load_average_1min() {
  cpu_load_average_1min_ = 0;
  clear_has_cpu_load_average_1min();
}
inline float CpuInfo::cpu_load_average_1min() const {
  // @@protoc_insertion_point(field_get:tpu_driver.CpuInfo.cpu_load_average_1min)
  return cpu_load_average_1min_;
}
inline void CpuInfo::set_cpu_load_average_1min(float value) {
  set_has_cpu_load_average_1min();
  cpu_load_average_1min_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.CpuInfo.cpu_load_average_1min)
}

// required int64 ram_bytes_total = 100;
inline bool CpuInfo::has_ram_bytes_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CpuInfo::set_has_ram_bytes_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CpuInfo::clear_has_ram_bytes_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CpuInfo::clear_ram_bytes_total() {
  ram_bytes_total_ = GOOGLE_LONGLONG(0);
  clear_has_ram_bytes_total();
}
inline ::google::protobuf::int64 CpuInfo::ram_bytes_total() const {
  // @@protoc_insertion_point(field_get:tpu_driver.CpuInfo.ram_bytes_total)
  return ram_bytes_total_;
}
inline void CpuInfo::set_ram_bytes_total(::google::protobuf::int64 value) {
  set_has_ram_bytes_total();
  ram_bytes_total_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.CpuInfo.ram_bytes_total)
}

// required int64 ram_bytes_available = 101;
inline bool CpuInfo::has_ram_bytes_available() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CpuInfo::set_has_ram_bytes_available() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CpuInfo::clear_has_ram_bytes_available() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CpuInfo::clear_ram_bytes_available() {
  ram_bytes_available_ = GOOGLE_LONGLONG(0);
  clear_has_ram_bytes_available();
}
inline ::google::protobuf::int64 CpuInfo::ram_bytes_available() const {
  // @@protoc_insertion_point(field_get:tpu_driver.CpuInfo.ram_bytes_available)
  return ram_bytes_available_;
}
inline void CpuInfo::set_ram_bytes_available(::google::protobuf::int64 value) {
  set_has_ram_bytes_available();
  ram_bytes_available_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.CpuInfo.ram_bytes_available)
}

// -------------------------------------------------------------------

// SystemInfo

// repeated .tpu_driver.TpuChipInfo tpu_chip = 1;
inline int SystemInfo::tpu_chip_size() const {
  return tpu_chip_.size();
}
inline void SystemInfo::clear_tpu_chip() {
  tpu_chip_.Clear();
}
inline ::tpu_driver::TpuChipInfo* SystemInfo::mutable_tpu_chip(int index) {
  // @@protoc_insertion_point(field_mutable:tpu_driver.SystemInfo.tpu_chip)
  return tpu_chip_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuChipInfo >*
SystemInfo::mutable_tpu_chip() {
  // @@protoc_insertion_point(field_mutable_list:tpu_driver.SystemInfo.tpu_chip)
  return &tpu_chip_;
}
inline const ::tpu_driver::TpuChipInfo& SystemInfo::tpu_chip(int index) const {
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.tpu_chip)
  return tpu_chip_.Get(index);
}
inline ::tpu_driver::TpuChipInfo* SystemInfo::add_tpu_chip() {
  // @@protoc_insertion_point(field_add:tpu_driver.SystemInfo.tpu_chip)
  return tpu_chip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuChipInfo >&
SystemInfo::tpu_chip() const {
  // @@protoc_insertion_point(field_list:tpu_driver.SystemInfo.tpu_chip)
  return tpu_chip_;
}

// required .tpu_driver.CpuInfo cpu = 2;
inline bool SystemInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo::set_has_cpu() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo::clear_cpu() {
  if (cpu_ != NULL) cpu_->Clear();
  clear_has_cpu();
}
inline const ::tpu_driver::CpuInfo& SystemInfo::_internal_cpu() const {
  return *cpu_;
}
inline const ::tpu_driver::CpuInfo& SystemInfo::cpu() const {
  const ::tpu_driver::CpuInfo* p = cpu_;
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.cpu)
  return p != NULL ? *p : *reinterpret_cast<const ::tpu_driver::CpuInfo*>(
      &::tpu_driver::_CpuInfo_default_instance_);
}
inline ::tpu_driver::CpuInfo* SystemInfo::release_cpu() {
  // @@protoc_insertion_point(field_release:tpu_driver.SystemInfo.cpu)
  clear_has_cpu();
  ::tpu_driver::CpuInfo* temp = cpu_;
  cpu_ = NULL;
  return temp;
}
inline ::tpu_driver::CpuInfo* SystemInfo::mutable_cpu() {
  set_has_cpu();
  if (cpu_ == NULL) {
    auto* p = CreateMaybeMessage<::tpu_driver::CpuInfo>(GetArenaNoVirtual());
    cpu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tpu_driver.SystemInfo.cpu)
  return cpu_;
}
inline void SystemInfo::set_allocated_cpu(::tpu_driver::CpuInfo* cpu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cpu_;
  }
  if (cpu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cpu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    set_has_cpu();
  } else {
    clear_has_cpu();
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:tpu_driver.SystemInfo.cpu)
}

// repeated .tpu_driver.TpuCoreInfo local_core = 3;
inline int SystemInfo::local_core_size() const {
  return local_core_.size();
}
inline void SystemInfo::clear_local_core() {
  local_core_.Clear();
}
inline ::tpu_driver::TpuCoreInfo* SystemInfo::mutable_local_core(int index) {
  // @@protoc_insertion_point(field_mutable:tpu_driver.SystemInfo.local_core)
  return local_core_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >*
SystemInfo::mutable_local_core() {
  // @@protoc_insertion_point(field_mutable_list:tpu_driver.SystemInfo.local_core)
  return &local_core_;
}
inline const ::tpu_driver::TpuCoreInfo& SystemInfo::local_core(int index) const {
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.local_core)
  return local_core_.Get(index);
}
inline ::tpu_driver::TpuCoreInfo* SystemInfo::add_local_core() {
  // @@protoc_insertion_point(field_add:tpu_driver.SystemInfo.local_core)
  return local_core_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpu_driver::TpuCoreInfo >&
SystemInfo::local_core() const {
  // @@protoc_insertion_point(field_list:tpu_driver.SystemInfo.local_core)
  return local_core_;
}

// optional int32 host_id = 4;
inline bool SystemInfo::has_host_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo::set_has_host_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo::clear_has_host_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo::clear_host_id() {
  host_id_ = 0;
  clear_has_host_id();
}
inline ::google::protobuf::int32 SystemInfo::host_id() const {
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.host_id)
  return host_id_;
}
inline void SystemInfo::set_host_id(::google::protobuf::int32 value) {
  set_has_host_id();
  host_id_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.SystemInfo.host_id)
}

// optional int32 host_count = 5;
inline bool SystemInfo::has_host_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo::set_has_host_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo::clear_has_host_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo::clear_host_count() {
  host_count_ = 0;
  clear_has_host_count();
}
inline ::google::protobuf::int32 SystemInfo::host_count() const {
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.host_count)
  return host_count_;
}
inline void SystemInfo::set_host_count(::google::protobuf::int32 value) {
  set_has_host_count();
  host_count_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.SystemInfo.host_count)
}

// optional int32 chip_count = 6;
inline bool SystemInfo::has_chip_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemInfo::set_has_chip_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemInfo::clear_has_chip_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemInfo::clear_chip_count() {
  chip_count_ = 0;
  clear_has_chip_count();
}
inline ::google::protobuf::int32 SystemInfo::chip_count() const {
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.chip_count)
  return chip_count_;
}
inline void SystemInfo::set_chip_count(::google::protobuf::int32 value) {
  set_has_chip_count();
  chip_count_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.SystemInfo.chip_count)
}

// optional int32 core_count = 7;
inline bool SystemInfo::has_core_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemInfo::set_has_core_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemInfo::clear_has_core_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemInfo::clear_core_count() {
  core_count_ = 0;
  clear_has_core_count();
}
inline ::google::protobuf::int32 SystemInfo::core_count() const {
  // @@protoc_insertion_point(field_get:tpu_driver.SystemInfo.core_count)
  return core_count_;
}
inline void SystemInfo::set_core_count(::google::protobuf::int32 value) {
  set_has_core_count();
  core_count_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.SystemInfo.core_count)
}

// -------------------------------------------------------------------

// TpuDriverConfig_GrpcConfig

// optional int64 connection_timeout_secs = 1 [default = 30];
inline bool TpuDriverConfig_GrpcConfig::has_connection_timeout_secs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpuDriverConfig_GrpcConfig::set_has_connection_timeout_secs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpuDriverConfig_GrpcConfig::clear_has_connection_timeout_secs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpuDriverConfig_GrpcConfig::clear_connection_timeout_secs() {
  connection_timeout_secs_ = GOOGLE_LONGLONG(30);
  clear_has_connection_timeout_secs();
}
inline ::google::protobuf::int64 TpuDriverConfig_GrpcConfig::connection_timeout_secs() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuDriverConfig.GrpcConfig.connection_timeout_secs)
  return connection_timeout_secs_;
}
inline void TpuDriverConfig_GrpcConfig::set_connection_timeout_secs(::google::protobuf::int64 value) {
  set_has_connection_timeout_secs();
  connection_timeout_secs_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuDriverConfig.GrpcConfig.connection_timeout_secs)
}

// optional int64 keepalive_timeout_secs = 2 [default = 30];
inline bool TpuDriverConfig_GrpcConfig::has_keepalive_timeout_secs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpuDriverConfig_GrpcConfig::set_has_keepalive_timeout_secs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpuDriverConfig_GrpcConfig::clear_has_keepalive_timeout_secs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpuDriverConfig_GrpcConfig::clear_keepalive_timeout_secs() {
  keepalive_timeout_secs_ = GOOGLE_LONGLONG(30);
  clear_has_keepalive_timeout_secs();
}
inline ::google::protobuf::int64 TpuDriverConfig_GrpcConfig::keepalive_timeout_secs() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuDriverConfig.GrpcConfig.keepalive_timeout_secs)
  return keepalive_timeout_secs_;
}
inline void TpuDriverConfig_GrpcConfig::set_keepalive_timeout_secs(::google::protobuf::int64 value) {
  set_has_keepalive_timeout_secs();
  keepalive_timeout_secs_ = value;
  // @@protoc_insertion_point(field_set:tpu_driver.TpuDriverConfig.GrpcConfig.keepalive_timeout_secs)
}

// -------------------------------------------------------------------

// TpuDriverConfig

// optional string worker = 1;
inline bool TpuDriverConfig::has_worker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpuDriverConfig::set_has_worker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TpuDriverConfig::clear_has_worker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TpuDriverConfig::clear_worker() {
  worker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_worker();
}
inline const ::std::string& TpuDriverConfig::worker() const {
  // @@protoc_insertion_point(field_get:tpu_driver.TpuDriverConfig.worker)
  return worker_.GetNoArena();
}
inline void TpuDriverConfig::set_worker(const ::std::string& value) {
  set_has_worker();
  worker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tpu_driver.TpuDriverConfig.worker)
}
#if LANG_CXX11
inline void TpuDriverConfig::set_worker(::std::string&& value) {
  set_has_worker();
  worker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tpu_driver.TpuDriverConfig.worker)
}
#endif
inline void TpuDriverConfig::set_worker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_worker();
  worker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tpu_driver.TpuDriverConfig.worker)
}
inline void TpuDriverConfig::set_worker(const char* value, size_t size) {
  set_has_worker();
  worker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tpu_driver.TpuDriverConfig.worker)
}
inline ::std::string* TpuDriverConfig::mutable_worker() {
  set_has_worker();
  // @@protoc_insertion_point(field_mutable:tpu_driver.TpuDriverConfig.worker)
  return worker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TpuDriverConfig::release_worker() {
  // @@protoc_insertion_point(field_release:tpu_driver.TpuDriverConfig.worker)
  if (!has_worker()) {
    return NULL;
  }
  clear_has_worker();
  return worker_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TpuDriverConfig::set_allocated_worker(::std::string* worker) {
  if (worker != NULL) {
    set_has_worker();
  } else {
    clear_has_worker();
  }
  worker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker);
  // @@protoc_insertion_point(field_set_allocated:tpu_driver.TpuDriverConfig.worker)
}

// optional .tpu_driver.TpuDriverConfig.GrpcConfig grpc = 2;
inline bool TpuDriverConfig::has_grpc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpuDriverConfig::set_has_grpc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TpuDriverConfig::clear_has_grpc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TpuDriverConfig::clear_grpc() {
  if (grpc_ != NULL) grpc_->Clear();
  clear_has_grpc();
}
inline const ::tpu_driver::TpuDriverConfig_GrpcConfig& TpuDriverConfig::_internal_grpc() const {
  return *grpc_;
}
inline const ::tpu_driver::TpuDriverConfig_GrpcConfig& TpuDriverConfig::grpc() const {
  const ::tpu_driver::TpuDriverConfig_GrpcConfig* p = grpc_;
  // @@protoc_insertion_point(field_get:tpu_driver.TpuDriverConfig.grpc)
  return p != NULL ? *p : *reinterpret_cast<const ::tpu_driver::TpuDriverConfig_GrpcConfig*>(
      &::tpu_driver::_TpuDriverConfig_GrpcConfig_default_instance_);
}
inline ::tpu_driver::TpuDriverConfig_GrpcConfig* TpuDriverConfig::release_grpc() {
  // @@protoc_insertion_point(field_release:tpu_driver.TpuDriverConfig.grpc)
  clear_has_grpc();
  ::tpu_driver::TpuDriverConfig_GrpcConfig* temp = grpc_;
  grpc_ = NULL;
  return temp;
}
inline ::tpu_driver::TpuDriverConfig_GrpcConfig* TpuDriverConfig::mutable_grpc() {
  set_has_grpc();
  if (grpc_ == NULL) {
    auto* p = CreateMaybeMessage<::tpu_driver::TpuDriverConfig_GrpcConfig>(GetArenaNoVirtual());
    grpc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tpu_driver.TpuDriverConfig.grpc)
  return grpc_;
}
inline void TpuDriverConfig::set_allocated_grpc(::tpu_driver::TpuDriverConfig_GrpcConfig* grpc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete grpc_;
  }
  if (grpc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      grpc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, grpc, submessage_arena);
    }
    set_has_grpc();
  } else {
    clear_has_grpc();
  }
  grpc_ = grpc;
  // @@protoc_insertion_point(field_set_allocated:tpu_driver.TpuDriverConfig.grpc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpu_driver

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tpu_driver::MemoryRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tpu_driver::MemoryRegion>() {
  return ::tpu_driver::MemoryRegion_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fpython_2ftpu_5fdriver_2ftpu_5fdriver_2eproto
