// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/compiler/xla/rpc/xla_service.proto

#include "tensorflow/compiler/xla/rpc/xla_service.pb.h"
#include "tensorflow/compiler/xla/rpc/xla_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace xla {

static const char* XlaService_method_names[] = {
  "/xla.XlaService/Unregister",
  "/xla.XlaService/DeconstructTuple",
  "/xla.XlaService/Unpack",
  "/xla.XlaService/GetShape",
  "/xla.XlaService/GetComputationGraphStats",
  "/xla.XlaService/LoadData",
  "/xla.XlaService/TransferToClient",
  "/xla.XlaService/TransferToServer",
  "/xla.XlaService/TransferToInfeed",
  "/xla.XlaService/TransferFromOutfeed",
  "/xla.XlaService/ResetDevice",
  "/xla.XlaService/ComputeConstantGraph",
  "/xla.XlaService/GetDeviceHandles",
  "/xla.XlaService/CreateChannelHandle",
  "/xla.XlaService/Compile",
  "/xla.XlaService/Execute",
  "/xla.XlaService/ExecuteGraphParallel",
  "/xla.XlaService/WaitForExecution",
};

std::unique_ptr< XlaService::Stub> XlaService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XlaService::Stub> stub(new XlaService::Stub(channel));
  return stub;
}

XlaService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Unregister_(XlaService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeconstructTuple_(XlaService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unpack_(XlaService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShape_(XlaService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetComputationGraphStats_(XlaService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadData_(XlaService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferToClient_(XlaService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferToServer_(XlaService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferToInfeed_(XlaService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferFromOutfeed_(XlaService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetDevice_(XlaService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComputeConstantGraph_(XlaService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceHandles_(XlaService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChannelHandle_(XlaService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Compile_(XlaService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(XlaService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteGraphParallel_(XlaService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitForExecution_(XlaService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status XlaService::Stub::Unregister(::grpc::ClientContext* context, const ::xla::UnregisterRequest& request, ::xla::UnregisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unregister_, context, request, response);
}

void XlaService::Stub::experimental_async::Unregister(::grpc::ClientContext* context, const ::xla::UnregisterRequest* request, ::xla::UnregisterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unregister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::UnregisterResponse>* XlaService::Stub::AsyncUnregisterRaw(::grpc::ClientContext* context, const ::xla::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::UnregisterResponse>::Create(channel_.get(), cq, rpcmethod_Unregister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::UnregisterResponse>* XlaService::Stub::PrepareAsyncUnregisterRaw(::grpc::ClientContext* context, const ::xla::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::UnregisterResponse>::Create(channel_.get(), cq, rpcmethod_Unregister_, context, request, false);
}

::grpc::Status XlaService::Stub::DeconstructTuple(::grpc::ClientContext* context, const ::xla::DeconstructTupleRequest& request, ::xla::DeconstructTupleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeconstructTuple_, context, request, response);
}

void XlaService::Stub::experimental_async::DeconstructTuple(::grpc::ClientContext* context, const ::xla::DeconstructTupleRequest* request, ::xla::DeconstructTupleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeconstructTuple_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::DeconstructTupleResponse>* XlaService::Stub::AsyncDeconstructTupleRaw(::grpc::ClientContext* context, const ::xla::DeconstructTupleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::DeconstructTupleResponse>::Create(channel_.get(), cq, rpcmethod_DeconstructTuple_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::DeconstructTupleResponse>* XlaService::Stub::PrepareAsyncDeconstructTupleRaw(::grpc::ClientContext* context, const ::xla::DeconstructTupleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::DeconstructTupleResponse>::Create(channel_.get(), cq, rpcmethod_DeconstructTuple_, context, request, false);
}

::grpc::Status XlaService::Stub::Unpack(::grpc::ClientContext* context, const ::xla::UnpackRequest& request, ::xla::UnpackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unpack_, context, request, response);
}

void XlaService::Stub::experimental_async::Unpack(::grpc::ClientContext* context, const ::xla::UnpackRequest* request, ::xla::UnpackResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unpack_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::UnpackResponse>* XlaService::Stub::AsyncUnpackRaw(::grpc::ClientContext* context, const ::xla::UnpackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::UnpackResponse>::Create(channel_.get(), cq, rpcmethod_Unpack_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::UnpackResponse>* XlaService::Stub::PrepareAsyncUnpackRaw(::grpc::ClientContext* context, const ::xla::UnpackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::UnpackResponse>::Create(channel_.get(), cq, rpcmethod_Unpack_, context, request, false);
}

::grpc::Status XlaService::Stub::GetShape(::grpc::ClientContext* context, const ::xla::GetShapeRequest& request, ::xla::GetShapeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetShape_, context, request, response);
}

void XlaService::Stub::experimental_async::GetShape(::grpc::ClientContext* context, const ::xla::GetShapeRequest* request, ::xla::GetShapeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetShape_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::GetShapeResponse>* XlaService::Stub::AsyncGetShapeRaw(::grpc::ClientContext* context, const ::xla::GetShapeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::GetShapeResponse>::Create(channel_.get(), cq, rpcmethod_GetShape_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::GetShapeResponse>* XlaService::Stub::PrepareAsyncGetShapeRaw(::grpc::ClientContext* context, const ::xla::GetShapeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::GetShapeResponse>::Create(channel_.get(), cq, rpcmethod_GetShape_, context, request, false);
}

::grpc::Status XlaService::Stub::GetComputationGraphStats(::grpc::ClientContext* context, const ::xla::ComputationGraphStatsRequest& request, ::xla::ComputationStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetComputationGraphStats_, context, request, response);
}

void XlaService::Stub::experimental_async::GetComputationGraphStats(::grpc::ClientContext* context, const ::xla::ComputationGraphStatsRequest* request, ::xla::ComputationStatsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetComputationGraphStats_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::ComputationStatsResponse>* XlaService::Stub::AsyncGetComputationGraphStatsRaw(::grpc::ClientContext* context, const ::xla::ComputationGraphStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ComputationStatsResponse>::Create(channel_.get(), cq, rpcmethod_GetComputationGraphStats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::ComputationStatsResponse>* XlaService::Stub::PrepareAsyncGetComputationGraphStatsRaw(::grpc::ClientContext* context, const ::xla::ComputationGraphStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ComputationStatsResponse>::Create(channel_.get(), cq, rpcmethod_GetComputationGraphStats_, context, request, false);
}

::grpc::Status XlaService::Stub::LoadData(::grpc::ClientContext* context, const ::xla::LoadDataRequest& request, ::xla::LoadDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadData_, context, request, response);
}

void XlaService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::xla::LoadDataRequest* request, ::xla::LoadDataResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::LoadDataResponse>* XlaService::Stub::AsyncLoadDataRaw(::grpc::ClientContext* context, const ::xla::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::LoadDataResponse>::Create(channel_.get(), cq, rpcmethod_LoadData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::LoadDataResponse>* XlaService::Stub::PrepareAsyncLoadDataRaw(::grpc::ClientContext* context, const ::xla::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::LoadDataResponse>::Create(channel_.get(), cq, rpcmethod_LoadData_, context, request, false);
}

::grpc::Status XlaService::Stub::TransferToClient(::grpc::ClientContext* context, const ::xla::TransferToClientRequest& request, ::xla::TransferToClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferToClient_, context, request, response);
}

void XlaService::Stub::experimental_async::TransferToClient(::grpc::ClientContext* context, const ::xla::TransferToClientRequest* request, ::xla::TransferToClientResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferToClient_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::TransferToClientResponse>* XlaService::Stub::AsyncTransferToClientRaw(::grpc::ClientContext* context, const ::xla::TransferToClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferToClientResponse>::Create(channel_.get(), cq, rpcmethod_TransferToClient_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::TransferToClientResponse>* XlaService::Stub::PrepareAsyncTransferToClientRaw(::grpc::ClientContext* context, const ::xla::TransferToClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferToClientResponse>::Create(channel_.get(), cq, rpcmethod_TransferToClient_, context, request, false);
}

::grpc::Status XlaService::Stub::TransferToServer(::grpc::ClientContext* context, const ::xla::TransferToServerRequest& request, ::xla::TransferToServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferToServer_, context, request, response);
}

void XlaService::Stub::experimental_async::TransferToServer(::grpc::ClientContext* context, const ::xla::TransferToServerRequest* request, ::xla::TransferToServerResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferToServer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::TransferToServerResponse>* XlaService::Stub::AsyncTransferToServerRaw(::grpc::ClientContext* context, const ::xla::TransferToServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferToServerResponse>::Create(channel_.get(), cq, rpcmethod_TransferToServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::TransferToServerResponse>* XlaService::Stub::PrepareAsyncTransferToServerRaw(::grpc::ClientContext* context, const ::xla::TransferToServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferToServerResponse>::Create(channel_.get(), cq, rpcmethod_TransferToServer_, context, request, false);
}

::grpc::Status XlaService::Stub::TransferToInfeed(::grpc::ClientContext* context, const ::xla::TransferToInfeedRequest& request, ::xla::TransferToInfeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferToInfeed_, context, request, response);
}

void XlaService::Stub::experimental_async::TransferToInfeed(::grpc::ClientContext* context, const ::xla::TransferToInfeedRequest* request, ::xla::TransferToInfeedResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferToInfeed_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::TransferToInfeedResponse>* XlaService::Stub::AsyncTransferToInfeedRaw(::grpc::ClientContext* context, const ::xla::TransferToInfeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferToInfeedResponse>::Create(channel_.get(), cq, rpcmethod_TransferToInfeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::TransferToInfeedResponse>* XlaService::Stub::PrepareAsyncTransferToInfeedRaw(::grpc::ClientContext* context, const ::xla::TransferToInfeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferToInfeedResponse>::Create(channel_.get(), cq, rpcmethod_TransferToInfeed_, context, request, false);
}

::grpc::Status XlaService::Stub::TransferFromOutfeed(::grpc::ClientContext* context, const ::xla::TransferFromOutfeedRequest& request, ::xla::TransferFromOutfeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferFromOutfeed_, context, request, response);
}

void XlaService::Stub::experimental_async::TransferFromOutfeed(::grpc::ClientContext* context, const ::xla::TransferFromOutfeedRequest* request, ::xla::TransferFromOutfeedResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferFromOutfeed_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::TransferFromOutfeedResponse>* XlaService::Stub::AsyncTransferFromOutfeedRaw(::grpc::ClientContext* context, const ::xla::TransferFromOutfeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferFromOutfeedResponse>::Create(channel_.get(), cq, rpcmethod_TransferFromOutfeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::TransferFromOutfeedResponse>* XlaService::Stub::PrepareAsyncTransferFromOutfeedRaw(::grpc::ClientContext* context, const ::xla::TransferFromOutfeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::TransferFromOutfeedResponse>::Create(channel_.get(), cq, rpcmethod_TransferFromOutfeed_, context, request, false);
}

::grpc::Status XlaService::Stub::ResetDevice(::grpc::ClientContext* context, const ::xla::ResetDeviceRequest& request, ::xla::ResetDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetDevice_, context, request, response);
}

void XlaService::Stub::experimental_async::ResetDevice(::grpc::ClientContext* context, const ::xla::ResetDeviceRequest* request, ::xla::ResetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetDevice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::ResetDeviceResponse>* XlaService::Stub::AsyncResetDeviceRaw(::grpc::ClientContext* context, const ::xla::ResetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ResetDeviceResponse>::Create(channel_.get(), cq, rpcmethod_ResetDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::ResetDeviceResponse>* XlaService::Stub::PrepareAsyncResetDeviceRaw(::grpc::ClientContext* context, const ::xla::ResetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ResetDeviceResponse>::Create(channel_.get(), cq, rpcmethod_ResetDevice_, context, request, false);
}

::grpc::Status XlaService::Stub::ComputeConstantGraph(::grpc::ClientContext* context, const ::xla::ComputeConstantGraphRequest& request, ::xla::ComputeConstantResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ComputeConstantGraph_, context, request, response);
}

void XlaService::Stub::experimental_async::ComputeConstantGraph(::grpc::ClientContext* context, const ::xla::ComputeConstantGraphRequest* request, ::xla::ComputeConstantResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeConstantGraph_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::ComputeConstantResponse>* XlaService::Stub::AsyncComputeConstantGraphRaw(::grpc::ClientContext* context, const ::xla::ComputeConstantGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ComputeConstantResponse>::Create(channel_.get(), cq, rpcmethod_ComputeConstantGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::ComputeConstantResponse>* XlaService::Stub::PrepareAsyncComputeConstantGraphRaw(::grpc::ClientContext* context, const ::xla::ComputeConstantGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ComputeConstantResponse>::Create(channel_.get(), cq, rpcmethod_ComputeConstantGraph_, context, request, false);
}

::grpc::Status XlaService::Stub::GetDeviceHandles(::grpc::ClientContext* context, const ::xla::GetDeviceHandlesRequest& request, ::xla::GetDeviceHandlesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDeviceHandles_, context, request, response);
}

void XlaService::Stub::experimental_async::GetDeviceHandles(::grpc::ClientContext* context, const ::xla::GetDeviceHandlesRequest* request, ::xla::GetDeviceHandlesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeviceHandles_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::GetDeviceHandlesResponse>* XlaService::Stub::AsyncGetDeviceHandlesRaw(::grpc::ClientContext* context, const ::xla::GetDeviceHandlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::GetDeviceHandlesResponse>::Create(channel_.get(), cq, rpcmethod_GetDeviceHandles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::GetDeviceHandlesResponse>* XlaService::Stub::PrepareAsyncGetDeviceHandlesRaw(::grpc::ClientContext* context, const ::xla::GetDeviceHandlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::GetDeviceHandlesResponse>::Create(channel_.get(), cq, rpcmethod_GetDeviceHandles_, context, request, false);
}

::grpc::Status XlaService::Stub::CreateChannelHandle(::grpc::ClientContext* context, const ::xla::CreateChannelHandleRequest& request, ::xla::CreateChannelHandleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateChannelHandle_, context, request, response);
}

void XlaService::Stub::experimental_async::CreateChannelHandle(::grpc::ClientContext* context, const ::xla::CreateChannelHandleRequest* request, ::xla::CreateChannelHandleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateChannelHandle_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::CreateChannelHandleResponse>* XlaService::Stub::AsyncCreateChannelHandleRaw(::grpc::ClientContext* context, const ::xla::CreateChannelHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::CreateChannelHandleResponse>::Create(channel_.get(), cq, rpcmethod_CreateChannelHandle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::CreateChannelHandleResponse>* XlaService::Stub::PrepareAsyncCreateChannelHandleRaw(::grpc::ClientContext* context, const ::xla::CreateChannelHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::CreateChannelHandleResponse>::Create(channel_.get(), cq, rpcmethod_CreateChannelHandle_, context, request, false);
}

::grpc::Status XlaService::Stub::Compile(::grpc::ClientContext* context, const ::xla::CompileRequest& request, ::xla::CompileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Compile_, context, request, response);
}

void XlaService::Stub::experimental_async::Compile(::grpc::ClientContext* context, const ::xla::CompileRequest* request, ::xla::CompileResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Compile_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::CompileResponse>* XlaService::Stub::AsyncCompileRaw(::grpc::ClientContext* context, const ::xla::CompileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::CompileResponse>::Create(channel_.get(), cq, rpcmethod_Compile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::CompileResponse>* XlaService::Stub::PrepareAsyncCompileRaw(::grpc::ClientContext* context, const ::xla::CompileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::CompileResponse>::Create(channel_.get(), cq, rpcmethod_Compile_, context, request, false);
}

::grpc::Status XlaService::Stub::Execute(::grpc::ClientContext* context, const ::xla::ExecuteRequest& request, ::xla::ExecuteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void XlaService::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::xla::ExecuteRequest* request, ::xla::ExecuteResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::ExecuteResponse>* XlaService::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::xla::ExecuteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ExecuteResponse>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::ExecuteResponse>* XlaService::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::xla::ExecuteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ExecuteResponse>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, false);
}

::grpc::Status XlaService::Stub::ExecuteGraphParallel(::grpc::ClientContext* context, const ::xla::ExecuteGraphParallelRequest& request, ::xla::ExecuteParallelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteGraphParallel_, context, request, response);
}

void XlaService::Stub::experimental_async::ExecuteGraphParallel(::grpc::ClientContext* context, const ::xla::ExecuteGraphParallelRequest* request, ::xla::ExecuteParallelResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteGraphParallel_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::ExecuteParallelResponse>* XlaService::Stub::AsyncExecuteGraphParallelRaw(::grpc::ClientContext* context, const ::xla::ExecuteGraphParallelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ExecuteParallelResponse>::Create(channel_.get(), cq, rpcmethod_ExecuteGraphParallel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::ExecuteParallelResponse>* XlaService::Stub::PrepareAsyncExecuteGraphParallelRaw(::grpc::ClientContext* context, const ::xla::ExecuteGraphParallelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::ExecuteParallelResponse>::Create(channel_.get(), cq, rpcmethod_ExecuteGraphParallel_, context, request, false);
}

::grpc::Status XlaService::Stub::WaitForExecution(::grpc::ClientContext* context, const ::xla::WaitForExecutionRequest& request, ::xla::WaitForExecutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WaitForExecution_, context, request, response);
}

void XlaService::Stub::experimental_async::WaitForExecution(::grpc::ClientContext* context, const ::xla::WaitForExecutionRequest* request, ::xla::WaitForExecutionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitForExecution_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::xla::WaitForExecutionResponse>* XlaService::Stub::AsyncWaitForExecutionRaw(::grpc::ClientContext* context, const ::xla::WaitForExecutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::WaitForExecutionResponse>::Create(channel_.get(), cq, rpcmethod_WaitForExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::xla::WaitForExecutionResponse>* XlaService::Stub::PrepareAsyncWaitForExecutionRaw(::grpc::ClientContext* context, const ::xla::WaitForExecutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::xla::WaitForExecutionResponse>::Create(channel_.get(), cq, rpcmethod_WaitForExecution_, context, request, false);
}

XlaService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::UnregisterRequest, ::xla::UnregisterResponse>(
          std::mem_fn(&XlaService::Service::Unregister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::DeconstructTupleRequest, ::xla::DeconstructTupleResponse>(
          std::mem_fn(&XlaService::Service::DeconstructTuple), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::UnpackRequest, ::xla::UnpackResponse>(
          std::mem_fn(&XlaService::Service::Unpack), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::GetShapeRequest, ::xla::GetShapeResponse>(
          std::mem_fn(&XlaService::Service::GetShape), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::ComputationGraphStatsRequest, ::xla::ComputationStatsResponse>(
          std::mem_fn(&XlaService::Service::GetComputationGraphStats), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::LoadDataRequest, ::xla::LoadDataResponse>(
          std::mem_fn(&XlaService::Service::LoadData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::TransferToClientRequest, ::xla::TransferToClientResponse>(
          std::mem_fn(&XlaService::Service::TransferToClient), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::TransferToServerRequest, ::xla::TransferToServerResponse>(
          std::mem_fn(&XlaService::Service::TransferToServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::TransferToInfeedRequest, ::xla::TransferToInfeedResponse>(
          std::mem_fn(&XlaService::Service::TransferToInfeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::TransferFromOutfeedRequest, ::xla::TransferFromOutfeedResponse>(
          std::mem_fn(&XlaService::Service::TransferFromOutfeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::ResetDeviceRequest, ::xla::ResetDeviceResponse>(
          std::mem_fn(&XlaService::Service::ResetDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::ComputeConstantGraphRequest, ::xla::ComputeConstantResponse>(
          std::mem_fn(&XlaService::Service::ComputeConstantGraph), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::GetDeviceHandlesRequest, ::xla::GetDeviceHandlesResponse>(
          std::mem_fn(&XlaService::Service::GetDeviceHandles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::CreateChannelHandleRequest, ::xla::CreateChannelHandleResponse>(
          std::mem_fn(&XlaService::Service::CreateChannelHandle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::CompileRequest, ::xla::CompileResponse>(
          std::mem_fn(&XlaService::Service::Compile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::ExecuteRequest, ::xla::ExecuteResponse>(
          std::mem_fn(&XlaService::Service::Execute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::ExecuteGraphParallelRequest, ::xla::ExecuteParallelResponse>(
          std::mem_fn(&XlaService::Service::ExecuteGraphParallel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XlaService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XlaService::Service, ::xla::WaitForExecutionRequest, ::xla::WaitForExecutionResponse>(
          std::mem_fn(&XlaService::Service::WaitForExecution), this)));
}

XlaService::Service::~Service() {
}

::grpc::Status XlaService::Service::Unregister(::grpc::ServerContext* context, const ::xla::UnregisterRequest* request, ::xla::UnregisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::DeconstructTuple(::grpc::ServerContext* context, const ::xla::DeconstructTupleRequest* request, ::xla::DeconstructTupleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::Unpack(::grpc::ServerContext* context, const ::xla::UnpackRequest* request, ::xla::UnpackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::GetShape(::grpc::ServerContext* context, const ::xla::GetShapeRequest* request, ::xla::GetShapeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::GetComputationGraphStats(::grpc::ServerContext* context, const ::xla::ComputationGraphStatsRequest* request, ::xla::ComputationStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::LoadData(::grpc::ServerContext* context, const ::xla::LoadDataRequest* request, ::xla::LoadDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::TransferToClient(::grpc::ServerContext* context, const ::xla::TransferToClientRequest* request, ::xla::TransferToClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::TransferToServer(::grpc::ServerContext* context, const ::xla::TransferToServerRequest* request, ::xla::TransferToServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::TransferToInfeed(::grpc::ServerContext* context, const ::xla::TransferToInfeedRequest* request, ::xla::TransferToInfeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::TransferFromOutfeed(::grpc::ServerContext* context, const ::xla::TransferFromOutfeedRequest* request, ::xla::TransferFromOutfeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::ResetDevice(::grpc::ServerContext* context, const ::xla::ResetDeviceRequest* request, ::xla::ResetDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::ComputeConstantGraph(::grpc::ServerContext* context, const ::xla::ComputeConstantGraphRequest* request, ::xla::ComputeConstantResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::GetDeviceHandles(::grpc::ServerContext* context, const ::xla::GetDeviceHandlesRequest* request, ::xla::GetDeviceHandlesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::CreateChannelHandle(::grpc::ServerContext* context, const ::xla::CreateChannelHandleRequest* request, ::xla::CreateChannelHandleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::Compile(::grpc::ServerContext* context, const ::xla::CompileRequest* request, ::xla::CompileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::Execute(::grpc::ServerContext* context, const ::xla::ExecuteRequest* request, ::xla::ExecuteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::ExecuteGraphParallel(::grpc::ServerContext* context, const ::xla::ExecuteGraphParallelRequest* request, ::xla::ExecuteParallelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XlaService::Service::WaitForExecution(::grpc::ServerContext* context, const ::xla::WaitForExecutionRequest* request, ::xla::WaitForExecutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xla

