// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/distribute/experimental/rpc/proto/tf_rpc_service.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto 

namespace protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto
namespace tensorflow {
namespace rpc {
class CallRequest;
class CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class CallResponse;
class CallResponseDefaultTypeInternal;
extern CallResponseDefaultTypeInternal _CallResponse_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListResponse;
class ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class RegisteredMethod;
class RegisteredMethodDefaultTypeInternal;
extern RegisteredMethodDefaultTypeInternal _RegisteredMethod_default_instance_;
}  // namespace rpc
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::rpc::CallRequest* Arena::CreateMaybeMessage<::tensorflow::rpc::CallRequest>(Arena*);
template<> ::tensorflow::rpc::CallResponse* Arena::CreateMaybeMessage<::tensorflow::rpc::CallResponse>(Arena*);
template<> ::tensorflow::rpc::ListRequest* Arena::CreateMaybeMessage<::tensorflow::rpc::ListRequest>(Arena*);
template<> ::tensorflow::rpc::ListResponse* Arena::CreateMaybeMessage<::tensorflow::rpc::ListResponse>(Arena*);
template<> ::tensorflow::rpc::RegisteredMethod* Arena::CreateMaybeMessage<::tensorflow::rpc::RegisteredMethod>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace rpc {

// ===================================================================

class CallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.CallRequest) */ {
 public:
  CallRequest();
  virtual ~CallRequest();

  CallRequest(const CallRequest& from);

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallRequest(CallRequest&& from) noexcept
    : CallRequest() {
    *this = ::std::move(from);
  }

  inline CallRequest& operator=(CallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CallRequest* other);
  friend void swap(CallRequest& a, CallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallRequest* New() const final {
    return CreateMaybeMessage<CallRequest>(NULL);
  }

  CallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallRequest& from);
  void MergeFrom(const CallRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorProto input_tensors = 2;
  int input_tensors_size() const;
  void clear_input_tensors();
  static const int kInputTensorsFieldNumber = 2;
  ::tensorflow::TensorProto* mutable_input_tensors(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_input_tensors();
  const ::tensorflow::TensorProto& input_tensors(int index) const;
  ::tensorflow::TensorProto* add_input_tensors();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
      input_tensors() const;

  // string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.CallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > input_tensors_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.CallResponse) */ {
 public:
  CallResponse();
  virtual ~CallResponse();

  CallResponse(const CallResponse& from);

  inline CallResponse& operator=(const CallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallResponse(CallResponse&& from) noexcept
    : CallResponse() {
    *this = ::std::move(from);
  }

  inline CallResponse& operator=(CallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallResponse* internal_default_instance() {
    return reinterpret_cast<const CallResponse*>(
               &_CallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CallResponse* other);
  friend void swap(CallResponse& a, CallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallResponse* New() const final {
    return CreateMaybeMessage<CallResponse>(NULL);
  }

  CallResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallResponse& from);
  void MergeFrom(const CallResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorProto output_tensors = 1;
  int output_tensors_size() const;
  void clear_output_tensors();
  static const int kOutputTensorsFieldNumber = 1;
  ::tensorflow::TensorProto* mutable_output_tensors(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_output_tensors();
  const ::tensorflow::TensorProto& output_tensors(int index) const;
  ::tensorflow::TensorProto* add_output_tensors();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
      output_tensors() const;

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.CallResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > output_tensors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.ListRequest) */ {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListRequest* other);
  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(NULL);
  }

  ListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.ListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisteredMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.RegisteredMethod) */ {
 public:
  RegisteredMethod();
  virtual ~RegisteredMethod();

  RegisteredMethod(const RegisteredMethod& from);

  inline RegisteredMethod& operator=(const RegisteredMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisteredMethod(RegisteredMethod&& from) noexcept
    : RegisteredMethod() {
    *this = ::std::move(from);
  }

  inline RegisteredMethod& operator=(RegisteredMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisteredMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredMethod* internal_default_instance() {
    return reinterpret_cast<const RegisteredMethod*>(
               &_RegisteredMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RegisteredMethod* other);
  friend void swap(RegisteredMethod& a, RegisteredMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisteredMethod* New() const final {
    return CreateMaybeMessage<RegisteredMethod>(NULL);
  }

  RegisteredMethod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredMethod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisteredMethod& from);
  void MergeFrom(const RegisteredMethod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // .tensorflow.StructuredValue input_specs = 2;
  bool has_input_specs() const;
  void clear_input_specs();
  static const int kInputSpecsFieldNumber = 2;
  private:
  const ::tensorflow::StructuredValue& _internal_input_specs() const;
  public:
  const ::tensorflow::StructuredValue& input_specs() const;
  ::tensorflow::StructuredValue* release_input_specs();
  ::tensorflow::StructuredValue* mutable_input_specs();
  void set_allocated_input_specs(::tensorflow::StructuredValue* input_specs);

  // .tensorflow.StructuredValue output_specs = 3;
  bool has_output_specs() const;
  void clear_output_specs();
  static const int kOutputSpecsFieldNumber = 3;
  private:
  const ::tensorflow::StructuredValue& _internal_output_specs() const;
  public:
  const ::tensorflow::StructuredValue& output_specs() const;
  ::tensorflow::StructuredValue* release_output_specs();
  ::tensorflow::StructuredValue* mutable_output_specs();
  void set_allocated_output_specs(::tensorflow::StructuredValue* output_specs);

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.RegisteredMethod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::tensorflow::StructuredValue* input_specs_;
  ::tensorflow::StructuredValue* output_specs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.rpc.ListResponse) */ {
 public:
  ListResponse();
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListResponse* other);
  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return CreateMaybeMessage<ListResponse>(NULL);
  }

  ListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.rpc.RegisteredMethod registered_methods = 1;
  int registered_methods_size() const;
  void clear_registered_methods();
  static const int kRegisteredMethodsFieldNumber = 1;
  ::tensorflow::rpc::RegisteredMethod* mutable_registered_methods(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >*
      mutable_registered_methods();
  const ::tensorflow::rpc::RegisteredMethod& registered_methods(int index) const;
  ::tensorflow::rpc::RegisteredMethod* add_registered_methods();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >&
      registered_methods() const;

  // @@protoc_insertion_point(class_scope:tensorflow.rpc.ListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod > registered_methods_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallRequest

// string method = 1;
inline void CallRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::method() const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.CallRequest.method)
  return method_.GetNoArena();
}
inline void CallRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.rpc.CallRequest.method)
}
#if LANG_CXX11
inline void CallRequest::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.rpc.CallRequest.method)
}
#endif
inline void CallRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.rpc.CallRequest.method)
}
inline void CallRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.rpc.CallRequest.method)
}
inline ::std::string* CallRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.CallRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_method() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.CallRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.CallRequest.method)
}

// repeated .tensorflow.TensorProto input_tensors = 2;
inline int CallRequest::input_tensors_size() const {
  return input_tensors_.size();
}
inline ::tensorflow::TensorProto* CallRequest::mutable_input_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.CallRequest.input_tensors)
  return input_tensors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
CallRequest::mutable_input_tensors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.rpc.CallRequest.input_tensors)
  return &input_tensors_;
}
inline const ::tensorflow::TensorProto& CallRequest::input_tensors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.CallRequest.input_tensors)
  return input_tensors_.Get(index);
}
inline ::tensorflow::TensorProto* CallRequest::add_input_tensors() {
  // @@protoc_insertion_point(field_add:tensorflow.rpc.CallRequest.input_tensors)
  return input_tensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
CallRequest::input_tensors() const {
  // @@protoc_insertion_point(field_list:tensorflow.rpc.CallRequest.input_tensors)
  return input_tensors_;
}

// -------------------------------------------------------------------

// CallResponse

// repeated .tensorflow.TensorProto output_tensors = 1;
inline int CallResponse::output_tensors_size() const {
  return output_tensors_.size();
}
inline ::tensorflow::TensorProto* CallResponse::mutable_output_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.CallResponse.output_tensors)
  return output_tensors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
CallResponse::mutable_output_tensors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.rpc.CallResponse.output_tensors)
  return &output_tensors_;
}
inline const ::tensorflow::TensorProto& CallResponse::output_tensors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.CallResponse.output_tensors)
  return output_tensors_.Get(index);
}
inline ::tensorflow::TensorProto* CallResponse::add_output_tensors() {
  // @@protoc_insertion_point(field_add:tensorflow.rpc.CallResponse.output_tensors)
  return output_tensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
CallResponse::output_tensors() const {
  // @@protoc_insertion_point(field_list:tensorflow.rpc.CallResponse.output_tensors)
  return output_tensors_;
}

// -------------------------------------------------------------------

// ListRequest

// -------------------------------------------------------------------

// RegisteredMethod

// string method = 1;
inline void RegisteredMethod::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisteredMethod::method() const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.RegisteredMethod.method)
  return method_.GetNoArena();
}
inline void RegisteredMethod::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.rpc.RegisteredMethod.method)
}
#if LANG_CXX11
inline void RegisteredMethod::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.rpc.RegisteredMethod.method)
}
#endif
inline void RegisteredMethod::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.rpc.RegisteredMethod.method)
}
inline void RegisteredMethod::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.rpc.RegisteredMethod.method)
}
inline ::std::string* RegisteredMethod::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.RegisteredMethod.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisteredMethod::release_method() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.RegisteredMethod.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisteredMethod::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.RegisteredMethod.method)
}

// .tensorflow.StructuredValue input_specs = 2;
inline bool RegisteredMethod::has_input_specs() const {
  return this != internal_default_instance() && input_specs_ != NULL;
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::_internal_input_specs() const {
  return *input_specs_;
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::input_specs() const {
  const ::tensorflow::StructuredValue* p = input_specs_;
  // @@protoc_insertion_point(field_get:tensorflow.rpc.RegisteredMethod.input_specs)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::StructuredValue*>(
      &::tensorflow::_StructuredValue_default_instance_);
}
inline ::tensorflow::StructuredValue* RegisteredMethod::release_input_specs() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.RegisteredMethod.input_specs)
  
  ::tensorflow::StructuredValue* temp = input_specs_;
  input_specs_ = NULL;
  return temp;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::mutable_input_specs() {
  
  if (input_specs_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::StructuredValue>(GetArenaNoVirtual());
    input_specs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.RegisteredMethod.input_specs)
  return input_specs_;
}
inline void RegisteredMethod::set_allocated_input_specs(::tensorflow::StructuredValue* input_specs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(input_specs_);
  }
  if (input_specs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_specs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_specs, submessage_arena);
    }
    
  } else {
    
  }
  input_specs_ = input_specs;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.RegisteredMethod.input_specs)
}

// .tensorflow.StructuredValue output_specs = 3;
inline bool RegisteredMethod::has_output_specs() const {
  return this != internal_default_instance() && output_specs_ != NULL;
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::_internal_output_specs() const {
  return *output_specs_;
}
inline const ::tensorflow::StructuredValue& RegisteredMethod::output_specs() const {
  const ::tensorflow::StructuredValue* p = output_specs_;
  // @@protoc_insertion_point(field_get:tensorflow.rpc.RegisteredMethod.output_specs)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::StructuredValue*>(
      &::tensorflow::_StructuredValue_default_instance_);
}
inline ::tensorflow::StructuredValue* RegisteredMethod::release_output_specs() {
  // @@protoc_insertion_point(field_release:tensorflow.rpc.RegisteredMethod.output_specs)
  
  ::tensorflow::StructuredValue* temp = output_specs_;
  output_specs_ = NULL;
  return temp;
}
inline ::tensorflow::StructuredValue* RegisteredMethod::mutable_output_specs() {
  
  if (output_specs_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::StructuredValue>(GetArenaNoVirtual());
    output_specs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.RegisteredMethod.output_specs)
  return output_specs_;
}
inline void RegisteredMethod::set_allocated_output_specs(::tensorflow::StructuredValue* output_specs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_specs_);
  }
  if (output_specs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_specs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_specs, submessage_arena);
    }
    
  } else {
    
  }
  output_specs_ = output_specs;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.rpc.RegisteredMethod.output_specs)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .tensorflow.rpc.RegisteredMethod registered_methods = 1;
inline int ListResponse::registered_methods_size() const {
  return registered_methods_.size();
}
inline void ListResponse::clear_registered_methods() {
  registered_methods_.Clear();
}
inline ::tensorflow::rpc::RegisteredMethod* ListResponse::mutable_registered_methods(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.rpc.ListResponse.registered_methods)
  return registered_methods_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >*
ListResponse::mutable_registered_methods() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.rpc.ListResponse.registered_methods)
  return &registered_methods_;
}
inline const ::tensorflow::rpc::RegisteredMethod& ListResponse::registered_methods(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.rpc.ListResponse.registered_methods)
  return registered_methods_.Get(index);
}
inline ::tensorflow::rpc::RegisteredMethod* ListResponse::add_registered_methods() {
  // @@protoc_insertion_point(field_add:tensorflow.rpc.ListResponse.registered_methods)
  return registered_methods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::rpc::RegisteredMethod >&
ListResponse::registered_methods() const {
  // @@protoc_insertion_point(field_list:tensorflow.rpc.ListResponse.registered_methods)
  return registered_methods_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fdistribute_2fexperimental_2frpc_2fproto_2ftf_5frpc_5fservice_2eproto
