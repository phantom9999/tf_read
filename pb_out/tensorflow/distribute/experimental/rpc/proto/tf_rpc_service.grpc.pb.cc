// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/distribute/experimental/rpc/proto/tf_rpc_service.proto

#include "tensorflow/distribute/experimental/rpc/proto/tf_rpc_service.pb.h"
#include "tensorflow/distribute/experimental/rpc/proto/tf_rpc_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tensorflow {
namespace rpc {

static const char* RpcService_method_names[] = {
  "/tensorflow.rpc.RpcService/Call",
  "/tensorflow.rpc.RpcService/List",
};

std::unique_ptr< RpcService::Stub> RpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcService::Stub> stub(new RpcService::Stub(channel));
  return stub;
}

RpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Call_(RpcService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(RpcService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RpcService::Stub::Call(::grpc::ClientContext* context, const ::tensorflow::rpc::CallRequest& request, ::tensorflow::rpc::CallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Call_, context, request, response);
}

void RpcService::Stub::experimental_async::Call(::grpc::ClientContext* context, const ::tensorflow::rpc::CallRequest* request, ::tensorflow::rpc::CallResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Call_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::rpc::CallResponse>* RpcService::Stub::AsyncCallRaw(::grpc::ClientContext* context, const ::tensorflow::rpc::CallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::rpc::CallResponse>::Create(channel_.get(), cq, rpcmethod_Call_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::rpc::CallResponse>* RpcService::Stub::PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::tensorflow::rpc::CallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::rpc::CallResponse>::Create(channel_.get(), cq, rpcmethod_Call_, context, request, false);
}

::grpc::Status RpcService::Stub::List(::grpc::ClientContext* context, const ::tensorflow::rpc::ListRequest& request, ::tensorflow::rpc::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void RpcService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::tensorflow::rpc::ListRequest* request, ::tensorflow::rpc::ListResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tensorflow::rpc::ListResponse>* RpcService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::tensorflow::rpc::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::rpc::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::rpc::ListResponse>* RpcService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::tensorflow::rpc::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tensorflow::rpc::ListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

RpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::tensorflow::rpc::CallRequest, ::tensorflow::rpc::CallResponse>(
          std::mem_fn(&RpcService::Service::Call), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::tensorflow::rpc::ListRequest, ::tensorflow::rpc::ListResponse>(
          std::mem_fn(&RpcService::Service::List), this)));
}

RpcService::Service::~Service() {
}

::grpc::Status RpcService::Service::Call(::grpc::ServerContext* context, const ::tensorflow::rpc::CallRequest* request, ::tensorflow::rpc::CallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::List(::grpc::ServerContext* context, const ::tensorflow::rpc::ListRequest* request, ::tensorflow::rpc::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow
}  // namespace rpc

