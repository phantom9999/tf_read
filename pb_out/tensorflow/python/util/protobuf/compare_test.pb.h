// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/python/util/protobuf/compare_test.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto 

namespace protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto
namespace compare_test {
class Labeled;
class LabeledDefaultTypeInternal;
extern LabeledDefaultTypeInternal _Labeled_default_instance_;
class Large;
class LargeDefaultTypeInternal;
extern LargeDefaultTypeInternal _Large_default_instance_;
class Medium;
class MediumDefaultTypeInternal;
extern MediumDefaultTypeInternal _Medium_default_instance_;
class Medium_GroupA;
class Medium_GroupADefaultTypeInternal;
extern Medium_GroupADefaultTypeInternal _Medium_GroupA_default_instance_;
class Medium_GroupA_GroupB;
class Medium_GroupA_GroupBDefaultTypeInternal;
extern Medium_GroupA_GroupBDefaultTypeInternal _Medium_GroupA_GroupB_default_instance_;
class Small;
class SmallDefaultTypeInternal;
extern SmallDefaultTypeInternal _Small_default_instance_;
class WithMap;
class WithMapDefaultTypeInternal;
extern WithMapDefaultTypeInternal _WithMap_default_instance_;
class WithMap_ValueMessageEntry_DoNotUse;
class WithMap_ValueMessageEntry_DoNotUseDefaultTypeInternal;
extern WithMap_ValueMessageEntry_DoNotUseDefaultTypeInternal _WithMap_ValueMessageEntry_DoNotUse_default_instance_;
class WithMap_ValueStringEntry_DoNotUse;
class WithMap_ValueStringEntry_DoNotUseDefaultTypeInternal;
extern WithMap_ValueStringEntry_DoNotUseDefaultTypeInternal _WithMap_ValueStringEntry_DoNotUse_default_instance_;
}  // namespace compare_test
namespace google {
namespace protobuf {
template<> ::compare_test::Labeled* Arena::CreateMaybeMessage<::compare_test::Labeled>(Arena*);
template<> ::compare_test::Large* Arena::CreateMaybeMessage<::compare_test::Large>(Arena*);
template<> ::compare_test::Medium* Arena::CreateMaybeMessage<::compare_test::Medium>(Arena*);
template<> ::compare_test::Medium_GroupA* Arena::CreateMaybeMessage<::compare_test::Medium_GroupA>(Arena*);
template<> ::compare_test::Medium_GroupA_GroupB* Arena::CreateMaybeMessage<::compare_test::Medium_GroupA_GroupB>(Arena*);
template<> ::compare_test::Small* Arena::CreateMaybeMessage<::compare_test::Small>(Arena*);
template<> ::compare_test::WithMap* Arena::CreateMaybeMessage<::compare_test::WithMap>(Arena*);
template<> ::compare_test::WithMap_ValueMessageEntry_DoNotUse* Arena::CreateMaybeMessage<::compare_test::WithMap_ValueMessageEntry_DoNotUse>(Arena*);
template<> ::compare_test::WithMap_ValueStringEntry_DoNotUse* Arena::CreateMaybeMessage<::compare_test::WithMap_ValueStringEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace compare_test {

enum Enum {
  A = 0,
  B = 1,
  C = 2
};
bool Enum_IsValid(int value);
const Enum Enum_MIN = A;
const Enum Enum_MAX = C;
const int Enum_ARRAYSIZE = Enum_MAX + 1;

const ::google::protobuf::EnumDescriptor* Enum_descriptor();
inline const ::std::string& Enum_Name(Enum value) {
  return ::google::protobuf::internal::NameOfEnum(
    Enum_descriptor(), value);
}
inline bool Enum_Parse(
    const ::std::string& name, Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Enum>(
    Enum_descriptor(), name, value);
}
// ===================================================================

class Small : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.Small) */ {
 public:
  Small();
  virtual ~Small();

  Small(const Small& from);

  inline Small& operator=(const Small& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Small(Small&& from) noexcept
    : Small() {
    *this = ::std::move(from);
  }

  inline Small& operator=(Small&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Small& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Small* internal_default_instance() {
    return reinterpret_cast<const Small*>(
               &_Small_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Small* other);
  void Swap(Small* other);
  friend void swap(Small& a, Small& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Small* New() const final {
    return CreateMaybeMessage<Small>(NULL);
  }

  Small* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Small>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Small& from);
  void MergeFrom(const Small& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Small* other);
  protected:
  explicit Small(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string strings = 1;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 1;
  const ::std::string& strings(int index) const;
  ::std::string* mutable_strings(int index);
  void set_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_strings(int index, ::std::string&& value);
  #endif
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  ::std::string* add_strings();
  void add_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_strings(::std::string&& value);
  #endif
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // @@protoc_insertion_point(class_scope:compare_test.Small)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Medium_GroupA_GroupB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.Medium.GroupA.GroupB) */ {
 public:
  Medium_GroupA_GroupB();
  virtual ~Medium_GroupA_GroupB();

  Medium_GroupA_GroupB(const Medium_GroupA_GroupB& from);

  inline Medium_GroupA_GroupB& operator=(const Medium_GroupA_GroupB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Medium_GroupA_GroupB(Medium_GroupA_GroupB&& from) noexcept
    : Medium_GroupA_GroupB() {
    *this = ::std::move(from);
  }

  inline Medium_GroupA_GroupB& operator=(Medium_GroupA_GroupB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Medium_GroupA_GroupB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Medium_GroupA_GroupB* internal_default_instance() {
    return reinterpret_cast<const Medium_GroupA_GroupB*>(
               &_Medium_GroupA_GroupB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Medium_GroupA_GroupB* other);
  void Swap(Medium_GroupA_GroupB* other);
  friend void swap(Medium_GroupA_GroupB& a, Medium_GroupA_GroupB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Medium_GroupA_GroupB* New() const final {
    return CreateMaybeMessage<Medium_GroupA_GroupB>(NULL);
  }

  Medium_GroupA_GroupB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Medium_GroupA_GroupB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Medium_GroupA_GroupB& from);
  void MergeFrom(const Medium_GroupA_GroupB& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Medium_GroupA_GroupB* other);
  protected:
  explicit Medium_GroupA_GroupB(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string strings = 5;
  bool has_strings() const;
  void clear_strings();
  static const int kStringsFieldNumber = 5;
  const ::std::string& strings() const;
  void set_strings(const ::std::string& value);
  #if LANG_CXX11
  void set_strings(::std::string&& value);
  #endif
  void set_strings(const char* value);
  void set_strings(const char* value, size_t size);
  ::std::string* mutable_strings();
  ::std::string* release_strings();
  void set_allocated_strings(::std::string* strings);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_strings();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_strings(
      ::std::string* strings);

  // @@protoc_insertion_point(class_scope:compare_test.Medium.GroupA.GroupB)
 private:
  void set_has_strings();
  void clear_has_strings();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr strings_;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Medium_GroupA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.Medium.GroupA) */ {
 public:
  Medium_GroupA();
  virtual ~Medium_GroupA();

  Medium_GroupA(const Medium_GroupA& from);

  inline Medium_GroupA& operator=(const Medium_GroupA& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Medium_GroupA(Medium_GroupA&& from) noexcept
    : Medium_GroupA() {
    *this = ::std::move(from);
  }

  inline Medium_GroupA& operator=(Medium_GroupA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Medium_GroupA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Medium_GroupA* internal_default_instance() {
    return reinterpret_cast<const Medium_GroupA*>(
               &_Medium_GroupA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Medium_GroupA* other);
  void Swap(Medium_GroupA* other);
  friend void swap(Medium_GroupA& a, Medium_GroupA& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Medium_GroupA* New() const final {
    return CreateMaybeMessage<Medium_GroupA>(NULL);
  }

  Medium_GroupA* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Medium_GroupA>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Medium_GroupA& from);
  void MergeFrom(const Medium_GroupA& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Medium_GroupA* other);
  protected:
  explicit Medium_GroupA(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Medium_GroupA_GroupB GroupB;

  // accessors -------------------------------------------------------

  // repeated group GroupB = 4 { ... };
  int groupb_size() const;
  void clear_groupb();
  static const int kGroupbFieldNumber = 4;
  ::compare_test::Medium_GroupA_GroupB* mutable_groupb(int index);
  ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB >*
      mutable_groupb();
  const ::compare_test::Medium_GroupA_GroupB& groupb(int index) const;
  ::compare_test::Medium_GroupA_GroupB* add_groupb();
  const ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB >&
      groupb() const;

  // @@protoc_insertion_point(class_scope:compare_test.Medium.GroupA)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB > groupb_;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Medium : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.Medium) */ {
 public:
  Medium();
  virtual ~Medium();

  Medium(const Medium& from);

  inline Medium& operator=(const Medium& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Medium(Medium&& from) noexcept
    : Medium() {
    *this = ::std::move(from);
  }

  inline Medium& operator=(Medium&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Medium& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Medium* internal_default_instance() {
    return reinterpret_cast<const Medium*>(
               &_Medium_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Medium* other);
  void Swap(Medium* other);
  friend void swap(Medium& a, Medium& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Medium* New() const final {
    return CreateMaybeMessage<Medium>(NULL);
  }

  Medium* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Medium>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Medium& from);
  void MergeFrom(const Medium& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Medium* other);
  protected:
  explicit Medium(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Medium_GroupA GroupA;

  // accessors -------------------------------------------------------

  // repeated int32 int32s = 1;
  int int32s_size() const;
  void clear_int32s();
  static const int kInt32SFieldNumber = 1;
  ::google::protobuf::int32 int32s(int index) const;
  void set_int32s(int index, ::google::protobuf::int32 value);
  void add_int32s(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32s();

  // repeated .compare_test.Small smalls = 2;
  int smalls_size() const;
  void clear_smalls();
  static const int kSmallsFieldNumber = 2;
  ::compare_test::Small* mutable_smalls(int index);
  ::google::protobuf::RepeatedPtrField< ::compare_test::Small >*
      mutable_smalls();
  const ::compare_test::Small& smalls(int index) const;
  ::compare_test::Small* add_smalls();
  const ::google::protobuf::RepeatedPtrField< ::compare_test::Small >&
      smalls() const;

  // repeated group GroupA = 3 { ... };
  int groupa_size() const;
  void clear_groupa();
  static const int kGroupaFieldNumber = 3;
  ::compare_test::Medium_GroupA* mutable_groupa(int index);
  ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA >*
      mutable_groupa();
  const ::compare_test::Medium_GroupA& groupa(int index) const;
  ::compare_test::Medium_GroupA* add_groupa();
  const ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA >&
      groupa() const;

  // repeated float floats = 6;
  int floats_size() const;
  void clear_floats();
  static const int kFloatsFieldNumber = 6;
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::google::protobuf::RepeatedField< float >&
      floats() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_floats();

  // @@protoc_insertion_point(class_scope:compare_test.Medium)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32s_;
  ::google::protobuf::RepeatedPtrField< ::compare_test::Small > smalls_;
  ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA > groupa_;
  ::google::protobuf::RepeatedField< float > floats_;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Large : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.Large) */ {
 public:
  Large();
  virtual ~Large();

  Large(const Large& from);

  inline Large& operator=(const Large& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Large(Large&& from) noexcept
    : Large() {
    *this = ::std::move(from);
  }

  inline Large& operator=(Large&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Large& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Large* internal_default_instance() {
    return reinterpret_cast<const Large*>(
               &_Large_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Large* other);
  void Swap(Large* other);
  friend void swap(Large& a, Large& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Large* New() const final {
    return CreateMaybeMessage<Large>(NULL);
  }

  Large* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Large>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Large& from);
  void MergeFrom(const Large& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Large* other);
  protected:
  explicit Large(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 int64s = 6;
  int int64s_size() const;
  void clear_int64s();
  static const int kInt64SFieldNumber = 6;
  ::google::protobuf::int64 int64s(int index) const;
  void set_int64s(int index, ::google::protobuf::int64 value);
  void add_int64s(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64s();

  // optional string string_ = 1;
  bool has_string_() const;
  void clear_string_();
  static const int kStringFieldNumber = 1;
  const ::std::string& string_() const;
  void set_string_(const ::std::string& value);
  #if LANG_CXX11
  void set_string_(::std::string&& value);
  #endif
  void set_string_(const char* value);
  void set_string_(const char* value, size_t size);
  ::std::string* mutable_string_();
  ::std::string* release_string_();
  void set_allocated_string_(::std::string* string_);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_string_();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_(
      ::std::string* string_);

  // optional .compare_test.Medium medium = 7;
  bool has_medium() const;
  void clear_medium();
  static const int kMediumFieldNumber = 7;
  private:
  const ::compare_test::Medium& _internal_medium() const;
  public:
  const ::compare_test::Medium& medium() const;
  ::compare_test::Medium* release_medium();
  ::compare_test::Medium* mutable_medium();
  void set_allocated_medium(::compare_test::Medium* medium);
  void unsafe_arena_set_allocated_medium(
      ::compare_test::Medium* medium);
  ::compare_test::Medium* unsafe_arena_release_medium();

  // optional .compare_test.Small small = 8;
  bool has_small() const;
  void clear_small();
  static const int kSmallFieldNumber = 8;
  private:
  const ::compare_test::Small& _internal_small() const;
  public:
  const ::compare_test::Small& small() const;
  ::compare_test::Small* release_small();
  ::compare_test::Small* mutable_small();
  void set_allocated_small(::compare_test::Small* small);
  void unsafe_arena_set_allocated_small(
      ::compare_test::Small* small);
  ::compare_test::Small* unsafe_arena_release_small();

  // optional .compare_test.WithMap with_map = 10;
  bool has_with_map() const;
  void clear_with_map();
  static const int kWithMapFieldNumber = 10;
  private:
  const ::compare_test::WithMap& _internal_with_map() const;
  public:
  const ::compare_test::WithMap& with_map() const;
  ::compare_test::WithMap* release_with_map();
  ::compare_test::WithMap* mutable_with_map();
  void set_allocated_with_map(::compare_test::WithMap* with_map);
  void unsafe_arena_set_allocated_with_map(
      ::compare_test::WithMap* with_map);
  ::compare_test::WithMap* unsafe_arena_release_with_map();

  // optional int64 int64_ = 2;
  bool has_int64_() const;
  void clear_int64_();
  static const int kInt64FieldNumber = 2;
  ::google::protobuf::int64 int64_() const;
  void set_int64_(::google::protobuf::int64 value);

  // optional float float_ = 3;
  bool has_float_() const;
  void clear_float_();
  static const int kFloatFieldNumber = 3;
  float float_() const;
  void set_float_(float value);

  // optional bool bool_ = 4;
  bool has_bool_() const;
  void clear_bool_();
  static const int kBoolFieldNumber = 4;
  bool bool_() const;
  void set_bool_(bool value);

  // optional double double_ = 9;
  bool has_double_() const;
  void clear_double_();
  static const int kDoubleFieldNumber = 9;
  double double_() const;
  void set_double_(double value);

  // optional .compare_test.Enum enum_ = 5;
  bool has_enum_() const;
  void clear_enum_();
  static const int kEnumFieldNumber = 5;
  ::compare_test::Enum enum_() const;
  void set_enum_(::compare_test::Enum value);

  // @@protoc_insertion_point(class_scope:compare_test.Large)
 private:
  void set_has_string_();
  void clear_has_string_();
  void set_has_int64_();
  void clear_has_int64_();
  void set_has_float_();
  void clear_has_float_();
  void set_has_bool_();
  void clear_has_bool_();
  void set_has_enum_();
  void clear_has_enum_();
  void set_has_medium();
  void clear_has_medium();
  void set_has_small();
  void clear_has_small();
  void set_has_double_();
  void clear_has_double_();
  void set_has_with_map();
  void clear_has_with_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64s_;
  ::google::protobuf::internal::ArenaStringPtr string__;
  ::compare_test::Medium* medium_;
  ::compare_test::Small* small_;
  ::compare_test::WithMap* with_map_;
  ::google::protobuf::int64 int64__;
  float float__;
  bool bool__;
  double double__;
  int enum__;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Labeled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.Labeled) */ {
 public:
  Labeled();
  virtual ~Labeled();

  Labeled(const Labeled& from);

  inline Labeled& operator=(const Labeled& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Labeled(Labeled&& from) noexcept
    : Labeled() {
    *this = ::std::move(from);
  }

  inline Labeled& operator=(Labeled&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Labeled& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Labeled* internal_default_instance() {
    return reinterpret_cast<const Labeled*>(
               &_Labeled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Labeled* other);
  void Swap(Labeled* other);
  friend void swap(Labeled& a, Labeled& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Labeled* New() const final {
    return CreateMaybeMessage<Labeled>(NULL);
  }

  Labeled* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Labeled>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Labeled& from);
  void MergeFrom(const Labeled& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Labeled* other);
  protected:
  explicit Labeled(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 required = 1;
  bool has_required() const;
  void clear_required();
  static const int kRequiredFieldNumber = 1;
  ::google::protobuf::int32 required() const;
  void set_required(::google::protobuf::int32 value);

  // optional int32 optional = 2;
  bool has_optional() const;
  void clear_optional();
  static const int kOptionalFieldNumber = 2;
  ::google::protobuf::int32 optional() const;
  void set_optional(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:compare_test.Labeled)
 private:
  void set_has_required();
  void clear_has_required();
  void set_has_optional();
  void clear_has_optional();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 required_;
  ::google::protobuf::int32 optional_;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WithMap_ValueMessageEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<WithMap_ValueMessageEntry_DoNotUse, 
    ::google::protobuf::int32, ::compare_test::Small,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<WithMap_ValueMessageEntry_DoNotUse, 
    ::google::protobuf::int32, ::compare_test::Small,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  WithMap_ValueMessageEntry_DoNotUse();
  WithMap_ValueMessageEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const WithMap_ValueMessageEntry_DoNotUse& other);
  static const WithMap_ValueMessageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WithMap_ValueMessageEntry_DoNotUse*>(&_WithMap_ValueMessageEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class WithMap_ValueStringEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<WithMap_ValueStringEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<WithMap_ValueStringEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  WithMap_ValueStringEntry_DoNotUse();
  WithMap_ValueStringEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const WithMap_ValueStringEntry_DoNotUse& other);
  static const WithMap_ValueStringEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WithMap_ValueStringEntry_DoNotUse*>(&_WithMap_ValueStringEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class WithMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:compare_test.WithMap) */ {
 public:
  WithMap();
  virtual ~WithMap();

  WithMap(const WithMap& from);

  inline WithMap& operator=(const WithMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WithMap(WithMap&& from) noexcept
    : WithMap() {
    *this = ::std::move(from);
  }

  inline WithMap& operator=(WithMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const WithMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WithMap* internal_default_instance() {
    return reinterpret_cast<const WithMap*>(
               &_WithMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(WithMap* other);
  void Swap(WithMap* other);
  friend void swap(WithMap& a, WithMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WithMap* New() const final {
    return CreateMaybeMessage<WithMap>(NULL);
  }

  WithMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WithMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WithMap& from);
  void MergeFrom(const WithMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithMap* other);
  protected:
  explicit WithMap(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .compare_test.Small> value_message = 1;
  int value_message_size() const;
  void clear_value_message();
  static const int kValueMessageFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >&
      value_message() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >*
      mutable_value_message();

  // map<string, string> value_string = 2;
  int value_string_size() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      value_string() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_value_string();

  // @@protoc_insertion_point(class_scope:compare_test.WithMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      WithMap_ValueMessageEntry_DoNotUse,
      ::google::protobuf::int32, ::compare_test::Small,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > value_message_;
  ::google::protobuf::internal::MapField<
      WithMap_ValueStringEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > value_string_;
  friend struct ::protobuf_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Small

// repeated string strings = 1;
inline int Small::strings_size() const {
  return strings_.size();
}
inline void Small::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& Small::strings(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Small.strings)
  return strings_.Get(index);
}
inline ::std::string* Small::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Small.strings)
  return strings_.Mutable(index);
}
inline void Small::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:compare_test.Small.strings)
  strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Small::set_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:compare_test.Small.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Small::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:compare_test.Small.strings)
}
inline void Small::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:compare_test.Small.strings)
}
inline ::std::string* Small::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:compare_test.Small.strings)
  return strings_.Add();
}
inline void Small::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:compare_test.Small.strings)
}
#if LANG_CXX11
inline void Small::add_strings(::std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:compare_test.Small.strings)
}
#endif
inline void Small::add_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:compare_test.Small.strings)
}
inline void Small::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:compare_test.Small.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Small::strings() const {
  // @@protoc_insertion_point(field_list:compare_test.Small.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Small::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Small.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// Medium_GroupA_GroupB

// required string strings = 5;
inline bool Medium_GroupA_GroupB::has_strings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Medium_GroupA_GroupB::set_has_strings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Medium_GroupA_GroupB::clear_has_strings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Medium_GroupA_GroupB::clear_strings() {
  strings_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_strings();
}
inline const ::std::string& Medium_GroupA_GroupB::strings() const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.GroupA.GroupB.strings)
  return strings_.Get();
}
inline void Medium_GroupA_GroupB::set_strings(const ::std::string& value) {
  set_has_strings();
  strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:compare_test.Medium.GroupA.GroupB.strings)
}
#if LANG_CXX11
inline void Medium_GroupA_GroupB::set_strings(::std::string&& value) {
  set_has_strings();
  strings_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:compare_test.Medium.GroupA.GroupB.strings)
}
#endif
inline void Medium_GroupA_GroupB::set_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strings();
  strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:compare_test.Medium.GroupA.GroupB.strings)
}
inline void Medium_GroupA_GroupB::set_strings(const char* value,
    size_t size) {
  set_has_strings();
  strings_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:compare_test.Medium.GroupA.GroupB.strings)
}
inline ::std::string* Medium_GroupA_GroupB::mutable_strings() {
  set_has_strings();
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.GroupA.GroupB.strings)
  return strings_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Medium_GroupA_GroupB::release_strings() {
  // @@protoc_insertion_point(field_release:compare_test.Medium.GroupA.GroupB.strings)
  if (!has_strings()) {
    return NULL;
  }
  clear_has_strings();
  return strings_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Medium_GroupA_GroupB::set_allocated_strings(::std::string* strings) {
  if (strings != NULL) {
    set_has_strings();
  } else {
    clear_has_strings();
  }
  strings_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strings,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:compare_test.Medium.GroupA.GroupB.strings)
}
inline ::std::string* Medium_GroupA_GroupB::unsafe_arena_release_strings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Medium.GroupA.GroupB.strings)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_strings();
  return strings_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Medium_GroupA_GroupB::unsafe_arena_set_allocated_strings(
    ::std::string* strings) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (strings != NULL) {
    set_has_strings();
  } else {
    clear_has_strings();
  }
  strings_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      strings, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Medium.GroupA.GroupB.strings)
}

// -------------------------------------------------------------------

// Medium_GroupA

// repeated group GroupB = 4 { ... };
inline int Medium_GroupA::groupb_size() const {
  return groupb_.size();
}
inline void Medium_GroupA::clear_groupb() {
  groupb_.Clear();
}
inline ::compare_test::Medium_GroupA_GroupB* Medium_GroupA::mutable_groupb(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.GroupA.groupb)
  return groupb_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB >*
Medium_GroupA::mutable_groupb() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.GroupA.groupb)
  return &groupb_;
}
inline const ::compare_test::Medium_GroupA_GroupB& Medium_GroupA::groupb(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.GroupA.groupb)
  return groupb_.Get(index);
}
inline ::compare_test::Medium_GroupA_GroupB* Medium_GroupA::add_groupb() {
  // @@protoc_insertion_point(field_add:compare_test.Medium.GroupA.groupb)
  return groupb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA_GroupB >&
Medium_GroupA::groupb() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.GroupA.groupb)
  return groupb_;
}

// -------------------------------------------------------------------

// Medium

// repeated int32 int32s = 1;
inline int Medium::int32s_size() const {
  return int32s_.size();
}
inline void Medium::clear_int32s() {
  int32s_.Clear();
}
inline ::google::protobuf::int32 Medium::int32s(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.int32s)
  return int32s_.Get(index);
}
inline void Medium::set_int32s(int index, ::google::protobuf::int32 value) {
  int32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:compare_test.Medium.int32s)
}
inline void Medium::add_int32s(::google::protobuf::int32 value) {
  int32s_.Add(value);
  // @@protoc_insertion_point(field_add:compare_test.Medium.int32s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Medium::int32s() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.int32s)
  return int32s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Medium::mutable_int32s() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.int32s)
  return &int32s_;
}

// repeated .compare_test.Small smalls = 2;
inline int Medium::smalls_size() const {
  return smalls_.size();
}
inline void Medium::clear_smalls() {
  smalls_.Clear();
}
inline ::compare_test::Small* Medium::mutable_smalls(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.smalls)
  return smalls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::compare_test::Small >*
Medium::mutable_smalls() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.smalls)
  return &smalls_;
}
inline const ::compare_test::Small& Medium::smalls(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.smalls)
  return smalls_.Get(index);
}
inline ::compare_test::Small* Medium::add_smalls() {
  // @@protoc_insertion_point(field_add:compare_test.Medium.smalls)
  return smalls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compare_test::Small >&
Medium::smalls() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.smalls)
  return smalls_;
}

// repeated group GroupA = 3 { ... };
inline int Medium::groupa_size() const {
  return groupa_.size();
}
inline void Medium::clear_groupa() {
  groupa_.Clear();
}
inline ::compare_test::Medium_GroupA* Medium::mutable_groupa(int index) {
  // @@protoc_insertion_point(field_mutable:compare_test.Medium.groupa)
  return groupa_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA >*
Medium::mutable_groupa() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.groupa)
  return &groupa_;
}
inline const ::compare_test::Medium_GroupA& Medium::groupa(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.groupa)
  return groupa_.Get(index);
}
inline ::compare_test::Medium_GroupA* Medium::add_groupa() {
  // @@protoc_insertion_point(field_add:compare_test.Medium.groupa)
  return groupa_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compare_test::Medium_GroupA >&
Medium::groupa() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.groupa)
  return groupa_;
}

// repeated float floats = 6;
inline int Medium::floats_size() const {
  return floats_.size();
}
inline void Medium::clear_floats() {
  floats_.Clear();
}
inline float Medium::floats(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Medium.floats)
  return floats_.Get(index);
}
inline void Medium::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:compare_test.Medium.floats)
}
inline void Medium::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:compare_test.Medium.floats)
}
inline const ::google::protobuf::RepeatedField< float >&
Medium::floats() const {
  // @@protoc_insertion_point(field_list:compare_test.Medium.floats)
  return floats_;
}
inline ::google::protobuf::RepeatedField< float >*
Medium::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Medium.floats)
  return &floats_;
}

// -------------------------------------------------------------------

// Large

// optional string string_ = 1;
inline bool Large::has_string_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Large::set_has_string_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Large::clear_has_string_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Large::clear_string_() {
  string__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_string_();
}
inline const ::std::string& Large::string_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.string_)
  return string__.Get();
}
inline void Large::set_string_(const ::std::string& value) {
  set_has_string_();
  string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:compare_test.Large.string_)
}
#if LANG_CXX11
inline void Large::set_string_(::std::string&& value) {
  set_has_string_();
  string__.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:compare_test.Large.string_)
}
#endif
inline void Large::set_string_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_();
  string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:compare_test.Large.string_)
}
inline void Large::set_string_(const char* value,
    size_t size) {
  set_has_string_();
  string__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:compare_test.Large.string_)
}
inline ::std::string* Large::mutable_string_() {
  set_has_string_();
  // @@protoc_insertion_point(field_mutable:compare_test.Large.string_)
  return string__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Large::release_string_() {
  // @@protoc_insertion_point(field_release:compare_test.Large.string_)
  if (!has_string_()) {
    return NULL;
  }
  clear_has_string_();
  return string__.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Large::set_allocated_string_(::std::string* string_) {
  if (string_ != NULL) {
    set_has_string_();
  } else {
    clear_has_string_();
  }
  string__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.string_)
}
inline ::std::string* Large::unsafe_arena_release_string_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.string_)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_string_();
  return string__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Large::unsafe_arena_set_allocated_string_(
    ::std::string* string_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (string_ != NULL) {
    set_has_string_();
  } else {
    clear_has_string_();
  }
  string__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      string_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:compare_test.Large.string_)
}

// optional int64 int64_ = 2;
inline bool Large::has_int64_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Large::set_has_int64_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Large::clear_has_int64_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Large::clear_int64_() {
  int64__ = GOOGLE_LONGLONG(0);
  clear_has_int64_();
}
inline ::google::protobuf::int64 Large::int64_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.int64_)
  return int64__;
}
inline void Large::set_int64_(::google::protobuf::int64 value) {
  set_has_int64_();
  int64__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.int64_)
}

// optional float float_ = 3;
inline bool Large::has_float_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Large::set_has_float_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Large::clear_has_float_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Large::clear_float_() {
  float__ = 0;
  clear_has_float_();
}
inline float Large::float_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.float_)
  return float__;
}
inline void Large::set_float_(float value) {
  set_has_float_();
  float__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.float_)
}

// optional bool bool_ = 4;
inline bool Large::has_bool_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Large::set_has_bool_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Large::clear_has_bool_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Large::clear_bool_() {
  bool__ = false;
  clear_has_bool_();
}
inline bool Large::bool_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.bool_)
  return bool__;
}
inline void Large::set_bool_(bool value) {
  set_has_bool_();
  bool__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.bool_)
}

// optional .compare_test.Enum enum_ = 5;
inline bool Large::has_enum_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Large::set_has_enum_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Large::clear_has_enum_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Large::clear_enum_() {
  enum__ = 0;
  clear_has_enum_();
}
inline ::compare_test::Enum Large::enum_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.enum_)
  return static_cast< ::compare_test::Enum >(enum__);
}
inline void Large::set_enum_(::compare_test::Enum value) {
  assert(::compare_test::Enum_IsValid(value));
  set_has_enum_();
  enum__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.enum_)
}

// repeated int64 int64s = 6;
inline int Large::int64s_size() const {
  return int64s_.size();
}
inline void Large::clear_int64s() {
  int64s_.Clear();
}
inline ::google::protobuf::int64 Large::int64s(int index) const {
  // @@protoc_insertion_point(field_get:compare_test.Large.int64s)
  return int64s_.Get(index);
}
inline void Large::set_int64s(int index, ::google::protobuf::int64 value) {
  int64s_.Set(index, value);
  // @@protoc_insertion_point(field_set:compare_test.Large.int64s)
}
inline void Large::add_int64s(::google::protobuf::int64 value) {
  int64s_.Add(value);
  // @@protoc_insertion_point(field_add:compare_test.Large.int64s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Large::int64s() const {
  // @@protoc_insertion_point(field_list:compare_test.Large.int64s)
  return int64s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Large::mutable_int64s() {
  // @@protoc_insertion_point(field_mutable_list:compare_test.Large.int64s)
  return &int64s_;
}

// optional .compare_test.Medium medium = 7;
inline bool Large::has_medium() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Large::set_has_medium() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Large::clear_has_medium() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Large::clear_medium() {
  if (medium_ != NULL) medium_->Clear();
  clear_has_medium();
}
inline const ::compare_test::Medium& Large::_internal_medium() const {
  return *medium_;
}
inline const ::compare_test::Medium& Large::medium() const {
  const ::compare_test::Medium* p = medium_;
  // @@protoc_insertion_point(field_get:compare_test.Large.medium)
  return p != NULL ? *p : *reinterpret_cast<const ::compare_test::Medium*>(
      &::compare_test::_Medium_default_instance_);
}
inline ::compare_test::Medium* Large::release_medium() {
  // @@protoc_insertion_point(field_release:compare_test.Large.medium)
  clear_has_medium();
  ::compare_test::Medium* temp = medium_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  medium_ = NULL;
  return temp;
}
inline ::compare_test::Medium* Large::unsafe_arena_release_medium() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.medium)
  clear_has_medium();
  ::compare_test::Medium* temp = medium_;
  medium_ = NULL;
  return temp;
}
inline ::compare_test::Medium* Large::mutable_medium() {
  set_has_medium();
  if (medium_ == NULL) {
    auto* p = CreateMaybeMessage<::compare_test::Medium>(GetArenaNoVirtual());
    medium_ = p;
  }
  // @@protoc_insertion_point(field_mutable:compare_test.Large.medium)
  return medium_;
}
inline void Large::set_allocated_medium(::compare_test::Medium* medium) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete medium_;
  }
  if (medium) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(medium);
    if (message_arena != submessage_arena) {
      medium = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, medium, submessage_arena);
    }
    set_has_medium();
  } else {
    clear_has_medium();
  }
  medium_ = medium;
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.medium)
}

// optional .compare_test.Small small = 8;
inline bool Large::has_small() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Large::set_has_small() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Large::clear_has_small() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Large::clear_small() {
  if (small_ != NULL) small_->Clear();
  clear_has_small();
}
inline const ::compare_test::Small& Large::_internal_small() const {
  return *small_;
}
inline const ::compare_test::Small& Large::small() const {
  const ::compare_test::Small* p = small_;
  // @@protoc_insertion_point(field_get:compare_test.Large.small)
  return p != NULL ? *p : *reinterpret_cast<const ::compare_test::Small*>(
      &::compare_test::_Small_default_instance_);
}
inline ::compare_test::Small* Large::release_small() {
  // @@protoc_insertion_point(field_release:compare_test.Large.small)
  clear_has_small();
  ::compare_test::Small* temp = small_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  small_ = NULL;
  return temp;
}
inline ::compare_test::Small* Large::unsafe_arena_release_small() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.small)
  clear_has_small();
  ::compare_test::Small* temp = small_;
  small_ = NULL;
  return temp;
}
inline ::compare_test::Small* Large::mutable_small() {
  set_has_small();
  if (small_ == NULL) {
    auto* p = CreateMaybeMessage<::compare_test::Small>(GetArenaNoVirtual());
    small_ = p;
  }
  // @@protoc_insertion_point(field_mutable:compare_test.Large.small)
  return small_;
}
inline void Large::set_allocated_small(::compare_test::Small* small) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete small_;
  }
  if (small) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(small);
    if (message_arena != submessage_arena) {
      small = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, small, submessage_arena);
    }
    set_has_small();
  } else {
    clear_has_small();
  }
  small_ = small;
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.small)
}

// optional double double_ = 9;
inline bool Large::has_double_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Large::set_has_double_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Large::clear_has_double_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Large::clear_double_() {
  double__ = 0;
  clear_has_double_();
}
inline double Large::double_() const {
  // @@protoc_insertion_point(field_get:compare_test.Large.double_)
  return double__;
}
inline void Large::set_double_(double value) {
  set_has_double_();
  double__ = value;
  // @@protoc_insertion_point(field_set:compare_test.Large.double_)
}

// optional .compare_test.WithMap with_map = 10;
inline bool Large::has_with_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Large::set_has_with_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Large::clear_has_with_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Large::clear_with_map() {
  if (with_map_ != NULL) with_map_->Clear();
  clear_has_with_map();
}
inline const ::compare_test::WithMap& Large::_internal_with_map() const {
  return *with_map_;
}
inline const ::compare_test::WithMap& Large::with_map() const {
  const ::compare_test::WithMap* p = with_map_;
  // @@protoc_insertion_point(field_get:compare_test.Large.with_map)
  return p != NULL ? *p : *reinterpret_cast<const ::compare_test::WithMap*>(
      &::compare_test::_WithMap_default_instance_);
}
inline ::compare_test::WithMap* Large::release_with_map() {
  // @@protoc_insertion_point(field_release:compare_test.Large.with_map)
  clear_has_with_map();
  ::compare_test::WithMap* temp = with_map_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  with_map_ = NULL;
  return temp;
}
inline ::compare_test::WithMap* Large::unsafe_arena_release_with_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:compare_test.Large.with_map)
  clear_has_with_map();
  ::compare_test::WithMap* temp = with_map_;
  with_map_ = NULL;
  return temp;
}
inline ::compare_test::WithMap* Large::mutable_with_map() {
  set_has_with_map();
  if (with_map_ == NULL) {
    auto* p = CreateMaybeMessage<::compare_test::WithMap>(GetArenaNoVirtual());
    with_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:compare_test.Large.with_map)
  return with_map_;
}
inline void Large::set_allocated_with_map(::compare_test::WithMap* with_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete with_map_;
  }
  if (with_map) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(with_map);
    if (message_arena != submessage_arena) {
      with_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, with_map, submessage_arena);
    }
    set_has_with_map();
  } else {
    clear_has_with_map();
  }
  with_map_ = with_map;
  // @@protoc_insertion_point(field_set_allocated:compare_test.Large.with_map)
}

// -------------------------------------------------------------------

// Labeled

// required int32 required = 1;
inline bool Labeled::has_required() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Labeled::set_has_required() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Labeled::clear_has_required() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Labeled::clear_required() {
  required_ = 0;
  clear_has_required();
}
inline ::google::protobuf::int32 Labeled::required() const {
  // @@protoc_insertion_point(field_get:compare_test.Labeled.required)
  return required_;
}
inline void Labeled::set_required(::google::protobuf::int32 value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:compare_test.Labeled.required)
}

// optional int32 optional = 2;
inline bool Labeled::has_optional() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Labeled::set_has_optional() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Labeled::clear_has_optional() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Labeled::clear_optional() {
  optional_ = 0;
  clear_has_optional();
}
inline ::google::protobuf::int32 Labeled::optional() const {
  // @@protoc_insertion_point(field_get:compare_test.Labeled.optional)
  return optional_;
}
inline void Labeled::set_optional(::google::protobuf::int32 value) {
  set_has_optional();
  optional_ = value;
  // @@protoc_insertion_point(field_set:compare_test.Labeled.optional)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WithMap

// map<int32, .compare_test.Small> value_message = 1;
inline int WithMap::value_message_size() const {
  return value_message_.size();
}
inline void WithMap::clear_value_message() {
  value_message_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >&
WithMap::value_message() const {
  // @@protoc_insertion_point(field_map:compare_test.WithMap.value_message)
  return value_message_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::compare_test::Small >*
WithMap::mutable_value_message() {
  // @@protoc_insertion_point(field_mutable_map:compare_test.WithMap.value_message)
  return value_message_.MutableMap();
}

// map<string, string> value_string = 2;
inline int WithMap::value_string_size() const {
  return value_string_.size();
}
inline void WithMap::clear_value_string() {
  value_string_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
WithMap::value_string() const {
  // @@protoc_insertion_point(field_map:compare_test.WithMap.value_string)
  return value_string_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
WithMap::mutable_value_string() {
  // @@protoc_insertion_point(field_mutable_map:compare_test.WithMap.value_string)
  return value_string_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace compare_test

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::compare_test::Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::compare_test::Enum>() {
  return ::compare_test::Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fpython_2futil_2fprotobuf_2fcompare_5ftest_2eproto
