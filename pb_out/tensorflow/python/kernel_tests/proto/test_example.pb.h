// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/python/kernel_tests/proto/test_example.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto 

namespace protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto
namespace tensorflow {
namespace contrib {
namespace proto {
class ExtraFields;
class ExtraFieldsDefaultTypeInternal;
extern ExtraFieldsDefaultTypeInternal _ExtraFields_default_instance_;
class FieldSpec;
class FieldSpecDefaultTypeInternal;
extern FieldSpecDefaultTypeInternal _FieldSpec_default_instance_;
class InnerMessageValue;
class InnerMessageValueDefaultTypeInternal;
extern InnerMessageValueDefaultTypeInternal _InnerMessageValue_default_instance_;
class MessageValue;
class MessageValueDefaultTypeInternal;
extern MessageValueDefaultTypeInternal _MessageValue_default_instance_;
class MiddleMessageValue;
class MiddleMessageValueDefaultTypeInternal;
extern MiddleMessageValueDefaultTypeInternal _MiddleMessageValue_default_instance_;
class PackedTestValue;
class PackedTestValueDefaultTypeInternal;
extern PackedTestValueDefaultTypeInternal _PackedTestValue_default_instance_;
class PrimitiveValue;
class PrimitiveValueDefaultTypeInternal;
extern PrimitiveValueDefaultTypeInternal _PrimitiveValue_default_instance_;
class RepeatedMessageValue;
class RepeatedMessageValueDefaultTypeInternal;
extern RepeatedMessageValueDefaultTypeInternal _RepeatedMessageValue_default_instance_;
class RepeatedMessageValue_NestedMessageValue;
class RepeatedMessageValue_NestedMessageValueDefaultTypeInternal;
extern RepeatedMessageValue_NestedMessageValueDefaultTypeInternal _RepeatedMessageValue_NestedMessageValue_default_instance_;
class TestCase;
class TestCaseDefaultTypeInternal;
extern TestCaseDefaultTypeInternal _TestCase_default_instance_;
class TestValue;
class TestValueDefaultTypeInternal;
extern TestValueDefaultTypeInternal _TestValue_default_instance_;
}  // namespace proto
}  // namespace contrib
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::contrib::proto::ExtraFields* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::ExtraFields>(Arena*);
template<> ::tensorflow::contrib::proto::FieldSpec* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::FieldSpec>(Arena*);
template<> ::tensorflow::contrib::proto::InnerMessageValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::InnerMessageValue>(Arena*);
template<> ::tensorflow::contrib::proto::MessageValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::MessageValue>(Arena*);
template<> ::tensorflow::contrib::proto::MiddleMessageValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::MiddleMessageValue>(Arena*);
template<> ::tensorflow::contrib::proto::PackedTestValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::PackedTestValue>(Arena*);
template<> ::tensorflow::contrib::proto::PrimitiveValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::PrimitiveValue>(Arena*);
template<> ::tensorflow::contrib::proto::RepeatedMessageValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::RepeatedMessageValue>(Arena*);
template<> ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue>(Arena*);
template<> ::tensorflow::contrib::proto::TestCase* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::TestCase>(Arena*);
template<> ::tensorflow::contrib::proto::TestValue* Arena::CreateMaybeMessage<::tensorflow::contrib::proto::TestValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace contrib {
namespace proto {

enum Color {
  RED = 0,
  ORANGE = 1,
  YELLOW = 2,
  GREEN = 3,
  BLUE = 4,
  INDIGO = 5,
  VIOLET = 6
};
bool Color_IsValid(int value);
const Color Color_MIN = RED;
const Color Color_MAX = VIOLET;
const int Color_ARRAYSIZE = Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* Color_descriptor();
inline const ::std::string& Color_Name(Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    Color_descriptor(), value);
}
inline bool Color_Parse(
    const ::std::string& name, Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class TestCase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.TestCase) */ {
 public:
  TestCase();
  virtual ~TestCase();

  TestCase(const TestCase& from);

  inline TestCase& operator=(const TestCase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestCase(TestCase&& from) noexcept
    : TestCase() {
    *this = ::std::move(from);
  }

  inline TestCase& operator=(TestCase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestCase* internal_default_instance() {
    return reinterpret_cast<const TestCase*>(
               &_TestCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestCase* other);
  friend void swap(TestCase& a, TestCase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestCase* New() const final {
    return CreateMaybeMessage<TestCase>(NULL);
  }

  TestCase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestCase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestCase& from);
  void MergeFrom(const TestCase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.contrib.proto.TestValue values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::tensorflow::contrib::proto::TestValue* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::TestValue >*
      mutable_values();
  const ::tensorflow::contrib::proto::TestValue& values(int index) const;
  ::tensorflow::contrib::proto::TestValue* add_values();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::TestValue >&
      values() const;

  // repeated int32 shapes = 2;
  int shapes_size() const;
  void clear_shapes();
  static const int kShapesFieldNumber = 2;
  ::google::protobuf::int32 shapes(int index) const;
  void set_shapes(int index, ::google::protobuf::int32 value);
  void add_shapes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shapes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shapes();

  // repeated int32 sizes = 3;
  int sizes_size() const;
  void clear_sizes();
  static const int kSizesFieldNumber = 3;
  ::google::protobuf::int32 sizes(int index) const;
  void set_sizes(int index, ::google::protobuf::int32 value);
  void add_sizes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sizes();

  // repeated .tensorflow.contrib.proto.FieldSpec fields = 4;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 4;
  ::tensorflow::contrib::proto::FieldSpec* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::FieldSpec >*
      mutable_fields();
  const ::tensorflow::contrib::proto::FieldSpec& fields(int index) const;
  ::tensorflow::contrib::proto::FieldSpec* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::FieldSpec >&
      fields() const;

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.TestCase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::TestValue > values_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shapes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sizes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::FieldSpec > fields_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.FieldSpec) */ {
 public:
  FieldSpec();
  virtual ~FieldSpec();

  FieldSpec(const FieldSpec& from);

  inline FieldSpec& operator=(const FieldSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldSpec(FieldSpec&& from) noexcept
    : FieldSpec() {
    *this = ::std::move(from);
  }

  inline FieldSpec& operator=(FieldSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldSpec* internal_default_instance() {
    return reinterpret_cast<const FieldSpec*>(
               &_FieldSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FieldSpec* other);
  friend void swap(FieldSpec& a, FieldSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldSpec* New() const final {
    return CreateMaybeMessage<FieldSpec>(NULL);
  }

  FieldSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldSpec& from);
  void MergeFrom(const FieldSpec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .tensorflow.contrib.proto.TestValue value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::tensorflow::contrib::proto::TestValue& _internal_value() const;
  public:
  const ::tensorflow::contrib::proto::TestValue& value() const;
  ::tensorflow::contrib::proto::TestValue* release_value();
  ::tensorflow::contrib::proto::TestValue* mutable_value();
  void set_allocated_value(::tensorflow::contrib::proto::TestValue* value);

  // optional .tensorflow.DataType dtype = 2;
  bool has_dtype() const;
  void clear_dtype();
  static const int kDtypeFieldNumber = 2;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.FieldSpec)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_dtype();
  void clear_has_dtype();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tensorflow::contrib::proto::TestValue* value_;
  int dtype_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.TestValue) */ {
 public:
  TestValue();
  virtual ~TestValue();

  TestValue(const TestValue& from);

  inline TestValue& operator=(const TestValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestValue(TestValue&& from) noexcept
    : TestValue() {
    *this = ::std::move(from);
  }

  inline TestValue& operator=(TestValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestValue* internal_default_instance() {
    return reinterpret_cast<const TestValue*>(
               &_TestValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TestValue* other);
  friend void swap(TestValue& a, TestValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestValue* New() const final {
    return CreateMaybeMessage<TestValue>(NULL);
  }

  TestValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestValue& from);
  void MergeFrom(const TestValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double double_value = 1;
  int double_value_size() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 1;
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_value();

  // repeated float float_value = 2;
  int float_value_size() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_value();

  // repeated int64 int64_value = 3;
  int int64_value_size() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 3;
  ::google::protobuf::int64 int64_value(int index) const;
  void set_int64_value(int index, ::google::protobuf::int64 value);
  void add_int64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_value();

  // repeated uint64 uint64_value = 4;
  int uint64_value_size() const;
  void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 4;
  ::google::protobuf::uint64 uint64_value(int index) const;
  void set_uint64_value(int index, ::google::protobuf::uint64 value);
  void add_uint64_value(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uint64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uint64_value();

  // repeated int32 int32_value = 5;
  int int32_value_size() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 5;
  ::google::protobuf::int32 int32_value(int index) const;
  void set_int32_value(int index, ::google::protobuf::int32 value);
  void add_int32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_value();

  // repeated fixed64 fixed64_value = 6;
  int fixed64_value_size() const;
  void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 6;
  ::google::protobuf::uint64 fixed64_value(int index) const;
  void set_fixed64_value(int index, ::google::protobuf::uint64 value);
  void add_fixed64_value(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fixed64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fixed64_value();

  // repeated fixed32 fixed32_value = 7;
  int fixed32_value_size() const;
  void clear_fixed32_value();
  static const int kFixed32ValueFieldNumber = 7;
  ::google::protobuf::uint32 fixed32_value(int index) const;
  void set_fixed32_value(int index, ::google::protobuf::uint32 value);
  void add_fixed32_value(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fixed32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fixed32_value();

  // repeated bool bool_value = 8;
  int bool_value_size() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 8;
  bool bool_value(int index) const;
  void set_bool_value(int index, bool value);
  void add_bool_value(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();

  // repeated string string_value = 9;
  int string_value_size() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 9;
  const ::std::string& string_value(int index) const;
  ::std::string* mutable_string_value(int index);
  void set_string_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(int index, ::std::string&& value);
  #endif
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const char* value, size_t size);
  ::std::string* add_string_value();
  void add_string_value(const ::std::string& value);
  #if LANG_CXX11
  void add_string_value(::std::string&& value);
  #endif
  void add_string_value(const char* value);
  void add_string_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();

  // repeated bytes bytes_value = 12;
  int bytes_value_size() const;
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 12;
  const ::std::string& bytes_value(int index) const;
  ::std::string* mutable_bytes_value(int index);
  void set_bytes_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value(int index, ::std::string&& value);
  #endif
  void set_bytes_value(int index, const char* value);
  void set_bytes_value(int index, const void* value, size_t size);
  ::std::string* add_bytes_value();
  void add_bytes_value(const ::std::string& value);
  #if LANG_CXX11
  void add_bytes_value(::std::string&& value);
  #endif
  void add_bytes_value(const char* value);
  void add_bytes_value(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bytes_value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bytes_value();

  // repeated uint32 uint32_value = 13;
  int uint32_value_size() const;
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 13;
  ::google::protobuf::uint32 uint32_value(int index) const;
  void set_uint32_value(int index, ::google::protobuf::uint32 value);
  void add_uint32_value(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uint32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uint32_value();

  // repeated sfixed32 sfixed32_value = 15;
  int sfixed32_value_size() const;
  void clear_sfixed32_value();
  static const int kSfixed32ValueFieldNumber = 15;
  ::google::protobuf::int32 sfixed32_value(int index) const;
  void set_sfixed32_value(int index, ::google::protobuf::int32 value);
  void add_sfixed32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sfixed32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sfixed32_value();

  // repeated sfixed64 sfixed64_value = 16;
  int sfixed64_value_size() const;
  void clear_sfixed64_value();
  static const int kSfixed64ValueFieldNumber = 16;
  ::google::protobuf::int64 sfixed64_value(int index) const;
  void set_sfixed64_value(int index, ::google::protobuf::int64 value);
  void add_sfixed64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sfixed64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sfixed64_value();

  // repeated sint32 sint32_value = 17;
  int sint32_value_size() const;
  void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 17;
  ::google::protobuf::int32 sint32_value(int index) const;
  void set_sint32_value(int index, ::google::protobuf::int32 value);
  void add_sint32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sint32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sint32_value();

  // repeated sint64 sint64_value = 18;
  int sint64_value_size() const;
  void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 18;
  ::google::protobuf::int64 sint64_value(int index) const;
  void set_sint64_value(int index, ::google::protobuf::int64 value);
  void add_sint64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sint64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sint64_value();

  // repeated .tensorflow.contrib.proto.PrimitiveValue message_value = 19;
  int message_value_size() const;
  void clear_message_value();
  static const int kMessageValueFieldNumber = 19;
  ::tensorflow::contrib::proto::PrimitiveValue* mutable_message_value(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >*
      mutable_message_value();
  const ::tensorflow::contrib::proto::PrimitiveValue& message_value(int index) const;
  ::tensorflow::contrib::proto::PrimitiveValue* add_message_value();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >&
      message_value() const;

  // repeated .tensorflow.contrib.proto.Color enum_value = 35;
  int enum_value_size() const;
  void clear_enum_value();
  static const int kEnumValueFieldNumber = 35;
  ::tensorflow::contrib::proto::Color enum_value(int index) const;
  void set_enum_value(int index, ::tensorflow::contrib::proto::Color value);
  void add_enum_value(::tensorflow::contrib::proto::Color value);
  const ::google::protobuf::RepeatedField<int>& enum_value() const;
  ::google::protobuf::RepeatedField<int>* mutable_enum_value();

  // optional string string_value_with_default = 28 [default = "a"];
  bool has_string_value_with_default() const;
  void clear_string_value_with_default();
  static const int kStringValueWithDefaultFieldNumber = 28;
  const ::std::string& string_value_with_default() const;
  void set_string_value_with_default(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value_with_default(::std::string&& value);
  #endif
  void set_string_value_with_default(const char* value);
  void set_string_value_with_default(const char* value, size_t size);
  ::std::string* mutable_string_value_with_default();
  ::std::string* release_string_value_with_default();
  void set_allocated_string_value_with_default(::std::string* string_value_with_default);

  // optional bytes bytes_value_with_default = 29 [default = "a longer default string"];
  bool has_bytes_value_with_default() const;
  void clear_bytes_value_with_default();
  static const int kBytesValueWithDefaultFieldNumber = 29;
  const ::std::string& bytes_value_with_default() const;
  void set_bytes_value_with_default(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value_with_default(::std::string&& value);
  #endif
  void set_bytes_value_with_default(const char* value);
  void set_bytes_value_with_default(const void* value, size_t size);
  ::std::string* mutable_bytes_value_with_default();
  ::std::string* release_bytes_value_with_default();
  void set_allocated_bytes_value_with_default(::std::string* bytes_value_with_default);

  // optional double double_value_with_default = 20 [default = 1];
  bool has_double_value_with_default() const;
  void clear_double_value_with_default();
  static const int kDoubleValueWithDefaultFieldNumber = 20;
  double double_value_with_default() const;
  void set_double_value_with_default(double value);

  // optional int64 int64_value_with_default = 22 [default = 3];
  bool has_int64_value_with_default() const;
  void clear_int64_value_with_default();
  static const int kInt64ValueWithDefaultFieldNumber = 22;
  ::google::protobuf::int64 int64_value_with_default() const;
  void set_int64_value_with_default(::google::protobuf::int64 value);

  // optional float float_value_with_default = 21 [default = 2];
  bool has_float_value_with_default() const;
  void clear_float_value_with_default();
  static const int kFloatValueWithDefaultFieldNumber = 21;
  float float_value_with_default() const;
  void set_float_value_with_default(float value);

  // optional int32 int32_value_with_default = 24 [default = 5];
  bool has_int32_value_with_default() const;
  void clear_int32_value_with_default();
  static const int kInt32ValueWithDefaultFieldNumber = 24;
  ::google::protobuf::int32 int32_value_with_default() const;
  void set_int32_value_with_default(::google::protobuf::int32 value);

  // optional uint64 uint64_value_with_default = 23 [default = 4];
  bool has_uint64_value_with_default() const;
  void clear_uint64_value_with_default();
  static const int kUint64ValueWithDefaultFieldNumber = 23;
  ::google::protobuf::uint64 uint64_value_with_default() const;
  void set_uint64_value_with_default(::google::protobuf::uint64 value);

  // optional fixed64 fixed64_value_with_default = 25 [default = 6];
  bool has_fixed64_value_with_default() const;
  void clear_fixed64_value_with_default();
  static const int kFixed64ValueWithDefaultFieldNumber = 25;
  ::google::protobuf::uint64 fixed64_value_with_default() const;
  void set_fixed64_value_with_default(::google::protobuf::uint64 value);

  // optional fixed32 fixed32_value_with_default = 26 [default = 7];
  bool has_fixed32_value_with_default() const;
  void clear_fixed32_value_with_default();
  static const int kFixed32ValueWithDefaultFieldNumber = 26;
  ::google::protobuf::uint32 fixed32_value_with_default() const;
  void set_fixed32_value_with_default(::google::protobuf::uint32 value);

  // optional bool bool_value_with_default = 27 [default = true];
  bool has_bool_value_with_default() const;
  void clear_bool_value_with_default();
  static const int kBoolValueWithDefaultFieldNumber = 27;
  bool bool_value_with_default() const;
  void set_bool_value_with_default(bool value);

  // optional uint32 uint32_value_with_default = 30 [default = 9];
  bool has_uint32_value_with_default() const;
  void clear_uint32_value_with_default();
  static const int kUint32ValueWithDefaultFieldNumber = 30;
  ::google::protobuf::uint32 uint32_value_with_default() const;
  void set_uint32_value_with_default(::google::protobuf::uint32 value);

  // optional sfixed32 sfixed32_value_with_default = 31 [default = 10];
  bool has_sfixed32_value_with_default() const;
  void clear_sfixed32_value_with_default();
  static const int kSfixed32ValueWithDefaultFieldNumber = 31;
  ::google::protobuf::int32 sfixed32_value_with_default() const;
  void set_sfixed32_value_with_default(::google::protobuf::int32 value);

  // optional sfixed64 sfixed64_value_with_default = 32 [default = 11];
  bool has_sfixed64_value_with_default() const;
  void clear_sfixed64_value_with_default();
  static const int kSfixed64ValueWithDefaultFieldNumber = 32;
  ::google::protobuf::int64 sfixed64_value_with_default() const;
  void set_sfixed64_value_with_default(::google::protobuf::int64 value);

  // optional sint64 sint64_value_with_default = 34 [default = 13];
  bool has_sint64_value_with_default() const;
  void clear_sint64_value_with_default();
  static const int kSint64ValueWithDefaultFieldNumber = 34;
  ::google::protobuf::int64 sint64_value_with_default() const;
  void set_sint64_value_with_default(::google::protobuf::int64 value);

  // optional sint32 sint32_value_with_default = 33 [default = 12];
  bool has_sint32_value_with_default() const;
  void clear_sint32_value_with_default();
  static const int kSint32ValueWithDefaultFieldNumber = 33;
  ::google::protobuf::int32 sint32_value_with_default() const;
  void set_sint32_value_with_default(::google::protobuf::int32 value);

  // optional .tensorflow.contrib.proto.Color enum_value_with_default = 36 [default = GREEN];
  bool has_enum_value_with_default() const;
  void clear_enum_value_with_default();
  static const int kEnumValueWithDefaultFieldNumber = 36;
  ::tensorflow::contrib::proto::Color enum_value_with_default() const;
  void set_enum_value_with_default(::tensorflow::contrib::proto::Color value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestValue)
  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.TestValue)
 private:
  void set_has_double_value_with_default();
  void clear_has_double_value_with_default();
  void set_has_float_value_with_default();
  void clear_has_float_value_with_default();
  void set_has_int64_value_with_default();
  void clear_has_int64_value_with_default();
  void set_has_uint64_value_with_default();
  void clear_has_uint64_value_with_default();
  void set_has_int32_value_with_default();
  void clear_has_int32_value_with_default();
  void set_has_fixed64_value_with_default();
  void clear_has_fixed64_value_with_default();
  void set_has_fixed32_value_with_default();
  void clear_has_fixed32_value_with_default();
  void set_has_bool_value_with_default();
  void clear_has_bool_value_with_default();
  void set_has_string_value_with_default();
  void clear_has_string_value_with_default();
  void set_has_bytes_value_with_default();
  void clear_has_bytes_value_with_default();
  void set_has_uint32_value_with_default();
  void clear_has_uint32_value_with_default();
  void set_has_sfixed32_value_with_default();
  void clear_has_sfixed32_value_with_default();
  void set_has_sfixed64_value_with_default();
  void clear_has_sfixed64_value_with_default();
  void set_has_sint32_value_with_default();
  void clear_has_sint32_value_with_default();
  void set_has_sint64_value_with_default();
  void clear_has_sint64_value_with_default();
  void set_has_enum_value_with_default();
  void clear_has_enum_value_with_default();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  ::google::protobuf::RepeatedField< float > float_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uint64_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fixed64_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fixed32_value_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bytes_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uint32_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sfixed32_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sfixed64_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sint32_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sint64_value_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue > message_value_;
  ::google::protobuf::RepeatedField<int> enum_value_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_string_value_with_default_;
  private:
  ::google::protobuf::internal::ArenaStringPtr string_value_with_default_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_bytes_value_with_default_;
  private:
  ::google::protobuf::internal::ArenaStringPtr bytes_value_with_default_;
  double double_value_with_default_;
  ::google::protobuf::int64 int64_value_with_default_;
  float float_value_with_default_;
  ::google::protobuf::int32 int32_value_with_default_;
  ::google::protobuf::uint64 uint64_value_with_default_;
  ::google::protobuf::uint64 fixed64_value_with_default_;
  ::google::protobuf::uint32 fixed32_value_with_default_;
  bool bool_value_with_default_;
  ::google::protobuf::uint32 uint32_value_with_default_;
  ::google::protobuf::int32 sfixed32_value_with_default_;
  ::google::protobuf::int64 sfixed64_value_with_default_;
  ::google::protobuf::int64 sint64_value_with_default_;
  ::google::protobuf::int32 sint32_value_with_default_;
  int enum_value_with_default_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackedTestValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.PackedTestValue) */ {
 public:
  PackedTestValue();
  virtual ~PackedTestValue();

  PackedTestValue(const PackedTestValue& from);

  inline PackedTestValue& operator=(const PackedTestValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackedTestValue(PackedTestValue&& from) noexcept
    : PackedTestValue() {
    *this = ::std::move(from);
  }

  inline PackedTestValue& operator=(PackedTestValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackedTestValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackedTestValue* internal_default_instance() {
    return reinterpret_cast<const PackedTestValue*>(
               &_PackedTestValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PackedTestValue* other);
  friend void swap(PackedTestValue& a, PackedTestValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackedTestValue* New() const final {
    return CreateMaybeMessage<PackedTestValue>(NULL);
  }

  PackedTestValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackedTestValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackedTestValue& from);
  void MergeFrom(const PackedTestValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackedTestValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double double_value = 1 [packed = true];
  int double_value_size() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 1;
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_value();

  // repeated float float_value = 2 [packed = true];
  int float_value_size() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_value();

  // repeated int64 int64_value = 3 [packed = true];
  int int64_value_size() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 3;
  ::google::protobuf::int64 int64_value(int index) const;
  void set_int64_value(int index, ::google::protobuf::int64 value);
  void add_int64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_value();

  // repeated uint64 uint64_value = 4 [packed = true];
  int uint64_value_size() const;
  void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 4;
  ::google::protobuf::uint64 uint64_value(int index) const;
  void set_uint64_value(int index, ::google::protobuf::uint64 value);
  void add_uint64_value(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uint64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uint64_value();

  // repeated int32 int32_value = 5 [packed = true];
  int int32_value_size() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 5;
  ::google::protobuf::int32 int32_value(int index) const;
  void set_int32_value(int index, ::google::protobuf::int32 value);
  void add_int32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_value();

  // repeated fixed64 fixed64_value = 6 [packed = true];
  int fixed64_value_size() const;
  void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 6;
  ::google::protobuf::uint64 fixed64_value(int index) const;
  void set_fixed64_value(int index, ::google::protobuf::uint64 value);
  void add_fixed64_value(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fixed64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fixed64_value();

  // repeated fixed32 fixed32_value = 7 [packed = true];
  int fixed32_value_size() const;
  void clear_fixed32_value();
  static const int kFixed32ValueFieldNumber = 7;
  ::google::protobuf::uint32 fixed32_value(int index) const;
  void set_fixed32_value(int index, ::google::protobuf::uint32 value);
  void add_fixed32_value(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fixed32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fixed32_value();

  // repeated bool bool_value = 8 [packed = true];
  int bool_value_size() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 8;
  bool bool_value(int index) const;
  void set_bool_value(int index, bool value);
  void add_bool_value(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();

  // repeated string string_value = 9;
  int string_value_size() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 9;
  const ::std::string& string_value(int index) const;
  ::std::string* mutable_string_value(int index);
  void set_string_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(int index, ::std::string&& value);
  #endif
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const char* value, size_t size);
  ::std::string* add_string_value();
  void add_string_value(const ::std::string& value);
  #if LANG_CXX11
  void add_string_value(::std::string&& value);
  #endif
  void add_string_value(const char* value);
  void add_string_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();

  // repeated bytes bytes_value = 12;
  int bytes_value_size() const;
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 12;
  const ::std::string& bytes_value(int index) const;
  ::std::string* mutable_bytes_value(int index);
  void set_bytes_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value(int index, ::std::string&& value);
  #endif
  void set_bytes_value(int index, const char* value);
  void set_bytes_value(int index, const void* value, size_t size);
  ::std::string* add_bytes_value();
  void add_bytes_value(const ::std::string& value);
  #if LANG_CXX11
  void add_bytes_value(::std::string&& value);
  #endif
  void add_bytes_value(const char* value);
  void add_bytes_value(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bytes_value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bytes_value();

  // repeated uint32 uint32_value = 13 [packed = true];
  int uint32_value_size() const;
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 13;
  ::google::protobuf::uint32 uint32_value(int index) const;
  void set_uint32_value(int index, ::google::protobuf::uint32 value);
  void add_uint32_value(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uint32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uint32_value();

  // repeated sfixed32 sfixed32_value = 15 [packed = true];
  int sfixed32_value_size() const;
  void clear_sfixed32_value();
  static const int kSfixed32ValueFieldNumber = 15;
  ::google::protobuf::int32 sfixed32_value(int index) const;
  void set_sfixed32_value(int index, ::google::protobuf::int32 value);
  void add_sfixed32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sfixed32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sfixed32_value();

  // repeated sfixed64 sfixed64_value = 16 [packed = true];
  int sfixed64_value_size() const;
  void clear_sfixed64_value();
  static const int kSfixed64ValueFieldNumber = 16;
  ::google::protobuf::int64 sfixed64_value(int index) const;
  void set_sfixed64_value(int index, ::google::protobuf::int64 value);
  void add_sfixed64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sfixed64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sfixed64_value();

  // repeated sint32 sint32_value = 17 [packed = true];
  int sint32_value_size() const;
  void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 17;
  ::google::protobuf::int32 sint32_value(int index) const;
  void set_sint32_value(int index, ::google::protobuf::int32 value);
  void add_sint32_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sint32_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sint32_value();

  // repeated sint64 sint64_value = 18 [packed = true];
  int sint64_value_size() const;
  void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 18;
  ::google::protobuf::int64 sint64_value(int index) const;
  void set_sint64_value(int index, ::google::protobuf::int64 value);
  void add_sint64_value(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sint64_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sint64_value();

  // repeated .tensorflow.contrib.proto.PrimitiveValue message_value = 19;
  int message_value_size() const;
  void clear_message_value();
  static const int kMessageValueFieldNumber = 19;
  ::tensorflow::contrib::proto::PrimitiveValue* mutable_message_value(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >*
      mutable_message_value();
  const ::tensorflow::contrib::proto::PrimitiveValue& message_value(int index) const;
  ::tensorflow::contrib::proto::PrimitiveValue* add_message_value();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >&
      message_value() const;

  // repeated .tensorflow.contrib.proto.Color enum_value = 35;
  int enum_value_size() const;
  void clear_enum_value();
  static const int kEnumValueFieldNumber = 35;
  ::tensorflow::contrib::proto::Color enum_value(int index) const;
  void set_enum_value(int index, ::tensorflow::contrib::proto::Color value);
  void add_enum_value(::tensorflow::contrib::proto::Color value);
  const ::google::protobuf::RepeatedField<int>& enum_value() const;
  ::google::protobuf::RepeatedField<int>* mutable_enum_value();

  // optional string string_value_with_default = 28 [default = "a"];
  bool has_string_value_with_default() const;
  void clear_string_value_with_default();
  static const int kStringValueWithDefaultFieldNumber = 28;
  const ::std::string& string_value_with_default() const;
  void set_string_value_with_default(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value_with_default(::std::string&& value);
  #endif
  void set_string_value_with_default(const char* value);
  void set_string_value_with_default(const char* value, size_t size);
  ::std::string* mutable_string_value_with_default();
  ::std::string* release_string_value_with_default();
  void set_allocated_string_value_with_default(::std::string* string_value_with_default);

  // optional bytes bytes_value_with_default = 29 [default = "a longer default string"];
  bool has_bytes_value_with_default() const;
  void clear_bytes_value_with_default();
  static const int kBytesValueWithDefaultFieldNumber = 29;
  const ::std::string& bytes_value_with_default() const;
  void set_bytes_value_with_default(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value_with_default(::std::string&& value);
  #endif
  void set_bytes_value_with_default(const char* value);
  void set_bytes_value_with_default(const void* value, size_t size);
  ::std::string* mutable_bytes_value_with_default();
  ::std::string* release_bytes_value_with_default();
  void set_allocated_bytes_value_with_default(::std::string* bytes_value_with_default);

  // optional double double_value_with_default = 20 [default = 1];
  bool has_double_value_with_default() const;
  void clear_double_value_with_default();
  static const int kDoubleValueWithDefaultFieldNumber = 20;
  double double_value_with_default() const;
  void set_double_value_with_default(double value);

  // optional int64 int64_value_with_default = 22 [default = 3];
  bool has_int64_value_with_default() const;
  void clear_int64_value_with_default();
  static const int kInt64ValueWithDefaultFieldNumber = 22;
  ::google::protobuf::int64 int64_value_with_default() const;
  void set_int64_value_with_default(::google::protobuf::int64 value);

  // optional float float_value_with_default = 21 [default = 2];
  bool has_float_value_with_default() const;
  void clear_float_value_with_default();
  static const int kFloatValueWithDefaultFieldNumber = 21;
  float float_value_with_default() const;
  void set_float_value_with_default(float value);

  // optional int32 int32_value_with_default = 24 [default = 5];
  bool has_int32_value_with_default() const;
  void clear_int32_value_with_default();
  static const int kInt32ValueWithDefaultFieldNumber = 24;
  ::google::protobuf::int32 int32_value_with_default() const;
  void set_int32_value_with_default(::google::protobuf::int32 value);

  // optional uint64 uint64_value_with_default = 23 [default = 4];
  bool has_uint64_value_with_default() const;
  void clear_uint64_value_with_default();
  static const int kUint64ValueWithDefaultFieldNumber = 23;
  ::google::protobuf::uint64 uint64_value_with_default() const;
  void set_uint64_value_with_default(::google::protobuf::uint64 value);

  // optional fixed64 fixed64_value_with_default = 25 [default = 6];
  bool has_fixed64_value_with_default() const;
  void clear_fixed64_value_with_default();
  static const int kFixed64ValueWithDefaultFieldNumber = 25;
  ::google::protobuf::uint64 fixed64_value_with_default() const;
  void set_fixed64_value_with_default(::google::protobuf::uint64 value);

  // optional fixed32 fixed32_value_with_default = 26 [default = 7];
  bool has_fixed32_value_with_default() const;
  void clear_fixed32_value_with_default();
  static const int kFixed32ValueWithDefaultFieldNumber = 26;
  ::google::protobuf::uint32 fixed32_value_with_default() const;
  void set_fixed32_value_with_default(::google::protobuf::uint32 value);

  // optional bool bool_value_with_default = 27 [default = true];
  bool has_bool_value_with_default() const;
  void clear_bool_value_with_default();
  static const int kBoolValueWithDefaultFieldNumber = 27;
  bool bool_value_with_default() const;
  void set_bool_value_with_default(bool value);

  // optional uint32 uint32_value_with_default = 30 [default = 9];
  bool has_uint32_value_with_default() const;
  void clear_uint32_value_with_default();
  static const int kUint32ValueWithDefaultFieldNumber = 30;
  ::google::protobuf::uint32 uint32_value_with_default() const;
  void set_uint32_value_with_default(::google::protobuf::uint32 value);

  // optional sfixed32 sfixed32_value_with_default = 31 [default = 10];
  bool has_sfixed32_value_with_default() const;
  void clear_sfixed32_value_with_default();
  static const int kSfixed32ValueWithDefaultFieldNumber = 31;
  ::google::protobuf::int32 sfixed32_value_with_default() const;
  void set_sfixed32_value_with_default(::google::protobuf::int32 value);

  // optional sfixed64 sfixed64_value_with_default = 32 [default = 11];
  bool has_sfixed64_value_with_default() const;
  void clear_sfixed64_value_with_default();
  static const int kSfixed64ValueWithDefaultFieldNumber = 32;
  ::google::protobuf::int64 sfixed64_value_with_default() const;
  void set_sfixed64_value_with_default(::google::protobuf::int64 value);

  // optional sint64 sint64_value_with_default = 34 [default = 13];
  bool has_sint64_value_with_default() const;
  void clear_sint64_value_with_default();
  static const int kSint64ValueWithDefaultFieldNumber = 34;
  ::google::protobuf::int64 sint64_value_with_default() const;
  void set_sint64_value_with_default(::google::protobuf::int64 value);

  // optional sint32 sint32_value_with_default = 33 [default = 12];
  bool has_sint32_value_with_default() const;
  void clear_sint32_value_with_default();
  static const int kSint32ValueWithDefaultFieldNumber = 33;
  ::google::protobuf::int32 sint32_value_with_default() const;
  void set_sint32_value_with_default(::google::protobuf::int32 value);

  // optional .tensorflow.contrib.proto.Color enum_value_with_default = 36 [default = GREEN];
  bool has_enum_value_with_default() const;
  void clear_enum_value_with_default();
  static const int kEnumValueWithDefaultFieldNumber = 36;
  ::tensorflow::contrib::proto::Color enum_value_with_default() const;
  void set_enum_value_with_default(::tensorflow::contrib::proto::Color value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.PackedTestValue)
 private:
  void set_has_double_value_with_default();
  void clear_has_double_value_with_default();
  void set_has_float_value_with_default();
  void clear_has_float_value_with_default();
  void set_has_int64_value_with_default();
  void clear_has_int64_value_with_default();
  void set_has_uint64_value_with_default();
  void clear_has_uint64_value_with_default();
  void set_has_int32_value_with_default();
  void clear_has_int32_value_with_default();
  void set_has_fixed64_value_with_default();
  void clear_has_fixed64_value_with_default();
  void set_has_fixed32_value_with_default();
  void clear_has_fixed32_value_with_default();
  void set_has_bool_value_with_default();
  void clear_has_bool_value_with_default();
  void set_has_string_value_with_default();
  void clear_has_string_value_with_default();
  void set_has_bytes_value_with_default();
  void clear_has_bytes_value_with_default();
  void set_has_uint32_value_with_default();
  void clear_has_uint32_value_with_default();
  void set_has_sfixed32_value_with_default();
  void clear_has_sfixed32_value_with_default();
  void set_has_sfixed64_value_with_default();
  void clear_has_sfixed64_value_with_default();
  void set_has_sint32_value_with_default();
  void clear_has_sint32_value_with_default();
  void set_has_sint64_value_with_default();
  void clear_has_sint64_value_with_default();
  void set_has_enum_value_with_default();
  void clear_has_enum_value_with_default();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > float_value_;
  mutable int _float_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_value_;
  mutable int _int64_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uint64_value_;
  mutable int _uint64_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_value_;
  mutable int _int32_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fixed64_value_;
  mutable int _fixed64_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fixed32_value_;
  mutable int _fixed32_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  mutable int _bool_value_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bytes_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uint32_value_;
  mutable int _uint32_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sfixed32_value_;
  mutable int _sfixed32_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sfixed64_value_;
  mutable int _sfixed64_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sint32_value_;
  mutable int _sint32_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sint64_value_;
  mutable int _sint64_value_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue > message_value_;
  ::google::protobuf::RepeatedField<int> enum_value_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_string_value_with_default_;
  private:
  ::google::protobuf::internal::ArenaStringPtr string_value_with_default_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_bytes_value_with_default_;
  private:
  ::google::protobuf::internal::ArenaStringPtr bytes_value_with_default_;
  double double_value_with_default_;
  ::google::protobuf::int64 int64_value_with_default_;
  float float_value_with_default_;
  ::google::protobuf::int32 int32_value_with_default_;
  ::google::protobuf::uint64 uint64_value_with_default_;
  ::google::protobuf::uint64 fixed64_value_with_default_;
  ::google::protobuf::uint32 fixed32_value_with_default_;
  bool bool_value_with_default_;
  ::google::protobuf::uint32 uint32_value_with_default_;
  ::google::protobuf::int32 sfixed32_value_with_default_;
  ::google::protobuf::int64 sfixed64_value_with_default_;
  ::google::protobuf::int64 sint64_value_with_default_;
  ::google::protobuf::int32 sint32_value_with_default_;
  int enum_value_with_default_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrimitiveValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.PrimitiveValue) */ {
 public:
  PrimitiveValue();
  virtual ~PrimitiveValue();

  PrimitiveValue(const PrimitiveValue& from);

  inline PrimitiveValue& operator=(const PrimitiveValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrimitiveValue(PrimitiveValue&& from) noexcept
    : PrimitiveValue() {
    *this = ::std::move(from);
  }

  inline PrimitiveValue& operator=(PrimitiveValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveValue* internal_default_instance() {
    return reinterpret_cast<const PrimitiveValue*>(
               &_PrimitiveValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PrimitiveValue* other);
  friend void swap(PrimitiveValue& a, PrimitiveValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveValue* New() const final {
    return CreateMaybeMessage<PrimitiveValue>(NULL);
  }

  PrimitiveValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrimitiveValue& from);
  void MergeFrom(const PrimitiveValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string_value = 9;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 9;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional bytes bytes_value = 12;
  bool has_bytes_value() const;
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 12;
  const ::std::string& bytes_value() const;
  void set_bytes_value(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value(::std::string&& value);
  #endif
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  ::std::string* mutable_bytes_value();
  ::std::string* release_bytes_value();
  void set_allocated_bytes_value(::std::string* bytes_value);

  // optional double double_value = 1;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 1;
  double double_value() const;
  void set_double_value(double value);

  // optional int64 int64_value = 3;
  bool has_int64_value() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 3;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value() const;
  void set_float_value(float value);

  // optional int32 int32_value = 5;
  bool has_int32_value() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 5;
  ::google::protobuf::int32 int32_value() const;
  void set_int32_value(::google::protobuf::int32 value);

  // optional uint64 uint64_value = 4;
  bool has_uint64_value() const;
  void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 4;
  ::google::protobuf::uint64 uint64_value() const;
  void set_uint64_value(::google::protobuf::uint64 value);

  // optional fixed64 fixed64_value = 6;
  bool has_fixed64_value() const;
  void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 6;
  ::google::protobuf::uint64 fixed64_value() const;
  void set_fixed64_value(::google::protobuf::uint64 value);

  // optional fixed32 fixed32_value = 7;
  bool has_fixed32_value() const;
  void clear_fixed32_value();
  static const int kFixed32ValueFieldNumber = 7;
  ::google::protobuf::uint32 fixed32_value() const;
  void set_fixed32_value(::google::protobuf::uint32 value);

  // optional bool bool_value = 8;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 8;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional uint32 uint32_value = 13;
  bool has_uint32_value() const;
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 13;
  ::google::protobuf::uint32 uint32_value() const;
  void set_uint32_value(::google::protobuf::uint32 value);

  // optional sfixed32 sfixed32_value = 15;
  bool has_sfixed32_value() const;
  void clear_sfixed32_value();
  static const int kSfixed32ValueFieldNumber = 15;
  ::google::protobuf::int32 sfixed32_value() const;
  void set_sfixed32_value(::google::protobuf::int32 value);

  // optional sfixed64 sfixed64_value = 16;
  bool has_sfixed64_value() const;
  void clear_sfixed64_value();
  static const int kSfixed64ValueFieldNumber = 16;
  ::google::protobuf::int64 sfixed64_value() const;
  void set_sfixed64_value(::google::protobuf::int64 value);

  // optional sint32 sint32_value = 17;
  bool has_sint32_value() const;
  void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 17;
  ::google::protobuf::int32 sint32_value() const;
  void set_sint32_value(::google::protobuf::int32 value);

  // optional sint64 sint64_value = 18;
  bool has_sint64_value() const;
  void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 18;
  ::google::protobuf::int64 sint64_value() const;
  void set_sint64_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.PrimitiveValue)
 private:
  void set_has_double_value();
  void clear_has_double_value();
  void set_has_float_value();
  void clear_has_float_value();
  void set_has_int64_value();
  void clear_has_int64_value();
  void set_has_uint64_value();
  void clear_has_uint64_value();
  void set_has_int32_value();
  void clear_has_int32_value();
  void set_has_fixed64_value();
  void clear_has_fixed64_value();
  void set_has_fixed32_value();
  void clear_has_fixed32_value();
  void set_has_bool_value();
  void clear_has_bool_value();
  void set_has_string_value();
  void clear_has_string_value();
  void set_has_bytes_value();
  void clear_has_bytes_value();
  void set_has_uint32_value();
  void clear_has_uint32_value();
  void set_has_sfixed32_value();
  void clear_has_sfixed32_value();
  void set_has_sfixed64_value();
  void clear_has_sfixed64_value();
  void set_has_sint32_value();
  void clear_has_sint32_value();
  void set_has_sint64_value();
  void clear_has_sint64_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::internal::ArenaStringPtr bytes_value_;
  double double_value_;
  ::google::protobuf::int64 int64_value_;
  float float_value_;
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::uint64 uint64_value_;
  ::google::protobuf::uint64 fixed64_value_;
  ::google::protobuf::uint32 fixed32_value_;
  bool bool_value_;
  ::google::protobuf::uint32 uint32_value_;
  ::google::protobuf::int32 sfixed32_value_;
  ::google::protobuf::int64 sfixed64_value_;
  ::google::protobuf::int32 sint32_value_;
  ::google::protobuf::int64 sint64_value_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtraFields : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.ExtraFields) */ {
 public:
  ExtraFields();
  virtual ~ExtraFields();

  ExtraFields(const ExtraFields& from);

  inline ExtraFields& operator=(const ExtraFields& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExtraFields(ExtraFields&& from) noexcept
    : ExtraFields() {
    *this = ::std::move(from);
  }

  inline ExtraFields& operator=(ExtraFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtraFields* internal_default_instance() {
    return reinterpret_cast<const ExtraFields*>(
               &_ExtraFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExtraFields* other);
  friend void swap(ExtraFields& a, ExtraFields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtraFields* New() const final {
    return CreateMaybeMessage<ExtraFields>(NULL);
  }

  ExtraFields* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExtraFields>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExtraFields& from);
  void MergeFrom(const ExtraFields& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraFields* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string_value = 1776;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 1776;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional bool bool_value = 1777;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 1777;
  bool bool_value() const;
  void set_bool_value(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.ExtraFields)
 private:
  void set_has_string_value();
  void clear_has_string_value();
  void set_has_bool_value();
  void clear_has_bool_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  bool bool_value_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerMessageValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.InnerMessageValue) */ {
 public:
  InnerMessageValue();
  virtual ~InnerMessageValue();

  InnerMessageValue(const InnerMessageValue& from);

  inline InnerMessageValue& operator=(const InnerMessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerMessageValue(InnerMessageValue&& from) noexcept
    : InnerMessageValue() {
    *this = ::std::move(from);
  }

  inline InnerMessageValue& operator=(InnerMessageValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerMessageValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerMessageValue* internal_default_instance() {
    return reinterpret_cast<const InnerMessageValue*>(
               &_InnerMessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(InnerMessageValue* other);
  friend void swap(InnerMessageValue& a, InnerMessageValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerMessageValue* New() const final {
    return CreateMaybeMessage<InnerMessageValue>(NULL);
  }

  InnerMessageValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerMessageValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerMessageValue& from);
  void MergeFrom(const InnerMessageValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMessageValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes bytes_values = 8;
  int bytes_values_size() const;
  void clear_bytes_values();
  static const int kBytesValuesFieldNumber = 8;
  const ::std::string& bytes_values(int index) const;
  ::std::string* mutable_bytes_values(int index);
  void set_bytes_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_values(int index, ::std::string&& value);
  #endif
  void set_bytes_values(int index, const char* value);
  void set_bytes_values(int index, const void* value, size_t size);
  ::std::string* add_bytes_values();
  void add_bytes_values(const ::std::string& value);
  #if LANG_CXX11
  void add_bytes_values(::std::string&& value);
  #endif
  void add_bytes_values(const char* value);
  void add_bytes_values(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bytes_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bytes_values();

  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value() const;
  void set_float_value(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.InnerMessageValue)
 private:
  void set_has_float_value();
  void clear_has_float_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bytes_values_;
  float float_value_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MiddleMessageValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.MiddleMessageValue) */ {
 public:
  MiddleMessageValue();
  virtual ~MiddleMessageValue();

  MiddleMessageValue(const MiddleMessageValue& from);

  inline MiddleMessageValue& operator=(const MiddleMessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MiddleMessageValue(MiddleMessageValue&& from) noexcept
    : MiddleMessageValue() {
    *this = ::std::move(from);
  }

  inline MiddleMessageValue& operator=(MiddleMessageValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiddleMessageValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MiddleMessageValue* internal_default_instance() {
    return reinterpret_cast<const MiddleMessageValue*>(
               &_MiddleMessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MiddleMessageValue* other);
  friend void swap(MiddleMessageValue& a, MiddleMessageValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MiddleMessageValue* New() const final {
    return CreateMaybeMessage<MiddleMessageValue>(NULL);
  }

  MiddleMessageValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MiddleMessageValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MiddleMessageValue& from);
  void MergeFrom(const MiddleMessageValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiddleMessageValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 int32_values = 5;
  int int32_values_size() const;
  void clear_int32_values();
  static const int kInt32ValuesFieldNumber = 5;
  ::google::protobuf::int32 int32_values(int index) const;
  void set_int32_values(int index, ::google::protobuf::int32 value);
  void add_int32_values(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_values();

  // optional .tensorflow.contrib.proto.InnerMessageValue message_value = 11;
  bool has_message_value() const;
  void clear_message_value();
  static const int kMessageValueFieldNumber = 11;
  private:
  const ::tensorflow::contrib::proto::InnerMessageValue& _internal_message_value() const;
  public:
  const ::tensorflow::contrib::proto::InnerMessageValue& message_value() const;
  ::tensorflow::contrib::proto::InnerMessageValue* release_message_value();
  ::tensorflow::contrib::proto::InnerMessageValue* mutable_message_value();
  void set_allocated_message_value(::tensorflow::contrib::proto::InnerMessageValue* message_value);

  // optional uint32 uint32_value = 13;
  bool has_uint32_value() const;
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 13;
  ::google::protobuf::uint32 uint32_value() const;
  void set_uint32_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.MiddleMessageValue)
 private:
  void set_has_message_value();
  void clear_has_message_value();
  void set_has_uint32_value();
  void clear_has_uint32_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_values_;
  ::tensorflow::contrib::proto::InnerMessageValue* message_value_;
  ::google::protobuf::uint32 uint32_value_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.MessageValue) */ {
 public:
  MessageValue();
  virtual ~MessageValue();

  MessageValue(const MessageValue& from);

  inline MessageValue& operator=(const MessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageValue(MessageValue&& from) noexcept
    : MessageValue() {
    *this = ::std::move(from);
  }

  inline MessageValue& operator=(MessageValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageValue* internal_default_instance() {
    return reinterpret_cast<const MessageValue*>(
               &_MessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MessageValue* other);
  friend void swap(MessageValue& a, MessageValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageValue* New() const final {
    return CreateMaybeMessage<MessageValue>(NULL);
  }

  MessageValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageValue& from);
  void MergeFrom(const MessageValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.contrib.proto.MiddleMessageValue message_value = 11;
  bool has_message_value() const;
  void clear_message_value();
  static const int kMessageValueFieldNumber = 11;
  private:
  const ::tensorflow::contrib::proto::MiddleMessageValue& _internal_message_value() const;
  public:
  const ::tensorflow::contrib::proto::MiddleMessageValue& message_value() const;
  ::tensorflow::contrib::proto::MiddleMessageValue* release_message_value();
  ::tensorflow::contrib::proto::MiddleMessageValue* mutable_message_value();
  void set_allocated_message_value(::tensorflow::contrib::proto::MiddleMessageValue* message_value);

  // optional double double_value = 1;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 1;
  double double_value() const;
  void set_double_value(double value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.MessageValue)
 private:
  void set_has_double_value();
  void clear_has_double_value();
  void set_has_message_value();
  void clear_has_message_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::tensorflow::contrib::proto::MiddleMessageValue* message_value_;
  double double_value_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RepeatedMessageValue_NestedMessageValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue) */ {
 public:
  RepeatedMessageValue_NestedMessageValue();
  virtual ~RepeatedMessageValue_NestedMessageValue();

  RepeatedMessageValue_NestedMessageValue(const RepeatedMessageValue_NestedMessageValue& from);

  inline RepeatedMessageValue_NestedMessageValue& operator=(const RepeatedMessageValue_NestedMessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepeatedMessageValue_NestedMessageValue(RepeatedMessageValue_NestedMessageValue&& from) noexcept
    : RepeatedMessageValue_NestedMessageValue() {
    *this = ::std::move(from);
  }

  inline RepeatedMessageValue_NestedMessageValue& operator=(RepeatedMessageValue_NestedMessageValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepeatedMessageValue_NestedMessageValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedMessageValue_NestedMessageValue* internal_default_instance() {
    return reinterpret_cast<const RepeatedMessageValue_NestedMessageValue*>(
               &_RepeatedMessageValue_NestedMessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RepeatedMessageValue_NestedMessageValue* other);
  friend void swap(RepeatedMessageValue_NestedMessageValue& a, RepeatedMessageValue_NestedMessageValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepeatedMessageValue_NestedMessageValue* New() const final {
    return CreateMaybeMessage<RepeatedMessageValue_NestedMessageValue>(NULL);
  }

  RepeatedMessageValue_NestedMessageValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedMessageValue_NestedMessageValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepeatedMessageValue_NestedMessageValue& from);
  void MergeFrom(const RepeatedMessageValue_NestedMessageValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedMessageValue_NestedMessageValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes bytes_values = 8;
  int bytes_values_size() const;
  void clear_bytes_values();
  static const int kBytesValuesFieldNumber = 8;
  const ::std::string& bytes_values(int index) const;
  ::std::string* mutable_bytes_values(int index);
  void set_bytes_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_values(int index, ::std::string&& value);
  #endif
  void set_bytes_values(int index, const char* value);
  void set_bytes_values(int index, const void* value, size_t size);
  ::std::string* add_bytes_values();
  void add_bytes_values(const ::std::string& value);
  #if LANG_CXX11
  void add_bytes_values(::std::string&& value);
  #endif
  void add_bytes_values(const char* value);
  void add_bytes_values(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bytes_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bytes_values();

  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value() const;
  void set_float_value(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue)
 private:
  void set_has_float_value();
  void clear_has_float_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bytes_values_;
  float float_value_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RepeatedMessageValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.contrib.proto.RepeatedMessageValue) */ {
 public:
  RepeatedMessageValue();
  virtual ~RepeatedMessageValue();

  RepeatedMessageValue(const RepeatedMessageValue& from);

  inline RepeatedMessageValue& operator=(const RepeatedMessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepeatedMessageValue(RepeatedMessageValue&& from) noexcept
    : RepeatedMessageValue() {
    *this = ::std::move(from);
  }

  inline RepeatedMessageValue& operator=(RepeatedMessageValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepeatedMessageValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedMessageValue* internal_default_instance() {
    return reinterpret_cast<const RepeatedMessageValue*>(
               &_RepeatedMessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RepeatedMessageValue* other);
  friend void swap(RepeatedMessageValue& a, RepeatedMessageValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepeatedMessageValue* New() const final {
    return CreateMaybeMessage<RepeatedMessageValue>(NULL);
  }

  RepeatedMessageValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedMessageValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepeatedMessageValue& from);
  void MergeFrom(const RepeatedMessageValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedMessageValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RepeatedMessageValue_NestedMessageValue NestedMessageValue;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue message_values = 11;
  int message_values_size() const;
  void clear_message_values();
  static const int kMessageValuesFieldNumber = 11;
  ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue* mutable_message_values(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue >*
      mutable_message_values();
  const ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue& message_values(int index) const;
  ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue* add_message_values();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue >&
      message_values() const;

  // @@protoc_insertion_point(class_scope:tensorflow.contrib.proto.RepeatedMessageValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue > message_values_;
  friend struct ::protobuf_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto::TableStruct;
};
// ===================================================================

static const int kExtValueFieldNumber = 100;
extern ::google::protobuf::internal::ExtensionIdentifier< ::tensorflow::contrib::proto::TestValue,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::tensorflow::contrib::proto::PrimitiveValue >, 11, false >
  ext_value;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestCase

// repeated .tensorflow.contrib.proto.TestValue values = 1;
inline int TestCase::values_size() const {
  return values_.size();
}
inline void TestCase::clear_values() {
  values_.Clear();
}
inline ::tensorflow::contrib::proto::TestValue* TestCase::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestCase.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::TestValue >*
TestCase::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestCase.values)
  return &values_;
}
inline const ::tensorflow::contrib::proto::TestValue& TestCase::values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestCase.values)
  return values_.Get(index);
}
inline ::tensorflow::contrib::proto::TestValue* TestCase::add_values() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestCase.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::TestValue >&
TestCase::values() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestCase.values)
  return values_;
}

// repeated int32 shapes = 2;
inline int TestCase::shapes_size() const {
  return shapes_.size();
}
inline void TestCase::clear_shapes() {
  shapes_.Clear();
}
inline ::google::protobuf::int32 TestCase::shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestCase.shapes)
  return shapes_.Get(index);
}
inline void TestCase::set_shapes(int index, ::google::protobuf::int32 value) {
  shapes_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestCase.shapes)
}
inline void TestCase::add_shapes(::google::protobuf::int32 value) {
  shapes_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestCase.shapes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestCase::shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestCase.shapes)
  return shapes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestCase::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestCase.shapes)
  return &shapes_;
}

// repeated int32 sizes = 3;
inline int TestCase::sizes_size() const {
  return sizes_.size();
}
inline void TestCase::clear_sizes() {
  sizes_.Clear();
}
inline ::google::protobuf::int32 TestCase::sizes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestCase.sizes)
  return sizes_.Get(index);
}
inline void TestCase::set_sizes(int index, ::google::protobuf::int32 value) {
  sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestCase.sizes)
}
inline void TestCase::add_sizes(::google::protobuf::int32 value) {
  sizes_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestCase.sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestCase::sizes() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestCase.sizes)
  return sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestCase::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestCase.sizes)
  return &sizes_;
}

// repeated .tensorflow.contrib.proto.FieldSpec fields = 4;
inline int TestCase::fields_size() const {
  return fields_.size();
}
inline void TestCase::clear_fields() {
  fields_.Clear();
}
inline ::tensorflow::contrib::proto::FieldSpec* TestCase::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestCase.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::FieldSpec >*
TestCase::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestCase.fields)
  return &fields_;
}
inline const ::tensorflow::contrib::proto::FieldSpec& TestCase::fields(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestCase.fields)
  return fields_.Get(index);
}
inline ::tensorflow::contrib::proto::FieldSpec* TestCase::add_fields() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestCase.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::FieldSpec >&
TestCase::fields() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestCase.fields)
  return fields_;
}

// -------------------------------------------------------------------

// FieldSpec

// optional string name = 1;
inline bool FieldSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FieldSpec::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.FieldSpec.name)
  return name_.GetNoArena();
}
inline void FieldSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.FieldSpec.name)
}
#if LANG_CXX11
inline void FieldSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.FieldSpec.name)
}
#endif
inline void FieldSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.FieldSpec.name)
}
inline void FieldSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.FieldSpec.name)
}
inline ::std::string* FieldSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.FieldSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldSpec::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.FieldSpec.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.FieldSpec.name)
}

// optional .tensorflow.DataType dtype = 2;
inline bool FieldSpec::has_dtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldSpec::set_has_dtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldSpec::clear_has_dtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldSpec::clear_dtype() {
  dtype_ = 0;
  clear_has_dtype();
}
inline ::tensorflow::DataType FieldSpec::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.FieldSpec.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void FieldSpec::set_dtype(::tensorflow::DataType value) {
  assert(::tensorflow::DataType_IsValid(value));
  set_has_dtype();
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.FieldSpec.dtype)
}

// optional .tensorflow.contrib.proto.TestValue value = 3;
inline bool FieldSpec::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldSpec::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldSpec::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldSpec::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::tensorflow::contrib::proto::TestValue& FieldSpec::_internal_value() const {
  return *value_;
}
inline const ::tensorflow::contrib::proto::TestValue& FieldSpec::value() const {
  const ::tensorflow::contrib::proto::TestValue* p = value_;
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.FieldSpec.value)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::contrib::proto::TestValue*>(
      &::tensorflow::contrib::proto::_TestValue_default_instance_);
}
inline ::tensorflow::contrib::proto::TestValue* FieldSpec::release_value() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.FieldSpec.value)
  clear_has_value();
  ::tensorflow::contrib::proto::TestValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::tensorflow::contrib::proto::TestValue* FieldSpec::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::contrib::proto::TestValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.FieldSpec.value)
  return value_;
}
inline void FieldSpec::set_allocated_value(::tensorflow::contrib::proto::TestValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.FieldSpec.value)
}

// -------------------------------------------------------------------

// TestValue

// repeated double double_value = 1;
inline int TestValue::double_value_size() const {
  return double_value_.size();
}
inline void TestValue::clear_double_value() {
  double_value_.Clear();
}
inline double TestValue::double_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.double_value)
  return double_value_.Get(index);
}
inline void TestValue::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.double_value)
}
inline void TestValue::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.double_value)
}
inline const ::google::protobuf::RepeatedField< double >&
TestValue::double_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.double_value)
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
TestValue::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.double_value)
  return &double_value_;
}

// repeated float float_value = 2;
inline int TestValue::float_value_size() const {
  return float_value_.size();
}
inline void TestValue::clear_float_value() {
  float_value_.Clear();
}
inline float TestValue::float_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.float_value)
  return float_value_.Get(index);
}
inline void TestValue::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.float_value)
}
inline void TestValue::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.float_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TestValue::float_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.float_value)
  return float_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TestValue::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.float_value)
  return &float_value_;
}

// repeated int64 int64_value = 3;
inline int TestValue::int64_value_size() const {
  return int64_value_.size();
}
inline void TestValue::clear_int64_value() {
  int64_value_.Clear();
}
inline ::google::protobuf::int64 TestValue::int64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.int64_value)
  return int64_value_.Get(index);
}
inline void TestValue::set_int64_value(int index, ::google::protobuf::int64 value) {
  int64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.int64_value)
}
inline void TestValue::add_int64_value(::google::protobuf::int64 value) {
  int64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.int64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestValue::int64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.int64_value)
  return int64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestValue::mutable_int64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.int64_value)
  return &int64_value_;
}

// repeated uint64 uint64_value = 4;
inline int TestValue::uint64_value_size() const {
  return uint64_value_.size();
}
inline void TestValue::clear_uint64_value() {
  uint64_value_.Clear();
}
inline ::google::protobuf::uint64 TestValue::uint64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.uint64_value)
  return uint64_value_.Get(index);
}
inline void TestValue::set_uint64_value(int index, ::google::protobuf::uint64 value) {
  uint64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.uint64_value)
}
inline void TestValue::add_uint64_value(::google::protobuf::uint64 value) {
  uint64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.uint64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestValue::uint64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.uint64_value)
  return uint64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestValue::mutable_uint64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.uint64_value)
  return &uint64_value_;
}

// repeated int32 int32_value = 5;
inline int TestValue::int32_value_size() const {
  return int32_value_.size();
}
inline void TestValue::clear_int32_value() {
  int32_value_.Clear();
}
inline ::google::protobuf::int32 TestValue::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.int32_value)
  return int32_value_.Get(index);
}
inline void TestValue::set_int32_value(int index, ::google::protobuf::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.int32_value)
}
inline void TestValue::add_int32_value(::google::protobuf::int32 value) {
  int32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.int32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestValue::int32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.int32_value)
  return int32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestValue::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.int32_value)
  return &int32_value_;
}

// repeated fixed64 fixed64_value = 6;
inline int TestValue::fixed64_value_size() const {
  return fixed64_value_.size();
}
inline void TestValue::clear_fixed64_value() {
  fixed64_value_.Clear();
}
inline ::google::protobuf::uint64 TestValue::fixed64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.fixed64_value)
  return fixed64_value_.Get(index);
}
inline void TestValue::set_fixed64_value(int index, ::google::protobuf::uint64 value) {
  fixed64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.fixed64_value)
}
inline void TestValue::add_fixed64_value(::google::protobuf::uint64 value) {
  fixed64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.fixed64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestValue::fixed64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.fixed64_value)
  return fixed64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestValue::mutable_fixed64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.fixed64_value)
  return &fixed64_value_;
}

// repeated fixed32 fixed32_value = 7;
inline int TestValue::fixed32_value_size() const {
  return fixed32_value_.size();
}
inline void TestValue::clear_fixed32_value() {
  fixed32_value_.Clear();
}
inline ::google::protobuf::uint32 TestValue::fixed32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.fixed32_value)
  return fixed32_value_.Get(index);
}
inline void TestValue::set_fixed32_value(int index, ::google::protobuf::uint32 value) {
  fixed32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.fixed32_value)
}
inline void TestValue::add_fixed32_value(::google::protobuf::uint32 value) {
  fixed32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.fixed32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestValue::fixed32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.fixed32_value)
  return fixed32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestValue::mutable_fixed32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.fixed32_value)
  return &fixed32_value_;
}

// repeated bool bool_value = 8;
inline int TestValue::bool_value_size() const {
  return bool_value_.size();
}
inline void TestValue::clear_bool_value() {
  bool_value_.Clear();
}
inline bool TestValue::bool_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.bool_value)
  return bool_value_.Get(index);
}
inline void TestValue::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.bool_value)
}
inline void TestValue::add_bool_value(bool value) {
  bool_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.bool_value)
}
inline const ::google::protobuf::RepeatedField< bool >&
TestValue::bool_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.bool_value)
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
TestValue::mutable_bool_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.bool_value)
  return &bool_value_;
}

// repeated string string_value = 9;
inline int TestValue::string_value_size() const {
  return string_value_.size();
}
inline void TestValue::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& TestValue::string_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.string_value)
  return string_value_.Get(index);
}
inline ::std::string* TestValue::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestValue.string_value)
  return string_value_.Mutable(index);
}
inline void TestValue::set_string_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.string_value)
  string_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestValue::set_string_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.string_value)
  string_value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestValue::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.TestValue.string_value)
}
inline void TestValue::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.TestValue.string_value)
}
inline ::std::string* TestValue::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.proto.TestValue.string_value)
  return string_value_.Add();
}
inline void TestValue::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.string_value)
}
#if LANG_CXX11
inline void TestValue::add_string_value(::std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.string_value)
}
#endif
inline void TestValue::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.proto.TestValue.string_value)
}
inline void TestValue::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.proto.TestValue.string_value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestValue::string_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.string_value)
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.string_value)
  return &string_value_;
}

// repeated bytes bytes_value = 12;
inline int TestValue::bytes_value_size() const {
  return bytes_value_.size();
}
inline void TestValue::clear_bytes_value() {
  bytes_value_.Clear();
}
inline const ::std::string& TestValue::bytes_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.bytes_value)
  return bytes_value_.Get(index);
}
inline ::std::string* TestValue::mutable_bytes_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestValue.bytes_value)
  return bytes_value_.Mutable(index);
}
inline void TestValue::set_bytes_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.bytes_value)
  bytes_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestValue::set_bytes_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.bytes_value)
  bytes_value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestValue::set_bytes_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.TestValue.bytes_value)
}
inline void TestValue::set_bytes_value(int index, const void* value, size_t size) {
  bytes_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.TestValue.bytes_value)
}
inline ::std::string* TestValue::add_bytes_value() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.proto.TestValue.bytes_value)
  return bytes_value_.Add();
}
inline void TestValue::add_bytes_value(const ::std::string& value) {
  bytes_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.bytes_value)
}
#if LANG_CXX11
inline void TestValue::add_bytes_value(::std::string&& value) {
  bytes_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.bytes_value)
}
#endif
inline void TestValue::add_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.proto.TestValue.bytes_value)
}
inline void TestValue::add_bytes_value(const void* value, size_t size) {
  bytes_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.proto.TestValue.bytes_value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestValue::bytes_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.bytes_value)
  return bytes_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestValue::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.bytes_value)
  return &bytes_value_;
}

// repeated uint32 uint32_value = 13;
inline int TestValue::uint32_value_size() const {
  return uint32_value_.size();
}
inline void TestValue::clear_uint32_value() {
  uint32_value_.Clear();
}
inline ::google::protobuf::uint32 TestValue::uint32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.uint32_value)
  return uint32_value_.Get(index);
}
inline void TestValue::set_uint32_value(int index, ::google::protobuf::uint32 value) {
  uint32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.uint32_value)
}
inline void TestValue::add_uint32_value(::google::protobuf::uint32 value) {
  uint32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.uint32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestValue::uint32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.uint32_value)
  return uint32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestValue::mutable_uint32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.uint32_value)
  return &uint32_value_;
}

// repeated sfixed32 sfixed32_value = 15;
inline int TestValue::sfixed32_value_size() const {
  return sfixed32_value_.size();
}
inline void TestValue::clear_sfixed32_value() {
  sfixed32_value_.Clear();
}
inline ::google::protobuf::int32 TestValue::sfixed32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sfixed32_value)
  return sfixed32_value_.Get(index);
}
inline void TestValue::set_sfixed32_value(int index, ::google::protobuf::int32 value) {
  sfixed32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sfixed32_value)
}
inline void TestValue::add_sfixed32_value(::google::protobuf::int32 value) {
  sfixed32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.sfixed32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestValue::sfixed32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.sfixed32_value)
  return sfixed32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestValue::mutable_sfixed32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.sfixed32_value)
  return &sfixed32_value_;
}

// repeated sfixed64 sfixed64_value = 16;
inline int TestValue::sfixed64_value_size() const {
  return sfixed64_value_.size();
}
inline void TestValue::clear_sfixed64_value() {
  sfixed64_value_.Clear();
}
inline ::google::protobuf::int64 TestValue::sfixed64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sfixed64_value)
  return sfixed64_value_.Get(index);
}
inline void TestValue::set_sfixed64_value(int index, ::google::protobuf::int64 value) {
  sfixed64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sfixed64_value)
}
inline void TestValue::add_sfixed64_value(::google::protobuf::int64 value) {
  sfixed64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.sfixed64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestValue::sfixed64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.sfixed64_value)
  return sfixed64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestValue::mutable_sfixed64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.sfixed64_value)
  return &sfixed64_value_;
}

// repeated sint32 sint32_value = 17;
inline int TestValue::sint32_value_size() const {
  return sint32_value_.size();
}
inline void TestValue::clear_sint32_value() {
  sint32_value_.Clear();
}
inline ::google::protobuf::int32 TestValue::sint32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sint32_value)
  return sint32_value_.Get(index);
}
inline void TestValue::set_sint32_value(int index, ::google::protobuf::int32 value) {
  sint32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sint32_value)
}
inline void TestValue::add_sint32_value(::google::protobuf::int32 value) {
  sint32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.sint32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestValue::sint32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.sint32_value)
  return sint32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestValue::mutable_sint32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.sint32_value)
  return &sint32_value_;
}

// repeated sint64 sint64_value = 18;
inline int TestValue::sint64_value_size() const {
  return sint64_value_.size();
}
inline void TestValue::clear_sint64_value() {
  sint64_value_.Clear();
}
inline ::google::protobuf::int64 TestValue::sint64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sint64_value)
  return sint64_value_.Get(index);
}
inline void TestValue::set_sint64_value(int index, ::google::protobuf::int64 value) {
  sint64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sint64_value)
}
inline void TestValue::add_sint64_value(::google::protobuf::int64 value) {
  sint64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.sint64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestValue::sint64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.sint64_value)
  return sint64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestValue::mutable_sint64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.sint64_value)
  return &sint64_value_;
}

// repeated .tensorflow.contrib.proto.PrimitiveValue message_value = 19;
inline int TestValue::message_value_size() const {
  return message_value_.size();
}
inline void TestValue::clear_message_value() {
  message_value_.Clear();
}
inline ::tensorflow::contrib::proto::PrimitiveValue* TestValue::mutable_message_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestValue.message_value)
  return message_value_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >*
TestValue::mutable_message_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.message_value)
  return &message_value_;
}
inline const ::tensorflow::contrib::proto::PrimitiveValue& TestValue::message_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.message_value)
  return message_value_.Get(index);
}
inline ::tensorflow::contrib::proto::PrimitiveValue* TestValue::add_message_value() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.message_value)
  return message_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >&
TestValue::message_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.message_value)
  return message_value_;
}

// repeated .tensorflow.contrib.proto.Color enum_value = 35;
inline int TestValue::enum_value_size() const {
  return enum_value_.size();
}
inline void TestValue::clear_enum_value() {
  enum_value_.Clear();
}
inline ::tensorflow::contrib::proto::Color TestValue::enum_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.enum_value)
  return static_cast< ::tensorflow::contrib::proto::Color >(enum_value_.Get(index));
}
inline void TestValue::set_enum_value(int index, ::tensorflow::contrib::proto::Color value) {
  assert(::tensorflow::contrib::proto::Color_IsValid(value));
  enum_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.enum_value)
}
inline void TestValue::add_enum_value(::tensorflow::contrib::proto::Color value) {
  assert(::tensorflow::contrib::proto::Color_IsValid(value));
  enum_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.TestValue.enum_value)
}
inline const ::google::protobuf::RepeatedField<int>&
TestValue::enum_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.TestValue.enum_value)
  return enum_value_;
}
inline ::google::protobuf::RepeatedField<int>*
TestValue::mutable_enum_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.TestValue.enum_value)
  return &enum_value_;
}

// optional double double_value_with_default = 20 [default = 1];
inline bool TestValue::has_double_value_with_default() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestValue::set_has_double_value_with_default() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestValue::clear_has_double_value_with_default() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestValue::clear_double_value_with_default() {
  double_value_with_default_ = 1;
  clear_has_double_value_with_default();
}
inline double TestValue::double_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.double_value_with_default)
  return double_value_with_default_;
}
inline void TestValue::set_double_value_with_default(double value) {
  set_has_double_value_with_default();
  double_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.double_value_with_default)
}

// optional float float_value_with_default = 21 [default = 2];
inline bool TestValue::has_float_value_with_default() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestValue::set_has_float_value_with_default() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestValue::clear_has_float_value_with_default() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestValue::clear_float_value_with_default() {
  float_value_with_default_ = 2;
  clear_has_float_value_with_default();
}
inline float TestValue::float_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.float_value_with_default)
  return float_value_with_default_;
}
inline void TestValue::set_float_value_with_default(float value) {
  set_has_float_value_with_default();
  float_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.float_value_with_default)
}

// optional int64 int64_value_with_default = 22 [default = 3];
inline bool TestValue::has_int64_value_with_default() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestValue::set_has_int64_value_with_default() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestValue::clear_has_int64_value_with_default() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestValue::clear_int64_value_with_default() {
  int64_value_with_default_ = GOOGLE_LONGLONG(3);
  clear_has_int64_value_with_default();
}
inline ::google::protobuf::int64 TestValue::int64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.int64_value_with_default)
  return int64_value_with_default_;
}
inline void TestValue::set_int64_value_with_default(::google::protobuf::int64 value) {
  set_has_int64_value_with_default();
  int64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.int64_value_with_default)
}

// optional uint64 uint64_value_with_default = 23 [default = 4];
inline bool TestValue::has_uint64_value_with_default() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestValue::set_has_uint64_value_with_default() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TestValue::clear_has_uint64_value_with_default() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TestValue::clear_uint64_value_with_default() {
  uint64_value_with_default_ = GOOGLE_ULONGLONG(4);
  clear_has_uint64_value_with_default();
}
inline ::google::protobuf::uint64 TestValue::uint64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.uint64_value_with_default)
  return uint64_value_with_default_;
}
inline void TestValue::set_uint64_value_with_default(::google::protobuf::uint64 value) {
  set_has_uint64_value_with_default();
  uint64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.uint64_value_with_default)
}

// optional int32 int32_value_with_default = 24 [default = 5];
inline bool TestValue::has_int32_value_with_default() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestValue::set_has_int32_value_with_default() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TestValue::clear_has_int32_value_with_default() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TestValue::clear_int32_value_with_default() {
  int32_value_with_default_ = 5;
  clear_has_int32_value_with_default();
}
inline ::google::protobuf::int32 TestValue::int32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.int32_value_with_default)
  return int32_value_with_default_;
}
inline void TestValue::set_int32_value_with_default(::google::protobuf::int32 value) {
  set_has_int32_value_with_default();
  int32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.int32_value_with_default)
}

// optional fixed64 fixed64_value_with_default = 25 [default = 6];
inline bool TestValue::has_fixed64_value_with_default() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TestValue::set_has_fixed64_value_with_default() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TestValue::clear_has_fixed64_value_with_default() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TestValue::clear_fixed64_value_with_default() {
  fixed64_value_with_default_ = GOOGLE_ULONGLONG(6);
  clear_has_fixed64_value_with_default();
}
inline ::google::protobuf::uint64 TestValue::fixed64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.fixed64_value_with_default)
  return fixed64_value_with_default_;
}
inline void TestValue::set_fixed64_value_with_default(::google::protobuf::uint64 value) {
  set_has_fixed64_value_with_default();
  fixed64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.fixed64_value_with_default)
}

// optional fixed32 fixed32_value_with_default = 26 [default = 7];
inline bool TestValue::has_fixed32_value_with_default() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TestValue::set_has_fixed32_value_with_default() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TestValue::clear_has_fixed32_value_with_default() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TestValue::clear_fixed32_value_with_default() {
  fixed32_value_with_default_ = 7u;
  clear_has_fixed32_value_with_default();
}
inline ::google::protobuf::uint32 TestValue::fixed32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.fixed32_value_with_default)
  return fixed32_value_with_default_;
}
inline void TestValue::set_fixed32_value_with_default(::google::protobuf::uint32 value) {
  set_has_fixed32_value_with_default();
  fixed32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.fixed32_value_with_default)
}

// optional bool bool_value_with_default = 27 [default = true];
inline bool TestValue::has_bool_value_with_default() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TestValue::set_has_bool_value_with_default() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TestValue::clear_has_bool_value_with_default() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TestValue::clear_bool_value_with_default() {
  bool_value_with_default_ = true;
  clear_has_bool_value_with_default();
}
inline bool TestValue::bool_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.bool_value_with_default)
  return bool_value_with_default_;
}
inline void TestValue::set_bool_value_with_default(bool value) {
  set_has_bool_value_with_default();
  bool_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.bool_value_with_default)
}

// optional string string_value_with_default = 28 [default = "a"];
inline bool TestValue::has_string_value_with_default() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestValue::set_has_string_value_with_default() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestValue::clear_has_string_value_with_default() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestValue::clear_string_value_with_default() {
  string_value_with_default_.ClearToDefaultNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get());
  clear_has_string_value_with_default();
}
inline const ::std::string& TestValue::string_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.string_value_with_default)
  return string_value_with_default_.GetNoArena();
}
inline void TestValue::set_string_value_with_default(const ::std::string& value) {
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.string_value_with_default)
}
#if LANG_CXX11
inline void TestValue::set_string_value_with_default(::std::string&& value) {
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(
    &::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.TestValue.string_value_with_default)
}
#endif
inline void TestValue::set_string_value_with_default(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.TestValue.string_value_with_default)
}
inline void TestValue::set_string_value_with_default(const char* value, size_t size) {
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.TestValue.string_value_with_default)
}
inline ::std::string* TestValue::mutable_string_value_with_default() {
  set_has_string_value_with_default();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestValue.string_value_with_default)
  return string_value_with_default_.MutableNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get());
}
inline ::std::string* TestValue::release_string_value_with_default() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.TestValue.string_value_with_default)
  if (!has_string_value_with_default()) {
    return NULL;
  }
  clear_has_string_value_with_default();
  return string_value_with_default_.ReleaseNonDefaultNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get());
}
inline void TestValue::set_allocated_string_value_with_default(::std::string* string_value_with_default) {
  if (string_value_with_default != NULL) {
    set_has_string_value_with_default();
  } else {
    clear_has_string_value_with_default();
  }
  string_value_with_default_.SetAllocatedNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), string_value_with_default);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.TestValue.string_value_with_default)
}

// optional bytes bytes_value_with_default = 29 [default = "a longer default string"];
inline bool TestValue::has_bytes_value_with_default() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestValue::set_has_bytes_value_with_default() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestValue::clear_has_bytes_value_with_default() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestValue::clear_bytes_value_with_default() {
  bytes_value_with_default_.ClearToDefaultNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get());
  clear_has_bytes_value_with_default();
}
inline const ::std::string& TestValue::bytes_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
  return bytes_value_with_default_.GetNoArena();
}
inline void TestValue::set_bytes_value_with_default(const ::std::string& value) {
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
}
#if LANG_CXX11
inline void TestValue::set_bytes_value_with_default(::std::string&& value) {
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(
    &::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
}
#endif
inline void TestValue::set_bytes_value_with_default(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
}
inline void TestValue::set_bytes_value_with_default(const void* value, size_t size) {
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
}
inline ::std::string* TestValue::mutable_bytes_value_with_default() {
  set_has_bytes_value_with_default();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
  return bytes_value_with_default_.MutableNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get());
}
inline ::std::string* TestValue::release_bytes_value_with_default() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
  if (!has_bytes_value_with_default()) {
    return NULL;
  }
  clear_has_bytes_value_with_default();
  return bytes_value_with_default_.ReleaseNonDefaultNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get());
}
inline void TestValue::set_allocated_bytes_value_with_default(::std::string* bytes_value_with_default) {
  if (bytes_value_with_default != NULL) {
    set_has_bytes_value_with_default();
  } else {
    clear_has_bytes_value_with_default();
  }
  bytes_value_with_default_.SetAllocatedNoArena(&::tensorflow::contrib::proto::TestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), bytes_value_with_default);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.TestValue.bytes_value_with_default)
}

// optional uint32 uint32_value_with_default = 30 [default = 9];
inline bool TestValue::has_uint32_value_with_default() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TestValue::set_has_uint32_value_with_default() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TestValue::clear_has_uint32_value_with_default() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TestValue::clear_uint32_value_with_default() {
  uint32_value_with_default_ = 9u;
  clear_has_uint32_value_with_default();
}
inline ::google::protobuf::uint32 TestValue::uint32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.uint32_value_with_default)
  return uint32_value_with_default_;
}
inline void TestValue::set_uint32_value_with_default(::google::protobuf::uint32 value) {
  set_has_uint32_value_with_default();
  uint32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.uint32_value_with_default)
}

// optional sfixed32 sfixed32_value_with_default = 31 [default = 10];
inline bool TestValue::has_sfixed32_value_with_default() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TestValue::set_has_sfixed32_value_with_default() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TestValue::clear_has_sfixed32_value_with_default() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TestValue::clear_sfixed32_value_with_default() {
  sfixed32_value_with_default_ = 10;
  clear_has_sfixed32_value_with_default();
}
inline ::google::protobuf::int32 TestValue::sfixed32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sfixed32_value_with_default)
  return sfixed32_value_with_default_;
}
inline void TestValue::set_sfixed32_value_with_default(::google::protobuf::int32 value) {
  set_has_sfixed32_value_with_default();
  sfixed32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sfixed32_value_with_default)
}

// optional sfixed64 sfixed64_value_with_default = 32 [default = 11];
inline bool TestValue::has_sfixed64_value_with_default() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TestValue::set_has_sfixed64_value_with_default() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TestValue::clear_has_sfixed64_value_with_default() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TestValue::clear_sfixed64_value_with_default() {
  sfixed64_value_with_default_ = GOOGLE_LONGLONG(11);
  clear_has_sfixed64_value_with_default();
}
inline ::google::protobuf::int64 TestValue::sfixed64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sfixed64_value_with_default)
  return sfixed64_value_with_default_;
}
inline void TestValue::set_sfixed64_value_with_default(::google::protobuf::int64 value) {
  set_has_sfixed64_value_with_default();
  sfixed64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sfixed64_value_with_default)
}

// optional sint32 sint32_value_with_default = 33 [default = 12];
inline bool TestValue::has_sint32_value_with_default() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TestValue::set_has_sint32_value_with_default() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TestValue::clear_has_sint32_value_with_default() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TestValue::clear_sint32_value_with_default() {
  sint32_value_with_default_ = 12;
  clear_has_sint32_value_with_default();
}
inline ::google::protobuf::int32 TestValue::sint32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sint32_value_with_default)
  return sint32_value_with_default_;
}
inline void TestValue::set_sint32_value_with_default(::google::protobuf::int32 value) {
  set_has_sint32_value_with_default();
  sint32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sint32_value_with_default)
}

// optional sint64 sint64_value_with_default = 34 [default = 13];
inline bool TestValue::has_sint64_value_with_default() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TestValue::set_has_sint64_value_with_default() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TestValue::clear_has_sint64_value_with_default() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TestValue::clear_sint64_value_with_default() {
  sint64_value_with_default_ = GOOGLE_LONGLONG(13);
  clear_has_sint64_value_with_default();
}
inline ::google::protobuf::int64 TestValue::sint64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.sint64_value_with_default)
  return sint64_value_with_default_;
}
inline void TestValue::set_sint64_value_with_default(::google::protobuf::int64 value) {
  set_has_sint64_value_with_default();
  sint64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.sint64_value_with_default)
}

// optional .tensorflow.contrib.proto.Color enum_value_with_default = 36 [default = GREEN];
inline bool TestValue::has_enum_value_with_default() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TestValue::set_has_enum_value_with_default() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TestValue::clear_has_enum_value_with_default() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TestValue::clear_enum_value_with_default() {
  enum_value_with_default_ = 3;
  clear_has_enum_value_with_default();
}
inline ::tensorflow::contrib::proto::Color TestValue::enum_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.TestValue.enum_value_with_default)
  return static_cast< ::tensorflow::contrib::proto::Color >(enum_value_with_default_);
}
inline void TestValue::set_enum_value_with_default(::tensorflow::contrib::proto::Color value) {
  assert(::tensorflow::contrib::proto::Color_IsValid(value));
  set_has_enum_value_with_default();
  enum_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.TestValue.enum_value_with_default)
}

// -------------------------------------------------------------------

// PackedTestValue

// repeated double double_value = 1 [packed = true];
inline int PackedTestValue::double_value_size() const {
  return double_value_.size();
}
inline void PackedTestValue::clear_double_value() {
  double_value_.Clear();
}
inline double PackedTestValue::double_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.double_value)
  return double_value_.Get(index);
}
inline void PackedTestValue::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.double_value)
}
inline void PackedTestValue::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.double_value)
}
inline const ::google::protobuf::RepeatedField< double >&
PackedTestValue::double_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.double_value)
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
PackedTestValue::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.double_value)
  return &double_value_;
}

// repeated float float_value = 2 [packed = true];
inline int PackedTestValue::float_value_size() const {
  return float_value_.size();
}
inline void PackedTestValue::clear_float_value() {
  float_value_.Clear();
}
inline float PackedTestValue::float_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.float_value)
  return float_value_.Get(index);
}
inline void PackedTestValue::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.float_value)
}
inline void PackedTestValue::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.float_value)
}
inline const ::google::protobuf::RepeatedField< float >&
PackedTestValue::float_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.float_value)
  return float_value_;
}
inline ::google::protobuf::RepeatedField< float >*
PackedTestValue::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.float_value)
  return &float_value_;
}

// repeated int64 int64_value = 3 [packed = true];
inline int PackedTestValue::int64_value_size() const {
  return int64_value_.size();
}
inline void PackedTestValue::clear_int64_value() {
  int64_value_.Clear();
}
inline ::google::protobuf::int64 PackedTestValue::int64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.int64_value)
  return int64_value_.Get(index);
}
inline void PackedTestValue::set_int64_value(int index, ::google::protobuf::int64 value) {
  int64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.int64_value)
}
inline void PackedTestValue::add_int64_value(::google::protobuf::int64 value) {
  int64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.int64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PackedTestValue::int64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.int64_value)
  return int64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PackedTestValue::mutable_int64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.int64_value)
  return &int64_value_;
}

// repeated uint64 uint64_value = 4 [packed = true];
inline int PackedTestValue::uint64_value_size() const {
  return uint64_value_.size();
}
inline void PackedTestValue::clear_uint64_value() {
  uint64_value_.Clear();
}
inline ::google::protobuf::uint64 PackedTestValue::uint64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.uint64_value)
  return uint64_value_.Get(index);
}
inline void PackedTestValue::set_uint64_value(int index, ::google::protobuf::uint64 value) {
  uint64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.uint64_value)
}
inline void PackedTestValue::add_uint64_value(::google::protobuf::uint64 value) {
  uint64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.uint64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PackedTestValue::uint64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.uint64_value)
  return uint64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PackedTestValue::mutable_uint64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.uint64_value)
  return &uint64_value_;
}

// repeated int32 int32_value = 5 [packed = true];
inline int PackedTestValue::int32_value_size() const {
  return int32_value_.size();
}
inline void PackedTestValue::clear_int32_value() {
  int32_value_.Clear();
}
inline ::google::protobuf::int32 PackedTestValue::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.int32_value)
  return int32_value_.Get(index);
}
inline void PackedTestValue::set_int32_value(int index, ::google::protobuf::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.int32_value)
}
inline void PackedTestValue::add_int32_value(::google::protobuf::int32 value) {
  int32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.int32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PackedTestValue::int32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.int32_value)
  return int32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PackedTestValue::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.int32_value)
  return &int32_value_;
}

// repeated fixed64 fixed64_value = 6 [packed = true];
inline int PackedTestValue::fixed64_value_size() const {
  return fixed64_value_.size();
}
inline void PackedTestValue::clear_fixed64_value() {
  fixed64_value_.Clear();
}
inline ::google::protobuf::uint64 PackedTestValue::fixed64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.fixed64_value)
  return fixed64_value_.Get(index);
}
inline void PackedTestValue::set_fixed64_value(int index, ::google::protobuf::uint64 value) {
  fixed64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.fixed64_value)
}
inline void PackedTestValue::add_fixed64_value(::google::protobuf::uint64 value) {
  fixed64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.fixed64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PackedTestValue::fixed64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.fixed64_value)
  return fixed64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PackedTestValue::mutable_fixed64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.fixed64_value)
  return &fixed64_value_;
}

// repeated fixed32 fixed32_value = 7 [packed = true];
inline int PackedTestValue::fixed32_value_size() const {
  return fixed32_value_.size();
}
inline void PackedTestValue::clear_fixed32_value() {
  fixed32_value_.Clear();
}
inline ::google::protobuf::uint32 PackedTestValue::fixed32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.fixed32_value)
  return fixed32_value_.Get(index);
}
inline void PackedTestValue::set_fixed32_value(int index, ::google::protobuf::uint32 value) {
  fixed32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.fixed32_value)
}
inline void PackedTestValue::add_fixed32_value(::google::protobuf::uint32 value) {
  fixed32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.fixed32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PackedTestValue::fixed32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.fixed32_value)
  return fixed32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PackedTestValue::mutable_fixed32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.fixed32_value)
  return &fixed32_value_;
}

// repeated bool bool_value = 8 [packed = true];
inline int PackedTestValue::bool_value_size() const {
  return bool_value_.size();
}
inline void PackedTestValue::clear_bool_value() {
  bool_value_.Clear();
}
inline bool PackedTestValue::bool_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.bool_value)
  return bool_value_.Get(index);
}
inline void PackedTestValue::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.bool_value)
}
inline void PackedTestValue::add_bool_value(bool value) {
  bool_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.bool_value)
}
inline const ::google::protobuf::RepeatedField< bool >&
PackedTestValue::bool_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.bool_value)
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
PackedTestValue::mutable_bool_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.bool_value)
  return &bool_value_;
}

// repeated string string_value = 9;
inline int PackedTestValue::string_value_size() const {
  return string_value_.size();
}
inline void PackedTestValue::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& PackedTestValue::string_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.string_value)
  return string_value_.Get(index);
}
inline ::std::string* PackedTestValue::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PackedTestValue.string_value)
  return string_value_.Mutable(index);
}
inline void PackedTestValue::set_string_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.string_value)
  string_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackedTestValue::set_string_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.string_value)
  string_value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackedTestValue::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.PackedTestValue.string_value)
}
inline void PackedTestValue::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.PackedTestValue.string_value)
}
inline ::std::string* PackedTestValue::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.proto.PackedTestValue.string_value)
  return string_value_.Add();
}
inline void PackedTestValue::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.string_value)
}
#if LANG_CXX11
inline void PackedTestValue::add_string_value(::std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.string_value)
}
#endif
inline void PackedTestValue::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.proto.PackedTestValue.string_value)
}
inline void PackedTestValue::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.proto.PackedTestValue.string_value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackedTestValue::string_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.string_value)
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackedTestValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.string_value)
  return &string_value_;
}

// repeated bytes bytes_value = 12;
inline int PackedTestValue::bytes_value_size() const {
  return bytes_value_.size();
}
inline void PackedTestValue::clear_bytes_value() {
  bytes_value_.Clear();
}
inline const ::std::string& PackedTestValue::bytes_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  return bytes_value_.Get(index);
}
inline ::std::string* PackedTestValue::mutable_bytes_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  return bytes_value_.Mutable(index);
}
inline void PackedTestValue::set_bytes_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  bytes_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackedTestValue::set_bytes_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  bytes_value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackedTestValue::set_bytes_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.PackedTestValue.bytes_value)
}
inline void PackedTestValue::set_bytes_value(int index, const void* value, size_t size) {
  bytes_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.PackedTestValue.bytes_value)
}
inline ::std::string* PackedTestValue::add_bytes_value() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  return bytes_value_.Add();
}
inline void PackedTestValue::add_bytes_value(const ::std::string& value) {
  bytes_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.bytes_value)
}
#if LANG_CXX11
inline void PackedTestValue::add_bytes_value(::std::string&& value) {
  bytes_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.bytes_value)
}
#endif
inline void PackedTestValue::add_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.proto.PackedTestValue.bytes_value)
}
inline void PackedTestValue::add_bytes_value(const void* value, size_t size) {
  bytes_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.proto.PackedTestValue.bytes_value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackedTestValue::bytes_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  return bytes_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackedTestValue::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.bytes_value)
  return &bytes_value_;
}

// repeated uint32 uint32_value = 13 [packed = true];
inline int PackedTestValue::uint32_value_size() const {
  return uint32_value_.size();
}
inline void PackedTestValue::clear_uint32_value() {
  uint32_value_.Clear();
}
inline ::google::protobuf::uint32 PackedTestValue::uint32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.uint32_value)
  return uint32_value_.Get(index);
}
inline void PackedTestValue::set_uint32_value(int index, ::google::protobuf::uint32 value) {
  uint32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.uint32_value)
}
inline void PackedTestValue::add_uint32_value(::google::protobuf::uint32 value) {
  uint32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.uint32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PackedTestValue::uint32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.uint32_value)
  return uint32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PackedTestValue::mutable_uint32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.uint32_value)
  return &uint32_value_;
}

// repeated sfixed32 sfixed32_value = 15 [packed = true];
inline int PackedTestValue::sfixed32_value_size() const {
  return sfixed32_value_.size();
}
inline void PackedTestValue::clear_sfixed32_value() {
  sfixed32_value_.Clear();
}
inline ::google::protobuf::int32 PackedTestValue::sfixed32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sfixed32_value)
  return sfixed32_value_.Get(index);
}
inline void PackedTestValue::set_sfixed32_value(int index, ::google::protobuf::int32 value) {
  sfixed32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sfixed32_value)
}
inline void PackedTestValue::add_sfixed32_value(::google::protobuf::int32 value) {
  sfixed32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.sfixed32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PackedTestValue::sfixed32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.sfixed32_value)
  return sfixed32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PackedTestValue::mutable_sfixed32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.sfixed32_value)
  return &sfixed32_value_;
}

// repeated sfixed64 sfixed64_value = 16 [packed = true];
inline int PackedTestValue::sfixed64_value_size() const {
  return sfixed64_value_.size();
}
inline void PackedTestValue::clear_sfixed64_value() {
  sfixed64_value_.Clear();
}
inline ::google::protobuf::int64 PackedTestValue::sfixed64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sfixed64_value)
  return sfixed64_value_.Get(index);
}
inline void PackedTestValue::set_sfixed64_value(int index, ::google::protobuf::int64 value) {
  sfixed64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sfixed64_value)
}
inline void PackedTestValue::add_sfixed64_value(::google::protobuf::int64 value) {
  sfixed64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.sfixed64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PackedTestValue::sfixed64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.sfixed64_value)
  return sfixed64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PackedTestValue::mutable_sfixed64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.sfixed64_value)
  return &sfixed64_value_;
}

// repeated sint32 sint32_value = 17 [packed = true];
inline int PackedTestValue::sint32_value_size() const {
  return sint32_value_.size();
}
inline void PackedTestValue::clear_sint32_value() {
  sint32_value_.Clear();
}
inline ::google::protobuf::int32 PackedTestValue::sint32_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sint32_value)
  return sint32_value_.Get(index);
}
inline void PackedTestValue::set_sint32_value(int index, ::google::protobuf::int32 value) {
  sint32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sint32_value)
}
inline void PackedTestValue::add_sint32_value(::google::protobuf::int32 value) {
  sint32_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.sint32_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PackedTestValue::sint32_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.sint32_value)
  return sint32_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PackedTestValue::mutable_sint32_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.sint32_value)
  return &sint32_value_;
}

// repeated sint64 sint64_value = 18 [packed = true];
inline int PackedTestValue::sint64_value_size() const {
  return sint64_value_.size();
}
inline void PackedTestValue::clear_sint64_value() {
  sint64_value_.Clear();
}
inline ::google::protobuf::int64 PackedTestValue::sint64_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sint64_value)
  return sint64_value_.Get(index);
}
inline void PackedTestValue::set_sint64_value(int index, ::google::protobuf::int64 value) {
  sint64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sint64_value)
}
inline void PackedTestValue::add_sint64_value(::google::protobuf::int64 value) {
  sint64_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.sint64_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PackedTestValue::sint64_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.sint64_value)
  return sint64_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PackedTestValue::mutable_sint64_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.sint64_value)
  return &sint64_value_;
}

// repeated .tensorflow.contrib.proto.PrimitiveValue message_value = 19;
inline int PackedTestValue::message_value_size() const {
  return message_value_.size();
}
inline void PackedTestValue::clear_message_value() {
  message_value_.Clear();
}
inline ::tensorflow::contrib::proto::PrimitiveValue* PackedTestValue::mutable_message_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PackedTestValue.message_value)
  return message_value_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >*
PackedTestValue::mutable_message_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.message_value)
  return &message_value_;
}
inline const ::tensorflow::contrib::proto::PrimitiveValue& PackedTestValue::message_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.message_value)
  return message_value_.Get(index);
}
inline ::tensorflow::contrib::proto::PrimitiveValue* PackedTestValue::add_message_value() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.message_value)
  return message_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::PrimitiveValue >&
PackedTestValue::message_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.message_value)
  return message_value_;
}

// repeated .tensorflow.contrib.proto.Color enum_value = 35;
inline int PackedTestValue::enum_value_size() const {
  return enum_value_.size();
}
inline void PackedTestValue::clear_enum_value() {
  enum_value_.Clear();
}
inline ::tensorflow::contrib::proto::Color PackedTestValue::enum_value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.enum_value)
  return static_cast< ::tensorflow::contrib::proto::Color >(enum_value_.Get(index));
}
inline void PackedTestValue::set_enum_value(int index, ::tensorflow::contrib::proto::Color value) {
  assert(::tensorflow::contrib::proto::Color_IsValid(value));
  enum_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.enum_value)
}
inline void PackedTestValue::add_enum_value(::tensorflow::contrib::proto::Color value) {
  assert(::tensorflow::contrib::proto::Color_IsValid(value));
  enum_value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.PackedTestValue.enum_value)
}
inline const ::google::protobuf::RepeatedField<int>&
PackedTestValue::enum_value() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.PackedTestValue.enum_value)
  return enum_value_;
}
inline ::google::protobuf::RepeatedField<int>*
PackedTestValue::mutable_enum_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.PackedTestValue.enum_value)
  return &enum_value_;
}

// optional double double_value_with_default = 20 [default = 1];
inline bool PackedTestValue::has_double_value_with_default() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackedTestValue::set_has_double_value_with_default() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackedTestValue::clear_has_double_value_with_default() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackedTestValue::clear_double_value_with_default() {
  double_value_with_default_ = 1;
  clear_has_double_value_with_default();
}
inline double PackedTestValue::double_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.double_value_with_default)
  return double_value_with_default_;
}
inline void PackedTestValue::set_double_value_with_default(double value) {
  set_has_double_value_with_default();
  double_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.double_value_with_default)
}

// optional float float_value_with_default = 21 [default = 2];
inline bool PackedTestValue::has_float_value_with_default() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackedTestValue::set_has_float_value_with_default() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackedTestValue::clear_has_float_value_with_default() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackedTestValue::clear_float_value_with_default() {
  float_value_with_default_ = 2;
  clear_has_float_value_with_default();
}
inline float PackedTestValue::float_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.float_value_with_default)
  return float_value_with_default_;
}
inline void PackedTestValue::set_float_value_with_default(float value) {
  set_has_float_value_with_default();
  float_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.float_value_with_default)
}

// optional int64 int64_value_with_default = 22 [default = 3];
inline bool PackedTestValue::has_int64_value_with_default() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackedTestValue::set_has_int64_value_with_default() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackedTestValue::clear_has_int64_value_with_default() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackedTestValue::clear_int64_value_with_default() {
  int64_value_with_default_ = GOOGLE_LONGLONG(3);
  clear_has_int64_value_with_default();
}
inline ::google::protobuf::int64 PackedTestValue::int64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.int64_value_with_default)
  return int64_value_with_default_;
}
inline void PackedTestValue::set_int64_value_with_default(::google::protobuf::int64 value) {
  set_has_int64_value_with_default();
  int64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.int64_value_with_default)
}

// optional uint64 uint64_value_with_default = 23 [default = 4];
inline bool PackedTestValue::has_uint64_value_with_default() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PackedTestValue::set_has_uint64_value_with_default() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PackedTestValue::clear_has_uint64_value_with_default() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PackedTestValue::clear_uint64_value_with_default() {
  uint64_value_with_default_ = GOOGLE_ULONGLONG(4);
  clear_has_uint64_value_with_default();
}
inline ::google::protobuf::uint64 PackedTestValue::uint64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.uint64_value_with_default)
  return uint64_value_with_default_;
}
inline void PackedTestValue::set_uint64_value_with_default(::google::protobuf::uint64 value) {
  set_has_uint64_value_with_default();
  uint64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.uint64_value_with_default)
}

// optional int32 int32_value_with_default = 24 [default = 5];
inline bool PackedTestValue::has_int32_value_with_default() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackedTestValue::set_has_int32_value_with_default() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PackedTestValue::clear_has_int32_value_with_default() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PackedTestValue::clear_int32_value_with_default() {
  int32_value_with_default_ = 5;
  clear_has_int32_value_with_default();
}
inline ::google::protobuf::int32 PackedTestValue::int32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.int32_value_with_default)
  return int32_value_with_default_;
}
inline void PackedTestValue::set_int32_value_with_default(::google::protobuf::int32 value) {
  set_has_int32_value_with_default();
  int32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.int32_value_with_default)
}

// optional fixed64 fixed64_value_with_default = 25 [default = 6];
inline bool PackedTestValue::has_fixed64_value_with_default() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PackedTestValue::set_has_fixed64_value_with_default() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PackedTestValue::clear_has_fixed64_value_with_default() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PackedTestValue::clear_fixed64_value_with_default() {
  fixed64_value_with_default_ = GOOGLE_ULONGLONG(6);
  clear_has_fixed64_value_with_default();
}
inline ::google::protobuf::uint64 PackedTestValue::fixed64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.fixed64_value_with_default)
  return fixed64_value_with_default_;
}
inline void PackedTestValue::set_fixed64_value_with_default(::google::protobuf::uint64 value) {
  set_has_fixed64_value_with_default();
  fixed64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.fixed64_value_with_default)
}

// optional fixed32 fixed32_value_with_default = 26 [default = 7];
inline bool PackedTestValue::has_fixed32_value_with_default() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PackedTestValue::set_has_fixed32_value_with_default() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PackedTestValue::clear_has_fixed32_value_with_default() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PackedTestValue::clear_fixed32_value_with_default() {
  fixed32_value_with_default_ = 7u;
  clear_has_fixed32_value_with_default();
}
inline ::google::protobuf::uint32 PackedTestValue::fixed32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.fixed32_value_with_default)
  return fixed32_value_with_default_;
}
inline void PackedTestValue::set_fixed32_value_with_default(::google::protobuf::uint32 value) {
  set_has_fixed32_value_with_default();
  fixed32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.fixed32_value_with_default)
}

// optional bool bool_value_with_default = 27 [default = true];
inline bool PackedTestValue::has_bool_value_with_default() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PackedTestValue::set_has_bool_value_with_default() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PackedTestValue::clear_has_bool_value_with_default() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PackedTestValue::clear_bool_value_with_default() {
  bool_value_with_default_ = true;
  clear_has_bool_value_with_default();
}
inline bool PackedTestValue::bool_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.bool_value_with_default)
  return bool_value_with_default_;
}
inline void PackedTestValue::set_bool_value_with_default(bool value) {
  set_has_bool_value_with_default();
  bool_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.bool_value_with_default)
}

// optional string string_value_with_default = 28 [default = "a"];
inline bool PackedTestValue::has_string_value_with_default() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackedTestValue::set_has_string_value_with_default() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackedTestValue::clear_has_string_value_with_default() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackedTestValue::clear_string_value_with_default() {
  string_value_with_default_.ClearToDefaultNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get());
  clear_has_string_value_with_default();
}
inline const ::std::string& PackedTestValue::string_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
  return string_value_with_default_.GetNoArena();
}
inline void PackedTestValue::set_string_value_with_default(const ::std::string& value) {
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
}
#if LANG_CXX11
inline void PackedTestValue::set_string_value_with_default(::std::string&& value) {
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(
    &::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
}
#endif
inline void PackedTestValue::set_string_value_with_default(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
}
inline void PackedTestValue::set_string_value_with_default(const char* value, size_t size) {
  set_has_string_value_with_default();
  string_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
}
inline ::std::string* PackedTestValue::mutable_string_value_with_default() {
  set_has_string_value_with_default();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
  return string_value_with_default_.MutableNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get());
}
inline ::std::string* PackedTestValue::release_string_value_with_default() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
  if (!has_string_value_with_default()) {
    return NULL;
  }
  clear_has_string_value_with_default();
  return string_value_with_default_.ReleaseNonDefaultNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get());
}
inline void PackedTestValue::set_allocated_string_value_with_default(::std::string* string_value_with_default) {
  if (string_value_with_default != NULL) {
    set_has_string_value_with_default();
  } else {
    clear_has_string_value_with_default();
  }
  string_value_with_default_.SetAllocatedNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_string_value_with_default_.get(), string_value_with_default);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.PackedTestValue.string_value_with_default)
}

// optional bytes bytes_value_with_default = 29 [default = "a longer default string"];
inline bool PackedTestValue::has_bytes_value_with_default() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackedTestValue::set_has_bytes_value_with_default() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackedTestValue::clear_has_bytes_value_with_default() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackedTestValue::clear_bytes_value_with_default() {
  bytes_value_with_default_.ClearToDefaultNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get());
  clear_has_bytes_value_with_default();
}
inline const ::std::string& PackedTestValue::bytes_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
  return bytes_value_with_default_.GetNoArena();
}
inline void PackedTestValue::set_bytes_value_with_default(const ::std::string& value) {
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
}
#if LANG_CXX11
inline void PackedTestValue::set_bytes_value_with_default(::std::string&& value) {
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(
    &::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
}
#endif
inline void PackedTestValue::set_bytes_value_with_default(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
}
inline void PackedTestValue::set_bytes_value_with_default(const void* value, size_t size) {
  set_has_bytes_value_with_default();
  bytes_value_with_default_.SetNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
}
inline ::std::string* PackedTestValue::mutable_bytes_value_with_default() {
  set_has_bytes_value_with_default();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
  return bytes_value_with_default_.MutableNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get());
}
inline ::std::string* PackedTestValue::release_bytes_value_with_default() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
  if (!has_bytes_value_with_default()) {
    return NULL;
  }
  clear_has_bytes_value_with_default();
  return bytes_value_with_default_.ReleaseNonDefaultNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get());
}
inline void PackedTestValue::set_allocated_bytes_value_with_default(::std::string* bytes_value_with_default) {
  if (bytes_value_with_default != NULL) {
    set_has_bytes_value_with_default();
  } else {
    clear_has_bytes_value_with_default();
  }
  bytes_value_with_default_.SetAllocatedNoArena(&::tensorflow::contrib::proto::PackedTestValue::_i_give_permission_to_break_this_code_default_bytes_value_with_default_.get(), bytes_value_with_default);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.PackedTestValue.bytes_value_with_default)
}

// optional uint32 uint32_value_with_default = 30 [default = 9];
inline bool PackedTestValue::has_uint32_value_with_default() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PackedTestValue::set_has_uint32_value_with_default() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PackedTestValue::clear_has_uint32_value_with_default() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PackedTestValue::clear_uint32_value_with_default() {
  uint32_value_with_default_ = 9u;
  clear_has_uint32_value_with_default();
}
inline ::google::protobuf::uint32 PackedTestValue::uint32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.uint32_value_with_default)
  return uint32_value_with_default_;
}
inline void PackedTestValue::set_uint32_value_with_default(::google::protobuf::uint32 value) {
  set_has_uint32_value_with_default();
  uint32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.uint32_value_with_default)
}

// optional sfixed32 sfixed32_value_with_default = 31 [default = 10];
inline bool PackedTestValue::has_sfixed32_value_with_default() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PackedTestValue::set_has_sfixed32_value_with_default() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PackedTestValue::clear_has_sfixed32_value_with_default() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PackedTestValue::clear_sfixed32_value_with_default() {
  sfixed32_value_with_default_ = 10;
  clear_has_sfixed32_value_with_default();
}
inline ::google::protobuf::int32 PackedTestValue::sfixed32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sfixed32_value_with_default)
  return sfixed32_value_with_default_;
}
inline void PackedTestValue::set_sfixed32_value_with_default(::google::protobuf::int32 value) {
  set_has_sfixed32_value_with_default();
  sfixed32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sfixed32_value_with_default)
}

// optional sfixed64 sfixed64_value_with_default = 32 [default = 11];
inline bool PackedTestValue::has_sfixed64_value_with_default() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PackedTestValue::set_has_sfixed64_value_with_default() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PackedTestValue::clear_has_sfixed64_value_with_default() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PackedTestValue::clear_sfixed64_value_with_default() {
  sfixed64_value_with_default_ = GOOGLE_LONGLONG(11);
  clear_has_sfixed64_value_with_default();
}
inline ::google::protobuf::int64 PackedTestValue::sfixed64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sfixed64_value_with_default)
  return sfixed64_value_with_default_;
}
inline void PackedTestValue::set_sfixed64_value_with_default(::google::protobuf::int64 value) {
  set_has_sfixed64_value_with_default();
  sfixed64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sfixed64_value_with_default)
}

// optional sint32 sint32_value_with_default = 33 [default = 12];
inline bool PackedTestValue::has_sint32_value_with_default() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PackedTestValue::set_has_sint32_value_with_default() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PackedTestValue::clear_has_sint32_value_with_default() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PackedTestValue::clear_sint32_value_with_default() {
  sint32_value_with_default_ = 12;
  clear_has_sint32_value_with_default();
}
inline ::google::protobuf::int32 PackedTestValue::sint32_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sint32_value_with_default)
  return sint32_value_with_default_;
}
inline void PackedTestValue::set_sint32_value_with_default(::google::protobuf::int32 value) {
  set_has_sint32_value_with_default();
  sint32_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sint32_value_with_default)
}

// optional sint64 sint64_value_with_default = 34 [default = 13];
inline bool PackedTestValue::has_sint64_value_with_default() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PackedTestValue::set_has_sint64_value_with_default() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PackedTestValue::clear_has_sint64_value_with_default() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PackedTestValue::clear_sint64_value_with_default() {
  sint64_value_with_default_ = GOOGLE_LONGLONG(13);
  clear_has_sint64_value_with_default();
}
inline ::google::protobuf::int64 PackedTestValue::sint64_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.sint64_value_with_default)
  return sint64_value_with_default_;
}
inline void PackedTestValue::set_sint64_value_with_default(::google::protobuf::int64 value) {
  set_has_sint64_value_with_default();
  sint64_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.sint64_value_with_default)
}

// optional .tensorflow.contrib.proto.Color enum_value_with_default = 36 [default = GREEN];
inline bool PackedTestValue::has_enum_value_with_default() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PackedTestValue::set_has_enum_value_with_default() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PackedTestValue::clear_has_enum_value_with_default() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PackedTestValue::clear_enum_value_with_default() {
  enum_value_with_default_ = 3;
  clear_has_enum_value_with_default();
}
inline ::tensorflow::contrib::proto::Color PackedTestValue::enum_value_with_default() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PackedTestValue.enum_value_with_default)
  return static_cast< ::tensorflow::contrib::proto::Color >(enum_value_with_default_);
}
inline void PackedTestValue::set_enum_value_with_default(::tensorflow::contrib::proto::Color value) {
  assert(::tensorflow::contrib::proto::Color_IsValid(value));
  set_has_enum_value_with_default();
  enum_value_with_default_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PackedTestValue.enum_value_with_default)
}

// -------------------------------------------------------------------

// PrimitiveValue

// optional double double_value = 1;
inline bool PrimitiveValue::has_double_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrimitiveValue::set_has_double_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrimitiveValue::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrimitiveValue::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double PrimitiveValue::double_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.double_value)
  return double_value_;
}
inline void PrimitiveValue::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.double_value)
}

// optional float float_value = 2;
inline bool PrimitiveValue::has_float_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrimitiveValue::set_has_float_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrimitiveValue::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrimitiveValue::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float PrimitiveValue::float_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.float_value)
  return float_value_;
}
inline void PrimitiveValue::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.float_value)
}

// optional int64 int64_value = 3;
inline bool PrimitiveValue::has_int64_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrimitiveValue::set_has_int64_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrimitiveValue::clear_has_int64_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrimitiveValue::clear_int64_value() {
  int64_value_ = GOOGLE_LONGLONG(0);
  clear_has_int64_value();
}
inline ::google::protobuf::int64 PrimitiveValue::int64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.int64_value)
  return int64_value_;
}
inline void PrimitiveValue::set_int64_value(::google::protobuf::int64 value) {
  set_has_int64_value();
  int64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.int64_value)
}

// optional uint64 uint64_value = 4;
inline bool PrimitiveValue::has_uint64_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrimitiveValue::set_has_uint64_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrimitiveValue::clear_has_uint64_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrimitiveValue::clear_uint64_value() {
  uint64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_value();
}
inline ::google::protobuf::uint64 PrimitiveValue::uint64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.uint64_value)
  return uint64_value_;
}
inline void PrimitiveValue::set_uint64_value(::google::protobuf::uint64 value) {
  set_has_uint64_value();
  uint64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.uint64_value)
}

// optional int32 int32_value = 5;
inline bool PrimitiveValue::has_int32_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrimitiveValue::set_has_int32_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrimitiveValue::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrimitiveValue::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
inline ::google::protobuf::int32 PrimitiveValue::int32_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.int32_value)
  return int32_value_;
}
inline void PrimitiveValue::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.int32_value)
}

// optional fixed64 fixed64_value = 6;
inline bool PrimitiveValue::has_fixed64_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrimitiveValue::set_has_fixed64_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrimitiveValue::clear_has_fixed64_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrimitiveValue::clear_fixed64_value() {
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_fixed64_value();
}
inline ::google::protobuf::uint64 PrimitiveValue::fixed64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.fixed64_value)
  return fixed64_value_;
}
inline void PrimitiveValue::set_fixed64_value(::google::protobuf::uint64 value) {
  set_has_fixed64_value();
  fixed64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.fixed64_value)
}

// optional fixed32 fixed32_value = 7;
inline bool PrimitiveValue::has_fixed32_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrimitiveValue::set_has_fixed32_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrimitiveValue::clear_has_fixed32_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrimitiveValue::clear_fixed32_value() {
  fixed32_value_ = 0u;
  clear_has_fixed32_value();
}
inline ::google::protobuf::uint32 PrimitiveValue::fixed32_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.fixed32_value)
  return fixed32_value_;
}
inline void PrimitiveValue::set_fixed32_value(::google::protobuf::uint32 value) {
  set_has_fixed32_value();
  fixed32_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.fixed32_value)
}

// optional bool bool_value = 8;
inline bool PrimitiveValue::has_bool_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrimitiveValue::set_has_bool_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrimitiveValue::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrimitiveValue::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool PrimitiveValue::bool_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.bool_value)
  return bool_value_;
}
inline void PrimitiveValue::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.bool_value)
}

// optional string string_value = 9;
inline bool PrimitiveValue::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrimitiveValue::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrimitiveValue::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrimitiveValue::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& PrimitiveValue::string_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.string_value)
  return string_value_.GetNoArena();
}
inline void PrimitiveValue::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.string_value)
}
#if LANG_CXX11
inline void PrimitiveValue::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.PrimitiveValue.string_value)
}
#endif
inline void PrimitiveValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.PrimitiveValue.string_value)
}
inline void PrimitiveValue::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.PrimitiveValue.string_value)
}
inline ::std::string* PrimitiveValue::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PrimitiveValue.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrimitiveValue::release_string_value() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.PrimitiveValue.string_value)
  if (!has_string_value()) {
    return NULL;
  }
  clear_has_string_value();
  return string_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrimitiveValue::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.PrimitiveValue.string_value)
}

// optional bytes bytes_value = 12;
inline bool PrimitiveValue::has_bytes_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrimitiveValue::set_has_bytes_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrimitiveValue::clear_has_bytes_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrimitiveValue::clear_bytes_value() {
  bytes_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_value();
}
inline const ::std::string& PrimitiveValue::bytes_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
  return bytes_value_.GetNoArena();
}
inline void PrimitiveValue::set_bytes_value(const ::std::string& value) {
  set_has_bytes_value();
  bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
}
#if LANG_CXX11
inline void PrimitiveValue::set_bytes_value(::std::string&& value) {
  set_has_bytes_value();
  bytes_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
}
#endif
inline void PrimitiveValue::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_value();
  bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
}
inline void PrimitiveValue::set_bytes_value(const void* value, size_t size) {
  set_has_bytes_value();
  bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
}
inline ::std::string* PrimitiveValue::mutable_bytes_value() {
  set_has_bytes_value();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
  return bytes_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrimitiveValue::release_bytes_value() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
  if (!has_bytes_value()) {
    return NULL;
  }
  clear_has_bytes_value();
  return bytes_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrimitiveValue::set_allocated_bytes_value(::std::string* bytes_value) {
  if (bytes_value != NULL) {
    set_has_bytes_value();
  } else {
    clear_has_bytes_value();
  }
  bytes_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.PrimitiveValue.bytes_value)
}

// optional uint32 uint32_value = 13;
inline bool PrimitiveValue::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrimitiveValue::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrimitiveValue::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrimitiveValue::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
inline ::google::protobuf::uint32 PrimitiveValue::uint32_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.uint32_value)
  return uint32_value_;
}
inline void PrimitiveValue::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.uint32_value)
}

// optional sfixed32 sfixed32_value = 15;
inline bool PrimitiveValue::has_sfixed32_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrimitiveValue::set_has_sfixed32_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrimitiveValue::clear_has_sfixed32_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrimitiveValue::clear_sfixed32_value() {
  sfixed32_value_ = 0;
  clear_has_sfixed32_value();
}
inline ::google::protobuf::int32 PrimitiveValue::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.sfixed32_value)
  return sfixed32_value_;
}
inline void PrimitiveValue::set_sfixed32_value(::google::protobuf::int32 value) {
  set_has_sfixed32_value();
  sfixed32_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.sfixed32_value)
}

// optional sfixed64 sfixed64_value = 16;
inline bool PrimitiveValue::has_sfixed64_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrimitiveValue::set_has_sfixed64_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrimitiveValue::clear_has_sfixed64_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrimitiveValue::clear_sfixed64_value() {
  sfixed64_value_ = GOOGLE_LONGLONG(0);
  clear_has_sfixed64_value();
}
inline ::google::protobuf::int64 PrimitiveValue::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.sfixed64_value)
  return sfixed64_value_;
}
inline void PrimitiveValue::set_sfixed64_value(::google::protobuf::int64 value) {
  set_has_sfixed64_value();
  sfixed64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.sfixed64_value)
}

// optional sint32 sint32_value = 17;
inline bool PrimitiveValue::has_sint32_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrimitiveValue::set_has_sint32_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrimitiveValue::clear_has_sint32_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrimitiveValue::clear_sint32_value() {
  sint32_value_ = 0;
  clear_has_sint32_value();
}
inline ::google::protobuf::int32 PrimitiveValue::sint32_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.sint32_value)
  return sint32_value_;
}
inline void PrimitiveValue::set_sint32_value(::google::protobuf::int32 value) {
  set_has_sint32_value();
  sint32_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.sint32_value)
}

// optional sint64 sint64_value = 18;
inline bool PrimitiveValue::has_sint64_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrimitiveValue::set_has_sint64_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrimitiveValue::clear_has_sint64_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrimitiveValue::clear_sint64_value() {
  sint64_value_ = GOOGLE_LONGLONG(0);
  clear_has_sint64_value();
}
inline ::google::protobuf::int64 PrimitiveValue::sint64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.PrimitiveValue.sint64_value)
  return sint64_value_;
}
inline void PrimitiveValue::set_sint64_value(::google::protobuf::int64 value) {
  set_has_sint64_value();
  sint64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.PrimitiveValue.sint64_value)
}

// -------------------------------------------------------------------

// ExtraFields

// optional string string_value = 1776;
inline bool ExtraFields::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraFields::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraFields::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraFields::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& ExtraFields::string_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.ExtraFields.string_value)
  return string_value_.GetNoArena();
}
inline void ExtraFields::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.ExtraFields.string_value)
}
#if LANG_CXX11
inline void ExtraFields::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.contrib.proto.ExtraFields.string_value)
}
#endif
inline void ExtraFields::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.ExtraFields.string_value)
}
inline void ExtraFields::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.ExtraFields.string_value)
}
inline ::std::string* ExtraFields::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.ExtraFields.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtraFields::release_string_value() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.ExtraFields.string_value)
  if (!has_string_value()) {
    return NULL;
  }
  clear_has_string_value();
  return string_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtraFields::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.ExtraFields.string_value)
}

// optional bool bool_value = 1777;
inline bool ExtraFields::has_bool_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraFields::set_has_bool_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraFields::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraFields::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool ExtraFields::bool_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.ExtraFields.bool_value)
  return bool_value_;
}
inline void ExtraFields::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.ExtraFields.bool_value)
}

// -------------------------------------------------------------------

// InnerMessageValue

// optional float float_value = 2;
inline bool InnerMessageValue::has_float_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerMessageValue::set_has_float_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerMessageValue::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerMessageValue::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float InnerMessageValue::float_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.InnerMessageValue.float_value)
  return float_value_;
}
inline void InnerMessageValue::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.InnerMessageValue.float_value)
}

// repeated bytes bytes_values = 8;
inline int InnerMessageValue::bytes_values_size() const {
  return bytes_values_.size();
}
inline void InnerMessageValue::clear_bytes_values() {
  bytes_values_.Clear();
}
inline const ::std::string& InnerMessageValue::bytes_values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  return bytes_values_.Get(index);
}
inline ::std::string* InnerMessageValue::mutable_bytes_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  return bytes_values_.Mutable(index);
}
inline void InnerMessageValue::set_bytes_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  bytes_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void InnerMessageValue::set_bytes_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  bytes_values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void InnerMessageValue::set_bytes_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
}
inline void InnerMessageValue::set_bytes_values(int index, const void* value, size_t size) {
  bytes_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
}
inline ::std::string* InnerMessageValue::add_bytes_values() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  return bytes_values_.Add();
}
inline void InnerMessageValue::add_bytes_values(const ::std::string& value) {
  bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
}
#if LANG_CXX11
inline void InnerMessageValue::add_bytes_values(::std::string&& value) {
  bytes_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
}
#endif
inline void InnerMessageValue::add_bytes_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
}
inline void InnerMessageValue::add_bytes_values(const void* value, size_t size) {
  bytes_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InnerMessageValue::bytes_values() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  return bytes_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InnerMessageValue::mutable_bytes_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.InnerMessageValue.bytes_values)
  return &bytes_values_;
}

// -------------------------------------------------------------------

// MiddleMessageValue

// repeated int32 int32_values = 5;
inline int MiddleMessageValue::int32_values_size() const {
  return int32_values_.size();
}
inline void MiddleMessageValue::clear_int32_values() {
  int32_values_.Clear();
}
inline ::google::protobuf::int32 MiddleMessageValue::int32_values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.MiddleMessageValue.int32_values)
  return int32_values_.Get(index);
}
inline void MiddleMessageValue::set_int32_values(int index, ::google::protobuf::int32 value) {
  int32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.MiddleMessageValue.int32_values)
}
inline void MiddleMessageValue::add_int32_values(::google::protobuf::int32 value) {
  int32_values_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.MiddleMessageValue.int32_values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MiddleMessageValue::int32_values() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.MiddleMessageValue.int32_values)
  return int32_values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MiddleMessageValue::mutable_int32_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.MiddleMessageValue.int32_values)
  return &int32_values_;
}

// optional .tensorflow.contrib.proto.InnerMessageValue message_value = 11;
inline bool MiddleMessageValue::has_message_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MiddleMessageValue::set_has_message_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MiddleMessageValue::clear_has_message_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MiddleMessageValue::clear_message_value() {
  if (message_value_ != NULL) message_value_->Clear();
  clear_has_message_value();
}
inline const ::tensorflow::contrib::proto::InnerMessageValue& MiddleMessageValue::_internal_message_value() const {
  return *message_value_;
}
inline const ::tensorflow::contrib::proto::InnerMessageValue& MiddleMessageValue::message_value() const {
  const ::tensorflow::contrib::proto::InnerMessageValue* p = message_value_;
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.MiddleMessageValue.message_value)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::contrib::proto::InnerMessageValue*>(
      &::tensorflow::contrib::proto::_InnerMessageValue_default_instance_);
}
inline ::tensorflow::contrib::proto::InnerMessageValue* MiddleMessageValue::release_message_value() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.MiddleMessageValue.message_value)
  clear_has_message_value();
  ::tensorflow::contrib::proto::InnerMessageValue* temp = message_value_;
  message_value_ = NULL;
  return temp;
}
inline ::tensorflow::contrib::proto::InnerMessageValue* MiddleMessageValue::mutable_message_value() {
  set_has_message_value();
  if (message_value_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::contrib::proto::InnerMessageValue>(GetArenaNoVirtual());
    message_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.MiddleMessageValue.message_value)
  return message_value_;
}
inline void MiddleMessageValue::set_allocated_message_value(::tensorflow::contrib::proto::InnerMessageValue* message_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_value_;
  }
  if (message_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_value, submessage_arena);
    }
    set_has_message_value();
  } else {
    clear_has_message_value();
  }
  message_value_ = message_value;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.MiddleMessageValue.message_value)
}

// optional uint32 uint32_value = 13;
inline bool MiddleMessageValue::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiddleMessageValue::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiddleMessageValue::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiddleMessageValue::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
inline ::google::protobuf::uint32 MiddleMessageValue::uint32_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.MiddleMessageValue.uint32_value)
  return uint32_value_;
}
inline void MiddleMessageValue::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.MiddleMessageValue.uint32_value)
}

// -------------------------------------------------------------------

// MessageValue

// optional double double_value = 1;
inline bool MessageValue::has_double_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageValue::set_has_double_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageValue::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageValue::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double MessageValue::double_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.MessageValue.double_value)
  return double_value_;
}
inline void MessageValue::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.MessageValue.double_value)
}

// optional .tensorflow.contrib.proto.MiddleMessageValue message_value = 11;
inline bool MessageValue::has_message_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageValue::set_has_message_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageValue::clear_has_message_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageValue::clear_message_value() {
  if (message_value_ != NULL) message_value_->Clear();
  clear_has_message_value();
}
inline const ::tensorflow::contrib::proto::MiddleMessageValue& MessageValue::_internal_message_value() const {
  return *message_value_;
}
inline const ::tensorflow::contrib::proto::MiddleMessageValue& MessageValue::message_value() const {
  const ::tensorflow::contrib::proto::MiddleMessageValue* p = message_value_;
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.MessageValue.message_value)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::contrib::proto::MiddleMessageValue*>(
      &::tensorflow::contrib::proto::_MiddleMessageValue_default_instance_);
}
inline ::tensorflow::contrib::proto::MiddleMessageValue* MessageValue::release_message_value() {
  // @@protoc_insertion_point(field_release:tensorflow.contrib.proto.MessageValue.message_value)
  clear_has_message_value();
  ::tensorflow::contrib::proto::MiddleMessageValue* temp = message_value_;
  message_value_ = NULL;
  return temp;
}
inline ::tensorflow::contrib::proto::MiddleMessageValue* MessageValue::mutable_message_value() {
  set_has_message_value();
  if (message_value_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::contrib::proto::MiddleMessageValue>(GetArenaNoVirtual());
    message_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.MessageValue.message_value)
  return message_value_;
}
inline void MessageValue::set_allocated_message_value(::tensorflow::contrib::proto::MiddleMessageValue* message_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_value_;
  }
  if (message_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_value, submessage_arena);
    }
    set_has_message_value();
  } else {
    clear_has_message_value();
  }
  message_value_ = message_value;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.contrib.proto.MessageValue.message_value)
}

// -------------------------------------------------------------------

// RepeatedMessageValue_NestedMessageValue

// optional float float_value = 2;
inline bool RepeatedMessageValue_NestedMessageValue::has_float_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepeatedMessageValue_NestedMessageValue::set_has_float_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepeatedMessageValue_NestedMessageValue::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepeatedMessageValue_NestedMessageValue::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float RepeatedMessageValue_NestedMessageValue::float_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.float_value)
  return float_value_;
}
inline void RepeatedMessageValue_NestedMessageValue::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.float_value)
}

// repeated bytes bytes_values = 8;
inline int RepeatedMessageValue_NestedMessageValue::bytes_values_size() const {
  return bytes_values_.size();
}
inline void RepeatedMessageValue_NestedMessageValue::clear_bytes_values() {
  bytes_values_.Clear();
}
inline const ::std::string& RepeatedMessageValue_NestedMessageValue::bytes_values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  return bytes_values_.Get(index);
}
inline ::std::string* RepeatedMessageValue_NestedMessageValue::mutable_bytes_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  return bytes_values_.Mutable(index);
}
inline void RepeatedMessageValue_NestedMessageValue::set_bytes_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  bytes_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RepeatedMessageValue_NestedMessageValue::set_bytes_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  bytes_values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RepeatedMessageValue_NestedMessageValue::set_bytes_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
}
inline void RepeatedMessageValue_NestedMessageValue::set_bytes_values(int index, const void* value, size_t size) {
  bytes_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
}
inline ::std::string* RepeatedMessageValue_NestedMessageValue::add_bytes_values() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  return bytes_values_.Add();
}
inline void RepeatedMessageValue_NestedMessageValue::add_bytes_values(const ::std::string& value) {
  bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
}
#if LANG_CXX11
inline void RepeatedMessageValue_NestedMessageValue::add_bytes_values(::std::string&& value) {
  bytes_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
}
#endif
inline void RepeatedMessageValue_NestedMessageValue::add_bytes_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
}
inline void RepeatedMessageValue_NestedMessageValue::add_bytes_values(const void* value, size_t size) {
  bytes_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RepeatedMessageValue_NestedMessageValue::bytes_values() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  return bytes_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RepeatedMessageValue_NestedMessageValue::mutable_bytes_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue.bytes_values)
  return &bytes_values_;
}

// -------------------------------------------------------------------

// RepeatedMessageValue

// repeated .tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue message_values = 11;
inline int RepeatedMessageValue::message_values_size() const {
  return message_values_.size();
}
inline void RepeatedMessageValue::clear_message_values() {
  message_values_.Clear();
}
inline ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue* RepeatedMessageValue::mutable_message_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.contrib.proto.RepeatedMessageValue.message_values)
  return message_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue >*
RepeatedMessageValue::mutable_message_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.contrib.proto.RepeatedMessageValue.message_values)
  return &message_values_;
}
inline const ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue& RepeatedMessageValue::message_values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.contrib.proto.RepeatedMessageValue.message_values)
  return message_values_.Get(index);
}
inline ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue* RepeatedMessageValue::add_message_values() {
  // @@protoc_insertion_point(field_add:tensorflow.contrib.proto.RepeatedMessageValue.message_values)
  return message_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::contrib::proto::RepeatedMessageValue_NestedMessageValue >&
RepeatedMessageValue::message_values() const {
  // @@protoc_insertion_point(field_list:tensorflow.contrib.proto.RepeatedMessageValue.message_values)
  return message_values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contrib
}  // namespace tensorflow

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::contrib::proto::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::contrib::proto::Color>() {
  return ::tensorflow::contrib::proto::Color_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fpython_2fkernel_5ftests_2fproto_2ftest_5fexample_2eproto
