// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/python/tpu/tensor_tracer.proto

#include "tensorflow/python/tpu/tensor_tracer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GraphDef;
}  // namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto
namespace protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TensorTracerReport_TensorTracerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TensorTracerReport_TracedTensorDef_Stack;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorTracerReport_TensordefEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorTracerReport_TracedTensorDef;
}  // namespace protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto
namespace tensorflow {
class TensorTracerReport_TensordefEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorTracerReport_TensordefEntry_DoNotUse>
      _instance;
} _TensorTracerReport_TensordefEntry_DoNotUse_default_instance_;
class TensorTracerReport_TensorTracerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorTracerReport_TensorTracerConfig>
      _instance;
} _TensorTracerReport_TensorTracerConfig_default_instance_;
class TensorTracerReport_TracedTensorDef_StackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorTracerReport_TracedTensorDef_Stack>
      _instance;
} _TensorTracerReport_TracedTensorDef_Stack_default_instance_;
class TensorTracerReport_TracedTensorDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorTracerReport_TracedTensorDef>
      _instance;
} _TensorTracerReport_TracedTensorDef_default_instance_;
class TensorTracerReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorTracerReport>
      _instance;
} _TensorTracerReport_default_instance_;
}  // namespace tensorflow
namespace protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto {
static void InitDefaultsTensorTracerReport_TensordefEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorTracerReport_TensordefEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse();
  }
  ::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TensorTracerReport_TensordefEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensorTracerReport_TensordefEntry_DoNotUse}, {
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TracedTensorDef.base,}};

static void InitDefaultsTensorTracerReport_TensorTracerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorTracerReport_TensorTracerConfig_default_instance_;
    new (ptr) ::tensorflow::TensorTracerReport_TensorTracerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorTracerReport_TensorTracerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TensorTracerReport_TensorTracerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensorTracerReport_TensorTracerConfig}, {}};

static void InitDefaultsTensorTracerReport_TracedTensorDef_Stack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorTracerReport_TracedTensorDef_Stack_default_instance_;
    new (ptr) ::tensorflow::TensorTracerReport_TracedTensorDef_Stack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorTracerReport_TracedTensorDef_Stack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TensorTracerReport_TracedTensorDef_Stack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensorTracerReport_TracedTensorDef_Stack}, {}};

static void InitDefaultsTensorTracerReport_TracedTensorDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorTracerReport_TracedTensorDef_default_instance_;
    new (ptr) ::tensorflow::TensorTracerReport_TracedTensorDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorTracerReport_TracedTensorDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TensorTracerReport_TracedTensorDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensorTracerReport_TracedTensorDef}, {
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TracedTensorDef_Stack.base,}};

static void InitDefaultsTensorTracerReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorTracerReport_default_instance_;
    new (ptr) ::tensorflow::TensorTracerReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorTracerReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TensorTracerReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTensorTracerReport}, {
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TensorTracerConfig.base,
      &protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::scc_info_GraphDef.base,
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TensordefEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TensorTracerReport_TensordefEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorTracerReport_TensorTracerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorTracerReport_TracedTensorDef_Stack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorTracerReport_TracedTensorDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorTracerReport.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, trace_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, num_cores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, num_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, submode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, num_cores_per_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, included_cores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TensorTracerConfig, signatures_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef_Stack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef_Stack, stack_fn_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef_Stack, stack_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef_Stack, stack_filenames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef_Stack, stack_linenos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, cache_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, trace_point_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, is_traced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, explanation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport_TracedTensorDef, op_stack_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, graphdef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, tensordef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, fingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, concrete_function_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, last_common_frame_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::TensorTracerReport, outputs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse)},
  { 9, -1, sizeof(::tensorflow::TensorTracerReport_TensorTracerConfig)},
  { 23, -1, sizeof(::tensorflow::TensorTracerReport_TracedTensorDef_Stack)},
  { 32, -1, sizeof(::tensorflow::TensorTracerReport_TracedTensorDef)},
  { 43, -1, sizeof(::tensorflow::TensorTracerReport)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_TensorTracerReport_TensordefEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_TensorTracerReport_TensorTracerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_TensorTracerReport_TracedTensorDef_Stack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_TensorTracerReport_TracedTensorDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::_TensorTracerReport_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow/python/tpu/tensor_tracer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)tensorflow/python/tpu/tensor_tracer.pr"
      "oto\022\ntensorflow\032%tensorflow/core/framewo"
      "rk/graph.proto\"\376\006\n\022TensorTracerReport\022A\n"
      "\006config\030\001 \001(\01321.tensorflow.TensorTracerR"
      "eport.TensorTracerConfig\022&\n\010graphdef\030\002 \001"
      "(\0132\024.tensorflow.GraphDef\022@\n\ttensordef\030\003 "
      "\003(\0132-.tensorflow.TensorTracerReport.Tens"
      "ordefEntry\022\023\n\013fingerprint\030\004 \001(\t\022\036\n\026concr"
      "ete_function_name\030\005 \001(\t\022\034\n\024last_common_f"
      "rame_no\030\006 \001(\005\022\017\n\007outputs\030\007 \003(\t\032`\n\016Tensor"
      "defEntry\022\013\n\003key\030\001 \001(\t\022=\n\005value\030\002 \001(\0132..t"
      "ensorflow.TensorTracerReport.TracedTenso"
      "rDef:\0028\001\032\310\001\n\022TensorTracerConfig\022\017\n\007versi"
      "on\030\001 \001(\t\022\016\n\006device\030\002 \001(\t\022\022\n\ntrace_mode\030\003"
      " \001(\t\022\021\n\tnum_cores\030\004 \001(\005\022\021\n\tnum_hosts\030\005 \001"
      "(\005\022\017\n\007submode\030\006 \001(\t\022\032\n\022num_cores_per_hos"
      "t\030\007 \001(\005\022\026\n\016included_cores\030\010 \003(\005\022\022\n\nsigna"
      "tures\030\t \003(\t\032\251\002\n\017TracedTensorDef\022\014\n\004name\030"
      "\001 \001(\t\022\023\n\013cache_index\030\002 \001(\005\022\030\n\020trace_poin"
      "t_name\030\003 \001(\t\022\021\n\tis_traced\030\004 \001(\010\022\023\n\013expla"
      "nation\030\005 \001(\t\022K\n\rop_stack_info\030\006 \001(\01324.te"
      "nsorflow.TensorTracerReport.TracedTensor"
      "Def.Stack\032d\n\005Stack\022\026\n\016stack_fn_names\030\001 \003"
      "(\t\022\023\n\013stack_lines\030\002 \003(\t\022\027\n\017stack_filenam"
      "es\030\003 \003(\t\022\025\n\rstack_linenos\030\004 \003(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/python/tpu/tensor_tracer.proto", &protobuf_RegisterTypes);
  ::protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto
namespace tensorflow {

// ===================================================================

TensorTracerReport_TensordefEntry_DoNotUse::TensorTracerReport_TensordefEntry_DoNotUse() {}
TensorTracerReport_TensordefEntry_DoNotUse::TensorTracerReport_TensordefEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TensorTracerReport_TensordefEntry_DoNotUse::MergeFrom(const TensorTracerReport_TensordefEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TensorTracerReport_TensordefEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[0];
}
void TensorTracerReport_TensordefEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TensorTracerReport_TensorTracerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorTracerReport_TensorTracerConfig::kVersionFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kDeviceFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kTraceModeFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kNumCoresFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kNumHostsFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kSubmodeFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kNumCoresPerHostFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kIncludedCoresFieldNumber;
const int TensorTracerReport_TensorTracerConfig::kSignaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorTracerReport_TensorTracerConfig::TensorTracerReport_TensorTracerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TensorTracerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorTracerReport.TensorTracerConfig)
}
TensorTracerReport_TensorTracerConfig::TensorTracerReport_TensorTracerConfig(const TensorTracerReport_TensorTracerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      included_cores_(from.included_cores_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  trace_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_mode().size() > 0) {
    trace_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_mode_);
  }
  submode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.submode().size() > 0) {
    submode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submode_);
  }
  ::memcpy(&num_cores_, &from.num_cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_cores_per_host_) -
    reinterpret_cast<char*>(&num_cores_)) + sizeof(num_cores_per_host_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorTracerReport.TensorTracerConfig)
}

void TensorTracerReport_TensorTracerConfig::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_cores_per_host_) -
      reinterpret_cast<char*>(&num_cores_)) + sizeof(num_cores_per_host_));
}

TensorTracerReport_TensorTracerConfig::~TensorTracerReport_TensorTracerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorTracerReport.TensorTracerConfig)
  SharedDtor();
}

void TensorTracerReport_TensorTracerConfig::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorTracerReport_TensorTracerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TensorTracerReport_TensorTracerConfig::descriptor() {
  ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorTracerReport_TensorTracerConfig& TensorTracerReport_TensorTracerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TensorTracerConfig.base);
  return *internal_default_instance();
}


void TensorTracerReport_TensorTracerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  included_cores_.Clear();
  signatures_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_cores_per_host_) -
      reinterpret_cast<char*>(&num_cores_)) + sizeof(num_cores_per_host_));
  _internal_metadata_.Clear();
}

bool TensorTracerReport_TensorTracerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TensorTracerConfig.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TensorTracerConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace_mode().data(), static_cast<int>(this->trace_mode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TensorTracerConfig.trace_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_cores = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_hosts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hosts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string submode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->submode().data(), static_cast<int>(this->submode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TensorTracerConfig.submode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_cores_per_host = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cores_per_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 included_cores = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_included_cores())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_included_cores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signatures = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signatures()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signatures(this->signatures_size() - 1).data(),
            static_cast<int>(this->signatures(this->signatures_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TensorTracerConfig.signatures"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorTracerReport.TensorTracerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorTracerReport.TensorTracerConfig)
  return false;
#undef DO_
}

void TensorTracerReport_TensorTracerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device(), output);
  }

  // string trace_mode = 3;
  if (this->trace_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_mode().data(), static_cast<int>(this->trace_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.trace_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trace_mode(), output);
  }

  // int32 num_cores = 4;
  if (this->num_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_cores(), output);
  }

  // int32 num_hosts = 5;
  if (this->num_hosts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_hosts(), output);
  }

  // string submode = 6;
  if (this->submode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->submode().data(), static_cast<int>(this->submode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.submode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->submode(), output);
  }

  // int32 num_cores_per_host = 7;
  if (this->num_cores_per_host() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_cores_per_host(), output);
  }

  // repeated int32 included_cores = 8;
  if (this->included_cores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _included_cores_cached_byte_size_));
  }
  for (int i = 0, n = this->included_cores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->included_cores(i), output);
  }

  // repeated string signatures = 9;
  for (int i = 0, n = this->signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signatures(i).data(), static_cast<int>(this->signatures(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.signatures");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->signatures(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorTracerReport.TensorTracerConfig)
}

::google::protobuf::uint8* TensorTracerReport_TensorTracerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // string trace_mode = 3;
  if (this->trace_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_mode().data(), static_cast<int>(this->trace_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.trace_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trace_mode(), target);
  }

  // int32 num_cores = 4;
  if (this->num_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_cores(), target);
  }

  // int32 num_hosts = 5;
  if (this->num_hosts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_hosts(), target);
  }

  // string submode = 6;
  if (this->submode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->submode().data(), static_cast<int>(this->submode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.submode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->submode(), target);
  }

  // int32 num_cores_per_host = 7;
  if (this->num_cores_per_host() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_cores_per_host(), target);
  }

  // repeated int32 included_cores = 8;
  if (this->included_cores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _included_cores_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->included_cores_, target);
  }

  // repeated string signatures = 9;
  for (int i = 0, n = this->signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signatures(i).data(), static_cast<int>(this->signatures(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TensorTracerConfig.signatures");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->signatures(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorTracerReport.TensorTracerConfig)
  return target;
}

size_t TensorTracerReport_TensorTracerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 included_cores = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->included_cores_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _included_cores_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string signatures = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signatures_size());
  for (int i = 0, n = this->signatures_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signatures(i));
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string device = 2;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // string trace_mode = 3;
  if (this->trace_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_mode());
  }

  // string submode = 6;
  if (this->submode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->submode());
  }

  // int32 num_cores = 4;
  if (this->num_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_cores());
  }

  // int32 num_hosts = 5;
  if (this->num_hosts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_hosts());
  }

  // int32 num_cores_per_host = 7;
  if (this->num_cores_per_host() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_cores_per_host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorTracerReport_TensorTracerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorTracerReport_TensorTracerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorTracerReport_TensorTracerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorTracerReport.TensorTracerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorTracerReport.TensorTracerConfig)
    MergeFrom(*source);
  }
}

void TensorTracerReport_TensorTracerConfig::MergeFrom(const TensorTracerReport_TensorTracerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  included_cores_.MergeFrom(from.included_cores_);
  signatures_.MergeFrom(from.signatures_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.trace_mode().size() > 0) {

    trace_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_mode_);
  }
  if (from.submode().size() > 0) {

    submode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submode_);
  }
  if (from.num_cores() != 0) {
    set_num_cores(from.num_cores());
  }
  if (from.num_hosts() != 0) {
    set_num_hosts(from.num_hosts());
  }
  if (from.num_cores_per_host() != 0) {
    set_num_cores_per_host(from.num_cores_per_host());
  }
}

void TensorTracerReport_TensorTracerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorTracerReport_TensorTracerConfig::CopyFrom(const TensorTracerReport_TensorTracerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorTracerReport.TensorTracerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorTracerReport_TensorTracerConfig::IsInitialized() const {
  return true;
}

void TensorTracerReport_TensorTracerConfig::Swap(TensorTracerReport_TensorTracerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorTracerReport_TensorTracerConfig::InternalSwap(TensorTracerReport_TensorTracerConfig* other) {
  using std::swap;
  included_cores_.InternalSwap(&other->included_cores_);
  signatures_.InternalSwap(CastToBase(&other->signatures_));
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trace_mode_.Swap(&other->trace_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  submode_.Swap(&other->submode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_cores_, other->num_cores_);
  swap(num_hosts_, other->num_hosts_);
  swap(num_cores_per_host_, other->num_cores_per_host_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TensorTracerReport_TensorTracerConfig::GetMetadata() const {
  protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TensorTracerReport_TracedTensorDef_Stack::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorTracerReport_TracedTensorDef_Stack::kStackFnNamesFieldNumber;
const int TensorTracerReport_TracedTensorDef_Stack::kStackLinesFieldNumber;
const int TensorTracerReport_TracedTensorDef_Stack::kStackFilenamesFieldNumber;
const int TensorTracerReport_TracedTensorDef_Stack::kStackLinenosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorTracerReport_TracedTensorDef_Stack::TensorTracerReport_TracedTensorDef_Stack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TracedTensorDef_Stack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
}
TensorTracerReport_TracedTensorDef_Stack::TensorTracerReport_TracedTensorDef_Stack(const TensorTracerReport_TracedTensorDef_Stack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stack_fn_names_(from.stack_fn_names_),
      stack_lines_(from.stack_lines_),
      stack_filenames_(from.stack_filenames_),
      stack_linenos_(from.stack_linenos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
}

void TensorTracerReport_TracedTensorDef_Stack::SharedCtor() {
}

TensorTracerReport_TracedTensorDef_Stack::~TensorTracerReport_TracedTensorDef_Stack() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  SharedDtor();
}

void TensorTracerReport_TracedTensorDef_Stack::SharedDtor() {
}

void TensorTracerReport_TracedTensorDef_Stack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TensorTracerReport_TracedTensorDef_Stack::descriptor() {
  ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorTracerReport_TracedTensorDef_Stack& TensorTracerReport_TracedTensorDef_Stack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TracedTensorDef_Stack.base);
  return *internal_default_instance();
}


void TensorTracerReport_TracedTensorDef_Stack::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_fn_names_.Clear();
  stack_lines_.Clear();
  stack_filenames_.Clear();
  stack_linenos_.Clear();
  _internal_metadata_.Clear();
}

bool TensorTracerReport_TracedTensorDef_Stack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stack_fn_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stack_fn_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stack_fn_names(this->stack_fn_names_size() - 1).data(),
            static_cast<int>(this->stack_fn_names(this->stack_fn_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_fn_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stack_lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stack_lines()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stack_lines(this->stack_lines_size() - 1).data(),
            static_cast<int>(this->stack_lines(this->stack_lines_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_lines"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stack_filenames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stack_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stack_filenames(this->stack_filenames_size() - 1).data(),
            static_cast<int>(this->stack_filenames(this->stack_filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stack_linenos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stack_linenos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_stack_linenos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  return false;
#undef DO_
}

void TensorTracerReport_TracedTensorDef_Stack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string stack_fn_names = 1;
  for (int i = 0, n = this->stack_fn_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_fn_names(i).data(), static_cast<int>(this->stack_fn_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_fn_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stack_fn_names(i), output);
  }

  // repeated string stack_lines = 2;
  for (int i = 0, n = this->stack_lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_lines(i).data(), static_cast<int>(this->stack_lines(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_lines");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stack_lines(i), output);
  }

  // repeated string stack_filenames = 3;
  for (int i = 0, n = this->stack_filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_filenames(i).data(), static_cast<int>(this->stack_filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_filenames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stack_filenames(i), output);
  }

  // repeated int32 stack_linenos = 4;
  if (this->stack_linenos_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stack_linenos_cached_byte_size_));
  }
  for (int i = 0, n = this->stack_linenos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stack_linenos(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
}

::google::protobuf::uint8* TensorTracerReport_TracedTensorDef_Stack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string stack_fn_names = 1;
  for (int i = 0, n = this->stack_fn_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_fn_names(i).data(), static_cast<int>(this->stack_fn_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_fn_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stack_fn_names(i), target);
  }

  // repeated string stack_lines = 2;
  for (int i = 0, n = this->stack_lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_lines(i).data(), static_cast<int>(this->stack_lines(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_lines");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->stack_lines(i), target);
  }

  // repeated string stack_filenames = 3;
  for (int i = 0, n = this->stack_filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_filenames(i).data(), static_cast<int>(this->stack_filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.Stack.stack_filenames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stack_filenames(i), target);
  }

  // repeated int32 stack_linenos = 4;
  if (this->stack_linenos_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _stack_linenos_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stack_linenos_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  return target;
}

size_t TensorTracerReport_TracedTensorDef_Stack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string stack_fn_names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stack_fn_names_size());
  for (int i = 0, n = this->stack_fn_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stack_fn_names(i));
  }

  // repeated string stack_lines = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stack_lines_size());
  for (int i = 0, n = this->stack_lines_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stack_lines(i));
  }

  // repeated string stack_filenames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stack_filenames_size());
  for (int i = 0, n = this->stack_filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stack_filenames(i));
  }

  // repeated int32 stack_linenos = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stack_linenos_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stack_linenos_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorTracerReport_TracedTensorDef_Stack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorTracerReport_TracedTensorDef_Stack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorTracerReport_TracedTensorDef_Stack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
    MergeFrom(*source);
  }
}

void TensorTracerReport_TracedTensorDef_Stack::MergeFrom(const TensorTracerReport_TracedTensorDef_Stack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_fn_names_.MergeFrom(from.stack_fn_names_);
  stack_lines_.MergeFrom(from.stack_lines_);
  stack_filenames_.MergeFrom(from.stack_filenames_);
  stack_linenos_.MergeFrom(from.stack_linenos_);
}

void TensorTracerReport_TracedTensorDef_Stack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorTracerReport_TracedTensorDef_Stack::CopyFrom(const TensorTracerReport_TracedTensorDef_Stack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorTracerReport.TracedTensorDef.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorTracerReport_TracedTensorDef_Stack::IsInitialized() const {
  return true;
}

void TensorTracerReport_TracedTensorDef_Stack::Swap(TensorTracerReport_TracedTensorDef_Stack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorTracerReport_TracedTensorDef_Stack::InternalSwap(TensorTracerReport_TracedTensorDef_Stack* other) {
  using std::swap;
  stack_fn_names_.InternalSwap(CastToBase(&other->stack_fn_names_));
  stack_lines_.InternalSwap(CastToBase(&other->stack_lines_));
  stack_filenames_.InternalSwap(CastToBase(&other->stack_filenames_));
  stack_linenos_.InternalSwap(&other->stack_linenos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TensorTracerReport_TracedTensorDef_Stack::GetMetadata() const {
  protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TensorTracerReport_TracedTensorDef::InitAsDefaultInstance() {
  ::tensorflow::_TensorTracerReport_TracedTensorDef_default_instance_._instance.get_mutable()->op_stack_info_ = const_cast< ::tensorflow::TensorTracerReport_TracedTensorDef_Stack*>(
      ::tensorflow::TensorTracerReport_TracedTensorDef_Stack::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorTracerReport_TracedTensorDef::kNameFieldNumber;
const int TensorTracerReport_TracedTensorDef::kCacheIndexFieldNumber;
const int TensorTracerReport_TracedTensorDef::kTracePointNameFieldNumber;
const int TensorTracerReport_TracedTensorDef::kIsTracedFieldNumber;
const int TensorTracerReport_TracedTensorDef::kExplanationFieldNumber;
const int TensorTracerReport_TracedTensorDef::kOpStackInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorTracerReport_TracedTensorDef::TensorTracerReport_TracedTensorDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TracedTensorDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorTracerReport.TracedTensorDef)
}
TensorTracerReport_TracedTensorDef::TensorTracerReport_TracedTensorDef(const TensorTracerReport_TracedTensorDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  trace_point_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_point_name().size() > 0) {
    trace_point_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_point_name_);
  }
  explanation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.explanation().size() > 0) {
    explanation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explanation_);
  }
  if (from.has_op_stack_info()) {
    op_stack_info_ = new ::tensorflow::TensorTracerReport_TracedTensorDef_Stack(*from.op_stack_info_);
  } else {
    op_stack_info_ = NULL;
  }
  ::memcpy(&cache_index_, &from.cache_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_traced_) -
    reinterpret_cast<char*>(&cache_index_)) + sizeof(is_traced_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorTracerReport.TracedTensorDef)
}

void TensorTracerReport_TracedTensorDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_point_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explanation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_stack_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_traced_) -
      reinterpret_cast<char*>(&op_stack_info_)) + sizeof(is_traced_));
}

TensorTracerReport_TracedTensorDef::~TensorTracerReport_TracedTensorDef() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorTracerReport.TracedTensorDef)
  SharedDtor();
}

void TensorTracerReport_TracedTensorDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_point_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explanation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete op_stack_info_;
}

void TensorTracerReport_TracedTensorDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TensorTracerReport_TracedTensorDef::descriptor() {
  ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorTracerReport_TracedTensorDef& TensorTracerReport_TracedTensorDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport_TracedTensorDef.base);
  return *internal_default_instance();
}


void TensorTracerReport_TracedTensorDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorTracerReport.TracedTensorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_point_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explanation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && op_stack_info_ != NULL) {
    delete op_stack_info_;
  }
  op_stack_info_ = NULL;
  ::memset(&cache_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_traced_) -
      reinterpret_cast<char*>(&cache_index_)) + sizeof(is_traced_));
  _internal_metadata_.Clear();
}

bool TensorTracerReport_TracedTensorDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorTracerReport.TracedTensorDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TracedTensorDef.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cache_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace_point_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_point_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace_point_name().data(), static_cast<int>(this->trace_point_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TracedTensorDef.trace_point_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_traced = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_traced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string explanation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explanation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explanation().data(), static_cast<int>(this->explanation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TracedTensorDef.explanation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorTracerReport.TracedTensorDef.Stack op_stack_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_op_stack_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorTracerReport.TracedTensorDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorTracerReport.TracedTensorDef)
  return false;
#undef DO_
}

void TensorTracerReport_TracedTensorDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorTracerReport.TracedTensorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 cache_index = 2;
  if (this->cache_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cache_index(), output);
  }

  // string trace_point_name = 3;
  if (this->trace_point_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_point_name().data(), static_cast<int>(this->trace_point_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.trace_point_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trace_point_name(), output);
  }

  // bool is_traced = 4;
  if (this->is_traced() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_traced(), output);
  }

  // string explanation = 5;
  if (this->explanation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explanation().data(), static_cast<int>(this->explanation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.explanation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->explanation(), output);
  }

  // .tensorflow.TensorTracerReport.TracedTensorDef.Stack op_stack_info = 6;
  if (this->has_op_stack_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_op_stack_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorTracerReport.TracedTensorDef)
}

::google::protobuf::uint8* TensorTracerReport_TracedTensorDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorTracerReport.TracedTensorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 cache_index = 2;
  if (this->cache_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cache_index(), target);
  }

  // string trace_point_name = 3;
  if (this->trace_point_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_point_name().data(), static_cast<int>(this->trace_point_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.trace_point_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trace_point_name(), target);
  }

  // bool is_traced = 4;
  if (this->is_traced() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_traced(), target);
  }

  // string explanation = 5;
  if (this->explanation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explanation().data(), static_cast<int>(this->explanation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.TracedTensorDef.explanation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->explanation(), target);
  }

  // .tensorflow.TensorTracerReport.TracedTensorDef.Stack op_stack_info = 6;
  if (this->has_op_stack_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_op_stack_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorTracerReport.TracedTensorDef)
  return target;
}

size_t TensorTracerReport_TracedTensorDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorTracerReport.TracedTensorDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string trace_point_name = 3;
  if (this->trace_point_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_point_name());
  }

  // string explanation = 5;
  if (this->explanation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explanation());
  }

  // .tensorflow.TensorTracerReport.TracedTensorDef.Stack op_stack_info = 6;
  if (this->has_op_stack_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *op_stack_info_);
  }

  // int32 cache_index = 2;
  if (this->cache_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cache_index());
  }

  // bool is_traced = 4;
  if (this->is_traced() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorTracerReport_TracedTensorDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorTracerReport.TracedTensorDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorTracerReport_TracedTensorDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorTracerReport_TracedTensorDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorTracerReport.TracedTensorDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorTracerReport.TracedTensorDef)
    MergeFrom(*source);
  }
}

void TensorTracerReport_TracedTensorDef::MergeFrom(const TensorTracerReport_TracedTensorDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorTracerReport.TracedTensorDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.trace_point_name().size() > 0) {

    trace_point_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_point_name_);
  }
  if (from.explanation().size() > 0) {

    explanation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explanation_);
  }
  if (from.has_op_stack_info()) {
    mutable_op_stack_info()->::tensorflow::TensorTracerReport_TracedTensorDef_Stack::MergeFrom(from.op_stack_info());
  }
  if (from.cache_index() != 0) {
    set_cache_index(from.cache_index());
  }
  if (from.is_traced() != 0) {
    set_is_traced(from.is_traced());
  }
}

void TensorTracerReport_TracedTensorDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorTracerReport.TracedTensorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorTracerReport_TracedTensorDef::CopyFrom(const TensorTracerReport_TracedTensorDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorTracerReport.TracedTensorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorTracerReport_TracedTensorDef::IsInitialized() const {
  return true;
}

void TensorTracerReport_TracedTensorDef::Swap(TensorTracerReport_TracedTensorDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorTracerReport_TracedTensorDef::InternalSwap(TensorTracerReport_TracedTensorDef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trace_point_name_.Swap(&other->trace_point_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explanation_.Swap(&other->explanation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_stack_info_, other->op_stack_info_);
  swap(cache_index_, other->cache_index_);
  swap(is_traced_, other->is_traced_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TensorTracerReport_TracedTensorDef::GetMetadata() const {
  protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TensorTracerReport::InitAsDefaultInstance() {
  ::tensorflow::_TensorTracerReport_default_instance_._instance.get_mutable()->config_ = const_cast< ::tensorflow::TensorTracerReport_TensorTracerConfig*>(
      ::tensorflow::TensorTracerReport_TensorTracerConfig::internal_default_instance());
  ::tensorflow::_TensorTracerReport_default_instance_._instance.get_mutable()->graphdef_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
}
void TensorTracerReport::clear_graphdef() {
  if (GetArenaNoVirtual() == NULL && graphdef_ != NULL) {
    delete graphdef_;
  }
  graphdef_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorTracerReport::kConfigFieldNumber;
const int TensorTracerReport::kGraphdefFieldNumber;
const int TensorTracerReport::kTensordefFieldNumber;
const int TensorTracerReport::kFingerprintFieldNumber;
const int TensorTracerReport::kConcreteFunctionNameFieldNumber;
const int TensorTracerReport::kLastCommonFrameNoFieldNumber;
const int TensorTracerReport::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorTracerReport::TensorTracerReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorTracerReport)
}
TensorTracerReport::TensorTracerReport(const TensorTracerReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensordef_.MergeFrom(from.tensordef_);
  fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fingerprint().size() > 0) {
    fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_);
  }
  concrete_function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.concrete_function_name().size() > 0) {
    concrete_function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.concrete_function_name_);
  }
  if (from.has_config()) {
    config_ = new ::tensorflow::TensorTracerReport_TensorTracerConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_graphdef()) {
    graphdef_ = new ::tensorflow::GraphDef(*from.graphdef_);
  } else {
    graphdef_ = NULL;
  }
  last_common_frame_no_ = from.last_common_frame_no_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorTracerReport)
}

void TensorTracerReport::SharedCtor() {
  fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  concrete_function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_common_frame_no_) -
      reinterpret_cast<char*>(&config_)) + sizeof(last_common_frame_no_));
}

TensorTracerReport::~TensorTracerReport() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorTracerReport)
  SharedDtor();
}

void TensorTracerReport::SharedDtor() {
  fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  concrete_function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete graphdef_;
}

void TensorTracerReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TensorTracerReport::descriptor() {
  ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorTracerReport& TensorTracerReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::scc_info_TensorTracerReport.base);
  return *internal_default_instance();
}


void TensorTracerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorTracerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensordef_.Clear();
  outputs_.Clear();
  fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  concrete_function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && graphdef_ != NULL) {
    delete graphdef_;
  }
  graphdef_ = NULL;
  last_common_frame_no_ = 0;
  _internal_metadata_.Clear();
}

bool TensorTracerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorTracerReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorTracerReport.TensorTracerConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphDef graphdef = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graphdef()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.TensorTracerReport.TracedTensorDef> tensordef = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          TensorTracerReport_TensordefEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TensorTracerReport_TensordefEntry_DoNotUse,
              ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef > > parser(&tensordef_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.TensordefEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fingerprint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fingerprint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fingerprint().data(), static_cast<int>(this->fingerprint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.fingerprint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string concrete_function_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_concrete_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->concrete_function_name().data(), static_cast<int>(this->concrete_function_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.concrete_function_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_common_frame_no = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_common_frame_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string outputs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_outputs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->outputs(this->outputs_size() - 1).data(),
            static_cast<int>(this->outputs(this->outputs_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorTracerReport.outputs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorTracerReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorTracerReport)
  return false;
#undef DO_
}

void TensorTracerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorTracerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorTracerReport.TensorTracerConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // .tensorflow.GraphDef graphdef = 2;
  if (this->has_graphdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_graphdef(), output);
  }

  // map<string, .tensorflow.TensorTracerReport.TracedTensorDef> tensordef = 3;
  if (!this->tensordef().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.TensorTracerReport.TensordefEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tensordef().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tensordef().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_iterator
          it = this->tensordef().begin();
          it != this->tensordef().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TensorTracerReport_TensordefEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tensordef_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TensorTracerReport_TensordefEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_iterator
          it = this->tensordef().begin();
          it != this->tensordef().end(); ++it) {
        entry.reset(tensordef_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string fingerprint = 4;
  if (this->fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fingerprint().data(), static_cast<int>(this->fingerprint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.fingerprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fingerprint(), output);
  }

  // string concrete_function_name = 5;
  if (this->concrete_function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->concrete_function_name().data(), static_cast<int>(this->concrete_function_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.concrete_function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->concrete_function_name(), output);
  }

  // int32 last_common_frame_no = 6;
  if (this->last_common_frame_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->last_common_frame_no(), output);
  }

  // repeated string outputs = 7;
  for (int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outputs(i).data(), static_cast<int>(this->outputs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.outputs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->outputs(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorTracerReport)
}

::google::protobuf::uint8* TensorTracerReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorTracerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorTracerReport.TensorTracerConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // .tensorflow.GraphDef graphdef = 2;
  if (this->has_graphdef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_graphdef(), deterministic, target);
  }

  // map<string, .tensorflow.TensorTracerReport.TracedTensorDef> tensordef = 3;
  if (!this->tensordef().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.TensorTracerReport.TensordefEntry.key");
      }
    };

    if (deterministic &&
        this->tensordef().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tensordef().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_iterator
          it = this->tensordef().begin();
          it != this->tensordef().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TensorTracerReport_TensordefEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tensordef_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TensorTracerReport_TensordefEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_iterator
          it = this->tensordef().begin();
          it != this->tensordef().end(); ++it) {
        entry.reset(tensordef_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string fingerprint = 4;
  if (this->fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fingerprint().data(), static_cast<int>(this->fingerprint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.fingerprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fingerprint(), target);
  }

  // string concrete_function_name = 5;
  if (this->concrete_function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->concrete_function_name().data(), static_cast<int>(this->concrete_function_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.concrete_function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->concrete_function_name(), target);
  }

  // int32 last_common_frame_no = 6;
  if (this->last_common_frame_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->last_common_frame_no(), target);
  }

  // repeated string outputs = 7;
  for (int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outputs(i).data(), static_cast<int>(this->outputs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorTracerReport.outputs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->outputs(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorTracerReport)
  return target;
}

size_t TensorTracerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorTracerReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .tensorflow.TensorTracerReport.TracedTensorDef> tensordef = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tensordef_size());
  {
    ::std::unique_ptr<TensorTracerReport_TensordefEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::TensorTracerReport_TracedTensorDef >::const_iterator
        it = this->tensordef().begin();
        it != this->tensordef().end(); ++it) {
      entry.reset(tensordef_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string outputs = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->outputs_size());
  for (int i = 0, n = this->outputs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->outputs(i));
  }

  // string fingerprint = 4;
  if (this->fingerprint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fingerprint());
  }

  // string concrete_function_name = 5;
  if (this->concrete_function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->concrete_function_name());
  }

  // .tensorflow.TensorTracerReport.TensorTracerConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .tensorflow.GraphDef graphdef = 2;
  if (this->has_graphdef()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *graphdef_);
  }

  // int32 last_common_frame_no = 6;
  if (this->last_common_frame_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_common_frame_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorTracerReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorTracerReport)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorTracerReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorTracerReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorTracerReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorTracerReport)
    MergeFrom(*source);
  }
}

void TensorTracerReport::MergeFrom(const TensorTracerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorTracerReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensordef_.MergeFrom(from.tensordef_);
  outputs_.MergeFrom(from.outputs_);
  if (from.fingerprint().size() > 0) {

    fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_);
  }
  if (from.concrete_function_name().size() > 0) {

    concrete_function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.concrete_function_name_);
  }
  if (from.has_config()) {
    mutable_config()->::tensorflow::TensorTracerReport_TensorTracerConfig::MergeFrom(from.config());
  }
  if (from.has_graphdef()) {
    mutable_graphdef()->::tensorflow::GraphDef::MergeFrom(from.graphdef());
  }
  if (from.last_common_frame_no() != 0) {
    set_last_common_frame_no(from.last_common_frame_no());
  }
}

void TensorTracerReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorTracerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorTracerReport::CopyFrom(const TensorTracerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorTracerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorTracerReport::IsInitialized() const {
  return true;
}

void TensorTracerReport::Swap(TensorTracerReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorTracerReport::InternalSwap(TensorTracerReport* other) {
  using std::swap;
  tensordef_.Swap(&other->tensordef_);
  outputs_.InternalSwap(CastToBase(&other->outputs_));
  fingerprint_.Swap(&other->fingerprint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  concrete_function_name_.Swap(&other->concrete_function_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(graphdef_, other->graphdef_);
  swap(last_common_frame_no_, other->last_common_frame_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TensorTracerReport::GetMetadata() const {
  protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_2fpython_2ftpu_2ftensor_5ftracer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TensorTracerReport_TensordefEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::TensorTracerReport_TensorTracerConfig* Arena::CreateMaybeMessage< ::tensorflow::TensorTracerReport_TensorTracerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TensorTracerReport_TensorTracerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::TensorTracerReport_TracedTensorDef_Stack* Arena::CreateMaybeMessage< ::tensorflow::TensorTracerReport_TracedTensorDef_Stack >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TensorTracerReport_TracedTensorDef_Stack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::TensorTracerReport_TracedTensorDef* Arena::CreateMaybeMessage< ::tensorflow::TensorTracerReport_TracedTensorDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TensorTracerReport_TracedTensorDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::TensorTracerReport* Arena::CreateMaybeMessage< ::tensorflow::TensorTracerReport >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::TensorTracerReport >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
